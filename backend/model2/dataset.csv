canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        in_degrees = [0 for x in range(numCourses)]
        start_nodes = []
        adj_matrix = defaultdict(list)
        for edge in prerequisites:
            if edge[0] == edge[1]:
                return False
            in_degrees[edge[1]] += 1
            adj_matrix[edge[0]].append(edge[1])
        
        for course_id, in_degree in enumerate(in_degrees):
            if in_degree == 0:
                start_nodes.append(course_id)
        
        if len(start_nodes) == 0:
            return False
        
        # bfs 
        visited = set() 
        for start_node in start_nodes:
            queue = [start_node]
            while queue:
                current = queue.pop()
                visited.add(current)
                for child in adj_matrix[current]:
                    if child in visited:
                        continue
                    in_degrees[child] -= 1
                    if in_degrees[child] < 1:
                        queue.append(child)
        return len(visited) == numCourses     

[[1,0],[2,3],[4,5]]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f53cd2553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)

 34          14 LOAD_CONST               2 (1)
             16 LOAD_CONST               3 (0)
             18 BUILD_LIST               2
             20 LOAD_CONST               4 (2)
             22 LOAD_CONST               5 (3)
             24 BUILD_LIST               2
             26 LOAD_CONST               6 (4)
             28 LOAD_CONST               7 (5)
             30 BUILD_LIST               2
             32 BUILD_LIST               3
             34 POP_TOP
             36 LOAD_CONST               8 (None)
             38 RETURN_VALUE

Disassembly of <code object Solution at 0x7f53cd2553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f53cd2552f0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f53cd2552f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f53cd255240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (in_degrees)

  4          18 BUILD_LIST               0
             20 STORE_FAST               4 (start_nodes)

  5          22 LOAD_GLOBAL              1 (defaultdict)
             24 LOAD_GLOBAL              2 (list)
             26 CALL_FUNCTION            1
             28 STORE_FAST               5 (adj_matrix)

  6          30 LOAD_FAST                2 (prerequisites)
             32 GET_ITER
        >>   34 FOR_ITER                68 (to 104)
             36 STORE_FAST               6 (edge)

  7          38 LOAD_FAST                6 (edge)
             40 LOAD_CONST               3 (0)
             42 BINARY_SUBSCR
             44 LOAD_FAST                6 (edge)
             46 LOAD_CONST               4 (1)
             48 BINARY_SUBSCR
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_FALSE       60

  8          54 POP_TOP
             56 LOAD_CONST               5 (False)
             58 RETURN_VALUE

  9     >>   60 LOAD_FAST                3 (in_degrees)
             62 LOAD_FAST                6 (edge)
             64 LOAD_CONST               4 (1)
             66 BINARY_SUBSCR
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               4 (1)
             74 INPLACE_ADD
             76 ROT_THREE
             78 STORE_SUBSCR

 10          80 LOAD_FAST                5 (adj_matrix)
             82 LOAD_FAST                6 (edge)
             84 LOAD_CONST               3 (0)
             86 BINARY_SUBSCR
             88 BINARY_SUBSCR
             90 LOAD_METHOD              3 (append)
             92 LOAD_FAST                6 (edge)
             94 LOAD_CONST               4 (1)
             96 BINARY_SUBSCR
             98 CALL_METHOD              1
            100 POP_TOP
            102 JUMP_ABSOLUTE           34

 12     >>  104 LOAD_GLOBAL              4 (enumerate)
            106 LOAD_FAST                3 (in_degrees)
            108 CALL_FUNCTION            1
            110 GET_ITER
        >>  112 FOR_ITER                26 (to 140)
            114 UNPACK_SEQUENCE          2
            116 STORE_FAST               7 (course_id)
            118 STORE_FAST               8 (in_degree)

 13         120 LOAD_FAST                8 (in_degree)
            122 LOAD_CONST               3 (0)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE      112

 14         128 LOAD_FAST                4 (start_nodes)
            130 LOAD_METHOD              3 (append)
            132 LOAD_FAST                7 (course_id)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE          112

 16     >>  140 LOAD_GLOBAL              5 (len)
            142 LOAD_FAST                4 (start_nodes)
            144 CALL_FUNCTION            1
            146 LOAD_CONST               3 (0)
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      156

 17         152 LOAD_CONST               5 (False)
            154 RETURN_VALUE

 20     >>  156 LOAD_GLOBAL              6 (set)
            158 CALL_FUNCTION            0
            160 STORE_FAST               9 (visited)

 21         162 LOAD_FAST                4 (start_nodes)
            164 GET_ITER
        >>  166 FOR_ITER                96 (to 264)
            168 STORE_FAST              10 (start_node)

 22         170 LOAD_FAST               10 (start_node)
            172 BUILD_LIST               1
            174 STORE_FAST              11 (queue)

 23     >>  176 LOAD_FAST               11 (queue)
            178 POP_JUMP_IF_FALSE      166

 24         180 LOAD_FAST               11 (queue)
            182 LOAD_METHOD              7 (pop)
            184 CALL_METHOD              0
            186 STORE_FAST              12 (current)

 25         188 LOAD_FAST                9 (visited)
            190 LOAD_METHOD              8 (add)
            192 LOAD_FAST               12 (current)
            194 CALL_METHOD              1
            196 POP_TOP

 26         198 LOAD_FAST                5 (adj_matrix)
            200 LOAD_FAST               12 (current)
            202 BINARY_SUBSCR
            204 GET_ITER
        >>  206 FOR_ITER                52 (to 260)
            208 STORE_FAST              13 (child)

 27         210 LOAD_FAST               13 (child)
            212 LOAD_FAST                9 (visited)
            214 COMPARE_OP               6 (in)
            216 POP_JUMP_IF_FALSE      220

 28         218 JUMP_ABSOLUTE          206

 29     >>  220 LOAD_FAST                3 (in_degrees)
            222 LOAD_FAST               13 (child)
            224 DUP_TOP_TWO
            226 BINARY_SUBSCR
            228 LOAD_CONST               4 (1)
            230 INPLACE_SUBTRACT
            232 ROT_THREE
            234 STORE_SUBSCR

 30         236 LOAD_FAST                3 (in_degrees)
            238 LOAD_FAST               13 (child)
            240 BINARY_SUBSCR
            242 LOAD_CONST               4 (1)
            244 COMPARE_OP               0 (<)
            246 POP_JUMP_IF_FALSE      206

 31         248 LOAD_FAST               11 (queue)
            250 LOAD_METHOD              3 (append)
            252 LOAD_FAST               13 (child)
            254 CALL_METHOD              1
            256 POP_TOP
            258 JUMP_ABSOLUTE          206
        >>  260 JUMP_ABSOLUTE          176
            262 JUMP_ABSOLUTE          166

 32     >>  264 LOAD_GLOBAL              5 (len)
            266 LOAD_FAST                9 (visited)
            268 CALL_FUNCTION            1
            270 LOAD_FAST                1 (numCourses)
            272 COMPARE_OP               2 (==)
            274 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f53cd255240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (x)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, n: int, prerequisites: List[List[int]]) -> bool:
        adj_list = [[] for _ in range(n)]
        for pos, nb in prerequisites:
            adj_list[pos].append(nb)

        visited = [False] * n
        rec_stack = [False] * n

        for node in range(n):
            if not visited[node]:
                if self.is_cyclic(node, visited, rec_stack, adj_list):
                    return False
        return True

    def is_cyclic(self, node, visited, rec_stack, adj_list):
        visited[node] = True
        rec_stack[node] = True

        for nb in adj_list[node]:
            if not visited[nb]:
                if self.is_cyclic(nb, visited, rec_stack, adj_list):
                    return True
            elif rec_stack[nb]:
                return True
        rec_stack[node] = False
        return False


","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffd24655450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffd24655450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('n', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7ffd246553a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 16          34 LOAD_CONST               4 (<code object is_cyclic at 0x7ffd246552f0, file ""<ast>"", line 16>)
             36 LOAD_CONST               5 ('Solution.is_cyclic')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (is_cyclic)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object canFinish at 0x7ffd246553a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7ffd24655240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adj_list)

  4          18 LOAD_FAST                2 (prerequisites)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (pos)
             28 STORE_FAST               5 (nb)

  5          30 LOAD_FAST                3 (adj_list)
             32 LOAD_FAST                4 (pos)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                5 (nb)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  7     >>   46 LOAD_CONST               3 (False)
             48 BUILD_LIST               1
             50 LOAD_FAST                1 (n)
             52 BINARY_MULTIPLY
             54 STORE_FAST               6 (visited)

  8          56 LOAD_CONST               3 (False)
             58 BUILD_LIST               1
             60 LOAD_FAST                1 (n)
             62 BINARY_MULTIPLY
             64 STORE_FAST               7 (rec_stack)

 10          66 LOAD_GLOBAL              0 (range)
             68 LOAD_FAST                1 (n)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                34 (to 110)
             76 STORE_FAST               8 (node)

 11          78 LOAD_FAST                6 (visited)
             80 LOAD_FAST                8 (node)
             82 BINARY_SUBSCR
             84 POP_JUMP_IF_TRUE        74

 12          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (is_cyclic)
             90 LOAD_FAST                8 (node)
             92 LOAD_FAST                6 (visited)
             94 LOAD_FAST                7 (rec_stack)
             96 LOAD_FAST                3 (adj_list)
             98 CALL_METHOD              4
            100 POP_JUMP_IF_FALSE       74

 13         102 POP_TOP
            104 LOAD_CONST               3 (False)
            106 RETURN_VALUE
            108 JUMP_ABSOLUTE           74

 14     >>  110 LOAD_CONST               4 (True)
            112 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ffd24655240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object is_cyclic at 0x7ffd246552f0, file ""<ast>"", line 16>:
 17           0 LOAD_CONST               1 (True)
              2 LOAD_FAST                2 (visited)
              4 LOAD_FAST                1 (node)
              6 STORE_SUBSCR

 18           8 LOAD_CONST               1 (True)
             10 LOAD_FAST                3 (rec_stack)
             12 LOAD_FAST                1 (node)
             14 STORE_SUBSCR

 20          16 LOAD_FAST                4 (adj_list)
             18 LOAD_FAST                1 (node)
             20 BINARY_SUBSCR
             22 GET_ITER
        >>   24 FOR_ITER                50 (to 76)
             26 STORE_FAST               5 (nb)

 21          28 LOAD_FAST                2 (visited)
             30 LOAD_FAST                5 (nb)
             32 BINARY_SUBSCR
             34 POP_JUMP_IF_TRUE        60

 22          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              0 (is_cyclic)
             40 LOAD_FAST                5 (nb)
             42 LOAD_FAST                2 (visited)
             44 LOAD_FAST                3 (rec_stack)
             46 LOAD_FAST                4 (adj_list)
             48 CALL_METHOD              4
             50 POP_JUMP_IF_FALSE       74

 23          52 POP_TOP
             54 LOAD_CONST               1 (True)
             56 RETURN_VALUE
             58 JUMP_ABSOLUTE           24

 24     >>   60 LOAD_FAST                3 (rec_stack)
             62 LOAD_FAST                5 (nb)
             64 BINARY_SUBSCR
             66 POP_JUMP_IF_FALSE       24

 25          68 POP_TOP
             70 LOAD_CONST               1 (True)
             72 RETURN_VALUE
        >>   74 JUMP_ABSOLUTE           24

 26     >>   76 LOAD_CONST               2 (False)
             78 LOAD_FAST                3 (rec_stack)
             80 LOAD_FAST                1 (node)
             82 STORE_SUBSCR

 27          84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
None
"
canFinish,"class Solution:
    def helper(self, course):
        if self.finish[course] == 1:  # visiting
            return False
        if self.finish[course] == -1:  # already finished course
            return True
        # when self.finish[course] == 0, for unvisited course
        self.finish[course] = 1  # mark as visiting
        if self.prerequisites[course]:  # when prerequisites for this course is not None
            for base in self.prerequisites[course]:
                if not self.helper(base):
                    return False
        self.finish[course] = -1  # mark as finished course
        return True

    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        self.prerequisites = [[] for i in range(numCourses)]
        self.finish = [0 for i in range(numCourses)]
        for course, base in prerequisites:
            self.prerequisites[course].append(base)
        len_prerequisite = [len(prerequisite) for prerequisite in self.prerequisites]
        if min(len_prerequisite) > 0:
            return False
        for i in range(numCourses):
            if not self.helper(i):
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f24fbc75500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24fbc75500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object helper at 0x7f24fbc752f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.helper')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (helper)

 16          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7f24fbc75660, file ""<ast>"", line 16>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object helper at 0x7f24fbc752f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (finish)
              4 LOAD_FAST                1 (course)
              6 BINARY_SUBSCR
              8 LOAD_CONST               1 (1)
             10 COMPARE_OP               2 (==)
             12 POP_JUMP_IF_FALSE       18

  4          14 LOAD_CONST               2 (False)
             16 RETURN_VALUE

  5     >>   18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (finish)
             22 LOAD_FAST                1 (course)
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 (-1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  6          32 LOAD_CONST               4 (True)
             34 RETURN_VALUE

  8     >>   36 LOAD_CONST               1 (1)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                0 (finish)
             42 LOAD_FAST                1 (course)
             44 STORE_SUBSCR

  9          46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                1 (prerequisites)
             50 LOAD_FAST                1 (course)
             52 BINARY_SUBSCR
             54 POP_JUMP_IF_FALSE       88

 10          56 LOAD_FAST                0 (self)
             58 LOAD_ATTR                1 (prerequisites)
             60 LOAD_FAST                1 (course)
             62 BINARY_SUBSCR
             64 GET_ITER
        >>   66 FOR_ITER                20 (to 88)
             68 STORE_FAST               2 (base)

 11          70 LOAD_FAST                0 (self)
             72 LOAD_METHOD              2 (helper)
             74 LOAD_FAST                2 (base)
             76 CALL_METHOD              1
             78 POP_JUMP_IF_TRUE        66

 12          80 POP_TOP
             82 LOAD_CONST               2 (False)
             84 RETURN_VALUE
             86 JUMP_ABSOLUTE           66

 13     >>   88 LOAD_CONST               3 (-1)
             90 LOAD_FAST                0 (self)
             92 LOAD_ATTR                0 (finish)
             94 LOAD_FAST                1 (course)
             96 STORE_SUBSCR

 14          98 LOAD_CONST               4 (True)
            100 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f24fbc75660, file ""<ast>"", line 16>:
 17           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f24fbc75240, file ""<ast>"", line 17>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 LOAD_FAST                0 (self)
             18 STORE_ATTR               1 (prerequisites)

 18          20 LOAD_CONST               3 (<code object <listcomp> at 0x7f24fbc753a0, file ""<ast>"", line 18>)
             22 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             24 MAKE_FUNCTION            0
             26 LOAD_GLOBAL              0 (range)
             28 LOAD_FAST                1 (numCourses)
             30 CALL_FUNCTION            1
             32 GET_ITER
             34 CALL_FUNCTION            1
             36 LOAD_FAST                0 (self)
             38 STORE_ATTR               2 (finish)

 19          40 LOAD_FAST                2 (prerequisites)
             42 GET_ITER
        >>   44 FOR_ITER                24 (to 70)
             46 UNPACK_SEQUENCE          2
             48 STORE_FAST               3 (course)
             50 STORE_FAST               4 (base)

 20          52 LOAD_FAST                0 (self)
             54 LOAD_ATTR                1 (prerequisites)
             56 LOAD_FAST                3 (course)
             58 BINARY_SUBSCR
             60 LOAD_METHOD              3 (append)
             62 LOAD_FAST                4 (base)
             64 CALL_METHOD              1
             66 POP_TOP
             68 JUMP_ABSOLUTE           44

 21     >>   70 LOAD_CONST               4 (<code object <listcomp> at 0x7f24fbc75450, file ""<ast>"", line 21>)
             72 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             74 MAKE_FUNCTION            0
             76 LOAD_FAST                0 (self)
             78 LOAD_ATTR                1 (prerequisites)
             80 GET_ITER
             82 CALL_FUNCTION            1
             84 STORE_FAST               5 (len_prerequisite)

 22          86 LOAD_GLOBAL              4 (min)
             88 LOAD_FAST                5 (len_prerequisite)
             90 CALL_FUNCTION            1
             92 LOAD_CONST               5 (0)
             94 COMPARE_OP               4 (>)
             96 POP_JUMP_IF_FALSE      102

 23          98 LOAD_CONST               6 (False)
            100 RETURN_VALUE

 24     >>  102 LOAD_GLOBAL              0 (range)
            104 LOAD_FAST                1 (numCourses)
            106 CALL_FUNCTION            1
            108 GET_ITER
        >>  110 FOR_ITER                20 (to 132)
            112 STORE_FAST               6 (i)

 25         114 LOAD_FAST                0 (self)
            116 LOAD_METHOD              5 (helper)
            118 LOAD_FAST                6 (i)
            120 CALL_METHOD              1
            122 POP_JUMP_IF_TRUE       110

 26         124 POP_TOP
            126 LOAD_CONST               6 (False)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE          110

 27     >>  132 LOAD_CONST               7 (True)
            134 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f24fbc75240, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f24fbc753a0, file ""<ast>"", line 18>:
 18           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f24fbc75450, file ""<ast>"", line 21>:
 21           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (prerequisite)
              8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (prerequisite)
             12 CALL_FUNCTION            1
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        self.mat = {}
        for i in range(numCourses):
            self.mat[i] = {}
        
        self.visited = [False for i in range(numCourses)]
        self.repeated = [False for i in range(numCourses)]
        self.stack = []
        
        for u, v in prerequisites:
            self.mat[v][u] = 1
        
        def topologicalSort(node):
            self.visited[node] = True
            self.repeated[node] = True

            for child in self.mat[node]:
                if not self.visited[child]:
                    if topologicalSort(child):
                        return True
                elif self.repeated[child]:
                    return True
                    
            self.stack.append(node)
            self.repeated[node] = False
            return False

        cycle = False
        for node in range(numCourses):
            if not self.visited[node]:
                if topologicalSort(node):
                    cycle = True
                    break

        return not cycle
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4c4f595500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4c4f595500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f4c4f5953a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f4c4f5953a0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 LOAD_DEREF               0 (self)
              4 STORE_ATTR               0 (mat)

  4           6 LOAD_GLOBAL              1 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
        >>   14 FOR_ITER                14 (to 30)
             16 STORE_FAST               3 (i)

  5          18 BUILD_MAP                0
             20 LOAD_DEREF               0 (self)
             22 LOAD_ATTR                0 (mat)
             24 LOAD_FAST                3 (i)
             26 STORE_SUBSCR
             28 JUMP_ABSOLUTE           14

  7     >>   30 LOAD_CONST               1 (<code object <listcomp> at 0x7f4c4f595240, file ""<ast>"", line 7>)
             32 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             34 MAKE_FUNCTION            0
             36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                1 (numCourses)
             40 CALL_FUNCTION            1
             42 GET_ITER
             44 CALL_FUNCTION            1
             46 LOAD_DEREF               0 (self)
             48 STORE_ATTR               2 (visited)

  8          50 LOAD_CONST               3 (<code object <listcomp> at 0x7f4c4f5952f0, file ""<ast>"", line 8>)
             52 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             54 MAKE_FUNCTION            0
             56 LOAD_GLOBAL              1 (range)
             58 LOAD_FAST                1 (numCourses)
             60 CALL_FUNCTION            1
             62 GET_ITER
             64 CALL_FUNCTION            1
             66 LOAD_DEREF               0 (self)
             68 STORE_ATTR               3 (repeated)

  9          70 BUILD_LIST               0
             72 LOAD_DEREF               0 (self)
             74 STORE_ATTR               4 (stack)

 11          76 LOAD_FAST                2 (prerequisites)
             78 GET_ITER
        >>   80 FOR_ITER                22 (to 104)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               4 (u)
             86 STORE_FAST               5 (v)

 12          88 LOAD_CONST               4 (1)
             90 LOAD_DEREF               0 (self)
             92 LOAD_ATTR                0 (mat)
             94 LOAD_FAST                5 (v)
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (u)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           80

 14     >>  104 LOAD_CLOSURE             0 (self)
            106 LOAD_CLOSURE             1 (topologicalSort)
            108 BUILD_TUPLE              2
            110 LOAD_CONST               5 (<code object topologicalSort at 0x7f4c4f595450, file ""<ast>"", line 14>)
            112 LOAD_CONST               6 ('Solution.canFinish.<locals>.topologicalSort')
            114 MAKE_FUNCTION            8 (closure)
            116 STORE_DEREF              1 (topologicalSort)

 29         118 LOAD_CONST               7 (False)
            120 STORE_FAST               6 (cycle)

 30         122 LOAD_GLOBAL              1 (range)
            124 LOAD_FAST                1 (numCourses)
            126 CALL_FUNCTION            1
            128 GET_ITER
        >>  130 FOR_ITER                30 (to 162)
            132 STORE_FAST               7 (node)

 31         134 LOAD_DEREF               0 (self)
            136 LOAD_ATTR                2 (visited)
            138 LOAD_FAST                7 (node)
            140 BINARY_SUBSCR
            142 POP_JUMP_IF_TRUE       130

 32         144 LOAD_DEREF               1 (topologicalSort)
            146 LOAD_FAST                7 (node)
            148 CALL_FUNCTION            1
            150 POP_JUMP_IF_FALSE      130

 33         152 LOAD_CONST               8 (True)
            154 STORE_FAST               6 (cycle)

 34         156 POP_TOP
            158 JUMP_ABSOLUTE          162
            160 JUMP_ABSOLUTE          130

 36     >>  162 LOAD_FAST                6 (cycle)
            164 UNARY_NOT
            166 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f4c4f595240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f4c4f5952f0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object topologicalSort at 0x7f4c4f595450, file ""<ast>"", line 14>:
 15           0 LOAD_CONST               1 (True)
              2 LOAD_DEREF               0 (self)
              4 LOAD_ATTR                0 (visited)
              6 LOAD_FAST                0 (node)
              8 STORE_SUBSCR

 16          10 LOAD_CONST               1 (True)
             12 LOAD_DEREF               0 (self)
             14 LOAD_ATTR                1 (repeated)
             16 LOAD_FAST                0 (node)
             18 STORE_SUBSCR

 18          20 LOAD_DEREF               0 (self)
             22 LOAD_ATTR                2 (mat)
             24 LOAD_FAST                0 (node)
             26 BINARY_SUBSCR
             28 GET_ITER
        >>   30 FOR_ITER                46 (to 78)
             32 STORE_FAST               1 (child)

 19          34 LOAD_DEREF               0 (self)
             36 LOAD_ATTR                0 (visited)
             38 LOAD_FAST                1 (child)
             40 BINARY_SUBSCR
             42 POP_JUMP_IF_TRUE        60

 20          44 LOAD_DEREF               1 (topologicalSort)
             46 LOAD_FAST                1 (child)
             48 CALL_FUNCTION            1
             50 POP_JUMP_IF_FALSE       76

 21          52 POP_TOP
             54 LOAD_CONST               1 (True)
             56 RETURN_VALUE
             58 JUMP_ABSOLUTE           30

 22     >>   60 LOAD_DEREF               0 (self)
             62 LOAD_ATTR                1 (repeated)
             64 LOAD_FAST                1 (child)
             66 BINARY_SUBSCR
             68 POP_JUMP_IF_FALSE       30

 23          70 POP_TOP
             72 LOAD_CONST               1 (True)
             74 RETURN_VALUE
        >>   76 JUMP_ABSOLUTE           30

 25     >>   78 LOAD_DEREF               0 (self)
             80 LOAD_ATTR                3 (stack)
             82 LOAD_METHOD              4 (append)
             84 LOAD_FAST                0 (node)
             86 CALL_METHOD              1
             88 POP_TOP

 26          90 LOAD_CONST               2 (False)
             92 LOAD_DEREF               0 (self)
             94 LOAD_ATTR                1 (repeated)
             96 LOAD_FAST                0 (node)
             98 STORE_SUBSCR

 27         100 LOAD_CONST               2 (False)
            102 RETURN_VALUE
None
"
canFinish,"from collections import *
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        child = defaultdict(set)
        parent = defaultdict(int)
        for p in prerequisites:
            child[p[1]].add(p[0])
            parent[p[0]]+=1
        
        q = deque()
        for i in range(numCourses):
            if parent[i] == 0:
                del parent[i]
                q.append(i)
        if not q:
            return False
        res = []
        while q:
            couses = q.popleft()
            res.append(couses)
            for c in child[couses]:
                parent[c] -= 1
                if parent[c] == 0:
                    del parent[c]
                    q.append(c)
                    
        return len(res) == numCourses
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('*',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_STAR

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f61ab2352f0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f61ab2352f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f61ab235240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f61ab235240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (set)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (child)

  5           8 LOAD_GLOBAL              0 (defaultdict)
             10 LOAD_GLOBAL              2 (int)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (parent)

  6          16 LOAD_FAST                2 (prerequisites)
             18 GET_ITER
        >>   20 FOR_ITER                46 (to 68)
             22 STORE_FAST               5 (p)

  7          24 LOAD_FAST                3 (child)
             26 LOAD_FAST                5 (p)
             28 LOAD_CONST               1 (1)
             30 BINARY_SUBSCR
             32 BINARY_SUBSCR
             34 LOAD_METHOD              3 (add)
             36 LOAD_FAST                5 (p)
             38 LOAD_CONST               2 (0)
             40 BINARY_SUBSCR
             42 CALL_METHOD              1
             44 POP_TOP

  8          46 LOAD_FAST                4 (parent)
             48 LOAD_FAST                5 (p)
             50 LOAD_CONST               2 (0)
             52 BINARY_SUBSCR
             54 DUP_TOP_TWO
             56 BINARY_SUBSCR
             58 LOAD_CONST               1 (1)
             60 INPLACE_ADD
             62 ROT_THREE
             64 STORE_SUBSCR
             66 JUMP_ABSOLUTE           20

 10     >>   68 LOAD_GLOBAL              4 (deque)
             70 CALL_FUNCTION            0
             72 STORE_FAST               6 (q)

 11          74 LOAD_GLOBAL              5 (range)
             76 LOAD_FAST                1 (numCourses)
             78 CALL_FUNCTION            1
             80 GET_ITER
        >>   82 FOR_ITER                32 (to 116)
             84 STORE_FAST               7 (i)

 12          86 LOAD_FAST                4 (parent)
             88 LOAD_FAST                7 (i)
             90 BINARY_SUBSCR
             92 LOAD_CONST               2 (0)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE       82

 13          98 LOAD_FAST                4 (parent)
            100 LOAD_FAST                7 (i)
            102 DELETE_SUBSCR

 14         104 LOAD_FAST                6 (q)
            106 LOAD_METHOD              6 (append)
            108 LOAD_FAST                7 (i)
            110 CALL_METHOD              1
            112 POP_TOP
            114 JUMP_ABSOLUTE           82

 15     >>  116 LOAD_FAST                6 (q)
            118 POP_JUMP_IF_TRUE       124

 16         120 LOAD_CONST               3 (False)
            122 RETURN_VALUE

 17     >>  124 BUILD_LIST               0
            126 STORE_FAST               8 (res)

 18     >>  128 LOAD_FAST                6 (q)
            130 POP_JUMP_IF_FALSE      210

 19         132 LOAD_FAST                6 (q)
            134 LOAD_METHOD              7 (popleft)
            136 CALL_METHOD              0
            138 STORE_FAST               9 (couses)

 20         140 LOAD_FAST                8 (res)
            142 LOAD_METHOD              6 (append)
            144 LOAD_FAST                9 (couses)
            146 CALL_METHOD              1
            148 POP_TOP

 21         150 LOAD_FAST                3 (child)
            152 LOAD_FAST                9 (couses)
            154 BINARY_SUBSCR
            156 GET_ITER
        >>  158 FOR_ITER                48 (to 208)
            160 STORE_FAST              10 (c)

 22         162 LOAD_FAST                4 (parent)
            164 LOAD_FAST               10 (c)
            166 DUP_TOP_TWO
            168 BINARY_SUBSCR
            170 LOAD_CONST               1 (1)
            172 INPLACE_SUBTRACT
            174 ROT_THREE
            176 STORE_SUBSCR

 23         178 LOAD_FAST                4 (parent)
            180 LOAD_FAST               10 (c)
            182 BINARY_SUBSCR
            184 LOAD_CONST               2 (0)
            186 COMPARE_OP               2 (==)
            188 POP_JUMP_IF_FALSE      158

 24         190 LOAD_FAST                4 (parent)
            192 LOAD_FAST               10 (c)
            194 DELETE_SUBSCR

 25         196 LOAD_FAST                6 (q)
            198 LOAD_METHOD              6 (append)
            200 LOAD_FAST               10 (c)
            202 CALL_METHOD              1
            204 POP_TOP
            206 JUMP_ABSOLUTE          158
        >>  208 JUMP_ABSOLUTE          128

 27     >>  210 LOAD_GLOBAL              8 (len)
            212 LOAD_FAST                8 (res)
            214 CALL_FUNCTION            1
            216 LOAD_FAST                1 (numCourses)
            218 COMPARE_OP               2 (==)
            220 RETURN_VALUE
None
"
canFinish,"class Solution:
   
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        for x, y in prerequisites:
            graph[x].append(y)
        
        state = [UNDISCOVERED] * numCourses
        for vertex in range(numCourses):
            if not self.dfs(graph, vertex, state):
                return False
        
        return True

    def dfs(self, graph, v, state):
        stack = [(v, 0)]
        while stack:
            curr, pos = stack[-1]
            if state[curr] == PROCESSED:
                stack.pop()
                continue
            if state[curr] == DISCOVERED and pos == 0:
                return False
            if pos == 0:
                state[curr] = DISCOVERED

            for i in range(pos, len(graph[curr])):
                stack[-1] = curr, pos + 1
                stack.append((graph[curr][i], 0))
                break
            else:
                state[curr] = PROCESSED
            
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd413215450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd413215450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fd4132152f0, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 15          34 LOAD_CONST               4 (<code object dfs at 0x7fd4132153a0, file ""<ast>"", line 15>)
             36 LOAD_CONST               5 ('Solution.dfs')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (dfs)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fd4132152f0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fd413215240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (graph)

  5          18 LOAD_FAST                2 (prerequisites)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (x)
             28 STORE_FAST               5 (y)

  6          30 LOAD_FAST                3 (graph)
             32 LOAD_FAST                4 (x)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                5 (y)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_GLOBAL              2 (UNDISCOVERED)
             48 BUILD_LIST               1
             50 LOAD_FAST                1 (numCourses)
             52 BINARY_MULTIPLY
             54 STORE_FAST               6 (state)

  9          56 LOAD_GLOBAL              0 (range)
             58 LOAD_FAST                1 (numCourses)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                24 (to 90)
             66 STORE_FAST               7 (vertex)

 10          68 LOAD_FAST                0 (self)
             70 LOAD_METHOD              3 (dfs)
             72 LOAD_FAST                3 (graph)
             74 LOAD_FAST                7 (vertex)
             76 LOAD_FAST                6 (state)
             78 CALL_METHOD              3
             80 POP_JUMP_IF_TRUE        64

 11          82 POP_TOP
             84 LOAD_CONST               3 (False)
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           64

 13     >>   90 LOAD_CONST               4 (True)
             92 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fd413215240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object dfs at 0x7fd4132153a0, file ""<ast>"", line 15>:
 16           0 LOAD_FAST                2 (v)
              2 LOAD_CONST               1 (0)
              4 BUILD_TUPLE              2
              6 BUILD_LIST               1
              8 STORE_FAST               4 (stack)

 17     >>   10 LOAD_FAST                4 (stack)
             12 POP_JUMP_IF_FALSE      164

 18          14 LOAD_FAST                4 (stack)
             16 LOAD_CONST               2 (-1)
             18 BINARY_SUBSCR
             20 UNPACK_SEQUENCE          2
             22 STORE_FAST               5 (curr)
             24 STORE_FAST               6 (pos)

 19          26 LOAD_FAST                3 (state)
             28 LOAD_FAST                5 (curr)
             30 BINARY_SUBSCR
             32 LOAD_GLOBAL              0 (PROCESSED)
             34 COMPARE_OP               2 (==)
             36 POP_JUMP_IF_FALSE       48

 20          38 LOAD_FAST                4 (stack)
             40 LOAD_METHOD              1 (pop)
             42 CALL_METHOD              0
             44 POP_TOP

 21          46 JUMP_ABSOLUTE           10

 22     >>   48 LOAD_FAST                3 (state)
             50 LOAD_FAST                5 (curr)
             52 BINARY_SUBSCR
             54 LOAD_GLOBAL              2 (DISCOVERED)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       72
             60 LOAD_FAST                6 (pos)
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       72

 23          68 LOAD_CONST               3 (False)
             70 RETURN_VALUE

 24     >>   72 LOAD_FAST                6 (pos)
             74 LOAD_CONST               1 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       88

 25          80 LOAD_GLOBAL              2 (DISCOVERED)
             82 LOAD_FAST                3 (state)
             84 LOAD_FAST                5 (curr)
             86 STORE_SUBSCR

 27     >>   88 LOAD_GLOBAL              3 (range)
             90 LOAD_FAST                6 (pos)
             92 LOAD_GLOBAL              4 (len)
             94 LOAD_FAST                1 (graph)
             96 LOAD_FAST                5 (curr)
             98 BINARY_SUBSCR
            100 CALL_FUNCTION            1
            102 CALL_FUNCTION            2
            104 GET_ITER
        >>  106 FOR_ITER                46 (to 154)
            108 STORE_FAST               7 (i)

 28         110 LOAD_FAST                5 (curr)
            112 LOAD_FAST                6 (pos)
            114 LOAD_CONST               4 (1)
            116 BINARY_ADD
            118 BUILD_TUPLE              2
            120 LOAD_FAST                4 (stack)
            122 LOAD_CONST               2 (-1)
            124 STORE_SUBSCR

 29         126 LOAD_FAST                4 (stack)
            128 LOAD_METHOD              5 (append)
            130 LOAD_FAST                1 (graph)
            132 LOAD_FAST                5 (curr)
            134 BINARY_SUBSCR
            136 LOAD_FAST                7 (i)
            138 BINARY_SUBSCR
            140 LOAD_CONST               1 (0)
            142 BUILD_TUPLE              2
            144 CALL_METHOD              1
            146 POP_TOP

 30         148 POP_TOP
            150 JUMP_ABSOLUTE           10
            152 JUMP_ABSOLUTE          106

 32     >>  154 LOAD_GLOBAL              0 (PROCESSED)
            156 LOAD_FAST                3 (state)
            158 LOAD_FAST                5 (curr)
            160 STORE_SUBSCR
            162 JUMP_ABSOLUTE           10

 34     >>  164 LOAD_CONST               5 (True)
            166 RETURN_VALUE
None
"
canFinish,"from collections import deque

class Solution:    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
	    # extract a set of vertices from the edge list
        vertices = set([v for sublist in prerequisites for v in sublist]) 
		# transform the set of vertices and edge list into an adjacency list
        graph = { v: [e[1] for e in prerequisites if e[0] == v] for v in vertices}
        
		# traverse the graph starting at each vertex
        for v in vertices:
            bfs = deque(graph[v]) # add all the neighbours of starting node to the BFS queue
            visited = set() # use a set to keep track of the visited nodes and not get stuck in a cycle
            
            while bfs:
                current = bfs.pop()
                visited.add(current)
                if current == v: # we ended up at the same vertex where we started - there's a cycle
                    return False
                for n in graph[current]: # cycle not detected, continue the traversal to the next nodes
                    if n not in visited:
                        bfs.appendleft(n)            
        
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fefd3c35500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fefd3c35500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fefd3c35660, file ""<ast>"", line 4>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fefd3c35660, file ""<ast>"", line 4>:
  6           0 LOAD_GLOBAL              0 (set)
              2 LOAD_CONST               1 (<code object <listcomp> at 0x7fefd3c35240, file ""<ast>"", line 6>)
              4 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              6 MAKE_FUNCTION            0
              8 LOAD_DEREF               0 (prerequisites)
             10 GET_ITER
             12 CALL_FUNCTION            1
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (vertices)

  8          18 LOAD_CLOSURE             0 (prerequisites)
             20 BUILD_TUPLE              1
             22 LOAD_CONST               3 (<code object <dictcomp> at 0x7fefd3c35450, file ""<ast>"", line 8>)
             24 LOAD_CONST               4 ('Solution.canFinish.<locals>.<dictcomp>')
             26 MAKE_FUNCTION            8 (closure)
             28 LOAD_FAST                3 (vertices)
             30 GET_ITER
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (graph)

 11          36 LOAD_FAST                3 (vertices)
             38 GET_ITER
        >>   40 FOR_ITER                92 (to 134)
             42 STORE_FAST               5 (v)

 12          44 LOAD_GLOBAL              1 (deque)
             46 LOAD_FAST                4 (graph)
             48 LOAD_FAST                5 (v)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 STORE_FAST               6 (bfs)

 13          56 LOAD_GLOBAL              0 (set)
             58 CALL_FUNCTION            0
             60 STORE_FAST               7 (visited)

 15     >>   62 LOAD_FAST                6 (bfs)
             64 POP_JUMP_IF_FALSE       40

 16          66 LOAD_FAST                6 (bfs)
             68 LOAD_METHOD              2 (pop)
             70 CALL_METHOD              0
             72 STORE_FAST               8 (current)

 17          74 LOAD_FAST                7 (visited)
             76 LOAD_METHOD              3 (add)
             78 LOAD_FAST                8 (current)
             80 CALL_METHOD              1
             82 POP_TOP

 18          84 LOAD_FAST                8 (current)
             86 LOAD_FAST                5 (v)
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE       98

 19          92 POP_TOP
             94 LOAD_CONST               5 (False)
             96 RETURN_VALUE

 20     >>   98 LOAD_FAST                4 (graph)
            100 LOAD_FAST                8 (current)
            102 BINARY_SUBSCR
            104 GET_ITER
        >>  106 FOR_ITER                22 (to 130)
            108 STORE_FAST               9 (n)

 21         110 LOAD_FAST                9 (n)
            112 LOAD_FAST                7 (visited)
            114 COMPARE_OP               7 (not in)
            116 POP_JUMP_IF_FALSE      106

 22         118 LOAD_FAST                6 (bfs)
            120 LOAD_METHOD              4 (appendleft)
            122 LOAD_FAST                9 (n)
            124 CALL_METHOD              1
            126 POP_TOP
            128 JUMP_ABSOLUTE          106
        >>  130 JUMP_ABSOLUTE           62
            132 JUMP_ABSOLUTE           40

 24     >>  134 LOAD_CONST               6 (True)
            136 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fefd3c35240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                18 (to 24)
              6 STORE_FAST               1 (sublist)
              8 LOAD_FAST                1 (sublist)
             10 GET_ITER
        >>   12 FOR_ITER                 8 (to 22)
             14 STORE_FAST               2 (v)
             16 LOAD_FAST                2 (v)
             18 LIST_APPEND              3
             20 JUMP_ABSOLUTE           12
        >>   22 JUMP_ABSOLUTE            4
        >>   24 RETURN_VALUE

Disassembly of <code object <dictcomp> at 0x7fefd3c35450, file ""<ast>"", line 8>:
  8           0 BUILD_MAP                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                24 (to 30)
              6 STORE_DEREF              0 (v)
              8 LOAD_DEREF               0 (v)
             10 LOAD_CLOSURE             0 (v)
             12 BUILD_TUPLE              1
             14 LOAD_CONST               0 (<code object <listcomp> at 0x7fefd3c353a0, file ""<ast>"", line 8>)
             16 LOAD_CONST               1 ('Solution.canFinish.<locals>.<dictcomp>.<listcomp>')
             18 MAKE_FUNCTION            8 (closure)
             20 LOAD_DEREF               1 (prerequisites)
             22 GET_ITER
             24 CALL_FUNCTION            1
             26 MAP_ADD                  2
             28 JUMP_ABSOLUTE            4
        >>   30 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fefd3c353a0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                24 (to 30)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (0)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (v)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE        4
             20 LOAD_FAST                1 (e)
             22 LOAD_CONST               1 (1)
             24 BINARY_SUBSCR
             26 LIST_APPEND              2
             28 JUMP_ABSOLUTE            4
        >>   30 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        pre = defaultdict(list)
        count = {}
        
        for i in prerequisites:
            pre[i[1]].append(i[0])
            count[i[0]]=count.get(i[0],0) + 1
            
        queue = []
        for i in range(numCourses):
            if i not in count:
                queue.append(i)
        solution_count = 0       
        while len(queue):
            solution_count +=1
            x = queue.pop(0)
            for n in pre[x]:
                count[n] -= 1
                if count[n] == 0:
                    del count[n]
                    queue.append(n)
        
        if solution_count == numCourses:
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f28831652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f28831652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f2883165240, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f2883165240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (pre)

  4           8 BUILD_MAP                0
             10 STORE_FAST               4 (count)

  6          12 LOAD_FAST                2 (prerequisites)
             14 GET_ITER
        >>   16 FOR_ITER                54 (to 72)
             18 STORE_FAST               5 (i)

  7          20 LOAD_FAST                3 (pre)
             22 LOAD_FAST                5 (i)
             24 LOAD_CONST               1 (1)
             26 BINARY_SUBSCR
             28 BINARY_SUBSCR
             30 LOAD_METHOD              2 (append)
             32 LOAD_FAST                5 (i)
             34 LOAD_CONST               2 (0)
             36 BINARY_SUBSCR
             38 CALL_METHOD              1
             40 POP_TOP

  8          42 LOAD_FAST                4 (count)
             44 LOAD_METHOD              3 (get)
             46 LOAD_FAST                5 (i)
             48 LOAD_CONST               2 (0)
             50 BINARY_SUBSCR
             52 LOAD_CONST               2 (0)
             54 CALL_METHOD              2
             56 LOAD_CONST               1 (1)
             58 BINARY_ADD
             60 LOAD_FAST                4 (count)
             62 LOAD_FAST                5 (i)
             64 LOAD_CONST               2 (0)
             66 BINARY_SUBSCR
             68 STORE_SUBSCR
             70 JUMP_ABSOLUTE           16

 10     >>   72 BUILD_LIST               0
             74 STORE_FAST               6 (queue)

 11          76 LOAD_GLOBAL              4 (range)
             78 LOAD_FAST                1 (numCourses)
             80 CALL_FUNCTION            1
             82 GET_ITER
        >>   84 FOR_ITER                22 (to 108)
             86 STORE_FAST               5 (i)

 12          88 LOAD_FAST                5 (i)
             90 LOAD_FAST                4 (count)
             92 COMPARE_OP               7 (not in)
             94 POP_JUMP_IF_FALSE       84

 13          96 LOAD_FAST                6 (queue)
             98 LOAD_METHOD              2 (append)
            100 LOAD_FAST                5 (i)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           84

 14     >>  108 LOAD_CONST               2 (0)
            110 STORE_FAST               7 (solution_count)

 15     >>  112 LOAD_GLOBAL              5 (len)
            114 LOAD_FAST                6 (queue)
            116 CALL_FUNCTION            1
            118 POP_JUMP_IF_FALSE      198

 16         120 LOAD_FAST                7 (solution_count)
            122 LOAD_CONST               1 (1)
            124 INPLACE_ADD
            126 STORE_FAST               7 (solution_count)

 17         128 LOAD_FAST                6 (queue)
            130 LOAD_METHOD              6 (pop)
            132 LOAD_CONST               2 (0)
            134 CALL_METHOD              1
            136 STORE_FAST               8 (x)

 18         138 LOAD_FAST                3 (pre)
            140 LOAD_FAST                8 (x)
            142 BINARY_SUBSCR
            144 GET_ITER
        >>  146 FOR_ITER                48 (to 196)
            148 STORE_FAST               9 (n)

 19         150 LOAD_FAST                4 (count)
            152 LOAD_FAST                9 (n)
            154 DUP_TOP_TWO
            156 BINARY_SUBSCR
            158 LOAD_CONST               1 (1)
            160 INPLACE_SUBTRACT
            162 ROT_THREE
            164 STORE_SUBSCR

 20         166 LOAD_FAST                4 (count)
            168 LOAD_FAST                9 (n)
            170 BINARY_SUBSCR
            172 LOAD_CONST               2 (0)
            174 COMPARE_OP               2 (==)
            176 POP_JUMP_IF_FALSE      146

 21         178 LOAD_FAST                4 (count)
            180 LOAD_FAST                9 (n)
            182 DELETE_SUBSCR

 22         184 LOAD_FAST                6 (queue)
            186 LOAD_METHOD              2 (append)
            188 LOAD_FAST                9 (n)
            190 CALL_METHOD              1
            192 POP_TOP
            194 JUMP_ABSOLUTE          146
        >>  196 JUMP_ABSOLUTE          112

 24     >>  198 LOAD_FAST                7 (solution_count)
            200 LOAD_FAST                1 (numCourses)
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      210

 25         206 LOAD_CONST               3 (True)
            208 RETURN_VALUE

 26     >>  210 LOAD_CONST               4 (False)
            212 RETURN_VALUE
None
"
canFinish,"class Solution:
    def buildAdjacencyList(self, n, edgesList):
        adjList = [[] for _ in range(n)]
        # c2 (course 2) is a prerequisite of c1 (course 1)
        # i.e c2c1 is a directed edge in the graph
        for c1, c2 in edgesList:
            adjList[c2].append(c1)
        return adjList
    		
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # build Adjacency list from Edges list
        adjList = self.buildAdjacencyList(numCourses, prerequisites)
    
        # Each vertex can have 3 different states:
        # state 0   : vertex is not visited. It's a default state.
        # state -1  : vertex is being processed. Either all of its descendants
        #             are not processed or it's still in the function call stack.
        # state 1   : vertex and all its descendants are processed.
        state = [0] * numCourses

        def hasCycle(v):
            if state[v] == 1:
                # This vertex is processed so we pass.
                return False
            if state[v] == -1:
                # This vertex is being processed and it means we have a cycle.
                return True
    
            # Set state to -1
            state[v] = -1
    
            for i in adjList[v]:
                if hasCycle(i):
                    return True
    
            state[v] = 1
            return False
    
        # we traverse each vertex using DFS, if we find a cycle, stop and return
        for v in range(numCourses):
            if hasCycle(v):
                return False
    
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f29d4325500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f29d4325500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7f29d43252f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7f29d4325450, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7f29d43252f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f29d4325240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f29d4325240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f29d4325450, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 STORE_DEREF              0 (adjList)

 19          12 LOAD_CONST               1 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (numCourses)
             18 BINARY_MULTIPLY
             20 STORE_DEREF              2 (state)

 21          22 LOAD_CLOSURE             0 (adjList)
             24 LOAD_CLOSURE             1 (hasCycle)
             26 LOAD_CLOSURE             2 (state)
             28 BUILD_TUPLE              3
             30 LOAD_CONST               2 (<code object hasCycle at 0x7f29d43253a0, file ""<ast>"", line 21>)
             32 LOAD_CONST               3 ('Solution.canFinish.<locals>.hasCycle')
             34 MAKE_FUNCTION            8 (closure)
             36 STORE_DEREF              1 (hasCycle)

 40          38 LOAD_GLOBAL              1 (range)
             40 LOAD_FAST                1 (numCourses)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER                18 (to 66)
             48 STORE_FAST               3 (v)

 41          50 LOAD_DEREF               1 (hasCycle)
             52 LOAD_FAST                3 (v)
             54 CALL_FUNCTION            1
             56 POP_JUMP_IF_FALSE       46

 42          58 POP_TOP
             60 LOAD_CONST               4 (False)
             62 RETURN_VALUE
             64 JUMP_ABSOLUTE           46

 44     >>   66 LOAD_CONST               5 (True)
             68 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f29d43253a0, file ""<ast>"", line 21>:
 22           0 LOAD_DEREF               2 (state)
              2 LOAD_FAST                0 (v)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 24          12 LOAD_CONST               2 (False)
             14 RETURN_VALUE

 25     >>   16 LOAD_DEREF               2 (state)
             18 LOAD_FAST                0 (v)
             20 BINARY_SUBSCR
             22 LOAD_CONST               3 (-1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 27          28 LOAD_CONST               4 (True)
             30 RETURN_VALUE

 30     >>   32 LOAD_CONST               3 (-1)
             34 LOAD_DEREF               2 (state)
             36 LOAD_FAST                0 (v)
             38 STORE_SUBSCR

 32          40 LOAD_DEREF               0 (adjList)
             42 LOAD_FAST                0 (v)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                18 (to 68)
             50 STORE_FAST               1 (i)

 33          52 LOAD_DEREF               1 (hasCycle)
             54 LOAD_FAST                1 (i)
             56 CALL_FUNCTION            1
             58 POP_JUMP_IF_FALSE       48

 34          60 POP_TOP
             62 LOAD_CONST               4 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           48

 36     >>   68 LOAD_CONST               1 (1)
             70 LOAD_DEREF               2 (state)
             72 LOAD_FAST                0 (v)
             74 STORE_SUBSCR

 37          76 LOAD_CONST               2 (False)
             78 RETURN_VALUE
None
"
canFinish,"class Solution:
        def buildAdjacencyList(self, n, edgesList):
            adjList = [[] for _ in range(n)]
            # c2 (course 2) is a prerequisite of c1 (course 1)
            # i.e c2c1 is a directed edge in the graph
            for c1, c2 in edgesList:
                adjList[c2].append(c1)
            return adjList
    
        def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
            # build Adjacency list from Edges list
            adjList = self.buildAdjacencyList(numCourses, prerequisites)
            visited = set()
    
            def hasCycle(v, stack):
                if v in visited:
                    if v in stack:
                        # This vertex is being processed and it means we have a cycle.
                        return True
                    # This vertex is processed so we pass
                    return False
    
                # mark this vertex as visited
                visited.add(v)
                # add it to the current stack
                stack.append(v)
    
                for i in adjList[v]:
                    if hasCycle(i, stack):
                        return True
    
                # once processed, we pop it out of the stack
                stack.pop()
                return False
    
            # we traverse each vertex using DFS, if we find a cycle, stop and return
            for v in range(numCourses):
                if hasCycle(v, []):
                    return False
    
            return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f41e36e5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f41e36e5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7f41e36e52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7f41e36e5450, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7f41e36e52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f41e36e5240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f41e36e5240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f41e36e5450, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 STORE_DEREF              0 (adjList)

 13          12 LOAD_GLOBAL              1 (set)
             14 CALL_FUNCTION            0
             16 STORE_DEREF              2 (visited)

 15          18 LOAD_CLOSURE             0 (adjList)
             20 LOAD_CLOSURE             1 (hasCycle)
             22 LOAD_CLOSURE             2 (visited)
             24 BUILD_TUPLE              3
             26 LOAD_CONST               1 (<code object hasCycle at 0x7f41e36e53a0, file ""<ast>"", line 15>)
             28 LOAD_CONST               2 ('Solution.canFinish.<locals>.hasCycle')
             30 MAKE_FUNCTION            8 (closure)
             32 STORE_DEREF              1 (hasCycle)

 37          34 LOAD_GLOBAL              2 (range)
             36 LOAD_FAST                1 (numCourses)
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER                20 (to 64)
             44 STORE_FAST               3 (v)

 38          46 LOAD_DEREF               1 (hasCycle)
             48 LOAD_FAST                3 (v)
             50 BUILD_LIST               0
             52 CALL_FUNCTION            2
             54 POP_JUMP_IF_FALSE       42

 39          56 POP_TOP
             58 LOAD_CONST               3 (False)
             60 RETURN_VALUE
             62 JUMP_ABSOLUTE           42

 41     >>   64 LOAD_CONST               4 (True)
             66 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f41e36e53a0, file ""<ast>"", line 15>:
 16           0 LOAD_FAST                0 (v)
              2 LOAD_DEREF               2 (visited)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       24

 17           8 LOAD_FAST                0 (v)
             10 LOAD_FAST                1 (stack)
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_FALSE       20

 19          16 LOAD_CONST               1 (True)
             18 RETURN_VALUE

 21     >>   20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 24     >>   24 LOAD_DEREF               2 (visited)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                0 (v)
             30 CALL_METHOD              1
             32 POP_TOP

 26          34 LOAD_FAST                1 (stack)
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                0 (v)
             40 CALL_METHOD              1
             42 POP_TOP

 28          44 LOAD_DEREF               0 (adjList)
             46 LOAD_FAST                0 (v)
             48 BINARY_SUBSCR
             50 GET_ITER
        >>   52 FOR_ITER                20 (to 74)
             54 STORE_FAST               2 (i)

 29          56 LOAD_DEREF               1 (hasCycle)
             58 LOAD_FAST                2 (i)
             60 LOAD_FAST                1 (stack)
             62 CALL_FUNCTION            2
             64 POP_JUMP_IF_FALSE       52

 30          66 POP_TOP
             68 LOAD_CONST               1 (True)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           52

 33     >>   74 LOAD_FAST                1 (stack)
             76 LOAD_METHOD              2 (pop)
             78 CALL_METHOD              0
             80 POP_TOP

 34          82 LOAD_CONST               2 (False)
             84 RETURN_VALUE
None
"
canFinish,"class Solution:
    def buildAdjacencyList(self, n, edgesList):
        adjList = [[] for _ in range(n)]
        # c2 (course 2) is a prerequisite of c1 (course 1)
        # i.e c2c1 is a directed edge in the graph
        for c1, c2 in edgesList:
            adjList[c2].append(c1)
        return adjList
    
    def topoBFS(self, numNodes, edgesList):
        # Note: for consistency with other solutions above, we keep building
        # an adjacency list here. We can also merge this step with the next step.
        adjList = self.buildAdjacencyList(numNodes, edgesList)

        # 1. A list stores No. of incoming edges of each vertex
        inDegrees = [0] * numNodes
        for v1, v2 in edgesList:
            # v2v1 form a directed edge
            inDegrees[v1] += 1
    
        # 2. a queue of all vertices with no incoming edge
        # at least one such node must exist in a non-empty acyclic graph
        # vertices in this queue have the same order as the eventual topological
        # sort
        queue = []
        for v in range(numNodes):
            if inDegrees[v] == 0:
                queue.append(v)
    
        # initialize count of visited vertices
        count = 0
        # an empty list that will contain the final topological order
        topoOrder = []
    
        while queue:
            # a. pop a vertex from front of queue
            # depending on the order that vertices are removed from queue,
            # a different solution is created
            v = queue.pop(0)
            # b. append it to topoOrder
            topoOrder.append(v)
    
            # increase count by 1
            count += 1

            # for each descendant of current vertex, reduce its in-degree by 1
            for des in adjList[v]:
                inDegrees[des] -= 1
                # if in-degree becomes 0, add it to queue
                if inDegrees[des] == 0:
                    queue.append(des)

        if count != numNodes:
            return None  # graph has at least one cycle
        else:
            return topoOrder
    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        return True if self.topoBFS(numCourses, prerequisites) else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff2d0ba5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2d0ba5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7ff2d0ba52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_CONST               3 (<code object topoBFS at 0x7ff2d0ba53a0, file ""<ast>"", line 10>)
             18 LOAD_CONST               4 ('Solution.topoBFS')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (topoBFS)

 58          24 LOAD_NAME                5 (int)
             26 LOAD_NAME                6 (List)
             28 LOAD_NAME                6 (List)
             30 LOAD_NAME                5 (int)
             32 BINARY_SUBSCR
             34 BINARY_SUBSCR
             36 LOAD_NAME                7 (bool)
             38 LOAD_CONST               5 (('numCourses', 'prerequisites', 'return'))
             40 BUILD_CONST_KEY_MAP      3
             42 LOAD_CONST               6 (<code object canFinish at 0x7ff2d0ba5450, file ""<ast>"", line 58>)
             44 LOAD_CONST               7 ('Solution.canFinish')
             46 MAKE_FUNCTION            4 (annotations)
             48 STORE_NAME               8 (canFinish)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7ff2d0ba52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7ff2d0ba5240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff2d0ba5240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object topoBFS at 0x7ff2d0ba53a0, file ""<ast>"", line 10>:
 13           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numNodes)
              6 LOAD_FAST                2 (edgesList)
              8 CALL_METHOD              2
             10 STORE_FAST               3 (adjList)

 16          12 LOAD_CONST               1 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (numNodes)
             18 BINARY_MULTIPLY
             20 STORE_FAST               4 (inDegrees)

 17          22 LOAD_FAST                2 (edgesList)
             24 GET_ITER
        >>   26 FOR_ITER                24 (to 52)
             28 UNPACK_SEQUENCE          2
             30 STORE_FAST               5 (v1)
             32 STORE_FAST               6 (v2)

 19          34 LOAD_FAST                4 (inDegrees)
             36 LOAD_FAST                5 (v1)
             38 DUP_TOP_TWO
             40 BINARY_SUBSCR
             42 LOAD_CONST               2 (1)
             44 INPLACE_ADD
             46 ROT_THREE
             48 STORE_SUBSCR
             50 JUMP_ABSOLUTE           26

 25     >>   52 BUILD_LIST               0
             54 STORE_FAST               7 (queue)

 26          56 LOAD_GLOBAL              1 (range)
             58 LOAD_FAST                1 (numNodes)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                26 (to 92)
             66 STORE_FAST               8 (v)

 27          68 LOAD_FAST                4 (inDegrees)
             70 LOAD_FAST                8 (v)
             72 BINARY_SUBSCR
             74 LOAD_CONST               1 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       64

 28          80 LOAD_FAST                7 (queue)
             82 LOAD_METHOD              2 (append)
             84 LOAD_FAST                8 (v)
             86 CALL_METHOD              1
             88 POP_TOP
             90 JUMP_ABSOLUTE           64

 31     >>   92 LOAD_CONST               1 (0)
             94 STORE_FAST               9 (count)

 33          96 BUILD_LIST               0
             98 STORE_FAST              10 (topoOrder)

 35     >>  100 LOAD_FAST                7 (queue)
            102 POP_JUMP_IF_FALSE      186

 39         104 LOAD_FAST                7 (queue)
            106 LOAD_METHOD              3 (pop)
            108 LOAD_CONST               1 (0)
            110 CALL_METHOD              1
            112 STORE_FAST               8 (v)

 41         114 LOAD_FAST               10 (topoOrder)
            116 LOAD_METHOD              2 (append)
            118 LOAD_FAST                8 (v)
            120 CALL_METHOD              1
            122 POP_TOP

 44         124 LOAD_FAST                9 (count)
            126 LOAD_CONST               2 (1)
            128 INPLACE_ADD
            130 STORE_FAST               9 (count)

 47         132 LOAD_FAST                3 (adjList)
            134 LOAD_FAST                8 (v)
            136 BINARY_SUBSCR
            138 GET_ITER
        >>  140 FOR_ITER                42 (to 184)
            142 STORE_FAST              11 (des)

 48         144 LOAD_FAST                4 (inDegrees)
            146 LOAD_FAST               11 (des)
            148 DUP_TOP_TWO
            150 BINARY_SUBSCR
            152 LOAD_CONST               2 (1)
            154 INPLACE_SUBTRACT
            156 ROT_THREE
            158 STORE_SUBSCR

 50         160 LOAD_FAST                4 (inDegrees)
            162 LOAD_FAST               11 (des)
            164 BINARY_SUBSCR
            166 LOAD_CONST               1 (0)
            168 COMPARE_OP               2 (==)
            170 POP_JUMP_IF_FALSE      140

 51         172 LOAD_FAST                7 (queue)
            174 LOAD_METHOD              2 (append)
            176 LOAD_FAST               11 (des)
            178 CALL_METHOD              1
            180 POP_TOP
            182 JUMP_ABSOLUTE          140
        >>  184 JUMP_ABSOLUTE          100

 53     >>  186 LOAD_FAST                9 (count)
            188 LOAD_FAST                1 (numNodes)
            190 COMPARE_OP               3 (!=)
            192 POP_JUMP_IF_FALSE      198

 54         194 LOAD_CONST               0 (None)
            196 RETURN_VALUE

 56     >>  198 LOAD_FAST               10 (topoOrder)
            200 RETURN_VALUE
            202 LOAD_CONST               0 (None)
            204 RETURN_VALUE

Disassembly of <code object canFinish at 0x7ff2d0ba5450, file ""<ast>"", line 58>:
 59           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (topoBFS)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (True)
             14 RETURN_VALUE
        >>   16 LOAD_CONST               2 (False)
             18 RETURN_VALUE
None
"
canFinish,"from collections import deque

class Solution:
    def canFinish(self, numCourses, prereqs):            
        # Create edge list
        edge_list = [deque() for _ in range(numCourses)]
        for [neighbour, node] in prereqs:
            edge_list[node].append(neighbour)
        
        # Define recursive DFS function
        def DFS(source, path):
            if source in path:
                return(True)
            elif not visited[source]:
                visited[source] = True
                neighbours = edge_list[source]
                for n in neighbours:
                    node_path = path.union([source])
                    if DFS(n, node_path):
                        return(True)
        # Call DFS for each node
        visited = [False for _ in range(numCourses)]  # use as a memo table, thanks to
                                                      # nonlocal scoping in nested functions (here DFS)
        cycle_found = False
        for node in range(numCourses):
            if DFS(node, set()):
                cycle_found = True
                break
        return(not cycle_found)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f5751bf5450, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5751bf5450, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object canFinish at 0x7f5751bf5500, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.canFinish')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (canFinish)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f5751bf5500, file ""<ast>"", line 4>:
  6           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f5751bf5240, file ""<ast>"", line 6>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_DEREF              1 (edge_list)

  7          18 LOAD_FAST                2 (prereqs)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               3 (neighbour)
             28 STORE_FAST               4 (node)

  8          30 LOAD_DEREF               1 (edge_list)
             32 LOAD_FAST                4 (node)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                3 (neighbour)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

 11     >>   46 LOAD_CLOSURE             0 (DFS)
             48 LOAD_CLOSURE             1 (edge_list)
             50 LOAD_CLOSURE             2 (visited)
             52 BUILD_TUPLE              3
             54 LOAD_CONST               3 (<code object DFS at 0x7f5751bf52f0, file ""<ast>"", line 11>)
             56 LOAD_CONST               4 ('Solution.canFinish.<locals>.DFS')
             58 MAKE_FUNCTION            8 (closure)
             60 STORE_DEREF              0 (DFS)

 22          62 LOAD_CONST               5 (<code object <listcomp> at 0x7f5751bf53a0, file ""<ast>"", line 22>)
             64 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             66 MAKE_FUNCTION            0
             68 LOAD_GLOBAL              0 (range)
             70 LOAD_FAST                1 (numCourses)
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 STORE_DEREF              2 (visited)

 24          80 LOAD_CONST               6 (False)
             82 STORE_FAST               5 (cycle_found)

 25          84 LOAD_GLOBAL              0 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
        >>   92 FOR_ITER                24 (to 118)
             94 STORE_FAST               4 (node)

 26          96 LOAD_DEREF               0 (DFS)
             98 LOAD_FAST                4 (node)
            100 LOAD_GLOBAL              2 (set)
            102 CALL_FUNCTION            0
            104 CALL_FUNCTION            2
            106 POP_JUMP_IF_FALSE       92

 27         108 LOAD_CONST               7 (True)
            110 STORE_FAST               5 (cycle_found)

 28         112 POP_TOP
            114 JUMP_ABSOLUTE          118
            116 JUMP_ABSOLUTE           92

 29     >>  118 LOAD_FAST                5 (cycle_found)
            120 UNARY_NOT
            122 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f5751bf5240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (deque)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object DFS at 0x7f5751bf52f0, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (source)
              2 LOAD_FAST                1 (path)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 13           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 14     >>   12 LOAD_DEREF               2 (visited)
             14 LOAD_FAST                0 (source)
             16 BINARY_SUBSCR
             18 POP_JUMP_IF_TRUE        74

 15          20 LOAD_CONST               1 (True)
             22 LOAD_DEREF               2 (visited)
             24 LOAD_FAST                0 (source)
             26 STORE_SUBSCR

 16          28 LOAD_DEREF               1 (edge_list)
             30 LOAD_FAST                0 (source)
             32 BINARY_SUBSCR
             34 STORE_FAST               2 (neighbours)

 17          36 LOAD_FAST                2 (neighbours)
             38 GET_ITER
        >>   40 FOR_ITER                32 (to 74)
             42 STORE_FAST               3 (n)

 18          44 LOAD_FAST                1 (path)
             46 LOAD_METHOD              0 (union)
             48 LOAD_FAST                0 (source)
             50 BUILD_LIST               1
             52 CALL_METHOD              1
             54 STORE_FAST               4 (node_path)

 19          56 LOAD_DEREF               0 (DFS)
             58 LOAD_FAST                3 (n)
             60 LOAD_FAST                4 (node_path)
             62 CALL_FUNCTION            2
             64 POP_JUMP_IF_FALSE       40

 20          66 POP_TOP
             68 LOAD_CONST               1 (True)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           40
        >>   74 LOAD_CONST               0 (None)
             76 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f5751bf53a0, file ""<ast>"", line 22>:
 22           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
canFinish,"from collections import defaultdict
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        white = defaultdict(list)
        for x,y in prerequisites:
            white[x].append(y)
        
        return not self.iscycle(white)
    
    def iscycle(self, white):
        black, grey = set(), set()
        for node in range(len(white)):
            if not self.dfs(node, black, grey, white):
                return True
        return False
    
    def dfs(self, node, black, grey, white):
        if node in black:
            return True
        if node in grey:
            return False
        grey.add(node)
        for neighbor in white[node]:
            if not self.dfs(neighbor, black, grey, white):
                return False
        black.add(node)
        grey.remove(node)
        return True
            
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('defaultdict',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (defaultdict)
              8 STORE_NAME               1 (defaultdict)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f6e112c5450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6e112c5450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f6e112c5240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 10          34 LOAD_CONST               4 (<code object iscycle at 0x7f6e112c52f0, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.iscycle')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (iscycle)

 17          42 LOAD_CONST               6 (<code object dfs at 0x7f6e112c53a0, file ""<ast>"", line 17>)
             44 LOAD_CONST               7 ('Solution.dfs')
             46 MAKE_FUNCTION            0
             48 STORE_NAME               8 (dfs)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f6e112c5240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (white)

  5           8 LOAD_FAST                2 (prerequisites)
             10 GET_ITER
        >>   12 FOR_ITER                22 (to 36)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               4 (x)
             18 STORE_FAST               5 (y)

  6          20 LOAD_FAST                3 (white)
             22 LOAD_FAST                4 (x)
             24 BINARY_SUBSCR
             26 LOAD_METHOD              2 (append)
             28 LOAD_FAST                5 (y)
             30 CALL_METHOD              1
             32 POP_TOP
             34 JUMP_ABSOLUTE           12

  8     >>   36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              3 (iscycle)
             40 LOAD_FAST                3 (white)
             42 CALL_METHOD              1
             44 UNARY_NOT
             46 RETURN_VALUE

Disassembly of <code object iscycle at 0x7f6e112c52f0, file ""<ast>"", line 10>:
 11           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 LOAD_GLOBAL              0 (set)
              6 CALL_FUNCTION            0
              8 ROT_TWO
             10 STORE_FAST               2 (black)
             12 STORE_FAST               3 (grey)

 12          14 LOAD_GLOBAL              1 (range)
             16 LOAD_GLOBAL              2 (len)
             18 LOAD_FAST                1 (white)
             20 CALL_FUNCTION            1
             22 CALL_FUNCTION            1
             24 GET_ITER
        >>   26 FOR_ITER                26 (to 54)
             28 STORE_FAST               4 (node)

 13          30 LOAD_FAST                0 (self)
             32 LOAD_METHOD              3 (dfs)
             34 LOAD_FAST                4 (node)
             36 LOAD_FAST                2 (black)
             38 LOAD_FAST                3 (grey)
             40 LOAD_FAST                1 (white)
             42 CALL_METHOD              4
             44 POP_JUMP_IF_TRUE        26

 14          46 POP_TOP
             48 LOAD_CONST               1 (True)
             50 RETURN_VALUE
             52 JUMP_ABSOLUTE           26

 15     >>   54 LOAD_CONST               2 (False)
             56 RETURN_VALUE

Disassembly of <code object dfs at 0x7f6e112c53a0, file ""<ast>"", line 17>:
 18           0 LOAD_FAST                1 (node)
              2 LOAD_FAST                2 (black)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 19           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 20     >>   12 LOAD_FAST                1 (node)
             14 LOAD_FAST                3 (grey)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       24

 21          20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 22     >>   24 LOAD_FAST                3 (grey)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                1 (node)
             30 CALL_METHOD              1
             32 POP_TOP

 23          34 LOAD_FAST                4 (white)
             36 LOAD_FAST                1 (node)
             38 BINARY_SUBSCR
             40 GET_ITER
        >>   42 FOR_ITER                26 (to 70)
             44 STORE_FAST               5 (neighbor)

 24          46 LOAD_FAST                0 (self)
             48 LOAD_METHOD              1 (dfs)
             50 LOAD_FAST                5 (neighbor)
             52 LOAD_FAST                2 (black)
             54 LOAD_FAST                3 (grey)
             56 LOAD_FAST                4 (white)
             58 CALL_METHOD              4
             60 POP_JUMP_IF_TRUE        42

 25          62 POP_TOP
             64 LOAD_CONST               2 (False)
             66 RETURN_VALUE
             68 JUMP_ABSOLUTE           42

 26     >>   70 LOAD_FAST                2 (black)
             72 LOAD_METHOD              0 (add)
             74 LOAD_FAST                1 (node)
             76 CALL_METHOD              1
             78 POP_TOP

 27          80 LOAD_FAST                3 (grey)
             82 LOAD_METHOD              2 (remove)
             84 LOAD_FAST                1 (node)
             86 CALL_METHOD              1
             88 POP_TOP

 28          90 LOAD_CONST               1 (True)
             92 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        if not numCourses or not prerequisites: return True
        # build the graph
        graph = {}
        for pair in prerequisites:
            _from, _to = pair
            graph.setdefault(_from, []).append(_to)
        # we need to find a topological sort if we detect a cycle we are done
        visiting, visited = set(), set()
        def dfs(node):
            # cycle detected
            if node in visiting: return False
            visiting.add(node)
            # explore children
            res = True
            for child in graph.get(node, []):
                if child not in visited:
                    res &= dfs(child)
                    if not res: return False
            # done with this node and its children
            visiting.discard(node)
            visited.add(node)
            return res
        # explore all nodes
        for i in range(numCourses):
            if not dfs(i): return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f57fb1452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f57fb1452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f57fb1453a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f57fb1453a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (numCourses)
              2 POP_JUMP_IF_FALSE        8
              4 LOAD_FAST                2 (prerequisites)
              6 POP_JUMP_IF_TRUE        12
        >>    8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

  5     >>   12 BUILD_MAP                0
             14 STORE_DEREF              1 (graph)

  6          16 LOAD_FAST                2 (prerequisites)
             18 GET_ITER
        >>   20 FOR_ITER                30 (to 52)
             22 STORE_FAST               3 (pair)

  7          24 LOAD_FAST                3 (pair)
             26 UNPACK_SEQUENCE          2
             28 STORE_FAST               4 (_from)
             30 STORE_FAST               5 (_to)

  8          32 LOAD_DEREF               1 (graph)
             34 LOAD_METHOD              0 (setdefault)
             36 LOAD_FAST                4 (_from)
             38 BUILD_LIST               0
             40 CALL_METHOD              2
             42 LOAD_METHOD              1 (append)
             44 LOAD_FAST                5 (_to)
             46 CALL_METHOD              1
             48 POP_TOP
             50 JUMP_ABSOLUTE           20

 10     >>   52 LOAD_GLOBAL              2 (set)
             54 CALL_FUNCTION            0
             56 LOAD_GLOBAL              2 (set)
             58 CALL_FUNCTION            0
             60 ROT_TWO
             62 STORE_DEREF              3 (visiting)
             64 STORE_DEREF              2 (visited)

 11          66 LOAD_CLOSURE             0 (dfs)
             68 LOAD_CLOSURE             1 (graph)
             70 LOAD_CLOSURE             2 (visited)
             72 LOAD_CLOSURE             3 (visiting)
             74 BUILD_TUPLE              4
             76 LOAD_CONST               2 (<code object dfs at 0x7f57fb145240, file ""<ast>"", line 11>)
             78 LOAD_CONST               3 ('Solution.canFinish.<locals>.dfs')
             80 MAKE_FUNCTION            8 (closure)
             82 STORE_DEREF              0 (dfs)

 26          84 LOAD_GLOBAL              3 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
        >>   92 FOR_ITER                18 (to 112)
             94 STORE_FAST               6 (i)

 27          96 LOAD_DEREF               0 (dfs)
             98 LOAD_FAST                6 (i)
            100 CALL_FUNCTION            1
            102 POP_JUMP_IF_TRUE        92
            104 POP_TOP
            106 LOAD_CONST               4 (False)
            108 RETURN_VALUE
            110 JUMP_ABSOLUTE           92

 28     >>  112 LOAD_CONST               1 (True)
            114 RETURN_VALUE

Disassembly of <code object dfs at 0x7f57fb145240, file ""<ast>"", line 11>:
 13           0 LOAD_FAST                0 (node)
              2 LOAD_DEREF               3 (visiting)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (False)
             10 RETURN_VALUE

 14     >>   12 LOAD_DEREF               3 (visiting)
             14 LOAD_METHOD              0 (add)
             16 LOAD_FAST                0 (node)
             18 CALL_METHOD              1
             20 POP_TOP

 16          22 LOAD_CONST               2 (True)
             24 STORE_FAST               1 (res)

 17          26 LOAD_DEREF               1 (graph)
             28 LOAD_METHOD              1 (get)
             30 LOAD_FAST                0 (node)
             32 BUILD_LIST               0
             34 CALL_METHOD              2
             36 GET_ITER
        >>   38 FOR_ITER                34 (to 74)
             40 STORE_FAST               2 (child)

 18          42 LOAD_FAST                2 (child)
             44 LOAD_DEREF               2 (visited)
             46 COMPARE_OP               7 (not in)
             48 POP_JUMP_IF_FALSE       38

 19          50 LOAD_FAST                1 (res)
             52 LOAD_DEREF               0 (dfs)
             54 LOAD_FAST                2 (child)
             56 CALL_FUNCTION            1
             58 INPLACE_AND
             60 STORE_FAST               1 (res)

 20          62 LOAD_FAST                1 (res)
             64 POP_JUMP_IF_TRUE        38
             66 POP_TOP
             68 LOAD_CONST               1 (False)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           38

 22     >>   74 LOAD_DEREF               3 (visiting)
             76 LOAD_METHOD              2 (discard)
             78 LOAD_FAST                0 (node)
             80 CALL_METHOD              1
             82 POP_TOP

 23          84 LOAD_DEREF               2 (visited)
             86 LOAD_METHOD              0 (add)
             88 LOAD_FAST                0 (node)
             90 CALL_METHOD              1
             92 POP_TOP

 24          94 LOAD_FAST                1 (res)
             96 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        visited = [0 for _ in range(numCourses)]
        for x,y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs(graph, visited, i):
                return False
        return True

    def dfs(self, graph, visited, i):
        if visited[i] == -1:
            return False
        if visited[i] == 1:
            return True
        visited[i] = -1
        
        for j in graph[i]:
            if not self.dfs(graph, visited, j):
                return False
        visited[i] = 1
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd063435500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd063435500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fd063435450, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 12          34 LOAD_CONST               4 (<code object dfs at 0x7fd0634353a0, file ""<ast>"", line 12>)
             36 LOAD_CONST               5 ('Solution.dfs')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (dfs)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fd063435450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fd063435240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (graph)

  4          18 LOAD_CONST               3 (<code object <listcomp> at 0x7fd0634352f0, file ""<ast>"", line 4>)
             20 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             22 MAKE_FUNCTION            0
             24 LOAD_GLOBAL              0 (range)
             26 LOAD_FAST                1 (numCourses)
             28 CALL_FUNCTION            1
             30 GET_ITER
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (visited)

  5          36 LOAD_FAST                2 (prerequisites)
             38 GET_ITER
        >>   40 FOR_ITER                22 (to 64)
             42 UNPACK_SEQUENCE          2
             44 STORE_FAST               5 (x)
             46 STORE_FAST               6 (y)

  6          48 LOAD_FAST                3 (graph)
             50 LOAD_FAST                5 (x)
             52 BINARY_SUBSCR
             54 LOAD_METHOD              1 (append)
             56 LOAD_FAST                6 (y)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           40

  7     >>   64 LOAD_GLOBAL              0 (range)
             66 LOAD_FAST                1 (numCourses)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                24 (to 98)
             74 STORE_FAST               7 (i)

  8          76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              2 (dfs)
             80 LOAD_FAST                3 (graph)
             82 LOAD_FAST                4 (visited)
             84 LOAD_FAST                7 (i)
             86 CALL_METHOD              3
             88 POP_JUMP_IF_TRUE        72

  9          90 POP_TOP
             92 LOAD_CONST               4 (False)
             94 RETURN_VALUE
             96 JUMP_ABSOLUTE           72

 10     >>   98 LOAD_CONST               5 (True)
            100 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fd063435240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fd0634352f0, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object dfs at 0x7fd0634353a0, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                2 (visited)
              2 LOAD_FAST                3 (i)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (-1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 14          12 LOAD_CONST               2 (False)
             14 RETURN_VALUE

 15     >>   16 LOAD_FAST                2 (visited)
             18 LOAD_FAST                3 (i)
             20 BINARY_SUBSCR
             22 LOAD_CONST               3 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 16          28 LOAD_CONST               4 (True)
             30 RETURN_VALUE

 17     >>   32 LOAD_CONST               1 (-1)
             34 LOAD_FAST                2 (visited)
             36 LOAD_FAST                3 (i)
             38 STORE_SUBSCR

 19          40 LOAD_FAST                1 (graph)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                24 (to 74)
             50 STORE_FAST               4 (j)

 20          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              0 (dfs)
             56 LOAD_FAST                1 (graph)
             58 LOAD_FAST                2 (visited)
             60 LOAD_FAST                4 (j)
             62 CALL_METHOD              3
             64 POP_JUMP_IF_TRUE        48

 21          66 POP_TOP
             68 LOAD_CONST               2 (False)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           48

 22     >>   74 LOAD_CONST               3 (1)
             76 LOAD_FAST                2 (visited)
             78 LOAD_FAST                3 (i)
             80 STORE_SUBSCR

 23          82 LOAD_CONST               4 (True)
             84 RETURN_VALUE
None
"
canFinish,"class Solution:
    
    def makeEdgeList(self,prerequisites):
        prereq = {}
        for prereuisite in prerequisites:
            prereq[prereuisite[1]] = prereq.get(prereuisite[1],[])+[prereuisite[0]]
            prereq[prereuisite[0]] = prereq.get(prereuisite[0],[])
        return prereq
    
    def calculateIndegree(self,edgelist):
        indegree = [0]*len(edgelist)
        vertex2id = dict((i,j) for j,i in enumerate(edgelist))
        zero_indegree = set(list(edgelist))
        for prereq in edgelist:
            for pre in edgelist[prereq]:
                indegree[vertex2id[pre]]+=1
                zero_indegree.discard(pre)
        return indegree,vertex2id,zero_indegree
                
        
    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        if len(prerequisites)==0:
            return True
        prerequisite = self.makeEdgeList(prerequisites)
        indegree,vertex2id,zero_indegree = self.calculateIndegree(prerequisite)
        count = 0
        Q = list(zero_indegree)
        while Q:
            course = Q.pop(0)
            count+=1
            prereq = prerequisite[course]
            for p in prereq:
                indegree[vertex2id[p]]-=1
                if indegree[vertex2id[p]]==0:
                    Q.append(p)
                    
        if count ==len(prerequisite):
            return True
        else:
            return False
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2b951e5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2b951e5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object makeEdgeList at 0x7f2b951e5240, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.makeEdgeList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (makeEdgeList)

 10          16 LOAD_CONST               3 (<code object calculateIndegree at 0x7f2b951e5450, file ""<ast>"", line 10>)
             18 LOAD_CONST               4 ('Solution.calculateIndegree')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (calculateIndegree)

 22          24 LOAD_NAME                5 (int)
             26 LOAD_NAME                6 (List)
             28 LOAD_NAME                6 (List)
             30 LOAD_NAME                5 (int)
             32 BINARY_SUBSCR
             34 BINARY_SUBSCR
             36 LOAD_NAME                7 (bool)
             38 LOAD_CONST               5 (('numCourses', 'prerequisites', 'return'))
             40 BUILD_CONST_KEY_MAP      3
             42 LOAD_CONST               6 (<code object canFinish at 0x7f2b951e53a0, file ""<ast>"", line 22>)
             44 LOAD_CONST               7 ('Solution.canFinish')
             46 MAKE_FUNCTION            4 (annotations)
             48 STORE_NAME               8 (canFinish)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object makeEdgeList at 0x7f2b951e5240, file ""<ast>"", line 3>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               2 (prereq)

  5           4 LOAD_FAST                1 (prerequisites)
              6 GET_ITER
        >>    8 FOR_ITER                62 (to 72)
             10 STORE_FAST               3 (prereuisite)

  6          12 LOAD_FAST                2 (prereq)
             14 LOAD_METHOD              0 (get)
             16 LOAD_FAST                3 (prereuisite)
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBSCR
             22 BUILD_LIST               0
             24 CALL_METHOD              2
             26 LOAD_FAST                3 (prereuisite)
             28 LOAD_CONST               2 (0)
             30 BINARY_SUBSCR
             32 BUILD_LIST               1
             34 BINARY_ADD
             36 LOAD_FAST                2 (prereq)
             38 LOAD_FAST                3 (prereuisite)
             40 LOAD_CONST               1 (1)
             42 BINARY_SUBSCR
             44 STORE_SUBSCR

  7          46 LOAD_FAST                2 (prereq)
             48 LOAD_METHOD              0 (get)
             50 LOAD_FAST                3 (prereuisite)
             52 LOAD_CONST               2 (0)
             54 BINARY_SUBSCR
             56 BUILD_LIST               0
             58 CALL_METHOD              2
             60 LOAD_FAST                2 (prereq)
             62 LOAD_FAST                3 (prereuisite)
             64 LOAD_CONST               2 (0)
             66 BINARY_SUBSCR
             68 STORE_SUBSCR
             70 JUMP_ABSOLUTE            8

  8     >>   72 LOAD_FAST                2 (prereq)
             74 RETURN_VALUE

Disassembly of <code object calculateIndegree at 0x7f2b951e5450, file ""<ast>"", line 10>:
 11           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                1 (edgelist)
              8 CALL_FUNCTION            1
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (indegree)

 12          14 LOAD_GLOBAL              1 (dict)
             16 LOAD_CONST               2 (<code object <genexpr> at 0x7f2b951e52f0, file ""<ast>"", line 12>)
             18 LOAD_CONST               3 ('Solution.calculateIndegree.<locals>.<genexpr>')
             20 MAKE_FUNCTION            0
             22 LOAD_GLOBAL              2 (enumerate)
             24 LOAD_FAST                1 (edgelist)
             26 CALL_FUNCTION            1
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 STORE_FAST               3 (vertex2id)

 13          36 LOAD_GLOBAL              3 (set)
             38 LOAD_GLOBAL              4 (list)
             40 LOAD_FAST                1 (edgelist)
             42 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             46 STORE_FAST               4 (zero_indegree)

 14          48 LOAD_FAST                1 (edgelist)
             50 GET_ITER
        >>   52 FOR_ITER                48 (to 102)
             54 STORE_FAST               5 (prereq)

 15          56 LOAD_FAST                1 (edgelist)
             58 LOAD_FAST                5 (prereq)
             60 BINARY_SUBSCR
             62 GET_ITER
        >>   64 FOR_ITER                34 (to 100)
             66 STORE_FAST               6 (pre)

 16          68 LOAD_FAST                2 (indegree)
             70 LOAD_FAST                3 (vertex2id)
             72 LOAD_FAST                6 (pre)
             74 BINARY_SUBSCR
             76 DUP_TOP_TWO
             78 BINARY_SUBSCR
             80 LOAD_CONST               4 (1)
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR

 17          88 LOAD_FAST                4 (zero_indegree)
             90 LOAD_METHOD              5 (discard)
             92 LOAD_FAST                6 (pre)
             94 CALL_METHOD              1
             96 POP_TOP
             98 JUMP_ABSOLUTE           64
        >>  100 JUMP_ABSOLUTE           52

 18     >>  102 LOAD_FAST                2 (indegree)
            104 LOAD_FAST                3 (vertex2id)
            106 LOAD_FAST                4 (zero_indegree)
            108 BUILD_TUPLE              3
            110 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f2b951e52f0, file ""<ast>"", line 12>:
 12           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                18 (to 22)
              4 UNPACK_SEQUENCE          2
              6 STORE_FAST               1 (j)
              8 STORE_FAST               2 (i)
             10 LOAD_FAST                2 (i)
             12 LOAD_FAST                1 (j)
             14 BUILD_TUPLE              2
             16 YIELD_VALUE
             18 POP_TOP
             20 JUMP_ABSOLUTE            2
        >>   22 LOAD_CONST               0 (None)
             24 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f2b951e53a0, file ""<ast>"", line 22>:
 23           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (prerequisites)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 24          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

 25     >>   16 LOAD_FAST                0 (self)
             18 LOAD_METHOD              1 (makeEdgeList)
             20 LOAD_FAST                2 (prerequisites)
             22 CALL_METHOD              1
             24 STORE_FAST               3 (prerequisite)

 26          26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              2 (calculateIndegree)
             30 LOAD_FAST                3 (prerequisite)
             32 CALL_METHOD              1
             34 UNPACK_SEQUENCE          3
             36 STORE_FAST               4 (indegree)
             38 STORE_FAST               5 (vertex2id)
             40 STORE_FAST               6 (zero_indegree)

 27          42 LOAD_CONST               1 (0)
             44 STORE_FAST               7 (count)

 28          46 LOAD_GLOBAL              3 (list)
             48 LOAD_FAST                6 (zero_indegree)
             50 CALL_FUNCTION            1
             52 STORE_FAST               8 (Q)

 29     >>   54 LOAD_FAST                8 (Q)
             56 POP_JUMP_IF_FALSE      142

 30          58 LOAD_FAST                8 (Q)
             60 LOAD_METHOD              4 (pop)
             62 LOAD_CONST               1 (0)
             64 CALL_METHOD              1
             66 STORE_FAST               9 (course)

 31          68 LOAD_FAST                7 (count)
             70 LOAD_CONST               3 (1)
             72 INPLACE_ADD
             74 STORE_FAST               7 (count)

 32          76 LOAD_FAST                3 (prerequisite)
             78 LOAD_FAST                9 (course)
             80 BINARY_SUBSCR
             82 STORE_FAST              10 (prereq)

 33          84 LOAD_FAST               10 (prereq)
             86 GET_ITER
        >>   88 FOR_ITER                50 (to 140)
             90 STORE_FAST              11 (p)

 34          92 LOAD_FAST                4 (indegree)
             94 LOAD_FAST                5 (vertex2id)
             96 LOAD_FAST               11 (p)
             98 BINARY_SUBSCR
            100 DUP_TOP_TWO
            102 BINARY_SUBSCR
            104 LOAD_CONST               3 (1)
            106 INPLACE_SUBTRACT
            108 ROT_THREE
            110 STORE_SUBSCR

 35         112 LOAD_FAST                4 (indegree)
            114 LOAD_FAST                5 (vertex2id)
            116 LOAD_FAST               11 (p)
            118 BINARY_SUBSCR
            120 BINARY_SUBSCR
            122 LOAD_CONST               1 (0)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE       88

 36         128 LOAD_FAST                8 (Q)
            130 LOAD_METHOD              5 (append)
            132 LOAD_FAST               11 (p)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE           88
        >>  140 JUMP_ABSOLUTE           54

 38     >>  142 LOAD_FAST                7 (count)
            144 LOAD_GLOBAL              0 (len)
            146 LOAD_FAST                3 (prerequisite)
            148 CALL_FUNCTION            1
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE      158

 39         154 LOAD_CONST               2 (True)
            156 RETURN_VALUE

 41     >>  158 LOAD_CONST               4 (False)
            160 RETURN_VALUE
            162 LOAD_CONST               0 (None)
            164 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, n, E):
        arrow   = defaultdict(list)
        prereqs = defaultdict(set)
        for x,y in E:
            arrow  [y].append(x)  # courses must be taken as y -> x
            prereqs[x].add   (y)  # x, after y
        #
        # Waiting: courses with prerequisites (the rest are ok)
        waiting = {e[0] for e in E}
        # Front: Foundational courses that we can use to get started
        #        ""Courses that are foundational to others without having prerequisites themselves""
        front    = {e[1] for e in E} - waiting 
        #
        while front:
            new = []
            for y in front:
                # Visit all ""courses=x"" that depend on ""front=y""
                for x in arrow[y]:
                    #     Arrow-Order: y -> [x1,x2,x3]
                    # Remove ""y"" as prerequisite of ""xi"" (it's free to take now)
                    prereqs[x].remove(y) 
                    # if x is now free of prerequisites, then declare it a foundational course
                    if not prereqs[x]:   
                        # append to new generation of foundational courses
                        new.append(x)
                        # Remove problematic course ""x""
                        waiting.remove(x)
            front = new
        if waiting:
            return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc5e7265450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc5e7265450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object canFinish at 0x7fc5e72653a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.canFinish')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (canFinish)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fc5e72653a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (arrow)

  4           8 LOAD_GLOBAL              0 (defaultdict)
             10 LOAD_GLOBAL              2 (set)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (prereqs)

  5          16 LOAD_FAST                2 (E)
             18 GET_ITER
        >>   20 FOR_ITER                36 (to 58)
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               5 (x)
             26 STORE_FAST               6 (y)

  6          28 LOAD_FAST                3 (arrow)
             30 LOAD_FAST                6 (y)
             32 BINARY_SUBSCR
             34 LOAD_METHOD              3 (append)
             36 LOAD_FAST                5 (x)
             38 CALL_METHOD              1
             40 POP_TOP

  7          42 LOAD_FAST                4 (prereqs)
             44 LOAD_FAST                5 (x)
             46 BINARY_SUBSCR
             48 LOAD_METHOD              4 (add)
             50 LOAD_FAST                6 (y)
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           20

 10     >>   58 LOAD_CONST               1 (<code object <setcomp> at 0x7fc5e7265240, file ""<ast>"", line 10>)
             60 LOAD_CONST               2 ('Solution.canFinish.<locals>.<setcomp>')
             62 MAKE_FUNCTION            0
             64 LOAD_FAST                2 (E)
             66 GET_ITER
             68 CALL_FUNCTION            1
             70 STORE_FAST               7 (waiting)

 13          72 LOAD_CONST               3 (<code object <setcomp> at 0x7fc5e72652f0, file ""<ast>"", line 13>)
             74 LOAD_CONST               2 ('Solution.canFinish.<locals>.<setcomp>')
             76 MAKE_FUNCTION            0
             78 LOAD_FAST                2 (E)
             80 GET_ITER
             82 CALL_FUNCTION            1
             84 LOAD_FAST                7 (waiting)
             86 BINARY_SUBTRACT
             88 STORE_FAST               8 (front)

 15     >>   90 LOAD_FAST                8 (front)
             92 POP_JUMP_IF_FALSE      170

 16          94 BUILD_LIST               0
             96 STORE_FAST               9 (new)

 17          98 LOAD_FAST                8 (front)
            100 GET_ITER
        >>  102 FOR_ITER                60 (to 164)
            104 STORE_FAST               6 (y)

 19         106 LOAD_FAST                3 (arrow)
            108 LOAD_FAST                6 (y)
            110 BINARY_SUBSCR
            112 GET_ITER
        >>  114 FOR_ITER                46 (to 162)
            116 STORE_FAST               5 (x)

 22         118 LOAD_FAST                4 (prereqs)
            120 LOAD_FAST                5 (x)
            122 BINARY_SUBSCR
            124 LOAD_METHOD              5 (remove)
            126 LOAD_FAST                6 (y)
            128 CALL_METHOD              1
            130 POP_TOP

 24         132 LOAD_FAST                4 (prereqs)
            134 LOAD_FAST                5 (x)
            136 BINARY_SUBSCR
            138 POP_JUMP_IF_TRUE       114

 26         140 LOAD_FAST                9 (new)
            142 LOAD_METHOD              3 (append)
            144 LOAD_FAST                5 (x)
            146 CALL_METHOD              1
            148 POP_TOP

 28         150 LOAD_FAST                7 (waiting)
            152 LOAD_METHOD              5 (remove)
            154 LOAD_FAST                5 (x)
            156 CALL_METHOD              1
            158 POP_TOP
            160 JUMP_ABSOLUTE          114
        >>  162 JUMP_ABSOLUTE          102

 29     >>  164 LOAD_FAST                9 (new)
            166 STORE_FAST               8 (front)
            168 JUMP_ABSOLUTE           90

 30     >>  170 LOAD_FAST                7 (waiting)
            172 POP_JUMP_IF_FALSE      178

 31         174 LOAD_CONST               4 (False)
            176 RETURN_VALUE

 32     >>  178 LOAD_CONST               5 (True)
            180 RETURN_VALUE

Disassembly of <code object <setcomp> at 0x7fc5e7265240, file ""<ast>"", line 10>:
 10           0 BUILD_SET                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (0)
             12 BINARY_SUBSCR
             14 SET_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <setcomp> at 0x7fc5e72652f0, file ""<ast>"", line 13>:
 13           0 BUILD_SET                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (1)
             12 BINARY_SUBSCR
             14 SET_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        T = []
        visited = [False]*numCourses
        queue = collections.deque()
        indegree = [0]*numCourses
        graph = collections.defaultdict(list)
        for i,j in prerequisites:
            indegree[i] += 1
            graph[j].append(i)
        n = len(graph)
        for i in range(numCourses):
            if indegree[i] == 0:
                queue.appendleft(i)
                visited[i] = True
        while queue:
            v = queue.popleft()
            T.append(v)
            for i in graph[v]:
                if not visited[i]:
                    indegree[i] -= 1
                    if indegree[i] == 0:
                        queue.appendleft(i)
                        visited[i] = True
        return True if len(T) == numCourses else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe0d6dd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe0d6dd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fe0d6dd5240, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fe0d6dd5240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               3 (T)

  4           4 LOAD_CONST               1 (False)
              6 BUILD_LIST               1
              8 LOAD_FAST                1 (numCourses)
             10 BINARY_MULTIPLY
             12 STORE_FAST               4 (visited)

  5          14 LOAD_GLOBAL              0 (collections)
             16 LOAD_METHOD              1 (deque)
             18 CALL_METHOD              0
             20 STORE_FAST               5 (queue)

  6          22 LOAD_CONST               2 (0)
             24 BUILD_LIST               1
             26 LOAD_FAST                1 (numCourses)
             28 BINARY_MULTIPLY
             30 STORE_FAST               6 (indegree)

  7          32 LOAD_GLOBAL              0 (collections)
             34 LOAD_METHOD              2 (defaultdict)
             36 LOAD_GLOBAL              3 (list)
             38 CALL_METHOD              1
             40 STORE_FAST               7 (graph)

  8          42 LOAD_FAST                2 (prerequisites)
             44 GET_ITER
        >>   46 FOR_ITER                38 (to 86)
             48 UNPACK_SEQUENCE          2
             50 STORE_FAST               8 (i)
             52 STORE_FAST               9 (j)

  9          54 LOAD_FAST                6 (indegree)
             56 LOAD_FAST                8 (i)
             58 DUP_TOP_TWO
             60 BINARY_SUBSCR
             62 LOAD_CONST               3 (1)
             64 INPLACE_ADD
             66 ROT_THREE
             68 STORE_SUBSCR

 10          70 LOAD_FAST                7 (graph)
             72 LOAD_FAST                9 (j)
             74 BINARY_SUBSCR
             76 LOAD_METHOD              4 (append)
             78 LOAD_FAST                8 (i)
             80 CALL_METHOD              1
             82 POP_TOP
             84 JUMP_ABSOLUTE           46

 11     >>   86 LOAD_GLOBAL              5 (len)
             88 LOAD_FAST                7 (graph)
             90 CALL_FUNCTION            1
             92 STORE_FAST              10 (n)

 12          94 LOAD_GLOBAL              6 (range)
             96 LOAD_FAST                1 (numCourses)
             98 CALL_FUNCTION            1
            100 GET_ITER
        >>  102 FOR_ITER                34 (to 138)
            104 STORE_FAST               8 (i)

 13         106 LOAD_FAST                6 (indegree)
            108 LOAD_FAST                8 (i)
            110 BINARY_SUBSCR
            112 LOAD_CONST               2 (0)
            114 COMPARE_OP               2 (==)
            116 POP_JUMP_IF_FALSE      102

 14         118 LOAD_FAST                5 (queue)
            120 LOAD_METHOD              7 (appendleft)
            122 LOAD_FAST                8 (i)
            124 CALL_METHOD              1
            126 POP_TOP

 15         128 LOAD_CONST               4 (True)
            130 LOAD_FAST                4 (visited)
            132 LOAD_FAST                8 (i)
            134 STORE_SUBSCR
            136 JUMP_ABSOLUTE          102

 16     >>  138 LOAD_FAST                5 (queue)
            140 POP_JUMP_IF_FALSE      230

 17         142 LOAD_FAST                5 (queue)
            144 LOAD_METHOD              8 (popleft)
            146 CALL_METHOD              0
            148 STORE_FAST              11 (v)

 18         150 LOAD_FAST                3 (T)
            152 LOAD_METHOD              4 (append)
            154 LOAD_FAST               11 (v)
            156 CALL_METHOD              1
            158 POP_TOP

 19         160 LOAD_FAST                7 (graph)
            162 LOAD_FAST               11 (v)
            164 BINARY_SUBSCR
            166 GET_ITER
        >>  168 FOR_ITER                58 (to 228)
            170 STORE_FAST               8 (i)

 20         172 LOAD_FAST                4 (visited)
            174 LOAD_FAST                8 (i)
            176 BINARY_SUBSCR
            178 POP_JUMP_IF_TRUE       168

 21         180 LOAD_FAST                6 (indegree)
            182 LOAD_FAST                8 (i)
            184 DUP_TOP_TWO
            186 BINARY_SUBSCR
            188 LOAD_CONST               3 (1)
            190 INPLACE_SUBTRACT
            192 ROT_THREE
            194 STORE_SUBSCR

 22         196 LOAD_FAST                6 (indegree)
            198 LOAD_FAST                8 (i)
            200 BINARY_SUBSCR
            202 LOAD_CONST               2 (0)
            204 COMPARE_OP               2 (==)
            206 POP_JUMP_IF_FALSE      168

 23         208 LOAD_FAST                5 (queue)
            210 LOAD_METHOD              7 (appendleft)
            212 LOAD_FAST                8 (i)
            214 CALL_METHOD              1
            216 POP_TOP

 24         218 LOAD_CONST               4 (True)
            220 LOAD_FAST                4 (visited)
            222 LOAD_FAST                8 (i)
            224 STORE_SUBSCR
            226 JUMP_ABSOLUTE          168
        >>  228 JUMP_ABSOLUTE          138

 25     >>  230 LOAD_GLOBAL              5 (len)
            232 LOAD_FAST                3 (T)
            234 CALL_FUNCTION            1
            236 LOAD_FAST                1 (numCourses)
            238 COMPARE_OP               2 (==)
            240 POP_JUMP_IF_FALSE      246
            242 LOAD_CONST               4 (True)
            244 RETURN_VALUE
        >>  246 LOAD_CONST               1 (False)
            248 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        ## RC ##
        ## APPROACH : DFS ##
        ## LOGIC: DETECT CYCLE IN DIRECTED GRAPH. ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##

        # DFS function will return False when a cycle is detected else returns True. (at one particular node)
        def hasCycle(node):
            
            if(node in exploring):                     # Cycle detected. If you are still exploring and found the same element again in exploring.
                return True
            
            if(node in explored):                       
                return False

            exploring.add(node)                         # mark this node as visited.
                                                         
            for nei in graph[node]:                     # visit all neigbhors of this node.
                if( hasCycle(nei) ):
                    return True                         # if one of its child has cycle return from function call
            
            explored.add(node)
            exploring.remove(node)
            
            return False
        
        graph = collections.defaultdict(list)
        for u,v in prerequisites:
            graph[u].append(v)
        explored = set()                                 # To keep track of explored nodes in the graph
        exploring = set()                                # still in exploring, not yet finished.
        
        for node in list(graph):                         # watch out => list(graph)
            if(node not in explored):
                if(hasCycle(node)):         
                    return False
        return True
        
        ## APPROACH : BFS ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##
        graph = collections.defaultdict(list)
        in_degree = collections.defaultdict(int)
        for u,v in prerequisites:
            graph[u].append(v)
            in_degree[v] += 1

        # init queue with indegree 0 nodes
        queue = collections.deque([ u for u in range(0, numCourses) if u not in in_degree])

        count = 0
        while(queue):
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                count += 1
                for nei in graph[node]:
                    in_degree[nei] -= 1

                    if in_degree[nei] == 0:
                        queue.append( nei )
        return count == numCourses      # check if all courses are completed
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f48c2525450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f48c2525450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f48c25253a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f48c25253a0, file ""<ast>"", line 2>:
 11           0 LOAD_CLOSURE             0 (explored)
              2 LOAD_CLOSURE             1 (exploring)
              4 LOAD_CLOSURE             2 (graph)
              6 LOAD_CLOSURE             3 (hasCycle)
              8 BUILD_TUPLE              4
             10 LOAD_CONST               1 (<code object hasCycle at 0x7f48c2525240, file ""<ast>"", line 11>)
             12 LOAD_CONST               2 ('Solution.canFinish.<locals>.hasCycle')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              3 (hasCycle)

 30          18 LOAD_GLOBAL              0 (collections)
             20 LOAD_METHOD              1 (defaultdict)
             22 LOAD_GLOBAL              2 (list)
             24 CALL_METHOD              1
             26 STORE_DEREF              2 (graph)

 31          28 LOAD_FAST                2 (prerequisites)
             30 GET_ITER
        >>   32 FOR_ITER                22 (to 56)
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               3 (u)
             38 STORE_FAST               4 (v)

 32          40 LOAD_DEREF               2 (graph)
             42 LOAD_FAST                3 (u)
             44 BINARY_SUBSCR
             46 LOAD_METHOD              3 (append)
             48 LOAD_FAST                4 (v)
             50 CALL_METHOD              1
             52 POP_TOP
             54 JUMP_ABSOLUTE           32

 33     >>   56 LOAD_GLOBAL              4 (set)
             58 CALL_FUNCTION            0
             60 STORE_DEREF              0 (explored)

 34          62 LOAD_GLOBAL              4 (set)
             64 CALL_FUNCTION            0
             66 STORE_DEREF              1 (exploring)

 36          68 LOAD_GLOBAL              2 (list)
             70 LOAD_DEREF               2 (graph)
             72 CALL_FUNCTION            1
             74 GET_ITER
        >>   76 FOR_ITER                26 (to 104)
             78 STORE_FAST               5 (node)

 37          80 LOAD_FAST                5 (node)
             82 LOAD_DEREF               0 (explored)
             84 COMPARE_OP               7 (not in)
             86 POP_JUMP_IF_FALSE       76

 38          88 LOAD_DEREF               3 (hasCycle)
             90 LOAD_FAST                5 (node)
             92 CALL_FUNCTION            1
             94 POP_JUMP_IF_FALSE       76

 39          96 POP_TOP
             98 LOAD_CONST               3 (False)
            100 RETURN_VALUE
            102 JUMP_ABSOLUTE           76

 40     >>  104 LOAD_CONST               4 (True)
            106 RETURN_VALUE

 47     >>  108 FOR_ITER                38 (to 148)
            110 UNPACK_SEQUENCE          2
            112 STORE_FAST               3 (u)
            114 STORE_FAST               4 (v)

 48         116 LOAD_DEREF               2 (graph)
            118 LOAD_FAST                3 (u)
            120 BINARY_SUBSCR
            122 LOAD_METHOD              3 (append)
            124 LOAD_FAST                4 (v)
            126 CALL_METHOD              1
            128 POP_TOP

 49         130 LOAD_DEREF               4 (in_degree)
            132 LOAD_FAST                4 (v)
            134 DUP_TOP_TWO
            136 BINARY_SUBSCR
            138 LOAD_CONST               5 (1)
            140 INPLACE_ADD
            142 ROT_THREE
            144 STORE_SUBSCR
            146 JUMP_ABSOLUTE          108

 52     >>  148 LOAD_GLOBAL              0 (collections)
            150 LOAD_METHOD              6 (deque)
            152 LOAD_CLOSURE             4 (in_degree)
            154 BUILD_TUPLE              1
            156 LOAD_CONST               6 (<code object <listcomp> at 0x7f48c25252f0, file ""<ast>"", line 52>)
            158 LOAD_CONST               7 ('Solution.canFinish.<locals>.<listcomp>')
            160 MAKE_FUNCTION            8 (closure)
            162 LOAD_GLOBAL              7 (range)
            164 LOAD_CONST               8 (0)
            166 LOAD_FAST                1 (numCourses)
            168 CALL_FUNCTION            2
            170 GET_ITER
            172 CALL_FUNCTION            1
            174 CALL_METHOD              1
            176 STORE_FAST               6 (queue)

 54         178 LOAD_CONST               8 (0)
            180 STORE_FAST               7 (count)

 55     >>  182 LOAD_FAST                6 (queue)
            184 EXTENDED_ARG             1
            186 POP_JUMP_IF_FALSE      284

 56         188 LOAD_GLOBAL              8 (len)
            190 LOAD_FAST                6 (queue)
            192 CALL_FUNCTION            1
            194 STORE_FAST               8 (size)

 57         196 LOAD_GLOBAL              7 (range)
            198 LOAD_FAST                8 (size)
            200 CALL_FUNCTION            1
            202 GET_ITER
        >>  204 FOR_ITER                76 (to 282)
            206 STORE_FAST               9 (_)

 58         208 LOAD_FAST                6 (queue)
            210 LOAD_METHOD              9 (popleft)
            212 CALL_METHOD              0
            214 STORE_FAST               5 (node)

 59         216 LOAD_FAST                7 (count)
            218 LOAD_CONST               5 (1)
            220 INPLACE_ADD
            222 STORE_FAST               7 (count)

 60         224 LOAD_DEREF               2 (graph)
            226 LOAD_FAST                5 (node)
            228 BINARY_SUBSCR
            230 GET_ITER
        >>  232 FOR_ITER                46 (to 280)
            234 STORE_FAST              10 (nei)

 61         236 LOAD_DEREF               4 (in_degree)
            238 LOAD_FAST               10 (nei)
            240 DUP_TOP_TWO
            242 BINARY_SUBSCR
            244 LOAD_CONST               5 (1)
            246 INPLACE_SUBTRACT
            248 ROT_THREE
            250 STORE_SUBSCR

 63         252 LOAD_DEREF               4 (in_degree)
            254 LOAD_FAST               10 (nei)
            256 BINARY_SUBSCR
            258 LOAD_CONST               8 (0)
            260 COMPARE_OP               2 (==)
            262 EXTENDED_ARG             0
            264 POP_JUMP_IF_FALSE      232

 64         266 LOAD_FAST                6 (queue)
            268 LOAD_METHOD              3 (append)
            270 LOAD_FAST               10 (nei)
            272 CALL_METHOD              1
            274 POP_TOP
            276 EXTENDED_ARG             0
            278 JUMP_ABSOLUTE          232
        >>  280 JUMP_ABSOLUTE          204
        >>  282 JUMP_ABSOLUTE          182

 65     >>  284 LOAD_FAST                7 (count)
            286 LOAD_FAST                1 (numCourses)
            288 COMPARE_OP               2 (==)
            290 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f48c2525240, file ""<ast>"", line 11>:
 13           0 LOAD_FAST                0 (node)
              2 LOAD_DEREF               1 (exploring)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 14           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 16     >>   12 LOAD_FAST                0 (node)
             14 LOAD_DEREF               0 (explored)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       24

 17          20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 19     >>   24 LOAD_DEREF               1 (exploring)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                0 (node)
             30 CALL_METHOD              1
             32 POP_TOP

 21          34 LOAD_DEREF               2 (graph)
             36 LOAD_FAST                0 (node)
             38 BINARY_SUBSCR
             40 GET_ITER
        >>   42 FOR_ITER                18 (to 62)
             44 STORE_FAST               1 (nei)

 22          46 LOAD_DEREF               3 (hasCycle)
             48 LOAD_FAST                1 (nei)
             50 CALL_FUNCTION            1
             52 POP_JUMP_IF_FALSE       42

 23          54 POP_TOP
             56 LOAD_CONST               1 (True)
             58 RETURN_VALUE
             60 JUMP_ABSOLUTE           42

 25     >>   62 LOAD_DEREF               0 (explored)
             64 LOAD_METHOD              0 (add)
             66 LOAD_FAST                0 (node)
             68 CALL_METHOD              1
             70 POP_TOP

 26          72 LOAD_DEREF               1 (exploring)
             74 LOAD_METHOD              1 (remove)
             76 LOAD_FAST                0 (node)
             78 CALL_METHOD              1
             80 POP_TOP

 28          82 LOAD_CONST               2 (False)
             84 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f48c25252f0, file ""<ast>"", line 52>:
 52           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (u)
              8 LOAD_FAST                1 (u)
             10 LOAD_DEREF               0 (in_degree)
             12 COMPARE_OP               7 (not in)
             14 POP_JUMP_IF_FALSE        4
             16 LOAD_FAST                1 (u)
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        >>   22 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        
		# Constant defined for course state
        NOT_CHECKED, CHECKING, COMPLETED = 0, 1, 2
        
        # -------------------------------
        
        def has_deadlock( course )->bool:
            
            if course_state[course] == CHECKING:
                # There is a cycle(i.e., deadlock ) in prerequisites
                return True
            
            elif course_state[course] == COMPLETED:
                # current course has been checked and marked as completed
                return False
            
            
            
            # update current course as checking
            course_state[course] = CHECKING
            
            # check pre_course in DFS and detect whether there is deadlock
            for pre_course in requirement[course]:
                
                if has_deadlock( pre_course ):
                    # deadlock is found, impossible to finish all courses
                    return True
                
                                
            # update current course as completed
            course_state[course] = COMPLETED
            
            return False
        
        # -------------------------------
        
        # each course maintain a list of its own prerequisites
        requirement = collections.defaultdict( list )
        
        for course, pre_course in prerequisites:
            requirement[course].append( pre_course )
        
        
        # each course maintain a state among {NOT_CHECKED, CHECKING, COMPLETED}
		# Initial state is NOT_CHECKED 
        course_state = [ NOT_CHECKED for _ in range(numCourses) ]
           
        # Launch cycle (i.e., deadlock ) detection in DFS
        for course_idx in range(0, numCourses):
            
            if has_deadlock(course_idx):
                # deadlock is found, impossible to finish all courses
                return False
        
        # we can finish all course with required order 
        return True
            
            
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5bc7ba53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5bc7ba53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f5bc7ba5500, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f5bc7ba5500, file ""<ast>"", line 2>:
  5           0 LOAD_CONST               1 ((0, 1, 2))
              2 UNPACK_SEQUENCE          3
              4 STORE_DEREF              2 (NOT_CHECKED)
              6 STORE_DEREF              0 (CHECKING)
              8 STORE_DEREF              1 (COMPLETED)

  9          10 LOAD_GLOBAL              0 (bool)
             12 LOAD_CONST               2 (('return',))
             14 BUILD_CONST_KEY_MAP      1
             16 LOAD_CLOSURE             0 (CHECKING)
             18 LOAD_CLOSURE             1 (COMPLETED)
             20 LOAD_CLOSURE             3 (course_state)
             22 LOAD_CLOSURE             4 (has_deadlock)
             24 LOAD_CLOSURE             5 (requirement)
             26 BUILD_TUPLE              5
             28 LOAD_CONST               3 (<code object has_deadlock at 0x7f5bc7ba5240, file ""<ast>"", line 9>)
             30 LOAD_CONST               4 ('Solution.canFinish.<locals>.has_deadlock')
             32 MAKE_FUNCTION           12 (annotations, closure)
             34 STORE_DEREF              4 (has_deadlock)

 40          36 LOAD_GLOBAL              1 (collections)
             38 LOAD_METHOD              2 (defaultdict)
             40 LOAD_GLOBAL              3 (list)
             42 CALL_METHOD              1
             44 STORE_DEREF              5 (requirement)

 42          46 LOAD_FAST                2 (prerequisites)
             48 GET_ITER
        >>   50 FOR_ITER                22 (to 74)
             52 UNPACK_SEQUENCE          2
             54 STORE_FAST               3 (course)
             56 STORE_FAST               4 (pre_course)

 43          58 LOAD_DEREF               5 (requirement)
             60 LOAD_FAST                3 (course)
             62 BINARY_SUBSCR
             64 LOAD_METHOD              4 (append)
             66 LOAD_FAST                4 (pre_course)
             68 CALL_METHOD              1
             70 POP_TOP
             72 JUMP_ABSOLUTE           50

 48     >>   74 LOAD_CLOSURE             2 (NOT_CHECKED)
             76 BUILD_TUPLE              1
             78 LOAD_CONST               5 (<code object <listcomp> at 0x7f5bc7ba52f0, file ""<ast>"", line 48>)
             80 LOAD_CONST               6 ('Solution.canFinish.<locals>.<listcomp>')
             82 MAKE_FUNCTION            8 (closure)
             84 LOAD_GLOBAL              5 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
             92 CALL_FUNCTION            1
             94 STORE_DEREF              3 (course_state)

 51          96 LOAD_GLOBAL              5 (range)
             98 LOAD_CONST               7 (0)
            100 LOAD_FAST                1 (numCourses)
            102 CALL_FUNCTION            2
            104 GET_ITER
        >>  106 FOR_ITER                18 (to 126)
            108 STORE_FAST               5 (course_idx)

 53         110 LOAD_DEREF               4 (has_deadlock)
            112 LOAD_FAST                5 (course_idx)
            114 CALL_FUNCTION            1
            116 POP_JUMP_IF_FALSE      106

 55         118 POP_TOP
            120 LOAD_CONST               8 (False)
            122 RETURN_VALUE
            124 JUMP_ABSOLUTE          106

 58     >>  126 LOAD_CONST               9 (True)
            128 RETURN_VALUE

Disassembly of <code object has_deadlock at 0x7f5bc7ba5240, file ""<ast>"", line 9>:
 11           0 LOAD_DEREF               2 (course_state)
              2 LOAD_FAST                0 (course)
              4 BINARY_SUBSCR
              6 LOAD_DEREF               0 (CHECKING)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 13          12 LOAD_CONST               1 (True)
             14 RETURN_VALUE

 15     >>   16 LOAD_DEREF               2 (course_state)
             18 LOAD_FAST                0 (course)
             20 BINARY_SUBSCR
             22 LOAD_DEREF               1 (COMPLETED)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 17          28 LOAD_CONST               2 (False)
             30 RETURN_VALUE

 22     >>   32 LOAD_DEREF               0 (CHECKING)
             34 LOAD_DEREF               2 (course_state)
             36 LOAD_FAST                0 (course)
             38 STORE_SUBSCR

 25          40 LOAD_DEREF               4 (requirement)
             42 LOAD_FAST                0 (course)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                18 (to 68)
             50 STORE_FAST               1 (pre_course)

 27          52 LOAD_DEREF               3 (has_deadlock)
             54 LOAD_FAST                1 (pre_course)
             56 CALL_FUNCTION            1
             58 POP_JUMP_IF_FALSE       48

 29          60 POP_TOP
             62 LOAD_CONST               1 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           48

 33     >>   68 LOAD_DEREF               1 (COMPLETED)
             70 LOAD_DEREF               2 (course_state)
             72 LOAD_FAST                0 (course)
             74 STORE_SUBSCR

 35          76 LOAD_CONST               2 (False)
             78 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f5bc7ba52f0, file ""<ast>"", line 48>:
 48           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_DEREF               0 (NOT_CHECKED)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
fib,"from scipy import constants as c

class Solution:
    def fib(self, N: int) -> int:
        return int((c.golden ** N + 1) / 5 ** 0.5)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('constants',))
              4 IMPORT_NAME              0 (scipy)
              6 IMPORT_FROM              1 (constants)
              8 STORE_NAME               2 (c)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7ff6fe8153a0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               3 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff6fe8153a0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7ff6fe8152f0, file ""<ast>"", line 4>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7ff6fe8152f0, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (c)
              4 LOAD_ATTR                2 (golden)
              6 LOAD_FAST                1 (N)
              8 BINARY_POWER
             10 LOAD_CONST               1 (1)
             12 BINARY_ADD
             14 LOAD_CONST               2 (2.23606797749979)
             16 BINARY_TRUE_DIVIDE
             18 CALL_FUNCTION            1
             20 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        dp_0,dp_1 = 0,1
        for i in range(N):
            dp_0,dp_1 = dp_1,dp_1+dp_0
        return dp_0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f87b8aa52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f87b8aa52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f87b8aa5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f87b8aa5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               2 (dp_0)
              6 STORE_FAST               3 (dp_1)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_FAST                1 (N)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                18 (to 36)
             18 STORE_FAST               4 (i)

  5          20 LOAD_FAST                3 (dp_1)
             22 LOAD_FAST                3 (dp_1)
             24 LOAD_FAST                2 (dp_0)
             26 BINARY_ADD
             28 ROT_TWO
             30 STORE_FAST               2 (dp_0)
             32 STORE_FAST               3 (dp_1)
             34 JUMP_ABSOLUTE           16

  6     >>   36 LOAD_FAST                2 (dp_0)
             38 RETURN_VALUE
None
"
fib,"class Solution:
    # @functools.lru_cache(maxsize=10 ** 6)
    def fib(self, N: int) -> int:  
        if N < 2:
            return N

        return self.fib(N - 1) + self.fib(N - 2)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f02585852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f02585852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f0258585240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f0258585240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              0 (fib)
             16 LOAD_FAST                1 (N)
             18 LOAD_CONST               2 (1)
             20 BINARY_SUBTRACT
             22 CALL_METHOD              1
             24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              0 (fib)
             28 LOAD_FAST                1 (N)
             30 LOAD_CONST               1 (2)
             32 BINARY_SUBTRACT
             34 CALL_METHOD              1
             36 BINARY_ADD
             38 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		def dfs(n):
			if n not in memo: memo[n] = dfs(n-1)+dfs(n-2)            
			return memo[n]
			
		memo = {0:0, 1:1}
		return dfs(N)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f770cae5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f770cae5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f770cae53a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f770cae53a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (dfs)
              2 LOAD_CLOSURE             1 (memo)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object dfs at 0x7f770cae52f0, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.fib.<locals>.dfs')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (dfs)

  7          14 LOAD_CONST               3 (0)
             16 LOAD_CONST               4 (1)
             18 LOAD_CONST               5 ((0, 1))
             20 BUILD_CONST_KEY_MAP      2
             22 STORE_DEREF              1 (memo)

  8          24 LOAD_DEREF               0 (dfs)
             26 LOAD_FAST                1 (N)
             28 CALL_FUNCTION            1
             30 RETURN_VALUE

Disassembly of <code object dfs at 0x7f770cae52f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (n)
              2 LOAD_DEREF               1 (memo)
              4 COMPARE_OP               7 (not in)
              6 POP_JUMP_IF_FALSE       36
              8 LOAD_DEREF               0 (dfs)
             10 LOAD_FAST                0 (n)
             12 LOAD_CONST               1 (1)
             14 BINARY_SUBTRACT
             16 CALL_FUNCTION            1
             18 LOAD_DEREF               0 (dfs)
             20 LOAD_FAST                0 (n)
             22 LOAD_CONST               2 (2)
             24 BINARY_SUBTRACT
             26 CALL_FUNCTION            1
             28 BINARY_ADD
             30 LOAD_DEREF               1 (memo)
             32 LOAD_FAST                0 (n)
             34 STORE_SUBSCR

  5     >>   36 LOAD_DEREF               1 (memo)
             38 LOAD_FAST                0 (n)
             40 BINARY_SUBSCR
             42 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:        
		dp = [0, 1]+[0]*(N-1)
		for i in range(2, N+1):
			dp[i] = dp[i-1]+dp[i-2]
		return dp[N]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f92853d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f92853d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f92853d5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f92853d5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 LOAD_CONST               1 (0)
              8 BUILD_LIST               1
             10 LOAD_FAST                1 (N)
             12 LOAD_CONST               2 (1)
             14 BINARY_SUBTRACT
             16 BINARY_MULTIPLY
             18 BINARY_ADD
             20 STORE_FAST               2 (dp)

  4          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               3 (2)
             26 LOAD_FAST                1 (N)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                32 (to 70)
             38 STORE_FAST               3 (i)

  5          40 LOAD_FAST                2 (dp)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               2 (1)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (dp)
             52 LOAD_FAST                3 (i)
             54 LOAD_CONST               3 (2)
             56 BINARY_SUBTRACT
             58 BINARY_SUBSCR
             60 BINARY_ADD
             62 LOAD_FAST                2 (dp)
             64 LOAD_FAST                3 (i)
             66 STORE_SUBSCR
             68 JUMP_ABSOLUTE           36

  6     >>   70 LOAD_FAST                2 (dp)
             72 LOAD_FAST                1 (N)
             74 BINARY_SUBSCR
             76 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		if N < 2: return N
		a, b = 0, 1
		for _ in range(N-1):
			c = a+b
			a, b = b, c
		return c
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd127ab52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd127ab52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fd127ab5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fd127ab5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               2 ((0, 1))
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               2 (a)
             18 STORE_FAST               3 (b)

  5          20 LOAD_GLOBAL              0 (range)
             22 LOAD_FAST                1 (N)
             24 LOAD_CONST               3 (1)
             26 BINARY_SUBTRACT
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                22 (to 56)
             34 STORE_FAST               4 (_)

  6          36 LOAD_FAST                2 (a)
             38 LOAD_FAST                3 (b)
             40 BINARY_ADD
             42 STORE_FAST               5 (c)

  7          44 LOAD_FAST                3 (b)
             46 LOAD_FAST                5 (c)
             48 ROT_TWO
             50 STORE_FAST               2 (a)
             52 STORE_FAST               3 (b)
             54 JUMP_ABSOLUTE           32

  8     >>   56 LOAD_FAST                5 (c)
             58 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, n: int) -> int:
		# initializing table with hard-coded base values
        table = [0,1,1]

        if n > 2:  # series until 2 is already in table, we needn't calculate again
			# we iterate until the nth term is reached (added an offset of 2 since first two are already in table)
            for i in range(n-2): 
                table.append(table[-1] + table[-2])
        
		# return required nth term,
		# table[-1] would have worked except for n < 2, since our table is initialized until 2nd term.
        return table[n] 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f09aeaa52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f09aeaa52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f09aeaa5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f09aeaa5240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 LOAD_CONST               2 (1)
              6 BUILD_LIST               3
              8 STORE_FAST               2 (table)

  6          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               3 (2)
             14 COMPARE_OP               4 (>)
             16 POP_JUMP_IF_FALSE       58

  8          18 LOAD_GLOBAL              0 (range)
             20 LOAD_FAST                1 (n)
             22 LOAD_CONST               3 (2)
             24 BINARY_SUBTRACT
             26 CALL_FUNCTION            1
             28 GET_ITER
        >>   30 FOR_ITER                26 (to 58)
             32 STORE_FAST               3 (i)

  9          34 LOAD_FAST                2 (table)
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                2 (table)
             40 LOAD_CONST               4 (-1)
             42 BINARY_SUBSCR
             44 LOAD_FAST                2 (table)
             46 LOAD_CONST               5 (-2)
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           30

 13     >>   58 LOAD_FAST                2 (table)
             60 LOAD_FAST                1 (n)
             62 BINARY_SUBSCR
             64 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        curr = 1
        prev = 0

        if N == 0:
            return prev
        elif N==1:
            return curr
        else:
            for i in range(N-1):
                prev, curr = curr, curr+prev

        return curr
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1697de52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1697de52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f1697de5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f1697de5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (curr)

  4           4 LOAD_CONST               2 (0)
              6 STORE_FAST               3 (prev)

  6           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  7          16 LOAD_FAST                3 (prev)
             18 RETURN_VALUE

  8     >>   20 LOAD_FAST                1 (N)
             22 LOAD_CONST               1 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

  9          28 LOAD_FAST                2 (curr)
             30 RETURN_VALUE

 11     >>   32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (N)
             36 LOAD_CONST               1 (1)
             38 BINARY_SUBTRACT
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                18 (to 64)
             46 STORE_FAST               4 (i)

 12          48 LOAD_FAST                2 (curr)
             50 LOAD_FAST                2 (curr)
             52 LOAD_FAST                3 (prev)
             54 BINARY_ADD
             56 ROT_TWO
             58 STORE_FAST               3 (prev)
             60 STORE_FAST               2 (curr)
             62 JUMP_ABSOLUTE           44

 14     >>   64 LOAD_FAST                2 (curr)
             66 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N < 2:
            return N
        
        p1 = 1
        p2 = 1
        
        for i in range(2, N):
            temp = p1
            p1 += p2
            p2 = temp
            
        return p1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f06612552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f06612552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f0661255240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f0661255240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (1)
             14 STORE_FAST               2 (p1)

  7          16 LOAD_CONST               2 (1)
             18 STORE_FAST               3 (p2)

  9          20 LOAD_GLOBAL              0 (range)
             22 LOAD_CONST               1 (2)
             24 LOAD_FAST                1 (N)
             26 CALL_FUNCTION            2
             28 GET_ITER
        >>   30 FOR_ITER                20 (to 52)
             32 STORE_FAST               4 (i)

 10          34 LOAD_FAST                2 (p1)
             36 STORE_FAST               5 (temp)

 11          38 LOAD_FAST                2 (p1)
             40 LOAD_FAST                3 (p2)
             42 INPLACE_ADD
             44 STORE_FAST               2 (p1)

 12          46 LOAD_FAST                5 (temp)
             48 STORE_FAST               3 (p2)
             50 JUMP_ABSOLUTE           30

 14     >>   52 LOAD_FAST                2 (p1)
             54 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:      
        def dp(n):
            if memo[n] != None:
                return memo[n]
            memo[n] = 0 if n==0 else 1 if n == 1 else dp(n-1) + dp(n-2)
            return memo[n]  
        
        memo = [None] * (N+1)
        return dp(N)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdf694553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdf694553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fdf694552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fdf694552f0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (dp)
              2 LOAD_CLOSURE             1 (memo)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object dp at 0x7fdf69455240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.fib.<locals>.dp')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (dp)

  9          14 LOAD_CONST               0 (None)
             16 BUILD_LIST               1
             18 LOAD_FAST                1 (N)
             20 LOAD_CONST               3 (1)
             22 BINARY_ADD
             24 BINARY_MULTIPLY
             26 STORE_DEREF              1 (memo)

 10          28 LOAD_DEREF               0 (dp)
             30 LOAD_FAST                1 (N)
             32 CALL_FUNCTION            1
             34 RETURN_VALUE

Disassembly of <code object dp at 0x7fdf69455240, file ""<ast>"", line 3>:
  4           0 LOAD_DEREF               1 (memo)
              2 LOAD_FAST                0 (n)
              4 BINARY_SUBSCR
              6 LOAD_CONST               0 (None)
              8 COMPARE_OP               3 (!=)
             10 POP_JUMP_IF_FALSE       20

  5          12 LOAD_DEREF               1 (memo)
             14 LOAD_FAST                0 (n)
             16 BINARY_SUBSCR
             18 RETURN_VALUE

  6     >>   20 LOAD_FAST                0 (n)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               1 (0)
             30 JUMP_FORWARD            34 (to 66)
        >>   32 LOAD_FAST                0 (n)
             34 LOAD_CONST               2 (1)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       44
             40 LOAD_CONST               2 (1)
             42 JUMP_FORWARD            22 (to 66)
        >>   44 LOAD_DEREF               0 (dp)
             46 LOAD_FAST                0 (n)
             48 LOAD_CONST               2 (1)
             50 BINARY_SUBTRACT
             52 CALL_FUNCTION            1
             54 LOAD_DEREF               0 (dp)
             56 LOAD_FAST                0 (n)
             58 LOAD_CONST               3 (2)
             60 BINARY_SUBTRACT
             62 CALL_FUNCTION            1
             64 BINARY_ADD
        >>   66 LOAD_DEREF               1 (memo)
             68 LOAD_FAST                0 (n)
             70 STORE_SUBSCR

  7          72 LOAD_DEREF               1 (memo)
             74 LOAD_FAST                0 (n)
             76 BINARY_SUBSCR
             78 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        a,b = 0 ,1
        n = 2
#special case is when N is 0 or 1:
        if N ==0:
            return 0
        if N ==1:
            return 1
#run while loop to do the math
        while n<=N:
            rst = a + b
            a,b = b , a+b
            n +=1
        return(rst)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0f3f0852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0f3f0852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f0f3f085240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f0f3f085240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               2 (a)
              6 STORE_FAST               3 (b)

  4           8 LOAD_CONST               2 (2)
             10 STORE_FAST               4 (n)

  6          12 LOAD_FAST                1 (N)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  7          20 LOAD_CONST               3 (0)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               4 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  9          32 LOAD_CONST               4 (1)
             34 RETURN_VALUE

 11     >>   36 LOAD_FAST                4 (n)
             38 LOAD_FAST                1 (N)
             40 COMPARE_OP               1 (<=)
             42 POP_JUMP_IF_FALSE       76

 12          44 LOAD_FAST                2 (a)
             46 LOAD_FAST                3 (b)
             48 BINARY_ADD
             50 STORE_FAST               5 (rst)

 13          52 LOAD_FAST                3 (b)
             54 LOAD_FAST                2 (a)
             56 LOAD_FAST                3 (b)
             58 BINARY_ADD
             60 ROT_TWO
             62 STORE_FAST               2 (a)
             64 STORE_FAST               3 (b)

 14          66 LOAD_FAST                4 (n)
             68 LOAD_CONST               4 (1)
             70 INPLACE_ADD
             72 STORE_FAST               4 (n)
             74 JUMP_ABSOLUTE           36

 15     >>   76 LOAD_FAST                5 (rst)
             78 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        res = [0,1]
        if N == 0:
            return res[0]
        elif N==1:
            return res[1]
        for i in range(2,N+1):
            res.append(res[-1] + res[-2])            
        return res[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa1d89452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa1d89452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fa1d8945240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fa1d8945240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (res)

  4           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       24

  5          16 LOAD_FAST                2 (res)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

  6     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       40

  7          32 LOAD_FAST                2 (res)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBSCR
             38 RETURN_VALUE

  8     >>   40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               3 (2)
             44 LOAD_FAST                1 (N)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                26 (to 82)
             56 STORE_FAST               3 (i)

  9          58 LOAD_FAST                2 (res)
             60 LOAD_METHOD              1 (append)
             62 LOAD_FAST                2 (res)
             64 LOAD_CONST               4 (-1)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (res)
             70 LOAD_CONST               5 (-2)
             72 BINARY_SUBSCR
             74 BINARY_ADD
             76 CALL_METHOD              1
             78 POP_TOP
             80 JUMP_ABSOLUTE           54

 10     >>   82 LOAD_FAST                2 (res)
             84 LOAD_CONST               4 (-1)
             86 BINARY_SUBSCR
             88 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N == 0:
            return 0
        elif N == 1:
            return 1
        else:
            fibs = [0, 1]
            for number in range(N-1):
                fibs.append(fibs[-1] + fibs[-2])
            return fibs[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f74e11052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f74e11052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f74e1105240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f74e1105240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               2 (1)
             22 RETURN_VALUE

  8     >>   24 LOAD_CONST               1 (0)
             26 LOAD_CONST               2 (1)
             28 BUILD_LIST               2
             30 STORE_FAST               2 (fibs)

  9          32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (N)
             36 LOAD_CONST               2 (1)
             38 BINARY_SUBTRACT
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                26 (to 72)
             46 STORE_FAST               3 (number)

 10          48 LOAD_FAST                2 (fibs)
             50 LOAD_METHOD              1 (append)
             52 LOAD_FAST                2 (fibs)
             54 LOAD_CONST               3 (-1)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (fibs)
             60 LOAD_CONST               4 (-2)
             62 BINARY_SUBSCR
             64 BINARY_ADD
             66 CALL_METHOD              1
             68 POP_TOP
             70 JUMP_ABSOLUTE           44

 11     >>   72 LOAD_FAST                2 (fibs)
             74 LOAD_CONST               3 (-1)
             76 BINARY_SUBSCR
             78 RETURN_VALUE
             80 LOAD_CONST               0 (None)
             82 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N == 0:
            return 0
        if N == 1:
            return 1

        if N > 1:
            return self.fib(N - 1) + self.fib(N - 2)

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1e5b3b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1e5b3b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f1e5b3b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f1e5b3b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               2 (1)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       60

  9          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              0 (fib)
             36 LOAD_FAST                1 (N)
             38 LOAD_CONST               2 (1)
             40 BINARY_SUBTRACT
             42 CALL_METHOD              1
             44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              0 (fib)
             48 LOAD_FAST                1 (N)
             50 LOAD_CONST               3 (2)
             52 BINARY_SUBTRACT
             54 CALL_METHOD              1
             56 BINARY_ADD
             58 RETURN_VALUE
        >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        f = [0, 1]
        if N == 0:
            return f[0]
        elif N == 1:
            return f[1]
        else:
            for i in range(2, N + 1):
                f.append(f[i-2] + f[i-1])

        return f[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff873455240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff873455240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7ff8734552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7ff8734552f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (f)

  4           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       24

  5          16 LOAD_FAST                2 (f)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

  6     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       40

  7          32 LOAD_FAST                2 (f)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBSCR
             38 RETURN_VALUE

  9     >>   40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               3 (2)
             44 LOAD_FAST                1 (N)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                34 (to 90)
             56 STORE_FAST               3 (i)

 10          58 LOAD_FAST                2 (f)
             60 LOAD_METHOD              1 (append)
             62 LOAD_FAST                2 (f)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               3 (2)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (f)
             74 LOAD_FAST                3 (i)
             76 LOAD_CONST               2 (1)
             78 BINARY_SUBTRACT
             80 BINARY_SUBSCR
             82 BINARY_ADD
             84 CALL_METHOD              1
             86 POP_TOP
             88 JUMP_ABSOLUTE           54

 12     >>   90 LOAD_FAST                2 (f)
             92 LOAD_CONST               4 (-1)
             94 BINARY_SUBSCR
             96 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        f = (0, 1)
        if N == 0:
            return f[0]
        elif N == 1:
            return f[1]
        else:
            for _ in range(2, N + 1):
                f += (f[-2] + f[-1],)

        return f[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5e663f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5e663f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f5e663f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f5e663f5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 STORE_FAST               2 (f)

  4           4 LOAD_FAST                1 (N)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       20

  5          12 LOAD_FAST                2 (f)
             14 LOAD_CONST               2 (0)
             16 BINARY_SUBSCR
             18 RETURN_VALUE

  6     >>   20 LOAD_FAST                1 (N)
             22 LOAD_CONST               3 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       36

  7          28 LOAD_FAST                2 (f)
             30 LOAD_CONST               3 (1)
             32 BINARY_SUBSCR
             34 RETURN_VALUE

  9     >>   36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               4 (2)
             40 LOAD_FAST                1 (N)
             42 LOAD_CONST               3 (1)
             44 BINARY_ADD
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                26 (to 78)
             52 STORE_FAST               3 (_)

 10          54 LOAD_FAST                2 (f)
             56 LOAD_FAST                2 (f)
             58 LOAD_CONST               5 (-2)
             60 BINARY_SUBSCR
             62 LOAD_FAST                2 (f)
             64 LOAD_CONST               6 (-1)
             66 BINARY_SUBSCR
             68 BINARY_ADD
             70 BUILD_TUPLE              1
             72 INPLACE_ADD
             74 STORE_FAST               2 (f)
             76 JUMP_ABSOLUTE           50

 12     >>   78 LOAD_FAST                2 (f)
             80 LOAD_CONST               6 (-1)
             82 BINARY_SUBSCR
             84 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, n: int) -> int:
        
        def get_mat_mult(mat, other_mat):
            res = [[0 for _ in range(len(mat[0]))] for _ in range(len(mat))]
            for i in range(len(mat)):
                for j in range(len(mat[i])):
                    for k in range(len(other_mat[i])):
                        res[i][j] += mat[i][k] * other_mat[k][j]
            return res
        
        if n == 0 or n == 1:
            return n
        
        final_mat = [[1,0],[0,1]]
        start_mat = [[1,1], [1,0]]
        n -= 1
        while(n):
            if (n & 1):
                final_mat = get_mat_mult(start_mat, final_mat)
            start_mat = get_mat_mult(start_mat, start_mat) 
            n >>= 1
        return final_mat[0][0]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f669da953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f669da953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f669da955b0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f669da955b0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object get_mat_mult at 0x7f669da95500, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.fib.<locals>.get_mat_mult')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (get_mat_mult)

 12           8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_TRUE        24
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               4 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

 13     >>   24 LOAD_FAST                1 (n)
             26 RETURN_VALUE

 15     >>   28 LOAD_CONST               4 (1)
             30 LOAD_CONST               3 (0)
             32 BUILD_LIST               2
             34 LOAD_CONST               3 (0)
             36 LOAD_CONST               4 (1)
             38 BUILD_LIST               2
             40 BUILD_LIST               2
             42 STORE_FAST               3 (final_mat)

 16          44 LOAD_CONST               4 (1)
             46 LOAD_CONST               4 (1)
             48 BUILD_LIST               2
             50 LOAD_CONST               4 (1)
             52 LOAD_CONST               3 (0)
             54 BUILD_LIST               2
             56 BUILD_LIST               2
             58 STORE_FAST               4 (start_mat)

 17          60 LOAD_FAST                1 (n)
             62 LOAD_CONST               4 (1)
             64 INPLACE_SUBTRACT
             66 STORE_FAST               1 (n)

 18     >>   68 LOAD_FAST                1 (n)
             70 POP_JUMP_IF_FALSE      110

 19          72 LOAD_FAST                1 (n)
             74 LOAD_CONST               4 (1)
             76 BINARY_AND
             78 POP_JUMP_IF_FALSE       90

 20          80 LOAD_FAST                2 (get_mat_mult)
             82 LOAD_FAST                4 (start_mat)
             84 LOAD_FAST                3 (final_mat)
             86 CALL_FUNCTION            2
             88 STORE_FAST               3 (final_mat)

 21     >>   90 LOAD_FAST                2 (get_mat_mult)
             92 LOAD_FAST                4 (start_mat)
             94 LOAD_FAST                4 (start_mat)
             96 CALL_FUNCTION            2
             98 STORE_FAST               4 (start_mat)

 22         100 LOAD_FAST                1 (n)
            102 LOAD_CONST               4 (1)
            104 INPLACE_RSHIFT
            106 STORE_FAST               1 (n)
            108 JUMP_ABSOLUTE           68

 23     >>  110 LOAD_FAST                3 (final_mat)
            112 LOAD_CONST               3 (0)
            114 BINARY_SUBSCR
            116 LOAD_CONST               3 (0)
            118 BINARY_SUBSCR
            120 RETURN_VALUE

Disassembly of <code object get_mat_mult at 0x7f669da95500, file ""<ast>"", line 4>:
  5           0 LOAD_CLOSURE             0 (mat)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object <listcomp> at 0x7f669da952f0, file ""<ast>"", line 5>)
              6 LOAD_CONST               2 ('Solution.fib.<locals>.get_mat_mult.<locals>.<listcomp>')
              8 MAKE_FUNCTION            8 (closure)
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_DEREF               0 (mat)
             16 CALL_FUNCTION            1
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (res)

  6          26 LOAD_GLOBAL              0 (range)
             28 LOAD_GLOBAL              1 (len)
             30 LOAD_DEREF               0 (mat)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            1
             36 GET_ITER
        >>   38 FOR_ITER                88 (to 128)
             40 STORE_FAST               3 (i)

  7          42 LOAD_GLOBAL              0 (range)
             44 LOAD_GLOBAL              1 (len)
             46 LOAD_DEREF               0 (mat)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                66 (to 126)
             60 STORE_FAST               4 (j)

  8          62 LOAD_GLOBAL              0 (range)
             64 LOAD_GLOBAL              1 (len)
             66 LOAD_FAST                1 (other_mat)
             68 LOAD_FAST                3 (i)
             70 BINARY_SUBSCR
             72 CALL_FUNCTION            1
             74 CALL_FUNCTION            1
             76 GET_ITER
        >>   78 FOR_ITER                44 (to 124)
             80 STORE_FAST               5 (k)

  9          82 LOAD_FAST                2 (res)
             84 LOAD_FAST                3 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (j)
             90 DUP_TOP_TWO
             92 BINARY_SUBSCR
             94 LOAD_DEREF               0 (mat)
             96 LOAD_FAST                3 (i)
             98 BINARY_SUBSCR
            100 LOAD_FAST                5 (k)
            102 BINARY_SUBSCR
            104 LOAD_FAST                1 (other_mat)
            106 LOAD_FAST                5 (k)
            108 BINARY_SUBSCR
            110 LOAD_FAST                4 (j)
            112 BINARY_SUBSCR
            114 BINARY_MULTIPLY
            116 INPLACE_ADD
            118 ROT_THREE
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           78
        >>  124 JUMP_ABSOLUTE           58
        >>  126 JUMP_ABSOLUTE           38

 10     >>  128 LOAD_FAST                2 (res)
            130 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f669da952f0, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                30 (to 36)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f669da95240, file ""<ast>"", line 5>)
             10 LOAD_CONST               1 ('Solution.fib.<locals>.get_mat_mult.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_GLOBAL              1 (len)
             18 LOAD_DEREF               0 (mat)
             20 LOAD_CONST               2 (0)
             22 BINARY_SUBSCR
             24 CALL_FUNCTION            1
             26 CALL_FUNCTION            1
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 LIST_APPEND              2
             34 JUMP_ABSOLUTE            4
        >>   36 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f669da95240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        memo = [0, 1]
        for i in range(2, N+1):
            memo.append(memo[i-1]+memo[i-2])
        return memo[N]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f46dc3a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f46dc3a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f46dc3a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f46dc3a5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (memo)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               3 (2)
             12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                34 (to 58)
             24 STORE_FAST               3 (i)

  5          26 LOAD_FAST                2 (memo)
             28 LOAD_METHOD              1 (append)
             30 LOAD_FAST                2 (memo)
             32 LOAD_FAST                3 (i)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 BINARY_SUBSCR
             40 LOAD_FAST                2 (memo)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (2)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           22

  6     >>   58 LOAD_FAST                2 (memo)
             60 LOAD_FAST                1 (N)
             62 BINARY_SUBSCR
             64 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        
        res = [0,1]
        c = 0
        
        if N == 0:
            return res[0]
        elif N==1:
            return res[1]
        
        for i in range(2,N+1):
            
            c = res[0] + res[1]
            
            res[0] = res[1]
            res[1] = c
            
        return res[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1d1e335240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1d1e335240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f1d1e3352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f1d1e3352f0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (res)

  5           8 LOAD_CONST               1 (0)
             10 STORE_FAST               3 (c)

  7          12 LOAD_FAST                1 (N)
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28

  8          20 LOAD_FAST                2 (res)
             22 LOAD_CONST               1 (0)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  9     >>   28 LOAD_FAST                1 (N)
             30 LOAD_CONST               2 (1)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       44

 10          36 LOAD_FAST                2 (res)
             38 LOAD_CONST               2 (1)
             40 BINARY_SUBSCR
             42 RETURN_VALUE

 12     >>   44 LOAD_GLOBAL              0 (range)
             46 LOAD_CONST               3 (2)
             48 LOAD_FAST                1 (N)
             50 LOAD_CONST               2 (1)
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 GET_ITER
        >>   58 FOR_ITER                40 (to 100)
             60 STORE_FAST               4 (i)

 14          62 LOAD_FAST                2 (res)
             64 LOAD_CONST               1 (0)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (res)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBSCR
             74 BINARY_ADD
             76 STORE_FAST               3 (c)

 16          78 LOAD_FAST                2 (res)
             80 LOAD_CONST               2 (1)
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (res)
             86 LOAD_CONST               1 (0)
             88 STORE_SUBSCR

 17          90 LOAD_FAST                3 (c)
             92 LOAD_FAST                2 (res)
             94 LOAD_CONST               2 (1)
             96 STORE_SUBSCR
             98 JUMP_ABSOLUTE           58

 19     >>  100 LOAD_FAST                2 (res)
            102 LOAD_CONST               4 (-1)
            104 BINARY_SUBSCR
            106 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        ## RC ##
        if(N == 0): return 0
        dp = [0,1] + [0] * (N-1)
        for i in range(2,N+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f33505052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f33505052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f3350505240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f3350505240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               1 (0)
             14 LOAD_CONST               2 (1)
             16 BUILD_LIST               2
             18 LOAD_CONST               1 (0)
             20 BUILD_LIST               1
             22 LOAD_FAST                1 (N)
             24 LOAD_CONST               2 (1)
             26 BINARY_SUBTRACT
             28 BINARY_MULTIPLY
             30 BINARY_ADD
             32 STORE_FAST               2 (dp)

  6          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               3 (2)
             38 LOAD_FAST                1 (N)
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                32 (to 82)
             50 STORE_FAST               3 (i)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 LOAD_CONST               2 (1)
             58 BINARY_SUBTRACT
             60 BINARY_SUBSCR
             62 LOAD_FAST                2 (dp)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               3 (2)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 BINARY_ADD
             74 LOAD_FAST                2 (dp)
             76 LOAD_FAST                3 (i)
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           48

  8     >>   82 LOAD_FAST                2 (dp)
             84 LOAD_CONST               4 (-1)
             86 BINARY_SUBSCR
             88 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        s = [0, 1]
        for i in range(2, N + 1):
            s.append(s[i - 1] + s[i - 2])
        return s[-1] if N > 0 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f45a2c252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f45a2c252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f45a2c25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f45a2c25240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (s)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               3 (2)
             12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                34 (to 58)
             24 STORE_FAST               3 (i)

  5          26 LOAD_FAST                2 (s)
             28 LOAD_METHOD              1 (append)
             30 LOAD_FAST                2 (s)
             32 LOAD_FAST                3 (i)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 BINARY_SUBSCR
             40 LOAD_FAST                2 (s)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (2)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           22

  6     >>   58 LOAD_FAST                1 (N)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               4 (>)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_FAST                2 (s)
             68 LOAD_CONST               4 (-1)
             70 BINARY_SUBSCR
             72 RETURN_VALUE
        >>   74 LOAD_CONST               1 (0)
             76 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		dic = {}
		dic[0], dic[1] = 0, 1
		for i in range(2, N+1):
			dic[i] = dic[i-1] + dic[i-2]
		return dic[N]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd3bd0c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd3bd0c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fd3bd0c5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fd3bd0c5240, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (dic)

  4           4 LOAD_CONST               1 ((0, 1))
              6 UNPACK_SEQUENCE          2
              8 LOAD_FAST                2 (dic)
             10 LOAD_CONST               2 (0)
             12 STORE_SUBSCR
             14 LOAD_FAST                2 (dic)
             16 LOAD_CONST               3 (1)
             18 STORE_SUBSCR

  5          20 LOAD_GLOBAL              0 (range)
             22 LOAD_CONST               4 (2)
             24 LOAD_FAST                1 (N)
             26 LOAD_CONST               3 (1)
             28 BINARY_ADD
             30 CALL_FUNCTION            2
             32 GET_ITER
        >>   34 FOR_ITER                32 (to 68)
             36 STORE_FAST               3 (i)

  6          38 LOAD_FAST                2 (dic)
             40 LOAD_FAST                3 (i)
             42 LOAD_CONST               3 (1)
             44 BINARY_SUBTRACT
             46 BINARY_SUBSCR
             48 LOAD_FAST                2 (dic)
             50 LOAD_FAST                3 (i)
             52 LOAD_CONST               4 (2)
             54 BINARY_SUBTRACT
             56 BINARY_SUBSCR
             58 BINARY_ADD
             60 LOAD_FAST                2 (dic)
             62 LOAD_FAST                3 (i)
             64 STORE_SUBSCR
             66 JUMP_ABSOLUTE           34

  7     >>   68 LOAD_FAST                2 (dic)
             70 LOAD_FAST                1 (N)
             72 BINARY_SUBSCR
             74 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f19daa25500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f19daa25500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f19daa25450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f19daa25450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        count ={}
		# +1 for s and -1 for t. If the char from s not in count then assign 1 and if the char from t not in count , then assign -1. 
        for i in range(len(s)):
            if s[i] in count:
                count[s[i]] +=1
            else:
                count[s[i]] =1
            if t[i] in count:
                count[t[i]] -=1
            else:
                count[t[i]] = -1
        
        for key,value in count.items():
            if value !=0:
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffca27d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffca27d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7ffca27d5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7ffca27d5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               3 (!=)
             14 POP_JUMP_IF_FALSE       20

  4          16 LOAD_CONST               1 (False)
             18 RETURN_VALUE

  5     >>   20 BUILD_MAP                0
             22 STORE_FAST               3 (count)

  7          24 LOAD_GLOBAL              1 (range)
             26 LOAD_GLOBAL              0 (len)
             28 LOAD_FAST                1 (s)
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                96 (to 134)
             38 STORE_FAST               4 (i)

  8          40 LOAD_FAST                1 (s)
             42 LOAD_FAST                4 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                3 (count)
             48 COMPARE_OP               6 (in)
             50 POP_JUMP_IF_FALSE       74

  9          52 LOAD_FAST                3 (count)
             54 LOAD_FAST                1 (s)
             56 LOAD_FAST                4 (i)
             58 BINARY_SUBSCR
             60 DUP_TOP_TWO
             62 BINARY_SUBSCR
             64 LOAD_CONST               2 (1)
             66 INPLACE_ADD
             68 ROT_THREE
             70 STORE_SUBSCR
             72 JUMP_FORWARD            12 (to 86)

 11     >>   74 LOAD_CONST               2 (1)
             76 LOAD_FAST                3 (count)
             78 LOAD_FAST                1 (s)
             80 LOAD_FAST                4 (i)
             82 BINARY_SUBSCR
             84 STORE_SUBSCR

 12     >>   86 LOAD_FAST                2 (t)
             88 LOAD_FAST                4 (i)
             90 BINARY_SUBSCR
             92 LOAD_FAST                3 (count)
             94 COMPARE_OP               6 (in)
             96 POP_JUMP_IF_FALSE      120

 13          98 LOAD_FAST                3 (count)
            100 LOAD_FAST                2 (t)
            102 LOAD_FAST                4 (i)
            104 BINARY_SUBSCR
            106 DUP_TOP_TWO
            108 BINARY_SUBSCR
            110 LOAD_CONST               2 (1)
            112 INPLACE_SUBTRACT
            114 ROT_THREE
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE           36

 15     >>  120 LOAD_CONST               3 (-1)
            122 LOAD_FAST                3 (count)
            124 LOAD_FAST                2 (t)
            126 LOAD_FAST                4 (i)
            128 BINARY_SUBSCR
            130 STORE_SUBSCR
            132 JUMP_ABSOLUTE           36

 17     >>  134 LOAD_FAST                3 (count)
            136 LOAD_METHOD              2 (items)
            138 CALL_METHOD              0
            140 GET_ITER
        >>  142 FOR_ITER                22 (to 166)
            144 UNPACK_SEQUENCE          2
            146 STORE_FAST               5 (key)
            148 STORE_FAST               6 (value)

 18         150 LOAD_FAST                6 (value)
            152 LOAD_CONST               4 (0)
            154 COMPARE_OP               3 (!=)
            156 POP_JUMP_IF_FALSE      142

 19         158 POP_TOP
            160 LOAD_CONST               1 (False)
            162 RETURN_VALUE
            164 JUMP_ABSOLUTE          142

 20     >>  166 LOAD_CONST               5 (True)
            168 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s, t):
		    return Counter(s)==Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f24e91555b0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24e91555b0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object isAnagram at 0x7f24e9155500, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f24e9155500, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
        def isAnagram(self, s: str, t: str) -> bool:
                return Counter(t)==Counter(s)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f56d7395500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f56d7395500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f56d7395450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f56d7395450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                2 (t)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                1 (s)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s)==Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f0dde325500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0dde325500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f0dde325450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f0dde325450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f9c106d5500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9c106d5500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f9c106d5450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f9c106d5450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s, t):
        dictionary = {}
        
        for i in s:
            if i in dictionary:
                dictionary[i] += 1
            else:
                dictionary[i] = 1

        for i in t:
            if i in dictionary:
                dictionary[i] -= 1
            else:
                return False

        for val in dictionary.values():
            if val != 0:
                return False
        
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc1233f5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc1233f5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isAnagram at 0x7fc1233f52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fc1233f52f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (dictionary)

  5           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  6          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (dictionary)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  7          20 LOAD_FAST                3 (dictionary)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

  9     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (dictionary)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

 11     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 STORE_FAST               4 (i)

 12          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (dictionary)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 13          64 LOAD_FAST                3 (dictionary)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 15     >>   82 POP_TOP
             84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           52

 17     >>   90 LOAD_FAST                3 (dictionary)
             92 LOAD_METHOD              0 (values)
             94 CALL_METHOD              0
             96 GET_ITER
        >>   98 FOR_ITER                18 (to 118)
            100 STORE_FAST               5 (val)

 18         102 LOAD_FAST                5 (val)
            104 LOAD_CONST               3 (0)
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       98

 19         110 POP_TOP
            112 LOAD_CONST               2 (False)
            114 RETURN_VALUE
            116 JUMP_ABSOLUTE           98

 21     >>  118 LOAD_CONST               4 (True)
            120 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        dicts = {}
        
        for i in s:
            if i in dicts:
                dicts[i] += 1
            else:
                dicts[i] = 1
        
        for i in t:
            if i in dicts:
                dicts[i] -= 1
            else:
                return False
        
        for value in dicts.values():
            if value != 0:
                return False
        
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0c91905240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0c91905240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f0c919052f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f0c919052f0, file ""<ast>"", line 2>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               3 (dicts)

  6           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  7          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (dicts)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  8          20 LOAD_FAST                3 (dicts)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

 10     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (dicts)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

 12     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 STORE_FAST               4 (i)

 13          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (dicts)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 14          64 LOAD_FAST                3 (dicts)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 16     >>   82 POP_TOP
             84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           52

 18     >>   90 LOAD_FAST                3 (dicts)
             92 LOAD_METHOD              0 (values)
             94 CALL_METHOD              0
             96 GET_ITER
        >>   98 FOR_ITER                18 (to 118)
            100 STORE_FAST               5 (value)

 19         102 LOAD_FAST                5 (value)
            104 LOAD_CONST               3 (0)
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       98

 20         110 POP_TOP
            112 LOAD_CONST               2 (False)
            114 RETURN_VALUE
            116 JUMP_ABSOLUTE           98

 22     >>  118 LOAD_CONST               4 (True)
            120 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        dic_s, dic_t = {}, {}
        for letter in s:
            if letter not in dic_s:
                dic_s[letter] = 1
            else:
                dic_s[letter] += 1
        for letter in t:
            if letter not in dic_t:
                dic_t[letter] = 1
            else:
                dic_t[letter] += 1
        return dic_t == dic_s
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f95a8c35240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f95a8c35240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f95a8c352f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f95a8c352f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 BUILD_MAP                0
              4 ROT_TWO
              6 STORE_FAST               3 (dic_s)
              8 STORE_FAST               4 (dic_t)

  4          10 LOAD_FAST                1 (s)
             12 GET_ITER
        >>   14 FOR_ITER                38 (to 54)
             16 STORE_FAST               5 (letter)

  5          18 LOAD_FAST                5 (letter)
             20 LOAD_FAST                3 (dic_s)
             22 COMPARE_OP               7 (not in)
             24 POP_JUMP_IF_FALSE       36

  6          26 LOAD_CONST               1 (1)
             28 LOAD_FAST                3 (dic_s)
             30 LOAD_FAST                5 (letter)
             32 STORE_SUBSCR
             34 JUMP_ABSOLUTE           14

  8     >>   36 LOAD_FAST                3 (dic_s)
             38 LOAD_FAST                5 (letter)
             40 DUP_TOP_TWO
             42 BINARY_SUBSCR
             44 LOAD_CONST               1 (1)
             46 INPLACE_ADD
             48 ROT_THREE
             50 STORE_SUBSCR
             52 JUMP_ABSOLUTE           14

  9     >>   54 LOAD_FAST                2 (t)
             56 GET_ITER
        >>   58 FOR_ITER                38 (to 98)
             60 STORE_FAST               5 (letter)

 10          62 LOAD_FAST                5 (letter)
             64 LOAD_FAST                4 (dic_t)
             66 COMPARE_OP               7 (not in)
             68 POP_JUMP_IF_FALSE       80

 11          70 LOAD_CONST               1 (1)
             72 LOAD_FAST                4 (dic_t)
             74 LOAD_FAST                5 (letter)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           58

 13     >>   80 LOAD_FAST                4 (dic_t)
             82 LOAD_FAST                5 (letter)
             84 DUP_TOP_TWO
             86 BINARY_SUBSCR
             88 LOAD_CONST               1 (1)
             90 INPLACE_ADD
             92 ROT_THREE
             94 STORE_SUBSCR
             96 JUMP_ABSOLUTE           58

 14     >>   98 LOAD_FAST                4 (dic_t)
            100 LOAD_FAST                3 (dic_s)
            102 COMPARE_OP               2 (==)
            104 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        # convert strings to lists
        s_list = []
        t_list = []
        
        for item in s:
            s_list.append(item)
            
        for item in t:
            t_list.append(item)
            
        # loop through items in list
        for item in s_list:
            
            # if it is in the other list, remove that item
            if item in t_list:
                
                t_list.remove(item)

            # if it is not in the other list, then return false
            else:
                return False
            
        # if the other list is empty
        if not t_list:

            return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd4bb7b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd4bb7b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fd4bb7b5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fd4bb7b5240, file ""<ast>"", line 2>:
  5           0 BUILD_LIST               0
              2 STORE_FAST               3 (s_list)

  6           4 BUILD_LIST               0
              6 STORE_FAST               4 (t_list)

  8           8 LOAD_FAST                1 (s)
             10 GET_ITER
        >>   12 FOR_ITER                14 (to 28)
             14 STORE_FAST               5 (item)

  9          16 LOAD_FAST                3 (s_list)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                5 (item)
             22 CALL_METHOD              1
             24 POP_TOP
             26 JUMP_ABSOLUTE           12

 11     >>   28 LOAD_FAST                2 (t)
             30 GET_ITER
        >>   32 FOR_ITER                14 (to 48)
             34 STORE_FAST               5 (item)

 12          36 LOAD_FAST                4 (t_list)
             38 LOAD_METHOD              0 (append)
             40 LOAD_FAST                5 (item)
             42 CALL_METHOD              1
             44 POP_TOP
             46 JUMP_ABSOLUTE           32

 15     >>   48 LOAD_FAST                3 (s_list)
             50 GET_ITER
        >>   52 FOR_ITER                30 (to 84)
             54 STORE_FAST               5 (item)

 18          56 LOAD_FAST                5 (item)
             58 LOAD_FAST                4 (t_list)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       76

 20          64 LOAD_FAST                4 (t_list)
             66 LOAD_METHOD              1 (remove)
             68 LOAD_FAST                5 (item)
             70 CALL_METHOD              1
             72 POP_TOP
             74 JUMP_ABSOLUTE           52

 24     >>   76 POP_TOP
             78 LOAD_CONST               1 (False)
             80 RETURN_VALUE
             82 JUMP_ABSOLUTE           52

 27     >>   84 LOAD_FAST                4 (t_list)
             86 POP_JUMP_IF_TRUE        92

 29          88 LOAD_CONST               2 (True)
             90 RETURN_VALUE
        >>   92 LOAD_CONST               0 (None)
             94 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s, t):
        return Counter(s) == Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fd30a8655b0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd30a8655b0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object isAnagram at 0x7fd30a865500, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fd30a865500, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
      char_count = {}
      for char in s: char_count[char] = char_count.get(char, 0) + 1
      for char in t: char_count[char] = char_count.get(char, 0) - 1
      return False not in [char_count[char] == 0 for char in char_count]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff2d22053a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2d22053a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7ff2d22052f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7ff2d22052f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_DEREF              0 (char_count)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                24 (to 34)
             10 STORE_FAST               3 (char)
             12 LOAD_DEREF               0 (char_count)
             14 LOAD_METHOD              0 (get)
             16 LOAD_FAST                3 (char)
             18 LOAD_CONST               1 (0)
             20 CALL_METHOD              2
             22 LOAD_CONST               2 (1)
             24 BINARY_ADD
             26 LOAD_DEREF               0 (char_count)
             28 LOAD_FAST                3 (char)
             30 STORE_SUBSCR
             32 JUMP_ABSOLUTE            8

  5     >>   34 LOAD_FAST                2 (t)
             36 GET_ITER
        >>   38 FOR_ITER                24 (to 64)
             40 STORE_FAST               3 (char)
             42 LOAD_DEREF               0 (char_count)
             44 LOAD_METHOD              0 (get)
             46 LOAD_FAST                3 (char)
             48 LOAD_CONST               1 (0)
             50 CALL_METHOD              2
             52 LOAD_CONST               2 (1)
             54 BINARY_SUBTRACT
             56 LOAD_DEREF               0 (char_count)
             58 LOAD_FAST                3 (char)
             60 STORE_SUBSCR
             62 JUMP_ABSOLUTE           38

  6     >>   64 LOAD_CONST               3 (False)
             66 LOAD_CLOSURE             0 (char_count)
             68 BUILD_TUPLE              1
             70 LOAD_CONST               4 (<code object <listcomp> at 0x7ff2d2205240, file ""<ast>"", line 6>)
             72 LOAD_CONST               5 ('Solution.isAnagram.<locals>.<listcomp>')
             74 MAKE_FUNCTION            8 (closure)
             76 LOAD_DEREF               0 (char_count)
             78 GET_ITER
             80 CALL_FUNCTION            1
             82 COMPARE_OP               7 (not in)
             84 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff2d2205240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (char)
              8 LOAD_DEREF               0 (char_count)
             10 LOAD_FAST                1 (char)
             12 BINARY_SUBSCR
             14 LOAD_CONST               0 (0)
             16 COMPARE_OP               2 (==)
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        >>   22 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        count={}
        for i in s:
            if i in count:
                count[i] +=1
            else:
                count[i]=1
        for i in t:
            if i in count:
                count[i] -=1
            else:
                count[i]=1
        for k in count:
            if count[k]!=0:
                return False
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4bac745240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4bac745240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f4bac7452f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f4bac7452f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (count)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  5          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (count)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  6          20 LOAD_FAST                3 (count)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

  8     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (count)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

  9     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                38 (to 92)
             54 STORE_FAST               4 (i)

 10          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (count)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 11          64 LOAD_FAST                3 (count)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 13     >>   82 LOAD_CONST               1 (1)
             84 LOAD_FAST                3 (count)
             86 LOAD_FAST                4 (i)
             88 STORE_SUBSCR
             90 JUMP_ABSOLUTE           52

 14     >>   92 LOAD_FAST                3 (count)
             94 GET_ITER
        >>   96 FOR_ITER                22 (to 120)
             98 STORE_FAST               5 (k)

 15         100 LOAD_FAST                3 (count)
            102 LOAD_FAST                5 (k)
            104 BINARY_SUBSCR
            106 LOAD_CONST               2 (0)
            108 COMPARE_OP               3 (!=)
            110 POP_JUMP_IF_FALSE       96

 16         112 POP_TOP
            114 LOAD_CONST               3 (False)
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           96

 17     >>  120 LOAD_CONST               4 (True)
            122 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        obj1 = {}
        obj2 = {}
        
        for i in s:
            if i not in obj1:
                obj1[i] = 1
            else:
                obj1[i] += 1
        
        for i in t:
            if i not in obj2:
                obj2[i] = 1
            else:
                obj2[i] += 1
                
        return obj1 == obj2    # In python you can compare dictionaries
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f18826c5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f18826c5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f18826c52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f18826c52f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (obj1)

  4           4 BUILD_MAP                0
              6 STORE_FAST               4 (obj2)

  6           8 LOAD_FAST                1 (s)
             10 GET_ITER
        >>   12 FOR_ITER                38 (to 52)
             14 STORE_FAST               5 (i)

  7          16 LOAD_FAST                5 (i)
             18 LOAD_FAST                3 (obj1)
             20 COMPARE_OP               7 (not in)
             22 POP_JUMP_IF_FALSE       34

  8          24 LOAD_CONST               1 (1)
             26 LOAD_FAST                3 (obj1)
             28 LOAD_FAST                5 (i)
             30 STORE_SUBSCR
             32 JUMP_ABSOLUTE           12

 10     >>   34 LOAD_FAST                3 (obj1)
             36 LOAD_FAST                5 (i)
             38 DUP_TOP_TWO
             40 BINARY_SUBSCR
             42 LOAD_CONST               1 (1)
             44 INPLACE_ADD
             46 ROT_THREE
             48 STORE_SUBSCR
             50 JUMP_ABSOLUTE           12

 12     >>   52 LOAD_FAST                2 (t)
             54 GET_ITER
        >>   56 FOR_ITER                38 (to 96)
             58 STORE_FAST               5 (i)

 13          60 LOAD_FAST                5 (i)
             62 LOAD_FAST                4 (obj2)
             64 COMPARE_OP               7 (not in)
             66 POP_JUMP_IF_FALSE       78

 14          68 LOAD_CONST               1 (1)
             70 LOAD_FAST                4 (obj2)
             72 LOAD_FAST                5 (i)
             74 STORE_SUBSCR
             76 JUMP_ABSOLUTE           56

 16     >>   78 LOAD_FAST                4 (obj2)
             80 LOAD_FAST                5 (i)
             82 DUP_TOP_TWO
             84 BINARY_SUBSCR
             86 LOAD_CONST               1 (1)
             88 INPLACE_ADD
             90 ROT_THREE
             92 STORE_SUBSCR
             94 JUMP_ABSOLUTE           56

 18     >>   96 LOAD_FAST                3 (obj1)
             98 LOAD_FAST                4 (obj2)
            100 COMPARE_OP               2 (==)
            102 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s, t):
        h = {}
        for i in s:
            if i not in h:
                h[i] = 0
            h[i] += 1
                
        for j in t:
            if j not in h:
                h[j] = 0
            h[j] -= 1
        
        for key in h.keys():
            if h[key] != 0:
                return False
            
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f005e935240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f005e935240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isAnagram at 0x7f005e9352f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f005e9352f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (h)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                36 (to 46)
             10 STORE_FAST               4 (i)

  5          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (h)
             16 COMPARE_OP               7 (not in)
             18 POP_JUMP_IF_FALSE       28

  6          20 LOAD_CONST               1 (0)
             22 LOAD_FAST                3 (h)
             24 LOAD_FAST                4 (i)
             26 STORE_SUBSCR

  7     >>   28 LOAD_FAST                3 (h)
             30 LOAD_FAST                4 (i)
             32 DUP_TOP_TWO
             34 BINARY_SUBSCR
             36 LOAD_CONST               2 (1)
             38 INPLACE_ADD
             40 ROT_THREE
             42 STORE_SUBSCR
             44 JUMP_ABSOLUTE            8

  9     >>   46 LOAD_FAST                2 (t)
             48 GET_ITER
        >>   50 FOR_ITER                36 (to 88)
             52 STORE_FAST               5 (j)

 10          54 LOAD_FAST                5 (j)
             56 LOAD_FAST                3 (h)
             58 COMPARE_OP               7 (not in)
             60 POP_JUMP_IF_FALSE       70

 11          62 LOAD_CONST               1 (0)
             64 LOAD_FAST                3 (h)
             66 LOAD_FAST                5 (j)
             68 STORE_SUBSCR

 12     >>   70 LOAD_FAST                3 (h)
             72 LOAD_FAST                5 (j)
             74 DUP_TOP_TWO
             76 BINARY_SUBSCR
             78 LOAD_CONST               2 (1)
             80 INPLACE_SUBTRACT
             82 ROT_THREE
             84 STORE_SUBSCR
             86 JUMP_ABSOLUTE           50

 14     >>   88 LOAD_FAST                3 (h)
             90 LOAD_METHOD              0 (keys)
             92 CALL_METHOD              0
             94 GET_ITER
        >>   96 FOR_ITER                22 (to 120)
             98 STORE_FAST               6 (key)

 15         100 LOAD_FAST                3 (h)
            102 LOAD_FAST                6 (key)
            104 BINARY_SUBSCR
            106 LOAD_CONST               1 (0)
            108 COMPARE_OP               3 (!=)
            110 POP_JUMP_IF_FALSE       96

 16         112 POP_TOP
            114 LOAD_CONST               3 (False)
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           96

 18     >>  120 LOAD_CONST               4 (True)
            122 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return(Counter(s) == Counter(t))
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f6c03eb5500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6c03eb5500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f6c03eb5450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f6c03eb5450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return(sorted(s) == sorted(t))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3022f95500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3022f95500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f3022f95450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f3022f95450, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (sorted)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (sorted)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(t) == Counter(s)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fc46e4b5500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc46e4b5500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fc46e4b5450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fc46e4b5450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                2 (t)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                1 (s)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        return Counter(s) == Counter(t)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fed54875500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fed54875500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fed54875450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fed54875450, file ""<ast>"", line 3>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fdc0db35500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdc0db35500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fdc0db35450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fdc0db35450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        ## RC ##
        ## APPROACH : Counter ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(1) ##
        return Counter(s) == Counter(t)

","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fcd0e235500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcd0e235500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fcd0e235450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fcd0e235450, file ""<ast>"", line 3>:
  8           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa51c3652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa51c3652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fa51c365240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fa51c365240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x) -> bool:
        if x<0:
            return False 
        else:
            x = str(x)
            x = [item for item in x]
            if len(x)%2 ==0:
                part1 = x[0:int(len(x)/2)]
                part2 = x[int(len(x)/2):]
                if part1 == part2[::-1]:
                    return True 
                else:
                    return False 
            else:
                part1 = x[0:int(len(x)/2)]
                part2 = x[int(len(x)/2)+1:]
                if part1 == part2[::-1]:
                    return True 
                else:
                    return False 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f973c2c53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f973c2c53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (bool)
             10 LOAD_CONST               1 (('return',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object isPalindrome at 0x7f973c2c52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.isPalindrome')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (isPalindrome)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f973c2c52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               1 (x)

  7          20 LOAD_CONST               3 (<code object <listcomp> at 0x7f973c2c5240, file ""<ast>"", line 7>)
             22 LOAD_CONST               4 ('Solution.isPalindrome.<locals>.<listcomp>')
             24 MAKE_FUNCTION            0
             26 LOAD_FAST                1 (x)
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 STORE_FAST               1 (x)

  8          34 LOAD_GLOBAL              1 (len)
             36 LOAD_FAST                1 (x)
             38 CALL_FUNCTION            1
             40 LOAD_CONST               5 (2)
             42 BINARY_MODULO
             44 LOAD_CONST               1 (0)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE      126

  9          50 LOAD_FAST                1 (x)
             52 LOAD_CONST               1 (0)
             54 LOAD_GLOBAL              2 (int)
             56 LOAD_GLOBAL              1 (len)
             58 LOAD_FAST                1 (x)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               5 (2)
             64 BINARY_TRUE_DIVIDE
             66 CALL_FUNCTION            1
             68 BUILD_SLICE              2
             70 BINARY_SUBSCR
             72 STORE_FAST               2 (part1)

 10          74 LOAD_FAST                1 (x)
             76 LOAD_GLOBAL              2 (int)
             78 LOAD_GLOBAL              1 (len)
             80 LOAD_FAST                1 (x)
             82 CALL_FUNCTION            1
             84 LOAD_CONST               5 (2)
             86 BINARY_TRUE_DIVIDE
             88 CALL_FUNCTION            1
             90 LOAD_CONST               0 (None)
             92 BUILD_SLICE              2
             94 BINARY_SUBSCR
             96 STORE_FAST               3 (part2)

 11          98 LOAD_FAST                2 (part1)
            100 LOAD_FAST                3 (part2)
            102 LOAD_CONST               0 (None)
            104 LOAD_CONST               0 (None)
            106 LOAD_CONST               6 (-1)
            108 BUILD_SLICE              3
            110 BINARY_SUBSCR
            112 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_FALSE      120

 12         116 LOAD_CONST               7 (True)
            118 RETURN_VALUE

 14     >>  120 LOAD_CONST               2 (False)
            122 RETURN_VALUE
            124 JUMP_FORWARD            78 (to 204)

 16     >>  126 LOAD_FAST                1 (x)
            128 LOAD_CONST               1 (0)
            130 LOAD_GLOBAL              2 (int)
            132 LOAD_GLOBAL              1 (len)
            134 LOAD_FAST                1 (x)
            136 CALL_FUNCTION            1
            138 LOAD_CONST               5 (2)
            140 BINARY_TRUE_DIVIDE
            142 CALL_FUNCTION            1
            144 BUILD_SLICE              2
            146 BINARY_SUBSCR
            148 STORE_FAST               2 (part1)

 17         150 LOAD_FAST                1 (x)
            152 LOAD_GLOBAL              2 (int)
            154 LOAD_GLOBAL              1 (len)
            156 LOAD_FAST                1 (x)
            158 CALL_FUNCTION            1
            160 LOAD_CONST               5 (2)
            162 BINARY_TRUE_DIVIDE
            164 CALL_FUNCTION            1
            166 LOAD_CONST               8 (1)
            168 BINARY_ADD
            170 LOAD_CONST               0 (None)
            172 BUILD_SLICE              2
            174 BINARY_SUBSCR
            176 STORE_FAST               3 (part2)

 18         178 LOAD_FAST                2 (part1)
            180 LOAD_FAST                3 (part2)
            182 LOAD_CONST               0 (None)
            184 LOAD_CONST               0 (None)
            186 LOAD_CONST               6 (-1)
            188 BUILD_SLICE              3
            190 BINARY_SUBSCR
            192 COMPARE_OP               2 (==)
            194 POP_JUMP_IF_FALSE      200

 19         196 LOAD_CONST               7 (True)
            198 RETURN_VALUE

 21     >>  200 LOAD_CONST               2 (False)
            202 RETURN_VALUE
        >>  204 LOAD_CONST               0 (None)
            206 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f973c2c5240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (item)
              8 LOAD_FAST                1 (item)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
isPalindrome,"class Solution(object):
    def isPalindrome(self, x):
        """"""
        :type x: int
        :rtype: bool
        """"""
		# always false if negative
        if x < 0:
            return False
        arr = []
        while x != 0:
            x, r = divmod(x, 10) # Divide by 10, see the remainder
            arr.append(r)
        return arr==arr[::-1]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f03e65352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f03e65352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7f03e6535240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f03e6535240, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  9           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

 10     >>   12 BUILD_LIST               0
             14 STORE_FAST               2 (arr)

 11     >>   16 LOAD_FAST                1 (x)
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               3 (!=)
             22 POP_JUMP_IF_FALSE       50

 12          24 LOAD_GLOBAL              0 (divmod)
             26 LOAD_FAST                1 (x)
             28 LOAD_CONST               3 (10)
             30 CALL_FUNCTION            2
             32 UNPACK_SEQUENCE          2
             34 STORE_FAST               1 (x)
             36 STORE_FAST               3 (r)

 13          38 LOAD_FAST                2 (arr)
             40 LOAD_METHOD              1 (append)
             42 LOAD_FAST                3 (r)
             44 CALL_METHOD              1
             46 POP_TOP
             48 JUMP_ABSOLUTE           16

 14     >>   50 LOAD_FAST                2 (arr)
             52 LOAD_FAST                2 (arr)
             54 LOAD_CONST               4 (None)
             56 LOAD_CONST               4 (None)
             58 LOAD_CONST               5 (-1)
             60 BUILD_SLICE              3
             62 BINARY_SUBSCR
             64 COMPARE_OP               2 (==)
             66 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return True if str(x) == str(x)[::-1] else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fed34e652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fed34e652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fed34e65240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fed34e65240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               2 (True)
             28 RETURN_VALUE
        >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"class Solution(object):
    def isPalindrome(self, x):
        """"""
        :type x: int
        :rtype: bool
        """"""
        s=str(x)
        d=s[::-1]
        return s==d
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f86e21052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f86e21052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7f86e2105240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f86e2105240, file ""<ast>"", line 2>:
  7           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (s)

  8           8 LOAD_FAST                2 (s)
             10 LOAD_CONST               1 (None)
             12 LOAD_CONST               1 (None)
             14 LOAD_CONST               2 (-1)
             16 BUILD_SLICE              3
             18 BINARY_SUBSCR
             20 STORE_FAST               3 (d)

  9          22 LOAD_FAST                2 (s)
             24 LOAD_FAST                3 (d)
             26 COMPARE_OP               2 (==)
             28 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if(x<0):
            return False
        else:
            x1=x
            count=0
            rev=0
            while(x1>0):
                count+=1
                x1//=10
            if(count==1):
                return True
            length=count
            count//=2
            if(length%2==0):
                s=x//(10**count)
                s1=x%(10**count)
                while(s>0):
                    rev=rev*10+(s%10)
                    s=s//10
                if(s1==rev):
                    return True
            else:
                s=x//(10**(count+1))
                s1=x%(10**count)
                while(s>0):
                    rev=rev*10+(s%10)
                    s=s//10
                print(rev)
                
                if(s1==rev):
                    return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fda85d552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fda85d552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fda85d55240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fda85d55240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (x)
             14 STORE_FAST               2 (x1)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (count)

  8          20 LOAD_CONST               1 (0)
             22 STORE_FAST               4 (rev)

  9     >>   24 LOAD_FAST                2 (x1)
             26 LOAD_CONST               1 (0)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       50

 10          32 LOAD_FAST                3 (count)
             34 LOAD_CONST               3 (1)
             36 INPLACE_ADD
             38 STORE_FAST               3 (count)

 11          40 LOAD_FAST                2 (x1)
             42 LOAD_CONST               4 (10)
             44 INPLACE_FLOOR_DIVIDE
             46 STORE_FAST               2 (x1)
             48 JUMP_ABSOLUTE           24

 12     >>   50 LOAD_FAST                3 (count)
             52 LOAD_CONST               3 (1)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       62

 13          58 LOAD_CONST               5 (True)
             60 RETURN_VALUE

 14     >>   62 LOAD_FAST                3 (count)
             64 STORE_FAST               5 (length)

 15          66 LOAD_FAST                3 (count)
             68 LOAD_CONST               6 (2)
             70 INPLACE_FLOOR_DIVIDE
             72 STORE_FAST               3 (count)

 16          74 LOAD_FAST                5 (length)
             76 LOAD_CONST               6 (2)
             78 BINARY_MODULO
             80 LOAD_CONST               1 (0)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE      158

 17          86 LOAD_FAST                1 (x)
             88 LOAD_CONST               4 (10)
             90 LOAD_FAST                3 (count)
             92 BINARY_POWER
             94 BINARY_FLOOR_DIVIDE
             96 STORE_FAST               6 (s)

 18          98 LOAD_FAST                1 (x)
            100 LOAD_CONST               4 (10)
            102 LOAD_FAST                3 (count)
            104 BINARY_POWER
            106 BINARY_MODULO
            108 STORE_FAST               7 (s1)

 19     >>  110 LOAD_FAST                6 (s)
            112 LOAD_CONST               1 (0)
            114 COMPARE_OP               4 (>)
            116 POP_JUMP_IF_FALSE      144

 20         118 LOAD_FAST                4 (rev)
            120 LOAD_CONST               4 (10)
            122 BINARY_MULTIPLY
            124 LOAD_FAST                6 (s)
            126 LOAD_CONST               4 (10)
            128 BINARY_MODULO
            130 BINARY_ADD
            132 STORE_FAST               4 (rev)

 21         134 LOAD_FAST                6 (s)
            136 LOAD_CONST               4 (10)
            138 BINARY_FLOOR_DIVIDE
            140 STORE_FAST               6 (s)
            142 JUMP_ABSOLUTE          110

 22     >>  144 LOAD_FAST                7 (s1)
            146 LOAD_FAST                4 (rev)
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      240

 23         152 LOAD_CONST               5 (True)
            154 RETURN_VALUE
            156 JUMP_FORWARD            82 (to 240)

 25     >>  158 LOAD_FAST                1 (x)
            160 LOAD_CONST               4 (10)
            162 LOAD_FAST                3 (count)
            164 LOAD_CONST               3 (1)
            166 BINARY_ADD
            168 BINARY_POWER
            170 BINARY_FLOOR_DIVIDE
            172 STORE_FAST               6 (s)

 26         174 LOAD_FAST                1 (x)
            176 LOAD_CONST               4 (10)
            178 LOAD_FAST                3 (count)
            180 BINARY_POWER
            182 BINARY_MODULO
            184 STORE_FAST               7 (s1)

 27     >>  186 LOAD_FAST                6 (s)
            188 LOAD_CONST               1 (0)
            190 COMPARE_OP               4 (>)
            192 POP_JUMP_IF_FALSE      220

 28         194 LOAD_FAST                4 (rev)
            196 LOAD_CONST               4 (10)
            198 BINARY_MULTIPLY
            200 LOAD_FAST                6 (s)
            202 LOAD_CONST               4 (10)
            204 BINARY_MODULO
            206 BINARY_ADD
            208 STORE_FAST               4 (rev)

 29         210 LOAD_FAST                6 (s)
            212 LOAD_CONST               4 (10)
            214 BINARY_FLOOR_DIVIDE
            216 STORE_FAST               6 (s)
            218 JUMP_ABSOLUTE          186

 30     >>  220 LOAD_GLOBAL              0 (print)
            222 LOAD_FAST                4 (rev)
            224 CALL_FUNCTION            1
            226 POP_TOP

 32         228 LOAD_FAST                7 (s1)
            230 LOAD_FAST                4 (rev)
            232 COMPARE_OP               2 (==)
            234 POP_JUMP_IF_FALSE      240

 33         236 LOAD_CONST               5 (True)
            238 RETURN_VALUE
        >>  240 LOAD_CONST               0 (None)
            242 RETURN_VALUE
None
"
isPalindrome,"class Solution:
        def isPalindrome(self, x):
                return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff0aecd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff0aecd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7ff0aecd5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7ff0aecd5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        
        ## RC ##
        ## APPROACH : covert the second half of the integer and compare with first half ##
        
        # Special cases:
        # when x < 0, x is not a palindrome.
        # Also if the last digit of the number is 0, in order to be a palindrome,
        # the first digit of the number also needs to be 0.
        # Only 0 satisfy this property.
        if(x < 0 or (x % 10 == 0 and x != 0)) : return False

        revertedNumber = 0
        while(x > revertedNumber):                      # indicates half completed.
            revertedNumber = revertedNumber * 10 + x % 10
            x = x // 10

        # When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
        # For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
        # since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.
        return x == revertedNumber or x == revertedNumber//10;
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f61a53952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f61a53952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f61a5395240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f61a5395240, file ""<ast>"", line 2>:
 12           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (10)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       32
             20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               3 (!=)
             26 POP_JUMP_IF_FALSE       32
        >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

 14     >>   32 LOAD_CONST               1 (0)
             34 STORE_FAST               2 (revertedNumber)

 15     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                2 (revertedNumber)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       70

 16          44 LOAD_FAST                2 (revertedNumber)
             46 LOAD_CONST               2 (10)
             48 BINARY_MULTIPLY
             50 LOAD_FAST                1 (x)
             52 LOAD_CONST               2 (10)
             54 BINARY_MODULO
             56 BINARY_ADD
             58 STORE_FAST               2 (revertedNumber)

 17          60 LOAD_FAST                1 (x)
             62 LOAD_CONST               2 (10)
             64 BINARY_FLOOR_DIVIDE
             66 STORE_FAST               1 (x)
             68 JUMP_ABSOLUTE           36

 22     >>   70 LOAD_FAST                1 (x)
             72 LOAD_FAST                2 (revertedNumber)
             74 COMPARE_OP               2 (==)
             76 JUMP_IF_TRUE_OR_POP     88
             78 LOAD_FAST                1 (x)
             80 LOAD_FAST                2 (revertedNumber)
             82 LOAD_CONST               2 (10)
             84 BINARY_FLOOR_DIVIDE
             86 COMPARE_OP               2 (==)
        >>   88 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if not x:
            return True
        elif x < 0:
            return False
        
        old_x = x
        new_x = 0
        
        while old_x:
            (t, r) = divmod(old_x, 10)
            new_x = new_x * 10 + r
            old_x = t

        return new_x == x
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6932a752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6932a752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f6932a75240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f6932a75240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

  6          16 LOAD_CONST               3 (False)
             18 RETURN_VALUE

  8     >>   20 LOAD_FAST                1 (x)
             22 STORE_FAST               2 (old_x)

  9          24 LOAD_CONST               2 (0)
             26 STORE_FAST               3 (new_x)

 11     >>   28 LOAD_FAST                2 (old_x)
             30 POP_JUMP_IF_FALSE       64

 12          32 LOAD_GLOBAL              0 (divmod)
             34 LOAD_FAST                2 (old_x)
             36 LOAD_CONST               4 (10)
             38 CALL_FUNCTION            2
             40 UNPACK_SEQUENCE          2
             42 STORE_FAST               4 (t)
             44 STORE_FAST               5 (r)

 13          46 LOAD_FAST                3 (new_x)
             48 LOAD_CONST               4 (10)
             50 BINARY_MULTIPLY
             52 LOAD_FAST                5 (r)
             54 BINARY_ADD
             56 STORE_FAST               3 (new_x)

 14          58 LOAD_FAST                4 (t)
             60 STORE_FAST               2 (old_x)
             62 JUMP_ABSOLUTE           28

 16     >>   64 LOAD_FAST                3 (new_x)
             66 LOAD_FAST                1 (x)
             68 COMPARE_OP               2 (==)
             70 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        n=str(x)
        i,j=0,len(n)-1
        while j>=i:
            if n[i]==n[j]:
                i+=1
                j-=1
            else:
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8b865b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8b865b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f8b865b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f8b865b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (n)

  6          20 LOAD_CONST               1 (0)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                2 (n)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               3 (1)
             30 BINARY_SUBTRACT
             32 ROT_TWO
             34 STORE_FAST               3 (i)
             36 STORE_FAST               4 (j)

  7     >>   38 LOAD_FAST                4 (j)
             40 LOAD_FAST                3 (i)
             42 COMPARE_OP               5 (>=)
             44 POP_JUMP_IF_FALSE       86

  8          46 LOAD_FAST                2 (n)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (n)
             54 LOAD_FAST                4 (j)
             56 BINARY_SUBSCR
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       80

  9          62 LOAD_FAST                3 (i)
             64 LOAD_CONST               3 (1)
             66 INPLACE_ADD
             68 STORE_FAST               3 (i)

 10          70 LOAD_FAST                4 (j)
             72 LOAD_CONST               3 (1)
             74 INPLACE_SUBTRACT
             76 STORE_FAST               4 (j)
             78 JUMP_ABSOLUTE           38

 12     >>   80 LOAD_CONST               2 (False)
             82 RETURN_VALUE
             84 JUMP_ABSOLUTE           38

 13     >>   86 LOAD_CONST               4 (True)
             88 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        half = len(str(x))//2
        string = str(x)
        for i in range(0,half):
            if string[i] == string[-i-1]:
                continue
            else:
                return False
                break
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdc2e1152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdc2e1152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fdc2e115240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fdc2e115240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1
              8 CALL_FUNCTION            1
             10 LOAD_CONST               1 (2)
             12 BINARY_FLOOR_DIVIDE
             14 STORE_FAST               2 (half)

  4          16 LOAD_GLOBAL              1 (str)
             18 LOAD_FAST                1 (x)
             20 CALL_FUNCTION            1
             22 STORE_FAST               3 (string)

  5          24 LOAD_GLOBAL              2 (range)
             26 LOAD_CONST               2 (0)
             28 LOAD_FAST                2 (half)
             30 CALL_FUNCTION            2
             32 GET_ITER
        >>   34 FOR_ITER                36 (to 72)
             36 STORE_FAST               4 (i)

  6          38 LOAD_FAST                3 (string)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                3 (string)
             46 LOAD_FAST                4 (i)
             48 UNARY_NEGATIVE
             50 LOAD_CONST               3 (1)
             52 BINARY_SUBTRACT
             54 BINARY_SUBSCR
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

  7          60 JUMP_ABSOLUTE           34
             62 JUMP_ABSOLUTE           34

  9     >>   64 POP_TOP
             66 LOAD_CONST               4 (False)
             68 RETURN_VALUE

 10          70 JUMP_ABSOLUTE           34

 11     >>   72 LOAD_CONST               5 (True)
             74 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        x_s = str(x)
        return x_s == x_s[::-1] 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc1bb3c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc1bb3c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fc1bb3c5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fc1bb3c5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (x_s)

  6          20 LOAD_FAST                2 (x_s)
             22 LOAD_FAST                2 (x_s)
             24 LOAD_CONST               0 (None)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               3 (-1)
             30 BUILD_SLICE              3
             32 BINARY_SUBSCR
             34 COMPARE_OP               2 (==)
             36 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return x >= 0 and x == int(f""{x}""[::-1])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fac9e6a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fac9e6a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fac9e6a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fac9e6a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               5 (>=)
              6 JUMP_IF_FALSE_OR_POP    30
              8 LOAD_FAST                1 (x)
             10 LOAD_GLOBAL              0 (int)
             12 LOAD_FAST                1 (x)
             14 FORMAT_VALUE             0
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               0 (None)
             20 LOAD_CONST               2 (-1)
             22 BUILD_SLICE              3
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if str(x)==str(x)[::-1]:
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f840cb252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f840cb252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f840cb25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f840cb25240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30

  4          26 LOAD_CONST               2 (True)
             28 RETURN_VALUE

  5     >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return True if str(x) == str(x)[::-1] else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa86e5752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa86e5752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fa86e575240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fa86e575240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               2 (True)
             28 RETURN_VALUE
        >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"from collections import deque
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        d=deque(str(x))
        while d:
            l=d.popleft()
            if d: #For odd cases like 121,422 
                r=d.pop()
                if int(l)!=int(r):
                    return False
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f793ab752f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f793ab752f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f793ab75240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f793ab75240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (deque)
             14 LOAD_GLOBAL              1 (str)
             16 LOAD_FAST                1 (x)
             18 CALL_FUNCTION            1
             20 CALL_FUNCTION            1
             22 STORE_FAST               2 (d)

  7     >>   24 LOAD_FAST                2 (d)
             26 POP_JUMP_IF_FALSE       70

  8          28 LOAD_FAST                2 (d)
             30 LOAD_METHOD              2 (popleft)
             32 CALL_METHOD              0
             34 STORE_FAST               3 (l)

  9          36 LOAD_FAST                2 (d)
             38 POP_JUMP_IF_FALSE       24

 10          40 LOAD_FAST                2 (d)
             42 LOAD_METHOD              3 (pop)
             44 CALL_METHOD              0
             46 STORE_FAST               4 (r)

 11          48 LOAD_GLOBAL              4 (int)
             50 LOAD_FAST                3 (l)
             52 CALL_FUNCTION            1
             54 LOAD_GLOBAL              4 (int)
             56 LOAD_FAST                4 (r)
             58 CALL_FUNCTION            1
             60 COMPARE_OP               3 (!=)
             62 POP_JUMP_IF_FALSE       24

 12          64 LOAD_CONST               2 (False)
             66 RETURN_VALUE
             68 JUMP_ABSOLUTE           24

 13     >>   70 LOAD_CONST               3 (True)
             72 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x < 0:
			return False
		
		return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0f1ece52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0f1ece52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f0f1ece5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f0f1ece5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 LOAD_GLOBAL              0 (str)
             20 LOAD_FAST                1 (x)
             22 CALL_FUNCTION            1
             24 LOAD_CONST               0 (None)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               3 (-1)
             30 BUILD_SLICE              3
             32 BINARY_SUBSCR
             34 COMPARE_OP               2 (==)
             36 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x<0:
			return False

		inputNum = x
		newNum = 0
		while x>0:
			newNum = newNum * 10 + x%10
			x = x//10
		return newNum == inputNum
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd75cc252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd75cc252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fd75cc25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fd75cc25240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (x)
             14 STORE_FAST               2 (inputNum)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (newNum)

  8     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       54

  9          28 LOAD_FAST                3 (newNum)
             30 LOAD_CONST               3 (10)
             32 BINARY_MULTIPLY
             34 LOAD_FAST                1 (x)
             36 LOAD_CONST               3 (10)
             38 BINARY_MODULO
             40 BINARY_ADD
             42 STORE_FAST               3 (newNum)

 10          44 LOAD_FAST                1 (x)
             46 LOAD_CONST               3 (10)
             48 BINARY_FLOOR_DIVIDE
             50 STORE_FAST               1 (x)
             52 JUMP_ABSOLUTE           20

 11     >>   54 LOAD_FAST                3 (newNum)
             56 LOAD_FAST                2 (inputNum)
             58 COMPARE_OP               2 (==)
             60 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x < 0 or (x > 0 and x%10 == 0):   # if x is negative, return False. if x is positive and last digit is 0, that also cannot form a palindrome, return False.
			return False
		
		result = 0
		while x > result:
			result = result * 10 + x % 10
			x = x // 10
			
		return True if (x == result or x == result // 10) else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f777e5e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f777e5e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f777e5e5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f777e5e5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               4 (>)
             14 POP_JUMP_IF_FALSE       32
             16 LOAD_FAST                1 (x)
             18 LOAD_CONST               2 (10)
             20 BINARY_MODULO
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

  4     >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

  6     >>   32 LOAD_CONST               1 (0)
             34 STORE_FAST               2 (result)

  7     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                2 (result)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       70

  8          44 LOAD_FAST                2 (result)
             46 LOAD_CONST               2 (10)
             48 BINARY_MULTIPLY
             50 LOAD_FAST                1 (x)
             52 LOAD_CONST               2 (10)
             54 BINARY_MODULO
             56 BINARY_ADD
             58 STORE_FAST               2 (result)

  9          60 LOAD_FAST                1 (x)
             62 LOAD_CONST               2 (10)
             64 BINARY_FLOOR_DIVIDE
             66 STORE_FAST               1 (x)
             68 JUMP_ABSOLUTE           36

 11     >>   70 LOAD_FAST                1 (x)
             72 LOAD_FAST                2 (result)
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_TRUE        90
             78 LOAD_FAST                1 (x)
             80 LOAD_FAST                2 (result)
             82 LOAD_CONST               2 (10)
             84 BINARY_FLOOR_DIVIDE
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       94
        >>   90 LOAD_CONST               4 (True)
             92 RETURN_VALUE
        >>   94 LOAD_CONST               3 (False)
             96 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0 or (x % 10 == 0 and x != 0): 
            return False
        else:
            rev = str(x)[::-1]
            if rev == str(x):
                return True
            else: 
                return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fff755452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fff755452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fff75545240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fff75545240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (10)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       32
             20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               3 (!=)
             26 POP_JUMP_IF_FALSE       32

  4     >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

  6     >>   32 LOAD_GLOBAL              0 (str)
             34 LOAD_FAST                1 (x)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               0 (None)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               4 (-1)
             44 BUILD_SLICE              3
             46 BINARY_SUBSCR
             48 STORE_FAST               2 (rev)

  7          50 LOAD_FAST                2 (rev)
             52 LOAD_GLOBAL              0 (str)
             54 LOAD_FAST                1 (x)
             56 CALL_FUNCTION            1
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

  8          62 LOAD_CONST               5 (True)
             64 RETURN_VALUE

 10     >>   66 LOAD_CONST               3 (False)
             68 RETURN_VALUE
             70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if n == 0:
            return False
        
        while n%2 == 0:
            n = n/2
        
        while n%3 == 0:
            n = n/3
        
        while n%5 == 0:
            n = n/5

        if n == 1:
            return True
			
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7facc70d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7facc70d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7facc70d5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7facc70d5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (n)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  7          24 LOAD_FAST                2 (n)
             26 LOAD_CONST               3 (2)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               2 (n)
             32 JUMP_ABSOLUTE           12

  9     >>   34 LOAD_FAST                2 (n)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                2 (n)
             48 LOAD_CONST               4 (3)
             50 BINARY_TRUE_DIVIDE
             52 STORE_FAST               2 (n)
             54 JUMP_ABSOLUTE           34

 12     >>   56 LOAD_FAST                2 (n)
             58 LOAD_CONST               5 (5)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 13          68 LOAD_FAST                2 (n)
             70 LOAD_CONST               5 (5)
             72 BINARY_TRUE_DIVIDE
             74 STORE_FAST               2 (n)
             76 JUMP_ABSOLUTE           56

 15     >>   78 LOAD_FAST                2 (n)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE       90

 16          86 LOAD_CONST               7 (True)
             88 RETURN_VALUE

 18     >>   90 LOAD_CONST               2 (False)
             92 RETURN_VALUE
None
"
isUgly,"import sys
class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [30, 15, 10, 8, 6, 5, 4, 3, 2]
        for mult in multipliers:
            for _ in range(sys.maxsize):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f24d9ae5240, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24d9ae5240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f24d9ae52f0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f24d9ae52f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  7          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  8     >>   24 LOAD_CONST               4 (30)
             26 LOAD_CONST               5 (15)
             28 LOAD_CONST               6 (10)
             30 LOAD_CONST               7 (8)
             32 LOAD_CONST               8 (6)
             34 LOAD_CONST               9 (5)
             36 LOAD_CONST              10 (4)
             38 LOAD_CONST              11 (3)
             40 LOAD_CONST              12 (2)
             42 BUILD_LIST               9
             44 STORE_FAST               2 (multipliers)

  9          46 LOAD_FAST                2 (multipliers)
             48 GET_ITER
        >>   50 FOR_ITER                70 (to 122)
             52 STORE_FAST               3 (mult)

 10          54 LOAD_GLOBAL              0 (range)
             56 LOAD_GLOBAL              1 (sys)
             58 LOAD_ATTR                2 (maxsize)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                54 (to 120)
             66 STORE_FAST               4 (_)

 11          68 LOAD_FAST                1 (n)
             70 LOAD_METHOD              3 (__mod__)
             72 LOAD_FAST                3 (mult)
             74 CALL_METHOD              1
             76 LOAD_CONST              13 (0)
             78 COMPARE_OP               2 (==)
             80 POP_JUMP_IF_FALSE      114

 12          82 LOAD_GLOBAL              4 (divmod)
             84 LOAD_FAST                1 (n)
             86 LOAD_FAST                3 (mult)
             88 CALL_FUNCTION            2
             90 LOAD_CONST              13 (0)
             92 BINARY_SUBSCR
             94 STORE_FAST               1 (n)

 13          96 LOAD_FAST                1 (n)
             98 LOAD_CONST               1 (1)
            100 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_FALSE      118

 14         104 POP_TOP
            106 POP_TOP
            108 LOAD_CONST               3 (True)
            110 RETURN_VALUE
            112 JUMP_ABSOLUTE           64

 16     >>  114 POP_TOP
            116 JUMP_ABSOLUTE           50
        >>  118 JUMP_ABSOLUTE           64
        >>  120 JUMP_ABSOLUTE           50

 18     >>  122 LOAD_CONST               2 (False)
            124 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num == 0: return False
        while num % 5 == 0: num /= 5
        while num % 3 == 0: num /= 3
        while num % 2 == 0: num /= 2
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f36424352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f36424352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f3642435240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f3642435240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  4     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (5)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34
             24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (5)
             28 INPLACE_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  5     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56
             46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 INPLACE_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

  6     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (2)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78
             68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (2)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

  7     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        while num>0 :
            if num%2==0: num=num//2
            elif num%3==0: num=num//3
            elif num%5==0: num=num//5
            elif num==1: return True
            else: return False
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb4aa5f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb4aa5f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7fb4aa5f5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fb4aa5f5240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       92

  4           8 LOAD_FAST                1 (num)
             10 LOAD_CONST               2 (2)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       30
             20 LOAD_FAST                1 (num)
             22 LOAD_CONST               2 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               1 (num)
             28 JUMP_ABSOLUTE            0

  5     >>   30 LOAD_FAST                1 (num)
             32 LOAD_CONST               3 (3)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       52
             42 LOAD_FAST                1 (num)
             44 LOAD_CONST               3 (3)
             46 BINARY_FLOOR_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE            0

  6     >>   52 LOAD_FAST                1 (num)
             54 LOAD_CONST               4 (5)
             56 BINARY_MODULO
             58 LOAD_CONST               1 (0)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       74
             64 LOAD_FAST                1 (num)
             66 LOAD_CONST               4 (5)
             68 BINARY_FLOOR_DIVIDE
             70 STORE_FAST               1 (num)
             72 JUMP_ABSOLUTE            0

  7     >>   74 LOAD_FAST                1 (num)
             76 LOAD_CONST               5 (1)
             78 COMPARE_OP               2 (==)
             80 POP_JUMP_IF_FALSE       86
             82 LOAD_CONST               6 (True)
             84 RETURN_VALUE

  8     >>   86 LOAD_CONST               7 (False)
             88 RETURN_VALUE
             90 JUMP_ABSOLUTE            0

  9     >>   92 LOAD_CONST               7 (False)
             94 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
            def f(n, p):
                while not n % p:
                    n = n // p           
                return n
            
            P = [num, 2, 3, 5]
            return reduce(f, P) == 1 if num > 0 else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff963f153a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff963f153a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7ff963f152f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7ff963f152f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object f at 0x7ff963f15240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.isUgly.<locals>.f')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (f)

  8           8 LOAD_FAST                1 (num)
             10 LOAD_CONST               3 (2)
             12 LOAD_CONST               4 (3)
             14 LOAD_CONST               5 (5)
             16 BUILD_LIST               4
             18 STORE_FAST               3 (P)

  9          20 LOAD_FAST                1 (num)
             22 LOAD_CONST               6 (0)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       42
             28 LOAD_GLOBAL              0 (reduce)
             30 LOAD_FAST                2 (f)
             32 LOAD_FAST                3 (P)
             34 CALL_FUNCTION            2
             36 LOAD_CONST               7 (1)
             38 COMPARE_OP               2 (==)
             40 RETURN_VALUE
        >>   42 LOAD_CONST               8 (False)
             44 RETURN_VALUE

Disassembly of <code object f at 0x7ff963f15240, file ""<ast>"", line 3>:
  4     >>    0 LOAD_FAST                0 (n)
              2 LOAD_FAST                1 (p)
              4 BINARY_MODULO
              6 POP_JUMP_IF_TRUE        18

  5           8 LOAD_FAST                0 (n)
             10 LOAD_FAST                1 (p)
             12 BINARY_FLOOR_DIVIDE
             14 STORE_FAST               0 (n)
             16 JUMP_ABSOLUTE            0

  6     >>   18 LOAD_FAST                0 (n)
             20 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        
        if num == 0:
            # Corner case handle for input 0
            return False
        
        
        given_prime = [2, 3, 5]
        
        for p in given_prime:
        
            while num % p == 0:
                num //= p


        if num == 1:
            return True
        else:
            return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbd1f6252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbd1f6252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7fbd1f625240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fbd1f625240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  6           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  9     >>   12 LOAD_CONST               3 (2)
             14 LOAD_CONST               4 (3)
             16 LOAD_CONST               5 (5)
             18 BUILD_LIST               3
             20 STORE_FAST               2 (given_prime)

 11          22 LOAD_FAST                2 (given_prime)
             24 GET_ITER
        >>   26 FOR_ITER                26 (to 54)
             28 STORE_FAST               3 (p)

 13     >>   30 LOAD_FAST                1 (num)
             32 LOAD_FAST                3 (p)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       26

 14          42 LOAD_FAST                1 (num)
             44 LOAD_FAST                3 (p)
             46 INPLACE_FLOOR_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE           30
             52 JUMP_ABSOLUTE           26

 17     >>   54 LOAD_FAST                1 (num)
             56 LOAD_CONST               6 (1)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

 18          62 LOAD_CONST               7 (True)
             64 RETURN_VALUE

 20     >>   66 LOAD_CONST               2 (False)
             68 RETURN_VALUE
             70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num <= 0:
            return False

        primes = [2, 3, 5]
        for prime in primes:
            while num % prime == 0:
                num /= prime
            if num == 1: 
                return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fff23ef52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7fff23ef52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7fff23ef5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fff23ef5240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

 10     >>   12 LOAD_CONST               3 (2)
             14 LOAD_CONST               4 (3)
             16 LOAD_CONST               5 (5)
             18 BUILD_LIST               3
             20 STORE_FAST               2 (primes)

 11          22 LOAD_FAST                2 (primes)
             24 GET_ITER
        >>   26 FOR_ITER                40 (to 68)
             28 STORE_FAST               3 (prime)

 12     >>   30 LOAD_FAST                1 (num)
             32 LOAD_FAST                3 (prime)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       52

 13          42 LOAD_FAST                1 (num)
             44 LOAD_FAST                3 (prime)
             46 INPLACE_TRUE_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE           30

 14     >>   52 LOAD_FAST                1 (num)
             54 LOAD_CONST               6 (1)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       26

 15          60 POP_TOP
             62 LOAD_CONST               7 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           26

 16     >>   68 LOAD_CONST               2 (False)
             70 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L
        return False if num < 1 or (4570198050078720000000000000)%num != 0 else True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f32f00352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f32f00352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f32f0035240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f32f0035240, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_CONST               2 (4570198050078720000000000000)
             10 LOAD_FAST                1 (num)
             12 BINARY_MODULO
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE       24
        >>   20 LOAD_CONST               4 (False)
             22 RETURN_VALUE
        >>   24 LOAD_CONST               5 (True)
             26 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        if num == 1:
            return True
        elif num == 0:
            return False
        
        while num % 2 == 0:
            num = num / 2
        while num % 3 == 0:
            num = num / 3
        while num % 5 == 0:
            num = num / 5
            
        if num == 1:
            return True
        return False","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6bc0a05240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6bc0a05240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f6bc0a052f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f6bc0a052f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               4 (False)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (num)
             26 LOAD_CONST               5 (2)
             28 BINARY_MODULO
             30 LOAD_CONST               3 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       46

  9          36 LOAD_FAST                1 (num)
             38 LOAD_CONST               5 (2)
             40 BINARY_TRUE_DIVIDE
             42 STORE_FAST               1 (num)
             44 JUMP_ABSOLUTE           24

 10     >>   46 LOAD_FAST                1 (num)
             48 LOAD_CONST               6 (3)
             50 BINARY_MODULO
             52 LOAD_CONST               3 (0)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       68

 11          58 LOAD_FAST                1 (num)
             60 LOAD_CONST               6 (3)
             62 BINARY_TRUE_DIVIDE
             64 STORE_FAST               1 (num)
             66 JUMP_ABSOLUTE           46

 12     >>   68 LOAD_FAST                1 (num)
             70 LOAD_CONST               7 (5)
             72 BINARY_MODULO
             74 LOAD_CONST               3 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       90

 13          80 LOAD_FAST                1 (num)
             82 LOAD_CONST               7 (5)
             84 BINARY_TRUE_DIVIDE
             86 STORE_FAST               1 (num)
             88 JUMP_ABSOLUTE           68

 15     >>   90 LOAD_FAST                1 (num)
             92 LOAD_CONST               1 (1)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE      102

 16          98 LOAD_CONST               2 (True)
            100 RETURN_VALUE

 17     >>  102 LOAD_CONST               4 (False)
            104 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num==1:
            return True
        if num<1:
            return False
        while num>1:
            change=False
            for i in [2,3,5]:
                if not num%i:
                    num/=i
                    change=True
            if not change:
                return False
        return num==1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbccb6352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbccb6352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7fbccb635240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fbccb635240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       24

 10          20 LOAD_CONST               3 (False)
             22 RETURN_VALUE

 11     >>   24 LOAD_FAST                1 (num)
             26 LOAD_CONST               1 (1)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       76

 12          32 LOAD_CONST               3 (False)
             34 STORE_FAST               2 (change)

 13          36 LOAD_CONST               4 ((2, 3, 5))
             38 GET_ITER
        >>   40 FOR_ITER                24 (to 66)
             42 STORE_FAST               3 (i)

 14          44 LOAD_FAST                1 (num)
             46 LOAD_FAST                3 (i)
             48 BINARY_MODULO
             50 POP_JUMP_IF_TRUE        40

 15          52 LOAD_FAST                1 (num)
             54 LOAD_FAST                3 (i)
             56 INPLACE_TRUE_DIVIDE
             58 STORE_FAST               1 (num)

 16          60 LOAD_CONST               2 (True)
             62 STORE_FAST               2 (change)
             64 JUMP_ABSOLUTE           40

 17     >>   66 LOAD_FAST                2 (change)
             68 POP_JUMP_IF_TRUE        24

 18          70 LOAD_CONST               3 (False)
             72 RETURN_VALUE
             74 JUMP_ABSOLUTE           24

 19     >>   76 LOAD_FAST                1 (num)
             78 LOAD_CONST               1 (1)
             80 COMPARE_OP               2 (==)
             82 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):

        if num <= 0:
            return False

        while num % 5 == 0:
            num /= 5
        while num % 3 == 0:
            num /= 3
        while num % 2 == 0:
            num /= 2

        return num == 1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcbe6ce52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcbe6ce52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7fcbe6ce5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fcbe6ce5240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (5)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  8          24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (5)
             28 INPLACE_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  9     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 INPLACE_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

 11     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (2)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 12          68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (2)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

 14     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num==0:
            return False
        while num%2==0:
            num=num/2
        while num%3==0:
            num=num/3
        while num%5==0:
            num=num/5
        if num==1:
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa53a2752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa53a2752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7fa53a275240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fa53a275240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  6          24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (2)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  7     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

  8          46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 BINARY_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

  9     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (5)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 10          68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (5)
             72 BINARY_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

 11     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE       90

 12          86 LOAD_CONST               7 (True)
             88 RETURN_VALUE

 13     >>   90 LOAD_CONST               2 (False)
             92 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        for p in 2, 3, 5:
            while num % p == 0 < num:
                num /= p
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbcc9b752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbcc9b752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7fbcc9b75240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fbcc9b75240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((2, 3, 5))
              2 GET_ITER
        >>    4 FOR_ITER                42 (to 48)
              6 STORE_FAST               2 (p)

  4     >>    8 LOAD_FAST                1 (num)
             10 LOAD_FAST                2 (p)
             12 BINARY_MODULO
             14 LOAD_CONST               2 (0)
             16 DUP_TOP
             18 ROT_THREE
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       32
             24 LOAD_FAST                1 (num)
             26 COMPARE_OP               0 (<)
             28 POP_JUMP_IF_FALSE        4
             30 JUMP_FORWARD             4 (to 36)
        >>   32 POP_TOP
             34 JUMP_ABSOLUTE            4

  5     >>   36 LOAD_FAST                1 (num)
             38 LOAD_FAST                2 (p)
             40 INPLACE_TRUE_DIVIDE
             42 STORE_FAST               1 (num)
             44 JUMP_ABSOLUTE            8
             46 JUMP_ABSOLUTE            4

  6     >>   48 LOAD_FAST                1 (num)
             50 LOAD_CONST               3 (1)
             52 COMPARE_OP               2 (==)
             54 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num < 1: return False
        for factor in [2,3,5]:
            while num % factor == 0:
                num //= factor
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc549ee52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc549ee52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7fc549ee5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fc549ee5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               3 ((2, 3, 5))
             14 GET_ITER
        >>   16 FOR_ITER                26 (to 44)
             18 STORE_FAST               2 (factor)

  5     >>   20 LOAD_FAST                1 (num)
             22 LOAD_FAST                2 (factor)
             24 BINARY_MODULO
             26 LOAD_CONST               4 (0)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       16

  6          32 LOAD_FAST                1 (num)
             34 LOAD_FAST                2 (factor)
             36 INPLACE_FLOOR_DIVIDE
             38 STORE_FAST               1 (num)
             40 JUMP_ABSOLUTE           20
             42 JUMP_ABSOLUTE           16

  7     >>   44 LOAD_FAST                1 (num)
             46 LOAD_CONST               1 (1)
             48 COMPARE_OP               2 (==)
             50 RETURN_VALUE
None
"
isUgly,"class Solution:
	def isUgly(self, num: int) -> bool:
		if num < 1:
			return False
		while num > 1:
			if num % 2 == 0:
				num //= 2
			elif num % 3 == 0:
				num //= 3
			elif num % 5 == 0:
				num //= 5
			else:
				return False
		return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3a535f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3a535f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f3a535f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f3a535f5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       92

  6          20 LOAD_FAST                1 (num)
             22 LOAD_CONST               3 (2)
             24 BINARY_MODULO
             26 LOAD_CONST               4 (0)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       42

  7          32 LOAD_FAST                1 (num)
             34 LOAD_CONST               3 (2)
             36 INPLACE_FLOOR_DIVIDE
             38 STORE_FAST               1 (num)
             40 JUMP_ABSOLUTE           12

  8     >>   42 LOAD_FAST                1 (num)
             44 LOAD_CONST               5 (3)
             46 BINARY_MODULO
             48 LOAD_CONST               4 (0)
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_FALSE       64

  9          54 LOAD_FAST                1 (num)
             56 LOAD_CONST               5 (3)
             58 INPLACE_FLOOR_DIVIDE
             60 STORE_FAST               1 (num)
             62 JUMP_ABSOLUTE           12

 10     >>   64 LOAD_FAST                1 (num)
             66 LOAD_CONST               6 (5)
             68 BINARY_MODULO
             70 LOAD_CONST               4 (0)
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       86

 11          76 LOAD_FAST                1 (num)
             78 LOAD_CONST               6 (5)
             80 INPLACE_FLOOR_DIVIDE
             82 STORE_FAST               1 (num)
             84 JUMP_ABSOLUTE           12

 13     >>   86 LOAD_CONST               2 (False)
             88 RETURN_VALUE
             90 JUMP_ABSOLUTE           12

 14     >>   92 LOAD_CONST               7 (True)
             94 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num < 1:
            return False
        while num % 2 == 0 or num % 3 == 0 or num % 5 == 0:
            for i in [2,3,5]:
                if num % i == 0:
                    num /= i
        
        return num == 1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd548a552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd548a552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7fd548a55240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fd548a55240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               4 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_TRUE        48
             24 LOAD_FAST                1 (num)
             26 LOAD_CONST               5 (3)
             28 BINARY_MODULO
             30 LOAD_CONST               4 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_TRUE        48
             36 LOAD_FAST                1 (num)
             38 LOAD_CONST               6 (5)
             40 BINARY_MODULO
             42 LOAD_CONST               4 (0)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       80

  6     >>   48 LOAD_CONST               7 ((2, 3, 5))
             50 GET_ITER
        >>   52 FOR_ITER                24 (to 78)
             54 STORE_FAST               2 (i)

  7          56 LOAD_FAST                1 (num)
             58 LOAD_FAST                2 (i)
             60 BINARY_MODULO
             62 LOAD_CONST               4 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       52

  8          68 LOAD_FAST                1 (num)
             70 LOAD_FAST                2 (i)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           52
        >>   78 JUMP_ABSOLUTE           12

 10     >>   80 LOAD_FAST                1 (num)
             82 LOAD_CONST               1 (1)
             84 COMPARE_OP               2 (==)
             86 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        return num > 0 == 30**30 % num
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9b2df653a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9b2df653a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f9b2df652f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f9b2df652f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 DUP_TOP
              6 ROT_THREE
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    26
             12 LOAD_CONST               2 (30)
             14 LOAD_CONST               2 (30)
             16 BINARY_POWER
             18 LOAD_FAST                1 (num)
             20 BINARY_MODULO
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
        >>   26 ROT_TWO
             28 POP_TOP
             30 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num == 1:
            return True
        if(num<1):
            return False
        n2 = num/self.maxd(num,2)
        if(n2 == 1):
            return True
        n3 = n2/self.maxd(num,3)
        if(n3 == 1):
            return True
        n5 = n3/self.maxd(num,5)
        if(n5 == 1):
            return True
        return False
        
        
        
    def maxd(self,num,n):
        count = 0
        while(num%n == 0):
            num = num/n
            count += 1
        return n**count
               
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2782f153a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2782f153a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f2782f152f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)

 24          16 LOAD_CONST               3 (<code object maxd at 0x7f2782f15240, file ""<ast>"", line 24>)
             18 LOAD_CONST               4 ('Solution.maxd')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (maxd)
             24 LOAD_CONST               5 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f2782f152f0, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       24

 10          20 LOAD_CONST               3 (False)
             22 RETURN_VALUE

 11     >>   24 LOAD_FAST                1 (num)
             26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              0 (maxd)
             30 LOAD_FAST                1 (num)
             32 LOAD_CONST               4 (2)
             34 CALL_METHOD              2
             36 BINARY_TRUE_DIVIDE
             38 STORE_FAST               2 (n2)

 12          40 LOAD_FAST                2 (n2)
             42 LOAD_CONST               1 (1)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       52

 13          48 LOAD_CONST               2 (True)
             50 RETURN_VALUE

 14     >>   52 LOAD_FAST                2 (n2)
             54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              0 (maxd)
             58 LOAD_FAST                1 (num)
             60 LOAD_CONST               5 (3)
             62 CALL_METHOD              2
             64 BINARY_TRUE_DIVIDE
             66 STORE_FAST               3 (n3)

 15          68 LOAD_FAST                3 (n3)
             70 LOAD_CONST               1 (1)
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       80

 16          76 LOAD_CONST               2 (True)
             78 RETURN_VALUE

 17     >>   80 LOAD_FAST                3 (n3)
             82 LOAD_FAST                0 (self)
             84 LOAD_METHOD              0 (maxd)
             86 LOAD_FAST                1 (num)
             88 LOAD_CONST               6 (5)
             90 CALL_METHOD              2
             92 BINARY_TRUE_DIVIDE
             94 STORE_FAST               4 (n5)

 18          96 LOAD_FAST                4 (n5)
             98 LOAD_CONST               1 (1)
            100 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_FALSE      108

 19         104 LOAD_CONST               2 (True)
            106 RETURN_VALUE

 20     >>  108 LOAD_CONST               3 (False)
            110 RETURN_VALUE

Disassembly of <code object maxd at 0x7f2782f15240, file ""<ast>"", line 24>:
 25           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (count)

 26     >>    4 LOAD_FAST                1 (num)
              6 LOAD_FAST                2 (n)
              8 BINARY_MODULO
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       34

 27          16 LOAD_FAST                1 (num)
             18 LOAD_FAST                2 (n)
             20 BINARY_TRUE_DIVIDE
             22 STORE_FAST               1 (num)

 28          24 LOAD_FAST                3 (count)
             26 LOAD_CONST               2 (1)
             28 INPLACE_ADD
             30 STORE_FAST               3 (count)
             32 JUMP_ABSOLUTE            4

 29     >>   34 LOAD_FAST                2 (n)
             36 LOAD_FAST                3 (count)
             38 BINARY_POWER
             40 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [2, 3, 5]
        for mult in multipliers:
            for _ in range(1000):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f404eb55240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f404eb55240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f404eb552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f404eb552f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               4 (2)
             26 LOAD_CONST               5 (3)
             28 LOAD_CONST               6 (5)
             30 BUILD_LIST               3
             32 STORE_FAST               2 (multipliers)

  8          34 LOAD_FAST                2 (multipliers)
             36 GET_ITER
        >>   38 FOR_ITER                68 (to 108)
             40 STORE_FAST               3 (mult)

  9          42 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               7 (1000)
             46 CALL_FUNCTION            1
             48 GET_ITER
        >>   50 FOR_ITER                54 (to 106)
             52 STORE_FAST               4 (_)

 10          54 LOAD_FAST                1 (n)
             56 LOAD_METHOD              1 (__mod__)
             58 LOAD_FAST                3 (mult)
             60 CALL_METHOD              1
             62 LOAD_CONST               8 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE      100

 11          68 LOAD_GLOBAL              2 (divmod)
             70 LOAD_FAST                1 (n)
             72 LOAD_FAST                3 (mult)
             74 CALL_FUNCTION            2
             76 LOAD_CONST               8 (0)
             78 BINARY_SUBSCR
             80 STORE_FAST               1 (n)

 12          82 LOAD_FAST                1 (n)
             84 LOAD_CONST               1 (1)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE      104

 13          90 POP_TOP
             92 POP_TOP
             94 LOAD_CONST               3 (True)
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           50

 15     >>  100 POP_TOP
            102 JUMP_ABSOLUTE           38
        >>  104 JUMP_ABSOLUTE           50
        >>  106 JUMP_ABSOLUTE           38

 17     >>  108 LOAD_CONST               2 (False)
            110 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [30, 15, 10, 8, 6, 5, 4, 3, 2]
        for mult in multipliers:
            for _ in range(1000):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False

        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f159f085240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f159f085240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f159f0852f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f159f0852f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               4 (30)
             26 LOAD_CONST               5 (15)
             28 LOAD_CONST               6 (10)
             30 LOAD_CONST               7 (8)
             32 LOAD_CONST               8 (6)
             34 LOAD_CONST               9 (5)
             36 LOAD_CONST              10 (4)
             38 LOAD_CONST              11 (3)
             40 LOAD_CONST              12 (2)
             42 BUILD_LIST               9
             44 STORE_FAST               2 (multipliers)

  8          46 LOAD_FAST                2 (multipliers)
             48 GET_ITER
        >>   50 FOR_ITER                68 (to 120)
             52 STORE_FAST               3 (mult)

  9          54 LOAD_GLOBAL              0 (range)
             56 LOAD_CONST              13 (1000)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER                54 (to 118)
             64 STORE_FAST               4 (_)

 10          66 LOAD_FAST                1 (n)
             68 LOAD_METHOD              1 (__mod__)
             70 LOAD_FAST                3 (mult)
             72 CALL_METHOD              1
             74 LOAD_CONST              14 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE      112

 11          80 LOAD_GLOBAL              2 (divmod)
             82 LOAD_FAST                1 (n)
             84 LOAD_FAST                3 (mult)
             86 CALL_FUNCTION            2
             88 LOAD_CONST              14 (0)
             90 BINARY_SUBSCR
             92 STORE_FAST               1 (n)

 12          94 LOAD_FAST                1 (n)
             96 LOAD_CONST               1 (1)
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE      116

 13         102 POP_TOP
            104 POP_TOP
            106 LOAD_CONST               3 (True)
            108 RETURN_VALUE
            110 JUMP_ABSOLUTE           62

 15     >>  112 POP_TOP
            114 JUMP_ABSOLUTE           50
        >>  116 JUMP_ABSOLUTE           62
        >>  118 JUMP_ABSOLUTE           50

 17     >>  120 LOAD_CONST               2 (False)
            122 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n<0:
            x = 1/x
            n = abs(n)
        res = 1
        while n > 0:
            if n%2 == 1:
                res *= x
            x *= x
            n //= 2
        return res
    
    
   # 2^8 = 4^4
   # 2^9 = 2*4^4 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5eec5152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5eec5152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f5eec515240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f5eec515240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       24

  4           8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 STORE_FAST               1 (x)

  5          16 LOAD_GLOBAL              0 (abs)
             18 LOAD_FAST                2 (n)
             20 CALL_FUNCTION            1
             22 STORE_FAST               2 (n)

  6     >>   24 LOAD_CONST               2 (1)
             26 STORE_FAST               3 (res)

  7     >>   28 LOAD_FAST                2 (n)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               4 (>)
             34 POP_JUMP_IF_FALSE       74

  8          36 LOAD_FAST                2 (n)
             38 LOAD_CONST               3 (2)
             40 BINARY_MODULO
             42 LOAD_CONST               2 (1)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       56

  9          48 LOAD_FAST                3 (res)
             50 LOAD_FAST                1 (x)
             52 INPLACE_MULTIPLY
             54 STORE_FAST               3 (res)

 10     >>   56 LOAD_FAST                1 (x)
             58 LOAD_FAST                1 (x)
             60 INPLACE_MULTIPLY
             62 STORE_FAST               1 (x)

 11          64 LOAD_FAST                2 (n)
             66 LOAD_CONST               3 (2)
             68 INPLACE_FLOOR_DIVIDE
             70 STORE_FAST               2 (n)
             72 JUMP_ABSOLUTE           28

 12     >>   74 LOAD_FAST                3 (res)
             76 RETURN_VALUE
None
"
myPow,"from math import inf
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if abs(x) == 1:
            return 1 if n % 2 == 0 else x
        
        memo = {1: x}
        isInverse = n < 0
        m = abs(n)
        result = 1
        
        while m > 0:
            # reached lang limits
            if result == 0.0:
                return result
            if result == inf:
                break
                
            if m in memo:
                result *= memo[m]
                break
            
            subRes = x
            progress = 1
			
			# equivalent to floor(log2(m))
            while progress * 2 <= m:
                subRes *= subRes
                progress *= 2
            
            memo[progress] = subRes
            result *= subRes
            m -= progress
            
        return 1 / result if isInverse else result
    
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('inf',))
              4 IMPORT_NAME              0 (math)
              6 IMPORT_FROM              1 (inf)
              8 STORE_NAME               1 (inf)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fdb520b52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdb520b52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fdb520b5240, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fdb520b5240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (abs)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               2 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       44

  7          24 LOAD_FAST                2 (n)
             26 LOAD_CONST               3 (2)
             28 BINARY_MODULO
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       40
             36 LOAD_CONST               2 (1)
             38 RETURN_VALUE
        >>   40 LOAD_FAST                1 (x)
             42 RETURN_VALUE

  9     >>   44 LOAD_CONST               2 (1)
             46 LOAD_FAST                1 (x)
             48 BUILD_MAP                1
             50 STORE_FAST               3 (memo)

 10          52 LOAD_FAST                2 (n)
             54 LOAD_CONST               1 (0)
             56 COMPARE_OP               0 (<)
             58 STORE_FAST               4 (isInverse)

 11          60 LOAD_GLOBAL              0 (abs)
             62 LOAD_FAST                2 (n)
             64 CALL_FUNCTION            1
             66 STORE_FAST               5 (m)

 12          68 LOAD_CONST               2 (1)
             70 STORE_FAST               6 (result)

 14     >>   72 LOAD_FAST                5 (m)
             74 LOAD_CONST               1 (0)
             76 COMPARE_OP               4 (>)
             78 POP_JUMP_IF_FALSE      188

 16          80 LOAD_FAST                6 (result)
             82 LOAD_CONST               4 (0.0)
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE       92

 17          88 LOAD_FAST                6 (result)
             90 RETURN_VALUE

 18     >>   92 LOAD_FAST                6 (result)
             94 LOAD_GLOBAL              1 (inf)
             96 COMPARE_OP               2 (==)
             98 POP_JUMP_IF_FALSE      102

 19         100 JUMP_ABSOLUTE          188

 21     >>  102 LOAD_FAST                5 (m)
            104 LOAD_FAST                3 (memo)
            106 COMPARE_OP               6 (in)
            108 POP_JUMP_IF_FALSE      124

 22         110 LOAD_FAST                6 (result)
            112 LOAD_FAST                3 (memo)
            114 LOAD_FAST                5 (m)
            116 BINARY_SUBSCR
            118 INPLACE_MULTIPLY
            120 STORE_FAST               6 (result)

 23         122 JUMP_ABSOLUTE          188

 25     >>  124 LOAD_FAST                1 (x)
            126 STORE_FAST               7 (subRes)

 26         128 LOAD_CONST               2 (1)
            130 STORE_FAST               8 (progress)

 29     >>  132 LOAD_FAST                8 (progress)
            134 LOAD_CONST               3 (2)
            136 BINARY_MULTIPLY
            138 LOAD_FAST                5 (m)
            140 COMPARE_OP               1 (<=)
            142 POP_JUMP_IF_FALSE      162

 30         144 LOAD_FAST                7 (subRes)
            146 LOAD_FAST                7 (subRes)
            148 INPLACE_MULTIPLY
            150 STORE_FAST               7 (subRes)

 31         152 LOAD_FAST                8 (progress)
            154 LOAD_CONST               3 (2)
            156 INPLACE_MULTIPLY
            158 STORE_FAST               8 (progress)
            160 JUMP_ABSOLUTE          132

 33     >>  162 LOAD_FAST                7 (subRes)
            164 LOAD_FAST                3 (memo)
            166 LOAD_FAST                8 (progress)
            168 STORE_SUBSCR

 34         170 LOAD_FAST                6 (result)
            172 LOAD_FAST                7 (subRes)
            174 INPLACE_MULTIPLY
            176 STORE_FAST               6 (result)

 35         178 LOAD_FAST                5 (m)
            180 LOAD_FAST                8 (progress)
            182 INPLACE_SUBTRACT
            184 STORE_FAST               5 (m)
            186 JUMP_ABSOLUTE           72

 37     >>  188 LOAD_FAST                4 (isInverse)
            190 POP_JUMP_IF_FALSE      200
            192 LOAD_CONST               2 (1)
            194 LOAD_FAST                6 (result)
            196 BINARY_TRUE_DIVIDE
            198 RETURN_VALUE
        >>  200 LOAD_FAST                6 (result)
            202 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa706d35500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa706d35500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fa706d35450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fa706d35450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0 or x == 1.0:
            return 1.0
        if x == 0:
            if n < 0:
                return float('inf')
            else:
                return 0.0
        
        if n < 0:
            x, n = 1/x, -n
        
        res, num, power = 1.0, x, n
        while power != 1:
            if power%2 == 0:
                num = num*num
                power /= 2
            else:
                res *= num
                power -= 1
        
        return res*num
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f126f4b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f126f4b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f126f4b5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f126f4b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (1.0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (1.0)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       48

  6          28 LOAD_FAST                2 (n)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               0 (<)
             34 POP_JUMP_IF_FALSE       44

  7          36 LOAD_GLOBAL              0 (float)
             38 LOAD_CONST               3 ('inf')
             40 CALL_FUNCTION            1
             42 RETURN_VALUE

  9     >>   44 LOAD_CONST               4 (0.0)
             46 RETURN_VALUE

 11     >>   48 LOAD_FAST                2 (n)
             50 LOAD_CONST               1 (0)
             52 COMPARE_OP               0 (<)
             54 POP_JUMP_IF_FALSE       72

 12          56 LOAD_CONST               5 (1)
             58 LOAD_FAST                1 (x)
             60 BINARY_TRUE_DIVIDE
             62 LOAD_FAST                2 (n)
             64 UNARY_NEGATIVE
             66 ROT_TWO
             68 STORE_FAST               1 (x)
             70 STORE_FAST               2 (n)

 14     >>   72 LOAD_CONST               2 (1.0)
             74 LOAD_FAST                1 (x)
             76 LOAD_FAST                2 (n)
             78 ROT_THREE
             80 ROT_TWO
             82 STORE_FAST               3 (res)
             84 STORE_FAST               4 (num)
             86 STORE_FAST               5 (power)

 15     >>   88 LOAD_FAST                5 (power)
             90 LOAD_CONST               5 (1)
             92 COMPARE_OP               3 (!=)
             94 POP_JUMP_IF_FALSE      144

 16          96 LOAD_FAST                5 (power)
             98 LOAD_CONST               6 (2)
            100 BINARY_MODULO
            102 LOAD_CONST               1 (0)
            104 COMPARE_OP               2 (==)
            106 POP_JUMP_IF_FALSE      126

 17         108 LOAD_FAST                4 (num)
            110 LOAD_FAST                4 (num)
            112 BINARY_MULTIPLY
            114 STORE_FAST               4 (num)

 18         116 LOAD_FAST                5 (power)
            118 LOAD_CONST               6 (2)
            120 INPLACE_TRUE_DIVIDE
            122 STORE_FAST               5 (power)
            124 JUMP_ABSOLUTE           88

 20     >>  126 LOAD_FAST                3 (res)
            128 LOAD_FAST                4 (num)
            130 INPLACE_MULTIPLY
            132 STORE_FAST               3 (res)

 21         134 LOAD_FAST                5 (power)
            136 LOAD_CONST               5 (1)
            138 INPLACE_SUBTRACT
            140 STORE_FAST               5 (power)
            142 JUMP_ABSOLUTE           88

 23     >>  144 LOAD_FAST                3 (res)
            146 LOAD_FAST                4 (num)
            148 BINARY_MULTIPLY
            150 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f701ed15500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f701ed15500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f701ed15450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f701ed15450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        # x**n == (1/x)**(-n) 
        # by using the property above we can transform the negetive power problem to positive power problem
        # so that we solve the positive power situation, we also solved the negtive power situation.
        if n < 0:
            x = 1/x
            n = -n
        # We solve the positive power here:
        power = 1
        current_product = x
        while n > 0:
            # if n is odd numberm, we need to time x one more time
            if n%2 : 
                power = power * current_product
            current_product = current_product * current_product
            n = n//2
        return power
            
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f61396052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f61396052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f6139605240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f6139605240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       22

  7           8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 STORE_FAST               1 (x)

  8          16 LOAD_FAST                2 (n)
             18 UNARY_NEGATIVE
             20 STORE_FAST               2 (n)

 10     >>   22 LOAD_CONST               2 (1)
             24 STORE_FAST               3 (power)

 11          26 LOAD_FAST                1 (x)
             28 STORE_FAST               4 (current_product)

 12     >>   30 LOAD_FAST                2 (n)
             32 LOAD_CONST               1 (0)
             34 COMPARE_OP               4 (>)
             36 POP_JUMP_IF_FALSE       72

 14          38 LOAD_FAST                2 (n)
             40 LOAD_CONST               3 (2)
             42 BINARY_MODULO
             44 POP_JUMP_IF_FALSE       54

 15          46 LOAD_FAST                3 (power)
             48 LOAD_FAST                4 (current_product)
             50 BINARY_MULTIPLY
             52 STORE_FAST               3 (power)

 16     >>   54 LOAD_FAST                4 (current_product)
             56 LOAD_FAST                4 (current_product)
             58 BINARY_MULTIPLY
             60 STORE_FAST               4 (current_product)

 17          62 LOAD_FAST                2 (n)
             64 LOAD_CONST               3 (2)
             66 BINARY_FLOOR_DIVIDE
             68 STORE_FAST               2 (n)
             70 JUMP_ABSOLUTE           30

 18     >>   72 LOAD_FAST                3 (power)
             74 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0 or abs(x) == 1: return 1 if x == 1 else 1 - 2*(n % 2)
        p, T = 1, 1E5
        for i in range(abs(n)):
            p *= x
            if (abs(p) < 1/T and n > 0) or (abs(p) > T and n < 0): return 0
        return p if n > 0 else 1/p
		","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2d184252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2d184252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f2d18425240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f2d18425240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_GLOBAL              0 (abs)
             10 LOAD_FAST                1 (x)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       48
        >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               2 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               2 (1)
             30 RETURN_VALUE
        >>   32 LOAD_CONST               2 (1)
             34 LOAD_CONST               3 (2)
             36 LOAD_FAST                2 (n)
             38 LOAD_CONST               3 (2)
             40 BINARY_MODULO
             42 BINARY_MULTIPLY
             44 BINARY_SUBTRACT
             46 RETURN_VALUE

  4     >>   48 LOAD_CONST               4 ((1, 100000.0))
             50 UNPACK_SEQUENCE          2
             52 STORE_FAST               3 (p)
             54 STORE_FAST               4 (T)

  5          56 LOAD_GLOBAL              1 (range)
             58 LOAD_GLOBAL              0 (abs)
             60 LOAD_FAST                2 (n)
             62 CALL_FUNCTION            1
             64 CALL_FUNCTION            1
             66 GET_ITER
        >>   68 FOR_ITER                62 (to 132)
             70 STORE_FAST               5 (i)

  6          72 LOAD_FAST                3 (p)
             74 LOAD_FAST                1 (x)
             76 INPLACE_MULTIPLY
             78 STORE_FAST               3 (p)

  7          80 LOAD_GLOBAL              0 (abs)
             82 LOAD_FAST                3 (p)
             84 CALL_FUNCTION            1
             86 LOAD_CONST               2 (1)
             88 LOAD_FAST                4 (T)
             90 BINARY_TRUE_DIVIDE
             92 COMPARE_OP               0 (<)
             94 POP_JUMP_IF_FALSE      104
             96 LOAD_FAST                2 (n)
             98 LOAD_CONST               1 (0)
            100 COMPARE_OP               4 (>)
            102 POP_JUMP_IF_TRUE       124
        >>  104 LOAD_GLOBAL              0 (abs)
            106 LOAD_FAST                3 (p)
            108 CALL_FUNCTION            1
            110 LOAD_FAST                4 (T)
            112 COMPARE_OP               4 (>)
            114 POP_JUMP_IF_FALSE       68
            116 LOAD_FAST                2 (n)
            118 LOAD_CONST               1 (0)
            120 COMPARE_OP               0 (<)
            122 POP_JUMP_IF_FALSE       68
        >>  124 POP_TOP
            126 LOAD_CONST               1 (0)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE           68

  8     >>  132 LOAD_FAST                2 (n)
            134 LOAD_CONST               1 (0)
            136 COMPARE_OP               4 (>)
            138 POP_JUMP_IF_FALSE      144
            140 LOAD_FAST                3 (p)
            142 RETURN_VALUE
        >>  144 LOAD_CONST               2 (1)
            146 LOAD_FAST                3 (p)
            148 BINARY_TRUE_DIVIDE
            150 RETURN_VALUE
None
"
myPow,"class Solution:
	def myPow(self, x: float, n: int) -> float:
		import math
		return pow(x,n)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6ddf0d5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6ddf0d5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f6ddf0d5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f6ddf0d5450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               0 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_FAST               3 (math)

  4           8 LOAD_GLOBAL              1 (pow)
             10 LOAD_FAST                1 (x)
             12 LOAD_FAST                2 (n)
             14 CALL_FUNCTION            2
             16 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        
        myres = 1
        
        if n == 0: return 1
        elif n < 0: 
            x = 1/x
            n = -n
            
        curProd = x
        k = n
        
        while (k > 0):
            if k%2 == 1: myres *= curProd
            curProd *= curProd
            k //= 2
        return myres

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f11133f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f11133f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f11133f5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f11133f5240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (myres)

  6           4 LOAD_FAST                2 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (1)
             14 RETURN_VALUE

  7     >>   16 LOAD_FAST                2 (n)
             18 LOAD_CONST               2 (0)
             20 COMPARE_OP               0 (<)
             22 POP_JUMP_IF_FALSE       38

  8          24 LOAD_CONST               1 (1)
             26 LOAD_FAST                1 (x)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               1 (x)

  9          32 LOAD_FAST                2 (n)
             34 UNARY_NEGATIVE
             36 STORE_FAST               2 (n)

 11     >>   38 LOAD_FAST                1 (x)
             40 STORE_FAST               4 (curProd)

 12          42 LOAD_FAST                2 (n)
             44 STORE_FAST               5 (k)

 14     >>   46 LOAD_FAST                5 (k)
             48 LOAD_CONST               2 (0)
             50 COMPARE_OP               4 (>)
             52 POP_JUMP_IF_FALSE       92

 15          54 LOAD_FAST                5 (k)
             56 LOAD_CONST               3 (2)
             58 BINARY_MODULO
             60 LOAD_CONST               1 (1)
             62 COMPARE_OP               2 (==)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_FAST                3 (myres)
             68 LOAD_FAST                4 (curProd)
             70 INPLACE_MULTIPLY
             72 STORE_FAST               3 (myres)

 16     >>   74 LOAD_FAST                4 (curProd)
             76 LOAD_FAST                4 (curProd)
             78 INPLACE_MULTIPLY
             80 STORE_FAST               4 (curProd)

 17          82 LOAD_FAST                5 (k)
             84 LOAD_CONST               3 (2)
             86 INPLACE_FLOOR_DIVIDE
             88 STORE_FAST               5 (k)
             90 JUMP_ABSOLUTE           46

 18     >>   92 LOAD_FAST                3 (myres)
             94 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        ret = 1
        tmp = abs(n)
        while(tmp):
            if tmp % 2 == 1:
                ret *= x
                tmp -= 1
            else:
                x *= x
                tmp /= 2
                
        return ret if n>0 else 1/ret
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcbceee52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcbceee52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fcbceee5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fcbceee5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (ret)

  4           4 LOAD_GLOBAL              0 (abs)
              6 LOAD_FAST                2 (n)
              8 CALL_FUNCTION            1
             10 STORE_FAST               4 (tmp)

  5     >>   12 LOAD_FAST                4 (tmp)
             14 POP_JUMP_IF_FALSE       64

  6          16 LOAD_FAST                4 (tmp)
             18 LOAD_CONST               2 (2)
             20 BINARY_MODULO
             22 LOAD_CONST               1 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       46

  7          28 LOAD_FAST                3 (ret)
             30 LOAD_FAST                1 (x)
             32 INPLACE_MULTIPLY
             34 STORE_FAST               3 (ret)

  8          36 LOAD_FAST                4 (tmp)
             38 LOAD_CONST               1 (1)
             40 INPLACE_SUBTRACT
             42 STORE_FAST               4 (tmp)
             44 JUMP_ABSOLUTE           12

 10     >>   46 LOAD_FAST                1 (x)
             48 LOAD_FAST                1 (x)
             50 INPLACE_MULTIPLY
             52 STORE_FAST               1 (x)

 11          54 LOAD_FAST                4 (tmp)
             56 LOAD_CONST               2 (2)
             58 INPLACE_TRUE_DIVIDE
             60 STORE_FAST               4 (tmp)
             62 JUMP_ABSOLUTE           12

 13     >>   64 LOAD_FAST                2 (n)
             66 LOAD_CONST               3 (0)
             68 COMPARE_OP               4 (>)
             70 POP_JUMP_IF_FALSE       76
             72 LOAD_FAST                3 (ret)
             74 RETURN_VALUE
        >>   76 LOAD_CONST               1 (1)
             78 LOAD_FAST                3 (ret)
             80 BINARY_TRUE_DIVIDE
             82 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        result = 1

        
        if n<0:
            x = 1/x
            n=-n
        power = n

        
        while power:
            if power&1:
                result = result*x
            x = x*x
            power = power >>1
            
        return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f69013a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f69013a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f69013a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f69013a5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (result)

  6           4 LOAD_FAST                2 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_FALSE       26

  7          12 LOAD_CONST               1 (1)
             14 LOAD_FAST                1 (x)
             16 BINARY_TRUE_DIVIDE
             18 STORE_FAST               1 (x)

  8          20 LOAD_FAST                2 (n)
             22 UNARY_NEGATIVE
             24 STORE_FAST               2 (n)

  9     >>   26 LOAD_FAST                2 (n)
             28 STORE_FAST               4 (power)

 12     >>   30 LOAD_FAST                4 (power)
             32 POP_JUMP_IF_FALSE       68

 13          34 LOAD_FAST                4 (power)
             36 LOAD_CONST               1 (1)
             38 BINARY_AND
             40 POP_JUMP_IF_FALSE       50

 14          42 LOAD_FAST                3 (result)
             44 LOAD_FAST                1 (x)
             46 BINARY_MULTIPLY
             48 STORE_FAST               3 (result)

 15     >>   50 LOAD_FAST                1 (x)
             52 LOAD_FAST                1 (x)
             54 BINARY_MULTIPLY
             56 STORE_FAST               1 (x)

 16          58 LOAD_FAST                4 (power)
             60 LOAD_CONST               1 (1)
             62 BINARY_RSHIFT
             64 STORE_FAST               4 (power)
             66 JUMP_ABSOLUTE           30

 18     >>   68 LOAD_FAST                3 (result)
             70 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x, n, r=1) -> float:
        x, n = n < 0 and 1 / x or x, abs(n)
        return self.myPow(x * x, n // 2, r * (not n % 2 or x)) if n else r
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9efd3652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9efd3652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               6 ((1,))
             10 LOAD_NAME                3 (float)
             12 LOAD_CONST               2 (('return',))
             14 BUILD_CONST_KEY_MAP      1
             16 LOAD_CONST               3 (<code object myPow at 0x7f9efd365240, file ""<ast>"", line 2>)
             18 LOAD_CONST               4 ('Solution.myPow')
             20 MAKE_FUNCTION            5 (defaults, annotations)
             22 STORE_NAME               4 (myPow)
             24 LOAD_CONST               5 (None)
             26 RETURN_VALUE

Disassembly of <code object myPow at 0x7f9efd365240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       16
              8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 JUMP_IF_TRUE_OR_POP     18
        >>   16 LOAD_FAST                1 (x)
        >>   18 LOAD_GLOBAL              0 (abs)
             20 LOAD_FAST                2 (n)
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               1 (x)
             28 STORE_FAST               2 (n)

  4          30 LOAD_FAST                2 (n)
             32 POP_JUMP_IF_FALSE       70
             34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              1 (myPow)
             38 LOAD_FAST                1 (x)
             40 LOAD_FAST                1 (x)
             42 BINARY_MULTIPLY
             44 LOAD_FAST                2 (n)
             46 LOAD_CONST               3 (2)
             48 BINARY_FLOOR_DIVIDE
             50 LOAD_FAST                3 (r)
             52 LOAD_FAST                2 (n)
             54 LOAD_CONST               3 (2)
             56 BINARY_MODULO
             58 UNARY_NOT
             60 JUMP_IF_TRUE_OR_POP     64
             62 LOAD_FAST                1 (x)
        >>   64 BINARY_MULTIPLY
             66 CALL_METHOD              3
             68 RETURN_VALUE
        >>   70 LOAD_FAST                3 (r)
             72 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:

        def function(base = x, exponent = abs(n)):
            if exponent == 0:
                return 1
            elif exponent % 2 == 0:
                return function(base * base, exponent // 2)
            else:
                return base * function(base * base, (exponent - 1) // 2)

        f = function()
        
        return float(f) if n >= 0 else 1/f
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe7518d5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe7518d5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fe7518d5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fe7518d5450, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_GLOBAL              0 (abs)
              4 LOAD_FAST                2 (n)
              6 CALL_FUNCTION            1
              8 BUILD_TUPLE              2
             10 LOAD_CLOSURE             0 (function)
             12 BUILD_TUPLE              1
             14 LOAD_CONST               1 (<code object function at 0x7fe7518d53a0, file ""<ast>"", line 4>)
             16 LOAD_CONST               2 ('Solution.myPow.<locals>.function')
             18 MAKE_FUNCTION            9 (defaults, closure)
             20 STORE_DEREF              0 (function)

 12          22 LOAD_DEREF               0 (function)
             24 CALL_FUNCTION            0
             26 STORE_FAST               3 (f)

 14          28 LOAD_FAST                2 (n)
             30 LOAD_CONST               3 (0)
             32 COMPARE_OP               5 (>=)
             34 POP_JUMP_IF_FALSE       44
             36 LOAD_GLOBAL              1 (float)
             38 LOAD_FAST                3 (f)
             40 CALL_FUNCTION            1
             42 RETURN_VALUE
        >>   44 LOAD_CONST               4 (1)
             46 LOAD_FAST                3 (f)
             48 BINARY_TRUE_DIVIDE
             50 RETURN_VALUE

Disassembly of <code object function at 0x7fe7518d53a0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (exponent)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  6           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                1 (exponent)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       42

  8          24 LOAD_DEREF               0 (function)
             26 LOAD_FAST                0 (base)
             28 LOAD_FAST                0 (base)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (exponent)
             34 LOAD_CONST               3 (2)
             36 BINARY_FLOOR_DIVIDE
             38 CALL_FUNCTION            2
             40 RETURN_VALUE

 10     >>   42 LOAD_FAST                0 (base)
             44 LOAD_DEREF               0 (function)
             46 LOAD_FAST                0 (base)
             48 LOAD_FAST                0 (base)
             50 BINARY_MULTIPLY
             52 LOAD_FAST                1 (exponent)
             54 LOAD_CONST               2 (1)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               3 (2)
             60 BINARY_FLOOR_DIVIDE
             62 CALL_FUNCTION            2
             64 BINARY_MULTIPLY
             66 RETURN_VALUE
             68 LOAD_CONST               0 (None)
             70 RETURN_VALUE
None
"
myPow,"class Solution:

    def myPow(self, x: float, n: int) -> float:
        if x == 0: return 0.0
        if x == 1 or n == 0: return 1.0
        
        power = abs(n)
        stored_power = {}
        res = self.get_positive_power(x, power, stored_power)
        return 1/res if n < 0 else res 
		
    def get_positive_power(self, x, power, stored_power):
        if power == 1: return x
        if power == 2: return x*x
        
        if stored_power.get(power): return stored_power[power]
        
        prev_power = 1
        next_power = 2
        prev_val = x
        
        while next_power < power:
            prev_val = prev_val*prev_val
            stored_power[next_power] = prev_val
            prev_power = next_power
            next_power *= 2
        
        stored_power[power] = prev_val * self.get_positive_power(x, power-prev_power, stored_power)
        return stored_power[power]

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6a500c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6a500c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f6a500c5240, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)

 12          26 LOAD_CONST               4 (<code object get_positive_power at 0x7f6a500c5450, file ""<ast>"", line 12>)
             28 LOAD_CONST               5 ('Solution.get_positive_power')
             30 MAKE_FUNCTION            0
             32 STORE_NAME               6 (get_positive_power)
             34 LOAD_CONST               6 (None)
             36 RETURN_VALUE

Disassembly of <code object myPow at 0x7f6a500c5240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0.0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (x)
             14 LOAD_CONST               3 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_TRUE        28
             20 LOAD_FAST                2 (n)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
        >>   28 LOAD_CONST               4 (1.0)
             30 RETURN_VALUE

  7     >>   32 LOAD_GLOBAL              0 (abs)
             34 LOAD_FAST                2 (n)
             36 CALL_FUNCTION            1
             38 STORE_FAST               3 (power)

  8          40 BUILD_MAP                0
             42 STORE_FAST               4 (stored_power)

  9          44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              1 (get_positive_power)
             48 LOAD_FAST                1 (x)
             50 LOAD_FAST                3 (power)
             52 LOAD_FAST                4 (stored_power)
             54 CALL_METHOD              3
             56 STORE_FAST               5 (res)

 10          58 LOAD_FAST                2 (n)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               0 (<)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_CONST               3 (1)
             68 LOAD_FAST                5 (res)
             70 BINARY_TRUE_DIVIDE
             72 RETURN_VALUE
        >>   74 LOAD_FAST                5 (res)
             76 RETURN_VALUE

Disassembly of <code object get_positive_power at 0x7f6a500c5450, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                2 (power)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_FAST                1 (x)
             10 RETURN_VALUE

 14     >>   12 LOAD_FAST                2 (power)
             14 LOAD_CONST               2 (2)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28
             20 LOAD_FAST                1 (x)
             22 LOAD_FAST                1 (x)
             24 BINARY_MULTIPLY
             26 RETURN_VALUE

 16     >>   28 LOAD_FAST                3 (stored_power)
             30 LOAD_METHOD              0 (get)
             32 LOAD_FAST                2 (power)
             34 CALL_METHOD              1
             36 POP_JUMP_IF_FALSE       46
             38 LOAD_FAST                3 (stored_power)
             40 LOAD_FAST                2 (power)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

 18     >>   46 LOAD_CONST               1 (1)
             48 STORE_FAST               4 (prev_power)

 19          50 LOAD_CONST               2 (2)
             52 STORE_FAST               5 (next_power)

 20          54 LOAD_FAST                1 (x)
             56 STORE_FAST               6 (prev_val)

 22     >>   58 LOAD_FAST                5 (next_power)
             60 LOAD_FAST                2 (power)
             62 COMPARE_OP               0 (<)
             64 POP_JUMP_IF_FALSE       96

 23          66 LOAD_FAST                6 (prev_val)
             68 LOAD_FAST                6 (prev_val)
             70 BINARY_MULTIPLY
             72 STORE_FAST               6 (prev_val)

 24          74 LOAD_FAST                6 (prev_val)
             76 LOAD_FAST                3 (stored_power)
             78 LOAD_FAST                5 (next_power)
             80 STORE_SUBSCR

 25          82 LOAD_FAST                5 (next_power)
             84 STORE_FAST               4 (prev_power)

 26          86 LOAD_FAST                5 (next_power)
             88 LOAD_CONST               2 (2)
             90 INPLACE_MULTIPLY
             92 STORE_FAST               5 (next_power)
             94 JUMP_ABSOLUTE           58

 28     >>   96 LOAD_FAST                6 (prev_val)
             98 LOAD_FAST                0 (self)
            100 LOAD_METHOD              1 (get_positive_power)
            102 LOAD_FAST                1 (x)
            104 LOAD_FAST                2 (power)
            106 LOAD_FAST                4 (prev_power)
            108 BINARY_SUBTRACT
            110 LOAD_FAST                3 (stored_power)
            112 CALL_METHOD              3
            114 BINARY_MULTIPLY
            116 LOAD_FAST                3 (stored_power)
            118 LOAD_FAST                2 (power)
            120 STORE_SUBSCR

 29         122 LOAD_FAST                3 (stored_power)
            124 LOAD_FAST                2 (power)
            126 BINARY_SUBSCR
            128 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        ## RC ##
        ## APPROACH : RECURSION ##    
        def recurse(n):
            ans = 1
            if(n == 0):
                return 1
            if(n==1):
                return x
            if(n == 2):
                return x * x
            
            if(n%2 == 0):
                ans = recurse(n//2)
                return ans * ans
            if( n%2 == 1):
                ans = recurse(n//2) * recurse((n//2) + 1)
                return ans
            
        if( n < 0 ):
            x = 1/x
            n = -n
        return recurse(n)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd49d1b5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd49d1b5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fd49d1b53a0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fd49d1b53a0, file ""<ast>"", line 2>:
  5           0 LOAD_CLOSURE             0 (recurse)
              2 LOAD_CLOSURE             1 (x)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object recurse at 0x7fd49d1b5450, file ""<ast>"", line 5>)
              8 LOAD_CONST               2 ('Solution.myPow.<locals>.recurse')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (recurse)

 21          14 LOAD_FAST                2 (n)
             16 LOAD_CONST               3 (0)
             18 COMPARE_OP               0 (<)
             20 POP_JUMP_IF_FALSE       36

 22          22 LOAD_CONST               4 (1)
             24 LOAD_DEREF               1 (x)
             26 BINARY_TRUE_DIVIDE
             28 STORE_DEREF              1 (x)

 23          30 LOAD_FAST                2 (n)
             32 UNARY_NEGATIVE
             34 STORE_FAST               2 (n)

 24     >>   36 LOAD_DEREF               0 (recurse)
             38 LOAD_FAST                2 (n)
             40 CALL_FUNCTION            1
             42 RETURN_VALUE

Disassembly of <code object recurse at 0x7fd49d1b5450, file ""<ast>"", line 5>:
  6           0 LOAD_CONST               1 (1)
              2 STORE_FAST               1 (ans)

  7           4 LOAD_FAST                0 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  8          12 LOAD_CONST               1 (1)
             14 RETURN_VALUE

  9     >>   16 LOAD_FAST                0 (n)
             18 LOAD_CONST               1 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

 10          24 LOAD_DEREF               1 (x)
             26 RETURN_VALUE

 11     >>   28 LOAD_FAST                0 (n)
             30 LOAD_CONST               3 (2)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       44

 12          36 LOAD_DEREF               1 (x)
             38 LOAD_DEREF               1 (x)
             40 BINARY_MULTIPLY
             42 RETURN_VALUE

 14     >>   44 LOAD_FAST                0 (n)
             46 LOAD_CONST               3 (2)
             48 BINARY_MODULO
             50 LOAD_CONST               2 (0)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       76

 15          56 LOAD_DEREF               0 (recurse)
             58 LOAD_FAST                0 (n)
             60 LOAD_CONST               3 (2)
             62 BINARY_FLOOR_DIVIDE
             64 CALL_FUNCTION            1
             66 STORE_FAST               1 (ans)

 16          68 LOAD_FAST                1 (ans)
             70 LOAD_FAST                1 (ans)
             72 BINARY_MULTIPLY
             74 RETURN_VALUE

 17     >>   76 LOAD_FAST                0 (n)
             78 LOAD_CONST               3 (2)
             80 BINARY_MODULO
             82 LOAD_CONST               1 (1)
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE      120

 18          88 LOAD_DEREF               0 (recurse)
             90 LOAD_FAST                0 (n)
             92 LOAD_CONST               3 (2)
             94 BINARY_FLOOR_DIVIDE
             96 CALL_FUNCTION            1
             98 LOAD_DEREF               0 (recurse)
            100 LOAD_FAST                0 (n)
            102 LOAD_CONST               3 (2)
            104 BINARY_FLOOR_DIVIDE
            106 LOAD_CONST               1 (1)
            108 BINARY_ADD
            110 CALL_FUNCTION            1
            112 BINARY_MULTIPLY
            114 STORE_FAST               1 (ans)

 19         116 LOAD_FAST                1 (ans)
            118 RETURN_VALUE
        >>  120 LOAD_CONST               0 (None)
            122 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
            res = 1 
            temp = abs(n)
            while temp > 0:
                if temp & 1:
                    res = res * x 
                x = x * x 
                temp = temp >> 1 
            if n > 0:
                return res
            else:   
                return 1 / res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3a628352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3a628352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f3a62835240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f3a62835240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (res)

  4           4 LOAD_GLOBAL              0 (abs)
              6 LOAD_FAST                2 (n)
              8 CALL_FUNCTION            1
             10 STORE_FAST               4 (temp)

  5     >>   12 LOAD_FAST                4 (temp)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       54

  6          20 LOAD_FAST                4 (temp)
             22 LOAD_CONST               1 (1)
             24 BINARY_AND
             26 POP_JUMP_IF_FALSE       36

  7          28 LOAD_FAST                3 (res)
             30 LOAD_FAST                1 (x)
             32 BINARY_MULTIPLY
             34 STORE_FAST               3 (res)

  8     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                1 (x)
             40 BINARY_MULTIPLY
             42 STORE_FAST               1 (x)

  9          44 LOAD_FAST                4 (temp)
             46 LOAD_CONST               1 (1)
             48 BINARY_RSHIFT
             50 STORE_FAST               4 (temp)
             52 JUMP_ABSOLUTE           12

 10     >>   54 LOAD_FAST                2 (n)
             56 LOAD_CONST               2 (0)
             58 COMPARE_OP               4 (>)
             60 POP_JUMP_IF_FALSE       66

 11          62 LOAD_FAST                3 (res)
             64 RETURN_VALUE

 13     >>   66 LOAD_CONST               1 (1)
             68 LOAD_FAST                3 (res)
             70 BINARY_TRUE_DIVIDE
             72 RETURN_VALUE
             74 LOAD_CONST               0 (None)
             76 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n < 0:
            return Solution.calc((1/x), -1 * n)
        else:
            return Solution.calc(x, n)
    
    @staticmethod
    def calc(x,y):
        if y == 0:
            return 1
        if y == 1:
            return x
        if y % 2:
            return x * Solution.calc(x, y-1)
        return Solution.calc(x*x, y//2)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcb6c5753a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcb6c5753a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fcb6c575240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)

  8          26 LOAD_NAME                6 (staticmethod)

  9          28 LOAD_CONST               4 (<code object calc at 0x7fcb6c5752f0, file ""<ast>"", line 8>)
             30 LOAD_CONST               5 ('Solution.calc')
             32 MAKE_FUNCTION            0
             34 CALL_FUNCTION            1
             36 STORE_NAME               7 (calc)
             38 LOAD_CONST               6 (None)
             40 RETURN_VALUE

Disassembly of <code object myPow at 0x7fcb6c575240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       28

  4           8 LOAD_GLOBAL              0 (Solution)
             10 LOAD_METHOD              1 (calc)
             12 LOAD_CONST               2 (1)
             14 LOAD_FAST                1 (x)
             16 BINARY_TRUE_DIVIDE
             18 LOAD_CONST               3 (-1)
             20 LOAD_FAST                2 (n)
             22 BINARY_MULTIPLY
             24 CALL_METHOD              2
             26 RETURN_VALUE

  6     >>   28 LOAD_GLOBAL              0 (Solution)
             30 LOAD_METHOD              1 (calc)
             32 LOAD_FAST                1 (x)
             34 LOAD_FAST                2 (n)
             36 CALL_METHOD              2
             38 RETURN_VALUE
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE

Disassembly of <code object calc at 0x7fcb6c5752f0, file ""<ast>"", line 8>:
 10           0 LOAD_FAST                1 (y)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

 11           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

 12     >>   12 LOAD_FAST                1 (y)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

 13          20 LOAD_FAST                0 (x)
             22 RETURN_VALUE

 14     >>   24 LOAD_FAST                1 (y)
             26 LOAD_CONST               3 (2)
             28 BINARY_MODULO
             30 POP_JUMP_IF_FALSE       52

 15          32 LOAD_FAST                0 (x)
             34 LOAD_GLOBAL              0 (Solution)
             36 LOAD_METHOD              1 (calc)
             38 LOAD_FAST                0 (x)
             40 LOAD_FAST                1 (y)
             42 LOAD_CONST               2 (1)
             44 BINARY_SUBTRACT
             46 CALL_METHOD              2
             48 BINARY_MULTIPLY
             50 RETURN_VALUE

 16     >>   52 LOAD_GLOBAL              0 (Solution)
             54 LOAD_METHOD              1 (calc)
             56 LOAD_FAST                0 (x)
             58 LOAD_FAST                0 (x)
             60 BINARY_MULTIPLY
             62 LOAD_FAST                1 (y)
             64 LOAD_CONST               3 (2)
             66 BINARY_FLOOR_DIVIDE
             68 CALL_METHOD              2
             70 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd5471d5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd5471d5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fd5471d5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fd5471d5450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        def helper(x, n):
            if n == 0:
                return 1
            tmp = helper(x, n // 2)
            if n % 2 == 0:
                return tmp * tmp
            if n % 2 == 1:
                return x * tmp * tmp

        if n >= 0:
            return helper(x, n)

        return 1 / helper(x, -n)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd566045500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd566045500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fd566045450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fd566045450, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (helper)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object helper at 0x7fd5660453a0, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.myPow.<locals>.helper')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (helper)

 12          12 LOAD_FAST                2 (n)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       30

 13          20 LOAD_DEREF               0 (helper)
             22 LOAD_FAST                1 (x)
             24 LOAD_FAST                2 (n)
             26 CALL_FUNCTION            2
             28 RETURN_VALUE

 15     >>   30 LOAD_CONST               4 (1)
             32 LOAD_DEREF               0 (helper)
             34 LOAD_FAST                1 (x)
             36 LOAD_FAST                2 (n)
             38 UNARY_NEGATIVE
             40 CALL_FUNCTION            2
             42 BINARY_TRUE_DIVIDE
             44 RETURN_VALUE

Disassembly of <code object helper at 0x7fd5660453a0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  6     >>   12 LOAD_DEREF               0 (helper)
             14 LOAD_FAST                0 (x)
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               3 (2)
             20 BINARY_FLOOR_DIVIDE
             22 CALL_FUNCTION            2
             24 STORE_FAST               2 (tmp)

  7          26 LOAD_FAST                1 (n)
             28 LOAD_CONST               3 (2)
             30 BINARY_MODULO
             32 LOAD_CONST               1 (0)
             34 COMPARE_OP               2 (==)
             36 POP_JUMP_IF_FALSE       46

  8          38 LOAD_FAST                2 (tmp)
             40 LOAD_FAST                2 (tmp)
             42 BINARY_MULTIPLY
             44 RETURN_VALUE

  9     >>   46 LOAD_FAST                1 (n)
             48 LOAD_CONST               3 (2)
             50 BINARY_MODULO
             52 LOAD_CONST               2 (1)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       70

 10          58 LOAD_FAST                0 (x)
             60 LOAD_FAST                2 (tmp)
             62 BINARY_MULTIPLY
             64 LOAD_FAST                2 (tmp)
             66 BINARY_MULTIPLY
             68 RETURN_VALUE
        >>   70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        for r,row in enumerate(grid):
            for c,col in enumerate(row):
                if grid[r][c] == '1':
                    self.removeNeighbors(r,c,grid)
                    count += 1
        return count

    def removeNeighbors(self, r ,c, grid):
        grid[r][c] = 0 
        # print(grid)   
        if r+1 < len(grid) and grid[r+1][c] == '1':
            self.removeNeighbors(r+1,c,grid)
        if c+1 < len(grid[0]) and grid[r][c+1] == '1':
            self.removeNeighbors(r,c+1,grid)    
        if r-1 >= 0 and grid[r-1][c] == '1':
            self.removeNeighbors(r-1,c,grid)
        if c-1 >= 0 and grid[r][c-1] == '1':
            self.removeNeighbors(r,c-1,grid)   
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7eecb553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7eecb553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f7eecb55240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 11          32 LOAD_CONST               4 (<code object removeNeighbors at 0x7f7eecb552f0, file ""<ast>"", line 11>)
             34 LOAD_CONST               5 ('Solution.removeNeighbors')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (removeNeighbors)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f7eecb55240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (count)

  4           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                64 (to 78)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (r)
             18 STORE_FAST               4 (row)

  5          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                4 (row)
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER                46 (to 76)
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               5 (c)
             34 STORE_FAST               6 (col)

  6          36 LOAD_FAST                1 (grid)
             38 LOAD_FAST                3 (r)
             40 BINARY_SUBSCR
             42 LOAD_FAST                5 (c)
             44 BINARY_SUBSCR
             46 LOAD_CONST               2 ('1')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       28

  7          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              1 (removeNeighbors)
             56 LOAD_FAST                3 (r)
             58 LOAD_FAST                5 (c)
             60 LOAD_FAST                1 (grid)
             62 CALL_METHOD              3
             64 POP_TOP

  8          66 LOAD_FAST                2 (count)
             68 LOAD_CONST               3 (1)
             70 INPLACE_ADD
             72 STORE_FAST               2 (count)
             74 JUMP_ABSOLUTE           28
        >>   76 JUMP_ABSOLUTE           12

  9     >>   78 LOAD_FAST                2 (count)
             80 RETURN_VALUE

Disassembly of <code object removeNeighbors at 0x7f7eecb552f0, file ""<ast>"", line 11>:
 12           0 LOAD_CONST               1 (0)
              2 LOAD_FAST                3 (grid)
              4 LOAD_FAST                1 (r)
              6 BINARY_SUBSCR
              8 LOAD_FAST                2 (c)
             10 STORE_SUBSCR

 14          12 LOAD_FAST                1 (r)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                3 (grid)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       66
             28 LOAD_FAST                3 (grid)
             30 LOAD_FAST                1 (r)
             32 LOAD_CONST               2 (1)
             34 BINARY_ADD
             36 BINARY_SUBSCR
             38 LOAD_FAST                2 (c)
             40 BINARY_SUBSCR
             42 LOAD_CONST               3 ('1')
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       66

 15          48 LOAD_FAST                0 (self)
             50 LOAD_METHOD              1 (removeNeighbors)
             52 LOAD_FAST                1 (r)
             54 LOAD_CONST               2 (1)
             56 BINARY_ADD
             58 LOAD_FAST                2 (c)
             60 LOAD_FAST                3 (grid)
             62 CALL_METHOD              3
             64 POP_TOP

 16     >>   66 LOAD_FAST                2 (c)
             68 LOAD_CONST               2 (1)
             70 BINARY_ADD
             72 LOAD_GLOBAL              0 (len)
             74 LOAD_FAST                3 (grid)
             76 LOAD_CONST               1 (0)
             78 BINARY_SUBSCR
             80 CALL_FUNCTION            1
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE      124
             86 LOAD_FAST                3 (grid)
             88 LOAD_FAST                1 (r)
             90 BINARY_SUBSCR
             92 LOAD_FAST                2 (c)
             94 LOAD_CONST               2 (1)
             96 BINARY_ADD
             98 BINARY_SUBSCR
            100 LOAD_CONST               3 ('1')
            102 COMPARE_OP               2 (==)
            104 POP_JUMP_IF_FALSE      124

 17         106 LOAD_FAST                0 (self)
            108 LOAD_METHOD              1 (removeNeighbors)
            110 LOAD_FAST                1 (r)
            112 LOAD_FAST                2 (c)
            114 LOAD_CONST               2 (1)
            116 BINARY_ADD
            118 LOAD_FAST                3 (grid)
            120 CALL_METHOD              3
            122 POP_TOP

 18     >>  124 LOAD_FAST                1 (r)
            126 LOAD_CONST               2 (1)
            128 BINARY_SUBTRACT
            130 LOAD_CONST               1 (0)
            132 COMPARE_OP               5 (>=)
            134 POP_JUMP_IF_FALSE      174
            136 LOAD_FAST                3 (grid)
            138 LOAD_FAST                1 (r)
            140 LOAD_CONST               2 (1)
            142 BINARY_SUBTRACT
            144 BINARY_SUBSCR
            146 LOAD_FAST                2 (c)
            148 BINARY_SUBSCR
            150 LOAD_CONST               3 ('1')
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      174

 19         156 LOAD_FAST                0 (self)
            158 LOAD_METHOD              1 (removeNeighbors)
            160 LOAD_FAST                1 (r)
            162 LOAD_CONST               2 (1)
            164 BINARY_SUBTRACT
            166 LOAD_FAST                2 (c)
            168 LOAD_FAST                3 (grid)
            170 CALL_METHOD              3
            172 POP_TOP

 20     >>  174 LOAD_FAST                2 (c)
            176 LOAD_CONST               2 (1)
            178 BINARY_SUBTRACT
            180 LOAD_CONST               1 (0)
            182 COMPARE_OP               5 (>=)
            184 POP_JUMP_IF_FALSE      224
            186 LOAD_FAST                3 (grid)
            188 LOAD_FAST                1 (r)
            190 BINARY_SUBSCR
            192 LOAD_FAST                2 (c)
            194 LOAD_CONST               2 (1)
            196 BINARY_SUBTRACT
            198 BINARY_SUBSCR
            200 LOAD_CONST               3 ('1')
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      224

 21         206 LOAD_FAST                0 (self)
            208 LOAD_METHOD              1 (removeNeighbors)
            210 LOAD_FAST                1 (r)
            212 LOAD_FAST                2 (c)
            214 LOAD_CONST               2 (1)
            216 BINARY_SUBTRACT
            218 LOAD_FAST                3 (grid)
            220 CALL_METHOD              3
            222 POP_TOP
        >>  224 LOAD_CONST               0 (None)
            226 RETURN_VALUE
None
"
numIslands,"# python BFS code

class Solution(object):
    def numIslands(self, grid):
        """"""
        :type grid: List[List[str]]
        :rtype: int
        """""" 
        ans = 0
        for r0, row in enumerate(grid):
            for c0, val in enumerate(row):
                if val==""1"":
                    stack = [(r0, c0)]
                    ans=ans+1
                    while stack:
                        r, c = stack.pop()
                        
                        if (0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c]==""1"") :
                    
                            
                            
                            grid[r][c]=""0""
                            p=[(r,c-1),(r,c+1),(r-1,c),(r+1,c)]
                            stack+=p
                    #ans+=1
                            
        return ans
        
","  3           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9a6cdd52f0, file ""<ast>"", line 3>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9a6cdd52f0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object numIslands at 0x7f9a6cdd5240, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.numIslands')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numIslands)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f9a6cdd5240, file ""<ast>"", line 4>:
  9           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (ans)

 10           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER               210 (to 224)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (r0)
             18 STORE_FAST               4 (row)

 11          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                4 (row)
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER               192 (to 222)
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               5 (c0)
             34 STORE_FAST               6 (val)

 12          36 LOAD_FAST                6 (val)
             38 LOAD_CONST               2 ('1')
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       28

 13          44 LOAD_FAST                3 (r0)
             46 LOAD_FAST                5 (c0)
             48 BUILD_TUPLE              2
             50 BUILD_LIST               1
             52 STORE_FAST               7 (stack)

 14          54 LOAD_FAST                2 (ans)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 STORE_FAST               2 (ans)

 15     >>   62 LOAD_FAST                7 (stack)
             64 POP_JUMP_IF_FALSE       28

 16          66 LOAD_FAST                7 (stack)
             68 LOAD_METHOD              1 (pop)
             70 CALL_METHOD              0
             72 UNPACK_SEQUENCE          2
             74 STORE_FAST               8 (r)
             76 STORE_FAST               9 (c)

 18          78 LOAD_CONST               1 (0)
             80 LOAD_FAST                8 (r)
             82 DUP_TOP
             84 ROT_THREE
             86 COMPARE_OP               1 (<=)
             88 POP_JUMP_IF_FALSE      102
             90 LOAD_GLOBAL              2 (len)
             92 LOAD_FAST                1 (grid)
             94 CALL_FUNCTION            1
             96 COMPARE_OP               0 (<)
             98 POP_JUMP_IF_FALSE       62
            100 JUMP_FORWARD             4 (to 106)
        >>  102 POP_TOP
            104 JUMP_ABSOLUTE           62
        >>  106 LOAD_CONST               1 (0)
            108 LOAD_FAST                9 (c)
            110 DUP_TOP
            112 ROT_THREE
            114 COMPARE_OP               1 (<=)
            116 POP_JUMP_IF_FALSE      134
            118 LOAD_GLOBAL              2 (len)
            120 LOAD_FAST                1 (grid)
            122 LOAD_CONST               1 (0)
            124 BINARY_SUBSCR
            126 CALL_FUNCTION            1
            128 COMPARE_OP               0 (<)
            130 POP_JUMP_IF_FALSE       62
            132 JUMP_FORWARD             4 (to 138)
        >>  134 POP_TOP
            136 JUMP_ABSOLUTE           62
        >>  138 LOAD_FAST                1 (grid)
            140 LOAD_FAST                8 (r)
            142 BINARY_SUBSCR
            144 LOAD_FAST                9 (c)
            146 BINARY_SUBSCR
            148 LOAD_CONST               2 ('1')
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE       62

 22         154 LOAD_CONST               4 ('0')
            156 LOAD_FAST                1 (grid)
            158 LOAD_FAST                8 (r)
            160 BINARY_SUBSCR
            162 LOAD_FAST                9 (c)
            164 STORE_SUBSCR

 23         166 LOAD_FAST                8 (r)
            168 LOAD_FAST                9 (c)
            170 LOAD_CONST               3 (1)
            172 BINARY_SUBTRACT
            174 BUILD_TUPLE              2
            176 LOAD_FAST                8 (r)
            178 LOAD_FAST                9 (c)
            180 LOAD_CONST               3 (1)
            182 BINARY_ADD
            184 BUILD_TUPLE              2
            186 LOAD_FAST                8 (r)
            188 LOAD_CONST               3 (1)
            190 BINARY_SUBTRACT
            192 LOAD_FAST                9 (c)
            194 BUILD_TUPLE              2
            196 LOAD_FAST                8 (r)
            198 LOAD_CONST               3 (1)
            200 BINARY_ADD
            202 LOAD_FAST                9 (c)
            204 BUILD_TUPLE              2
            206 BUILD_LIST               4
            208 STORE_FAST              10 (p)

 24         210 LOAD_FAST                7 (stack)
            212 LOAD_FAST               10 (p)
            214 INPLACE_ADD
            216 STORE_FAST               7 (stack)
            218 JUMP_ABSOLUTE           62
            220 JUMP_ABSOLUTE           28
        >>  222 JUMP_ABSOLUTE           12

 27     >>  224 LOAD_FAST                2 (ans)
            226 RETURN_VALUE
None
"
numIslands,"class Solution:
    def countIslands(self, grid: List[List[str]], row, col) -> None:
        if(row in [-1, len(grid)] or col in [-1, len(grid[0])] or grid[row][col] == ""0""):
            return
        grid[row][col] = ""0""
        self.countIslands(grid, row, col-1)
        self.countIslands(grid, row-1, col)
        self.countIslands(grid, row, col+1)
        self.countIslands(grid, row+1, col)
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] == ""1"":
                    count += 1
                    self.countIslands(grid, row, col)
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3dff2453a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3dff2453a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object countIslands at 0x7f3dff245240, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.countIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (countIslands)

 12          32 LOAD_NAME                3 (List)
             34 LOAD_NAME                3 (List)
             36 LOAD_NAME                4 (str)
             38 BINARY_SUBSCR
             40 BINARY_SUBSCR
             42 LOAD_NAME                6 (int)
             44 LOAD_CONST               2 (('grid', 'return'))
             46 BUILD_CONST_KEY_MAP      2
             48 LOAD_CONST               5 (<code object numIslands at 0x7f3dff2452f0, file ""<ast>"", line 12>)
             50 LOAD_CONST               6 ('Solution.numIslands')
             52 MAKE_FUNCTION            4 (annotations)
             54 STORE_NAME               7 (numIslands)
             56 LOAD_CONST               1 (None)
             58 RETURN_VALUE

Disassembly of <code object countIslands at 0x7f3dff245240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (row)
              2 LOAD_CONST               1 (-1)
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 BUILD_TUPLE              2
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_TRUE        52
             16 LOAD_FAST                3 (col)
             18 LOAD_CONST               1 (-1)
             20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               2 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 BUILD_TUPLE              2
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_TRUE        52
             36 LOAD_FAST                1 (grid)
             38 LOAD_FAST                2 (row)
             40 BINARY_SUBSCR
             42 LOAD_FAST                3 (col)
             44 BINARY_SUBSCR
             46 LOAD_CONST               3 ('0')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       56

  4     >>   52 LOAD_CONST               0 (None)
             54 RETURN_VALUE

  5     >>   56 LOAD_CONST               3 ('0')
             58 LOAD_FAST                1 (grid)
             60 LOAD_FAST                2 (row)
             62 BINARY_SUBSCR
             64 LOAD_FAST                3 (col)
             66 STORE_SUBSCR

  6          68 LOAD_FAST                0 (self)
             70 LOAD_METHOD              1 (countIslands)
             72 LOAD_FAST                1 (grid)
             74 LOAD_FAST                2 (row)
             76 LOAD_FAST                3 (col)
             78 LOAD_CONST               4 (1)
             80 BINARY_SUBTRACT
             82 CALL_METHOD              3
             84 POP_TOP

  7          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              1 (countIslands)
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                2 (row)
             94 LOAD_CONST               4 (1)
             96 BINARY_SUBTRACT
             98 LOAD_FAST                3 (col)
            100 CALL_METHOD              3
            102 POP_TOP

  8         104 LOAD_FAST                0 (self)
            106 LOAD_METHOD              1 (countIslands)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                2 (row)
            112 LOAD_FAST                3 (col)
            114 LOAD_CONST               4 (1)
            116 BINARY_ADD
            118 CALL_METHOD              3
            120 POP_TOP

  9         122 LOAD_FAST                0 (self)
            124 LOAD_METHOD              1 (countIslands)
            126 LOAD_FAST                1 (grid)
            128 LOAD_FAST                2 (row)
            130 LOAD_CONST               4 (1)
            132 BINARY_ADD
            134 LOAD_FAST                3 (col)
            136 CALL_METHOD              3
            138 POP_TOP

 10         140 LOAD_CONST               0 (None)
            142 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f3dff2452f0, file ""<ast>"", line 12>:
 13           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (count)

 14           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (grid)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                64 (to 82)
             18 STORE_FAST               3 (row)

 15          20 LOAD_GLOBAL              0 (range)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                1 (grid)
             26 LOAD_CONST               1 (0)
             28 BINARY_SUBSCR
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                42 (to 80)
             38 STORE_FAST               4 (col)

 16          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (row)
             44 BINARY_SUBSCR
             46 LOAD_FAST                4 (col)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       36

 17          56 LOAD_FAST                2 (count)
             58 LOAD_CONST               3 (1)
             60 INPLACE_ADD
             62 STORE_FAST               2 (count)

 18          64 LOAD_FAST                0 (self)
             66 LOAD_METHOD              2 (countIslands)
             68 LOAD_FAST                1 (grid)
             70 LOAD_FAST                3 (row)
             72 LOAD_FAST                4 (col)
             74 CALL_METHOD              3
             76 POP_TOP
             78 JUMP_ABSOLUTE           36
        >>   80 JUMP_ABSOLUTE           16

 19     >>   82 LOAD_FAST                2 (count)
             84 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        total_islands = 0
        def recursive_islands(grid, m, n):
            if grid[m][n] == '0':
                return 
            
            grid[m][n] = '0'
            if m-1 >= 0:
                recursive_islands(grid, m-1,n)
            if m+1<len(grid):
                recursive_islands(grid, m+1, n)
            if n-1 >= 0:
                recursive_islands(grid, m, n-1)
            if n+1 < len(grid[0]):
                recursive_islands(grid, m, n+1)
                
            
        
        for i in range(0, len(grid)):
            for j in range(0, len(grid[0])):
                if grid[i][j] == '1':
                    #then we go into recursion to mark everything 0
                    recursive_islands(grid, i, j)
                    total_islands+=1
                else:
                    continue
        
        return total_islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f67fca352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f67fca352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f67fca353a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f67fca353a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (total_islands)

  4           4 LOAD_CLOSURE             0 (recursive_islands)
              6 BUILD_TUPLE              1
              8 LOAD_CONST               2 (<code object recursive_islands at 0x7f67fca35240, file ""<ast>"", line 4>)
             10 LOAD_CONST               3 ('Solution.numIslands.<locals>.recursive_islands')
             12 MAKE_FUNCTION            8 (closure)
             14 STORE_DEREF              0 (recursive_islands)

 20          16 LOAD_GLOBAL              0 (range)
             18 LOAD_CONST               1 (0)
             20 LOAD_GLOBAL              1 (len)
             22 LOAD_FAST                1 (grid)
             24 CALL_FUNCTION            1
             26 CALL_FUNCTION            2
             28 GET_ITER
        >>   30 FOR_ITER                68 (to 100)
             32 STORE_FAST               3 (i)

 21          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               1 (0)
             38 LOAD_GLOBAL              1 (len)
             40 LOAD_FAST                1 (grid)
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 CALL_FUNCTION            1
             48 CALL_FUNCTION            2
             50 GET_ITER
        >>   52 FOR_ITER                44 (to 98)
             54 STORE_FAST               4 (j)

 22          56 LOAD_FAST                1 (grid)
             58 LOAD_FAST                3 (i)
             60 BINARY_SUBSCR
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_CONST               4 ('1')
             68 COMPARE_OP               2 (==)
             70 POP_JUMP_IF_FALSE       52

 24          72 LOAD_DEREF               0 (recursive_islands)
             74 LOAD_FAST                1 (grid)
             76 LOAD_FAST                3 (i)
             78 LOAD_FAST                4 (j)
             80 CALL_FUNCTION            3
             82 POP_TOP

 25          84 LOAD_FAST                2 (total_islands)
             86 LOAD_CONST               5 (1)
             88 INPLACE_ADD
             90 STORE_FAST               2 (total_islands)
             92 JUMP_ABSOLUTE           52

 27          94 JUMP_ABSOLUTE           52
             96 JUMP_ABSOLUTE           52
        >>   98 JUMP_ABSOLUTE           30

 29     >>  100 LOAD_FAST                2 (total_islands)
            102 RETURN_VALUE

Disassembly of <code object recursive_islands at 0x7f67fca35240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (grid)
              2 LOAD_FAST                1 (m)
              4 BINARY_SUBSCR
              6 LOAD_FAST                2 (n)
              8 BINARY_SUBSCR
             10 LOAD_CONST               1 ('0')
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  6          16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

  8     >>   20 LOAD_CONST               1 ('0')
             22 LOAD_FAST                0 (grid)
             24 LOAD_FAST                1 (m)
             26 BINARY_SUBSCR
             28 LOAD_FAST                2 (n)
             30 STORE_SUBSCR

  9          32 LOAD_FAST                1 (m)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 LOAD_CONST               3 (0)
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_FALSE       60

 10          44 LOAD_DEREF               0 (recursive_islands)
             46 LOAD_FAST                0 (grid)
             48 LOAD_FAST                1 (m)
             50 LOAD_CONST               2 (1)
             52 BINARY_SUBTRACT
             54 LOAD_FAST                2 (n)
             56 CALL_FUNCTION            3
             58 POP_TOP

 11     >>   60 LOAD_FAST                1 (m)
             62 LOAD_CONST               2 (1)
             64 BINARY_ADD
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                0 (grid)
             70 CALL_FUNCTION            1
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE       92

 12          76 LOAD_DEREF               0 (recursive_islands)
             78 LOAD_FAST                0 (grid)
             80 LOAD_FAST                1 (m)
             82 LOAD_CONST               2 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (n)
             88 CALL_FUNCTION            3
             90 POP_TOP

 13     >>   92 LOAD_FAST                2 (n)
             94 LOAD_CONST               2 (1)
             96 BINARY_SUBTRACT
             98 LOAD_CONST               3 (0)
            100 COMPARE_OP               5 (>=)
            102 POP_JUMP_IF_FALSE      120

 14         104 LOAD_DEREF               0 (recursive_islands)
            106 LOAD_FAST                0 (grid)
            108 LOAD_FAST                1 (m)
            110 LOAD_FAST                2 (n)
            112 LOAD_CONST               2 (1)
            114 BINARY_SUBTRACT
            116 CALL_FUNCTION            3
            118 POP_TOP

 15     >>  120 LOAD_FAST                2 (n)
            122 LOAD_CONST               2 (1)
            124 BINARY_ADD
            126 LOAD_GLOBAL              0 (len)
            128 LOAD_FAST                0 (grid)
            130 LOAD_CONST               3 (0)
            132 BINARY_SUBSCR
            134 CALL_FUNCTION            1
            136 COMPARE_OP               0 (<)
            138 POP_JUMP_IF_FALSE      156

 16         140 LOAD_DEREF               0 (recursive_islands)
            142 LOAD_FAST                0 (grid)
            144 LOAD_FAST                1 (m)
            146 LOAD_FAST                2 (n)
            148 LOAD_CONST               2 (1)
            150 BINARY_ADD
            152 CALL_FUNCTION            3
            154 POP_TOP
        >>  156 LOAD_CONST               0 (None)
            158 RETURN_VALUE
None
"
numIslands,"class Solution:
	def numIslands(self, grid: List[List[str]]) -> int:

		island_count = 0

		for i, _ in enumerate(grid):
			for j, _ in enumerate(grid[i]):
				if grid[i][j] == '1':
					self.dfs(i, j, grid)
					island_count += 1

		return island_count


	def dfs(self, i, j, grid):

		if i < 0 or i >= len(grid):
			return

		if j < 0 or j >= len(grid[0]):
			return

		if grid[i][j] == '0':
			return

		grid[i][j] = '0'

		self.dfs(i - 1, j, grid)
		self.dfs(i + 1, j, grid)
		self.dfs(i, j - 1, grid)
		self.dfs(i, j + 1, grid)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f92c22e53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f92c22e53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f92c22e5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 15          32 LOAD_CONST               4 (<code object dfs at 0x7f92c22e52f0, file ""<ast>"", line 15>)
             34 LOAD_CONST               5 ('Solution.dfs')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (dfs)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f92c22e5240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (island_count)

  6           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                68 (to 82)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (i)
             18 STORE_FAST               4 (_)

  7          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                1 (grid)
             24 LOAD_FAST                3 (i)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                46 (to 80)
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               5 (j)
             38 STORE_FAST               4 (_)

  8          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                5 (j)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       32

  9          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (dfs)
             60 LOAD_FAST                3 (i)
             62 LOAD_FAST                5 (j)
             64 LOAD_FAST                1 (grid)
             66 CALL_METHOD              3
             68 POP_TOP

 10          70 LOAD_FAST                2 (island_count)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               2 (island_count)
             78 JUMP_ABSOLUTE           32
        >>   80 JUMP_ABSOLUTE           12

 12     >>   82 LOAD_FAST                2 (island_count)
             84 RETURN_VALUE

Disassembly of <code object dfs at 0x7f92c22e52f0, file ""<ast>"", line 15>:
 17           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_FAST                1 (i)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                3 (grid)
             14 CALL_FUNCTION            1
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       24

 18     >>   20 LOAD_CONST               0 (None)
             22 RETURN_VALUE

 20     >>   24 LOAD_FAST                2 (j)
             26 LOAD_CONST               1 (0)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_TRUE        48
             32 LOAD_FAST                2 (j)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                3 (grid)
             38 LOAD_CONST               1 (0)
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 COMPARE_OP               5 (>=)
             46 POP_JUMP_IF_FALSE       52

 21     >>   48 LOAD_CONST               0 (None)
             50 RETURN_VALUE

 23     >>   52 LOAD_FAST                3 (grid)
             54 LOAD_FAST                1 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (j)
             60 BINARY_SUBSCR
             62 LOAD_CONST               2 ('0')
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       72

 24          68 LOAD_CONST               0 (None)
             70 RETURN_VALUE

 26     >>   72 LOAD_CONST               2 ('0')
             74 LOAD_FAST                3 (grid)
             76 LOAD_FAST                1 (i)
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (j)
             82 STORE_SUBSCR

 28          84 LOAD_FAST                0 (self)
             86 LOAD_METHOD              1 (dfs)
             88 LOAD_FAST                1 (i)
             90 LOAD_CONST               3 (1)
             92 BINARY_SUBTRACT
             94 LOAD_FAST                2 (j)
             96 LOAD_FAST                3 (grid)
             98 CALL_METHOD              3
            100 POP_TOP

 29         102 LOAD_FAST                0 (self)
            104 LOAD_METHOD              1 (dfs)
            106 LOAD_FAST                1 (i)
            108 LOAD_CONST               3 (1)
            110 BINARY_ADD
            112 LOAD_FAST                2 (j)
            114 LOAD_FAST                3 (grid)
            116 CALL_METHOD              3
            118 POP_TOP

 30         120 LOAD_FAST                0 (self)
            122 LOAD_METHOD              1 (dfs)
            124 LOAD_FAST                1 (i)
            126 LOAD_FAST                2 (j)
            128 LOAD_CONST               3 (1)
            130 BINARY_SUBTRACT
            132 LOAD_FAST                3 (grid)
            134 CALL_METHOD              3
            136 POP_TOP

 31         138 LOAD_FAST                0 (self)
            140 LOAD_METHOD              1 (dfs)
            142 LOAD_FAST                1 (i)
            144 LOAD_FAST                2 (j)
            146 LOAD_CONST               3 (1)
            148 BINARY_ADD
            150 LOAD_FAST                3 (grid)
            152 CALL_METHOD              3
            154 POP_TOP
            156 LOAD_CONST               0 (None)
            158 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        #如果是 grid 为空，返回 0
        if not grid: return 0
        row, col,island = len(grid), len(grid[0]), 0
        
        # dfs 用循环或者递归，找到一格island之后，将其改成 water，然后沿着四个方向继续做 dfs 检查
        def dfs(x,y):
            if x in range(row) and y in range(col) and grid[x][y]==""1"":
                grid[x][y] = 0
                list(map(dfs,(x+1,x-1,x,x),(y,y,y+1,y-1))) 
                return 1 
# ***找到一格 island，返回 一个 1，但是只有最后的一个格子返回的 1 才会被 nested loop 记录在list里求sum***
            return 0 #如果是 water 或者超界返回 0
        
        # Nested loop 必须放在 list 里, 对返回值 1，island 的个数求和
        return sum([dfs(i,j) for i in range(row) for j in range(col)])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcdceb05450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcdceb05450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fcdceb053a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fcdceb053a0, file ""<ast>"", line 2>:
  4           0 LOAD_DEREF               2 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               2 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               2 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 LOAD_CONST               1 (0)
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_DEREF              3 (row)
             32 STORE_DEREF              0 (col)
             34 STORE_FAST               2 (island)

  8          36 LOAD_CLOSURE             0 (col)
             38 LOAD_CLOSURE             1 (dfs)
             40 LOAD_CLOSURE             2 (grid)
             42 LOAD_CLOSURE             3 (row)
             44 BUILD_TUPLE              4
             46 LOAD_CONST               2 (<code object dfs at 0x7fcdceb052f0, file ""<ast>"", line 8>)
             48 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             50 MAKE_FUNCTION            8 (closure)
             52 STORE_DEREF              1 (dfs)

 17          54 LOAD_GLOBAL              1 (sum)
             56 LOAD_CLOSURE             0 (col)
             58 LOAD_CLOSURE             1 (dfs)
             60 BUILD_TUPLE              2
             62 LOAD_CONST               4 (<code object <listcomp> at 0x7fcdceb05240, file ""<ast>"", line 17>)
             64 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
             66 MAKE_FUNCTION            8 (closure)
             68 LOAD_GLOBAL              2 (range)
             70 LOAD_DEREF               3 (row)
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 CALL_FUNCTION            1
             80 RETURN_VALUE

Disassembly of <code object dfs at 0x7fcdceb052f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (x)
              2 LOAD_GLOBAL              0 (range)
              4 LOAD_DEREF               3 (row)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_FALSE      104
             12 LOAD_FAST                1 (y)
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (col)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE      104
             24 LOAD_DEREF               2 (grid)
             26 LOAD_FAST                0 (x)
             28 BINARY_SUBSCR
             30 LOAD_FAST                1 (y)
             32 BINARY_SUBSCR
             34 LOAD_CONST               1 ('1')
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE      104

 10          40 LOAD_CONST               2 (0)
             42 LOAD_DEREF               2 (grid)
             44 LOAD_FAST                0 (x)
             46 BINARY_SUBSCR
             48 LOAD_FAST                1 (y)
             50 STORE_SUBSCR

 11          52 LOAD_GLOBAL              1 (list)
             54 LOAD_GLOBAL              2 (map)
             56 LOAD_DEREF               1 (dfs)
             58 LOAD_FAST                0 (x)
             60 LOAD_CONST               3 (1)
             62 BINARY_ADD
             64 LOAD_FAST                0 (x)
             66 LOAD_CONST               3 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                0 (x)
             72 LOAD_FAST                0 (x)
             74 BUILD_TUPLE              4
             76 LOAD_FAST                1 (y)
             78 LOAD_FAST                1 (y)
             80 LOAD_FAST                1 (y)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                1 (y)
             88 LOAD_CONST               3 (1)
             90 BINARY_SUBTRACT
             92 BUILD_TUPLE              4
             94 CALL_FUNCTION            3
             96 CALL_FUNCTION            1
             98 POP_TOP

 12         100 LOAD_CONST               3 (1)
            102 RETURN_VALUE

 14     >>  104 LOAD_CONST               2 (0)
            106 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fcdceb05240, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (range)
             10 LOAD_DEREF               0 (col)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                14 (to 32)
             18 STORE_FAST               2 (j)
             20 LOAD_DEREF               1 (dfs)
             22 LOAD_FAST                1 (i)
             24 LOAD_FAST                2 (j)
             26 CALL_FUNCTION            2
             28 LIST_APPEND              3
             30 JUMP_ABSOLUTE           16
        >>   32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        #如果是 grid 为空，返回 0
        if not grid: return 0
        row, col,island = len(grid), len(grid[0]), 0
        
        # dfs 用循环或者递归，找到一格island之后，将其改成 water，然后沿着四个方向继续做 dfs 检查
        def dfs(x,y):
            if x in range(row) and y in range(col) and grid[x][y]==""1"":
                grid[x][y] = 0
                list(map(dfs,(x+1,x-1,x,x),(y,y,y+1,y-1)))
                
        for i in range(row):
            for j in range(col):
                if grid[i][j]==""1"":
                    island +=1 #双循环遍历 grid, 如果发现了一个格子的 island，计数器 + 1，消去跟它相邻的
                    dfs(i,j)
                
        return island        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f391e2b5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f391e2b5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f391e2b53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f391e2b53a0, file ""<ast>"", line 2>:
  4           0 LOAD_DEREF               2 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               2 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               2 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 LOAD_CONST               1 (0)
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_DEREF              3 (row)
             32 STORE_DEREF              0 (col)
             34 STORE_FAST               2 (island)

  8          36 LOAD_CLOSURE             0 (col)
             38 LOAD_CLOSURE             1 (dfs)
             40 LOAD_CLOSURE             2 (grid)
             42 LOAD_CLOSURE             3 (row)
             44 BUILD_TUPLE              4
             46 LOAD_CONST               2 (<code object dfs at 0x7f391e2b52f0, file ""<ast>"", line 8>)
             48 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             50 MAKE_FUNCTION            8 (closure)
             52 STORE_DEREF              1 (dfs)

 13          54 LOAD_GLOBAL              1 (range)
             56 LOAD_DEREF               3 (row)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER                52 (to 116)
             64 STORE_FAST               3 (i)

 14          66 LOAD_GLOBAL              1 (range)
             68 LOAD_DEREF               0 (col)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                38 (to 114)
             76 STORE_FAST               4 (j)

 15          78 LOAD_DEREF               2 (grid)
             80 LOAD_FAST                3 (i)
             82 BINARY_SUBSCR
             84 LOAD_FAST                4 (j)
             86 BINARY_SUBSCR
             88 LOAD_CONST               4 ('1')
             90 COMPARE_OP               2 (==)
             92 POP_JUMP_IF_FALSE       74

 16          94 LOAD_FAST                2 (island)
             96 LOAD_CONST               5 (1)
             98 INPLACE_ADD
            100 STORE_FAST               2 (island)

 17         102 LOAD_DEREF               1 (dfs)
            104 LOAD_FAST                3 (i)
            106 LOAD_FAST                4 (j)
            108 CALL_FUNCTION            2
            110 POP_TOP
            112 JUMP_ABSOLUTE           74
        >>  114 JUMP_ABSOLUTE           62

 19     >>  116 LOAD_FAST                2 (island)
            118 RETURN_VALUE

Disassembly of <code object dfs at 0x7f391e2b52f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (x)
              2 LOAD_GLOBAL              0 (range)
              4 LOAD_DEREF               3 (row)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_FALSE      100
             12 LOAD_FAST                1 (y)
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (col)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE      100
             24 LOAD_DEREF               2 (grid)
             26 LOAD_FAST                0 (x)
             28 BINARY_SUBSCR
             30 LOAD_FAST                1 (y)
             32 BINARY_SUBSCR
             34 LOAD_CONST               1 ('1')
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE      100

 10          40 LOAD_CONST               2 (0)
             42 LOAD_DEREF               2 (grid)
             44 LOAD_FAST                0 (x)
             46 BINARY_SUBSCR
             48 LOAD_FAST                1 (y)
             50 STORE_SUBSCR

 11          52 LOAD_GLOBAL              1 (list)
             54 LOAD_GLOBAL              2 (map)
             56 LOAD_DEREF               1 (dfs)
             58 LOAD_FAST                0 (x)
             60 LOAD_CONST               3 (1)
             62 BINARY_ADD
             64 LOAD_FAST                0 (x)
             66 LOAD_CONST               3 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                0 (x)
             72 LOAD_FAST                0 (x)
             74 BUILD_TUPLE              4
             76 LOAD_FAST                1 (y)
             78 LOAD_FAST                1 (y)
             80 LOAD_FAST                1 (y)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                1 (y)
             88 LOAD_CONST               3 (1)
             90 BINARY_SUBTRACT
             92 BUILD_TUPLE              4
             94 CALL_FUNCTION            3
             96 CALL_FUNCTION            1
             98 POP_TOP
        >>  100 LOAD_CONST               0 (None)
            102 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        
        rows = len(grid)
        cols = len(grid[0])
		
		# Our helper will take a location on an island and subsequently 
		# update all values of that island to mark it has already been counted.
        def helper(row, col, grid):
		    # Ensure we're in the grid and we're on an unexplored island location ('1') otherwise return (stop the search)
            if row > rows-1 or row < 0 or col > cols-1 or col < 0 or grid[row][col] != '1':
                return
			# If we're in a vald location update the value to mark it's been explored and accounted for.
            grid[row][col] = '#'
			# Continue search in adjacent cells.
            helper(row+1, col, grid)
            helper(row-1, col, grid)        
            helper(row, col+1, grid)
            helper(row, col-1, grid)
		
		# Keep count of the '1' s that we find, which will be the number of islands.
        cnt = 0    
        for row in range(len(grid)):
            for col in range(len(grid[0])):
			    # If we find a location on an island we'll start our DFS and count the island.
                if grid[row][col] == '1':
                    helper(row, col, grid)
                    cnt += 1
                    
        return cnt
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff2254b5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2254b5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7ff2254b5500, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7ff2254b5500, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 STORE_DEREF              2 (rows)

  6          16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                1 (grid)
             20 LOAD_CONST               1 (0)
             22 BINARY_SUBSCR
             24 CALL_FUNCTION            1
             26 STORE_DEREF              0 (cols)

 10          28 LOAD_CLOSURE             0 (cols)
             30 LOAD_CLOSURE             1 (helper)
             32 LOAD_CLOSURE             2 (rows)
             34 BUILD_TUPLE              3
             36 LOAD_CONST               2 (<code object helper at 0x7ff2254b53a0, file ""<ast>"", line 10>)
             38 LOAD_CONST               3 ('Solution.numIslands.<locals>.helper')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_DEREF              1 (helper)

 23          44 LOAD_CONST               1 (0)
             46 STORE_FAST               2 (cnt)

 24          48 LOAD_GLOBAL              1 (range)
             50 LOAD_GLOBAL              0 (len)
             52 LOAD_FAST                1 (grid)
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                62 (to 124)
             62 STORE_FAST               3 (row)

 25          64 LOAD_GLOBAL              1 (range)
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                1 (grid)
             70 LOAD_CONST               1 (0)
             72 BINARY_SUBSCR
             74 CALL_FUNCTION            1
             76 CALL_FUNCTION            1
             78 GET_ITER
        >>   80 FOR_ITER                40 (to 122)
             82 STORE_FAST               4 (col)

 27          84 LOAD_FAST                1 (grid)
             86 LOAD_FAST                3 (row)
             88 BINARY_SUBSCR
             90 LOAD_FAST                4 (col)
             92 BINARY_SUBSCR
             94 LOAD_CONST               4 ('1')
             96 COMPARE_OP               2 (==)
             98 POP_JUMP_IF_FALSE       80

 28         100 LOAD_DEREF               1 (helper)
            102 LOAD_FAST                3 (row)
            104 LOAD_FAST                4 (col)
            106 LOAD_FAST                1 (grid)
            108 CALL_FUNCTION            3
            110 POP_TOP

 29         112 LOAD_FAST                2 (cnt)
            114 LOAD_CONST               5 (1)
            116 INPLACE_ADD
            118 STORE_FAST               2 (cnt)
            120 JUMP_ABSOLUTE           80
        >>  122 JUMP_ABSOLUTE           60

 31     >>  124 LOAD_FAST                2 (cnt)
            126 RETURN_VALUE

Disassembly of <code object helper at 0x7ff2254b53a0, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (row)
              2 LOAD_DEREF               2 (rows)
              4 LOAD_CONST               1 (1)
              6 BINARY_SUBTRACT
              8 COMPARE_OP               4 (>)
             10 POP_JUMP_IF_TRUE        56
             12 LOAD_FAST                0 (row)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_TRUE        56
             20 LOAD_FAST                1 (col)
             22 LOAD_DEREF               0 (cols)
             24 LOAD_CONST               1 (1)
             26 BINARY_SUBTRACT
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_TRUE        56
             32 LOAD_FAST                1 (col)
             34 LOAD_CONST               2 (0)
             36 COMPARE_OP               0 (<)
             38 POP_JUMP_IF_TRUE        56
             40 LOAD_FAST                2 (grid)
             42 LOAD_FAST                0 (row)
             44 BINARY_SUBSCR
             46 LOAD_FAST                1 (col)
             48 BINARY_SUBSCR
             50 LOAD_CONST               3 ('1')
             52 COMPARE_OP               3 (!=)
             54 POP_JUMP_IF_FALSE       60

 13     >>   56 LOAD_CONST               0 (None)
             58 RETURN_VALUE

 15     >>   60 LOAD_CONST               4 ('#')
             62 LOAD_FAST                2 (grid)
             64 LOAD_FAST                0 (row)
             66 BINARY_SUBSCR
             68 LOAD_FAST                1 (col)
             70 STORE_SUBSCR

 17          72 LOAD_DEREF               1 (helper)
             74 LOAD_FAST                0 (row)
             76 LOAD_CONST               1 (1)
             78 BINARY_ADD
             80 LOAD_FAST                1 (col)
             82 LOAD_FAST                2 (grid)
             84 CALL_FUNCTION            3
             86 POP_TOP

 18          88 LOAD_DEREF               1 (helper)
             90 LOAD_FAST                0 (row)
             92 LOAD_CONST               1 (1)
             94 BINARY_SUBTRACT
             96 LOAD_FAST                1 (col)
             98 LOAD_FAST                2 (grid)
            100 CALL_FUNCTION            3
            102 POP_TOP

 19         104 LOAD_DEREF               1 (helper)
            106 LOAD_FAST                0 (row)
            108 LOAD_FAST                1 (col)
            110 LOAD_CONST               1 (1)
            112 BINARY_ADD
            114 LOAD_FAST                2 (grid)
            116 CALL_FUNCTION            3
            118 POP_TOP

 20         120 LOAD_DEREF               1 (helper)
            122 LOAD_FAST                0 (row)
            124 LOAD_FAST                1 (col)
            126 LOAD_CONST               1 (1)
            128 BINARY_SUBTRACT
            130 LOAD_FAST                2 (grid)
            132 CALL_FUNCTION            3
            134 POP_TOP
            136 LOAD_CONST               0 (None)
            138 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        
        directions = ((1, 0), (-1, 0), (0, 1), (0, -1))
        rows = len(grid)
        cols = len(grid[0])
        
        cnt = 0
        
        for row in range(rows):
            for col in range(cols):
			    # If we find a location on an island start our BFS of that island.
                if grid[row][col] == '1':
				    # Update our count and add the starting location to the deque.
                    cnt += 1
                    q = collections.deque([])
                    q.append((row, col))
					# While we have valid island locations to process:
                    while q:
					    # Take the next location from the deque.
                        location = q.popleft()
                        r, c = location[0], location[1]
						# Search the possible adjacent directions.
                        for neigh in directions:
						    # New row and col coords to check
                            nr = r + neigh[0]
                            nc = c + neigh[-1]
							# If the new coords are valid and the lcoation is part of the island.
                            if nr >= 0 and nr < rows and nc >= 0 and nc < cols and grid[nr][nc] == '1':
							    # Update the cell value to mark it's been counted/explored.
                                grid[nr][nc] = '#'
								# Append the current location to the deque to further search it's adjacents.
                                q.append((nr, nc))
                                
        return cnt
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f24102152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24102152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f2410215240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f2410215240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_CONST               2 (((1, 0), (-1, 0), (0, 1), (0, -1)))
             10 STORE_FAST               2 (directions)

  6          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (grid)
             16 CALL_FUNCTION            1
             18 STORE_FAST               3 (rows)

  7          20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               1 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_FAST               4 (cols)

  9          32 LOAD_CONST               1 (0)
             34 STORE_FAST               5 (cnt)

 11          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                3 (rows)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER               206 (to 252)
             46 STORE_FAST               6 (row)

 12          48 LOAD_GLOBAL              1 (range)
             50 LOAD_FAST                4 (cols)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER               192 (to 250)
             58 STORE_FAST               7 (col)

 14          60 LOAD_FAST                1 (grid)
             62 LOAD_FAST                6 (row)
             64 BINARY_SUBSCR
             66 LOAD_FAST                7 (col)
             68 BINARY_SUBSCR
             70 LOAD_CONST               3 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       56

 16          76 LOAD_FAST                5 (cnt)
             78 LOAD_CONST               4 (1)
             80 INPLACE_ADD
             82 STORE_FAST               5 (cnt)

 17          84 LOAD_GLOBAL              2 (collections)
             86 LOAD_METHOD              3 (deque)
             88 BUILD_LIST               0
             90 CALL_METHOD              1
             92 STORE_FAST               8 (q)

 18          94 LOAD_FAST                8 (q)
             96 LOAD_METHOD              4 (append)
             98 LOAD_FAST                6 (row)
            100 LOAD_FAST                7 (col)
            102 BUILD_TUPLE              2
            104 CALL_METHOD              1
            106 POP_TOP

 20     >>  108 LOAD_FAST                8 (q)
            110 POP_JUMP_IF_FALSE       56

 22         112 LOAD_FAST                8 (q)
            114 LOAD_METHOD              5 (popleft)
            116 CALL_METHOD              0
            118 STORE_FAST               9 (location)

 23         120 LOAD_FAST                9 (location)
            122 LOAD_CONST               1 (0)
            124 BINARY_SUBSCR
            126 LOAD_FAST                9 (location)
            128 LOAD_CONST               4 (1)
            130 BINARY_SUBSCR
            132 ROT_TWO
            134 STORE_FAST              10 (r)
            136 STORE_FAST              11 (c)

 25         138 LOAD_FAST                2 (directions)
            140 GET_ITER
        >>  142 FOR_ITER               102 (to 246)
            144 STORE_FAST              12 (neigh)

 27         146 LOAD_FAST               10 (r)
            148 LOAD_FAST               12 (neigh)
            150 LOAD_CONST               1 (0)
            152 BINARY_SUBSCR
            154 BINARY_ADD
            156 STORE_FAST              13 (nr)

 28         158 LOAD_FAST               11 (c)
            160 LOAD_FAST               12 (neigh)
            162 LOAD_CONST               5 (-1)
            164 BINARY_SUBSCR
            166 BINARY_ADD
            168 STORE_FAST              14 (nc)

 30         170 LOAD_FAST               13 (nr)
            172 LOAD_CONST               1 (0)
            174 COMPARE_OP               5 (>=)
            176 POP_JUMP_IF_FALSE      142
            178 LOAD_FAST               13 (nr)
            180 LOAD_FAST                3 (rows)
            182 COMPARE_OP               0 (<)
            184 POP_JUMP_IF_FALSE      142
            186 LOAD_FAST               14 (nc)
            188 LOAD_CONST               1 (0)
            190 COMPARE_OP               5 (>=)
            192 POP_JUMP_IF_FALSE      142
            194 LOAD_FAST               14 (nc)
            196 LOAD_FAST                4 (cols)
            198 COMPARE_OP               0 (<)
            200 POP_JUMP_IF_FALSE      142
            202 LOAD_FAST                1 (grid)
            204 LOAD_FAST               13 (nr)
            206 BINARY_SUBSCR
            208 LOAD_FAST               14 (nc)
            210 BINARY_SUBSCR
            212 LOAD_CONST               3 ('1')
            214 COMPARE_OP               2 (==)
            216 POP_JUMP_IF_FALSE      142

 32         218 LOAD_CONST               6 ('#')
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST               13 (nr)
            224 BINARY_SUBSCR
            226 LOAD_FAST               14 (nc)
            228 STORE_SUBSCR

 34         230 LOAD_FAST                8 (q)
            232 LOAD_METHOD              4 (append)
            234 LOAD_FAST               13 (nr)
            236 LOAD_FAST               14 (nc)
            238 BUILD_TUPLE              2
            240 CALL_METHOD              1
            242 POP_TOP
            244 JUMP_ABSOLUTE          142
        >>  246 JUMP_ABSOLUTE          108
            248 JUMP_ABSOLUTE           56
        >>  250 JUMP_ABSOLUTE           44

 36     >>  252 LOAD_FAST                5 (cnt)
            254 RETURN_VALUE
None
"
numIslands,"# Union-Find based solution
# Time complexity - O(m*n) to traverse through the entire grid | Space complexity - O(m*n) as required by UnionFind data-structure where m=number of rows, n=number of cols
class UnionFind:
    # This step will initialize the parent and rank arrays of the UnionFind data-structure and set number of islands equal to the number of 1s encountered in the grid. 
    # It'll also set the parent of every cell to be itself. 
    def __init__(self, grid):
        self.rows,self.cols = len(grid),len(grid[0])
        self.parent = [-1 for _ in range(self.rows*self.cols)]
        self.rank = [0 for _ in range(self.rows*self.cols)]
        self.numofislands=0
        for i in range(self.rows):
            for j in range(self.cols):
                if grid[i][j]=='1':
                    self.parent[i*self.cols+j]=i*self.cols+j
                    self.numofislands+=1
        
    # Recursively find the parent of given element until you reach the root (that is when parent[x]=x). 
    # Keep setting parent of all intermediate cells to be equal to the cell of the root of the parent. 
    # Note that this is the path-compression step which reduces the find operation's time complexity to amortized O(logn).
    def find(self,x):
        if self.parent[x]!=x:
            self.parent[x]=self.find(self.parent[x])
        return self.parent[x]
    
    # For any two cells (coordinates are their corresponding 1d coordinates), union both the cells if they're connected to the same root. 
    # Else don't union the two components. 
    def union(self,x,y):
        # Find the roots of x and y cells (components).
        rootx,rooty=self.find(x),self.find(y)
        # If both of the cells belong to different components then union them. That is, set one to be parent of other based on their ranks. 
        if rootx!=rooty:
            # If rank (weight) of x's root is higher than that of y's root, then set parent of y to be x. 
            if self.rank[rootx]>self.rank[rooty]:
                self.parent[rooty]=rootx
            # Similarly if rank (weight) of y's root is higher than that of x's root, then set parent of x to be y.
            elif self.rank[rooty]>self.rank[rootx]:
                self.parent[rootx]=rooty
            # Else if both have the same rank (weight) then set parent of y to be x (could also be vice-versa) 
            # and increment the rank of this new component by 1.
            else:
                self.rank[rootx]+=1
                self.parent[rooty]=self.parent[rootx]
            # Decrement the number of islands by 1 every time we union two different cells with value==1
            self.numofislands-=1
    
            
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        
        rows,cols=len(grid),len(grid[0])
        
        # Initialize the UnionFind data-structure with the current grid. 
        # This step will initialize the parent and rank arrays of the UnionFind data-structure and set number of islands equal to the number of 1s encountered in the grid. 
        # It'll also set the parent of every cell to be itself. 
        uf = UnionFind(grid)
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j]=='1':
                    for d in [(1,0),(0,1),(-1,0),(0,-1)]:
                        ii,jj=i+d[0],j+d[1]
                        if 0<=ii<rows and 0<=jj<cols and grid[ii][jj]=='1':
                            x,y=i*cols+j,ii*cols+jj
                            uf.union(x,y)
                            
        return uf.numofislands
","  3           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object UnionFind at 0x7fc8c02f55b0, file ""<ast>"", line 3>)
              4 LOAD_CONST               1 ('UnionFind')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('UnionFind')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (UnionFind)

 47          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7fc8c02f5710, file ""<ast>"", line 47>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object UnionFind at 0x7fc8c02f55b0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('UnionFind')
              6 STORE_NAME               2 (__qualname__)

  6           8 LOAD_CONST               1 (<code object __init__ at 0x7fc8c02f53a0, file ""<ast>"", line 6>)
             10 LOAD_CONST               2 ('UnionFind.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

 20          16 LOAD_CONST               3 (<code object find at 0x7fc8c02f5450, file ""<ast>"", line 20>)
             18 LOAD_CONST               4 ('UnionFind.find')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (find)

 27          24 LOAD_CONST               5 (<code object union at 0x7fc8c02f5500, file ""<ast>"", line 27>)
             26 LOAD_CONST               6 ('UnionFind.union')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (union)
             32 LOAD_CONST               7 (None)
             34 RETURN_VALUE

Disassembly of <code object __init__ at 0x7fc8c02f53a0, file ""<ast>"", line 6>:
  7           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (grid)
             10 LOAD_CONST               1 (0)
             12 BINARY_SUBSCR
             14 CALL_FUNCTION            1
             16 ROT_TWO
             18 LOAD_FAST                0 (self)
             20 STORE_ATTR               1 (rows)
             22 LOAD_FAST                0 (self)
             24 STORE_ATTR               2 (cols)

  8          26 LOAD_CONST               2 (<code object <listcomp> at 0x7fc8c02f5240, file ""<ast>"", line 8>)
             28 LOAD_CONST               3 ('UnionFind.__init__.<locals>.<listcomp>')
             30 MAKE_FUNCTION            0
             32 LOAD_GLOBAL              3 (range)
             34 LOAD_FAST                0 (self)
             36 LOAD_ATTR                1 (rows)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                2 (cols)
             42 BINARY_MULTIPLY
             44 CALL_FUNCTION            1
             46 GET_ITER
             48 CALL_FUNCTION            1
             50 LOAD_FAST                0 (self)
             52 STORE_ATTR               4 (parent)

  9          54 LOAD_CONST               4 (<code object <listcomp> at 0x7fc8c02f52f0, file ""<ast>"", line 9>)
             56 LOAD_CONST               3 ('UnionFind.__init__.<locals>.<listcomp>')
             58 MAKE_FUNCTION            0
             60 LOAD_GLOBAL              3 (range)
             62 LOAD_FAST                0 (self)
             64 LOAD_ATTR                1 (rows)
             66 LOAD_FAST                0 (self)
             68 LOAD_ATTR                2 (cols)
             70 BINARY_MULTIPLY
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 LOAD_FAST                0 (self)
             80 STORE_ATTR               5 (rank)

 10          82 LOAD_CONST               1 (0)
             84 LOAD_FAST                0 (self)
             86 STORE_ATTR               6 (numofislands)

 11          88 LOAD_GLOBAL              3 (range)
             90 LOAD_FAST                0 (self)
             92 LOAD_ATTR                1 (rows)
             94 CALL_FUNCTION            1
             96 GET_ITER
        >>   98 FOR_ITER                80 (to 180)
            100 STORE_FAST               2 (i)

 12         102 LOAD_GLOBAL              3 (range)
            104 LOAD_FAST                0 (self)
            106 LOAD_ATTR                2 (cols)
            108 CALL_FUNCTION            1
            110 GET_ITER
        >>  112 FOR_ITER                64 (to 178)
            114 STORE_FAST               3 (j)

 13         116 LOAD_FAST                1 (grid)
            118 LOAD_FAST                2 (i)
            120 BINARY_SUBSCR
            122 LOAD_FAST                3 (j)
            124 BINARY_SUBSCR
            126 LOAD_CONST               5 ('1')
            128 COMPARE_OP               2 (==)
            130 POP_JUMP_IF_FALSE      112

 14         132 LOAD_FAST                2 (i)
            134 LOAD_FAST                0 (self)
            136 LOAD_ATTR                2 (cols)
            138 BINARY_MULTIPLY
            140 LOAD_FAST                3 (j)
            142 BINARY_ADD
            144 LOAD_FAST                0 (self)
            146 LOAD_ATTR                4 (parent)
            148 LOAD_FAST                2 (i)
            150 LOAD_FAST                0 (self)
            152 LOAD_ATTR                2 (cols)
            154 BINARY_MULTIPLY
            156 LOAD_FAST                3 (j)
            158 BINARY_ADD
            160 STORE_SUBSCR

 15         162 LOAD_FAST                0 (self)
            164 DUP_TOP
            166 LOAD_ATTR                6 (numofislands)
            168 LOAD_CONST               6 (1)
            170 INPLACE_ADD
            172 ROT_TWO
            174 STORE_ATTR               6 (numofislands)
            176 JUMP_ABSOLUTE          112
        >>  178 JUMP_ABSOLUTE           98
        >>  180 LOAD_CONST               0 (None)
            182 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc8c02f5240, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (-1)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc8c02f52f0, file ""<ast>"", line 9>:
  9           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object find at 0x7fc8c02f5450, file ""<ast>"", line 20>:
 21           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (parent)
              4 LOAD_FAST                1 (x)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (x)
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       36

 22          14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (find)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (parent)
             22 LOAD_FAST                1 (x)
             24 BINARY_SUBSCR
             26 CALL_METHOD              1
             28 LOAD_FAST                0 (self)
             30 LOAD_ATTR                0 (parent)
             32 LOAD_FAST                1 (x)
             34 STORE_SUBSCR

 23     >>   36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                0 (parent)
             40 LOAD_FAST                1 (x)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

Disassembly of <code object union at 0x7fc8c02f5500, file ""<ast>"", line 27>:
 29           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                1 (x)
              6 CALL_METHOD              1
              8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (find)
             12 LOAD_FAST                2 (y)
             14 CALL_METHOD              1
             16 ROT_TWO
             18 STORE_FAST               3 (rootx)
             20 STORE_FAST               4 (rooty)

 31          22 LOAD_FAST                3 (rootx)
             24 LOAD_FAST                4 (rooty)
             26 COMPARE_OP               3 (!=)
             28 POP_JUMP_IF_FALSE      142

 33          30 LOAD_FAST                0 (self)
             32 LOAD_ATTR                1 (rank)
             34 LOAD_FAST                3 (rootx)
             36 BINARY_SUBSCR
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                1 (rank)
             42 LOAD_FAST                4 (rooty)
             44 BINARY_SUBSCR
             46 COMPARE_OP               4 (>)
             48 POP_JUMP_IF_FALSE       62

 34          50 LOAD_FAST                3 (rootx)
             52 LOAD_FAST                0 (self)
             54 LOAD_ATTR                2 (parent)
             56 LOAD_FAST                4 (rooty)
             58 STORE_SUBSCR
             60 JUMP_FORWARD            66 (to 128)

 36     >>   62 LOAD_FAST                0 (self)
             64 LOAD_ATTR                1 (rank)
             66 LOAD_FAST                4 (rooty)
             68 BINARY_SUBSCR
             70 LOAD_FAST                0 (self)
             72 LOAD_ATTR                1 (rank)
             74 LOAD_FAST                3 (rootx)
             76 BINARY_SUBSCR
             78 COMPARE_OP               4 (>)
             80 POP_JUMP_IF_FALSE       94

 37          82 LOAD_FAST                4 (rooty)
             84 LOAD_FAST                0 (self)
             86 LOAD_ATTR                2 (parent)
             88 LOAD_FAST                3 (rootx)
             90 STORE_SUBSCR
             92 JUMP_FORWARD            34 (to 128)

 41     >>   94 LOAD_FAST                0 (self)
             96 LOAD_ATTR                1 (rank)
             98 LOAD_FAST                3 (rootx)
            100 DUP_TOP_TWO
            102 BINARY_SUBSCR
            104 LOAD_CONST               1 (1)
            106 INPLACE_ADD
            108 ROT_THREE
            110 STORE_SUBSCR

 42         112 LOAD_FAST                0 (self)
            114 LOAD_ATTR                2 (parent)
            116 LOAD_FAST                3 (rootx)
            118 BINARY_SUBSCR
            120 LOAD_FAST                0 (self)
            122 LOAD_ATTR                2 (parent)
            124 LOAD_FAST                4 (rooty)
            126 STORE_SUBSCR

 44     >>  128 LOAD_FAST                0 (self)
            130 DUP_TOP
            132 LOAD_ATTR                3 (numofislands)
            134 LOAD_CONST               1 (1)
            136 INPLACE_SUBTRACT
            138 ROT_TWO
            140 STORE_ATTR               3 (numofislands)
        >>  142 LOAD_CONST               0 (None)
            144 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc8c02f5710, file ""<ast>"", line 47>:
 47           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 48           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fc8c02f5660, file ""<ast>"", line 48>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fc8c02f5660, file ""<ast>"", line 48>:
 49           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

 50           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 52     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (rows)
             28 STORE_FAST               3 (cols)

 57          30 LOAD_GLOBAL              1 (UnionFind)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 STORE_FAST               4 (uf)

 59          38 LOAD_GLOBAL              2 (range)
             40 LOAD_FAST                2 (rows)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER               172 (to 220)
             48 STORE_FAST               5 (i)

 60          50 LOAD_GLOBAL              2 (range)
             52 LOAD_FAST                3 (cols)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER               158 (to 218)
             60 STORE_FAST               6 (j)

 61          62 LOAD_FAST                1 (grid)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 LOAD_FAST                6 (j)
             70 BINARY_SUBSCR
             72 LOAD_CONST               2 ('1')
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE       58

 62          78 LOAD_CONST               3 (((1, 0), (0, 1), (-1, 0), (0, -1)))
             80 GET_ITER
        >>   82 FOR_ITER               132 (to 216)
             84 STORE_FAST               7 (d)

 63          86 LOAD_FAST                5 (i)
             88 LOAD_FAST                7 (d)
             90 LOAD_CONST               1 (0)
             92 BINARY_SUBSCR
             94 BINARY_ADD
             96 LOAD_FAST                6 (j)
             98 LOAD_FAST                7 (d)
            100 LOAD_CONST               4 (1)
            102 BINARY_SUBSCR
            104 BINARY_ADD
            106 ROT_TWO
            108 STORE_FAST               8 (ii)
            110 STORE_FAST               9 (jj)

 64         112 LOAD_CONST               1 (0)
            114 LOAD_FAST                8 (ii)
            116 DUP_TOP
            118 ROT_THREE
            120 COMPARE_OP               1 (<=)
            122 POP_JUMP_IF_FALSE      132
            124 LOAD_FAST                2 (rows)
            126 COMPARE_OP               0 (<)
            128 POP_JUMP_IF_FALSE       82
            130 JUMP_FORWARD             4 (to 136)
        >>  132 POP_TOP
            134 JUMP_ABSOLUTE           82
        >>  136 LOAD_CONST               1 (0)
            138 LOAD_FAST                9 (jj)
            140 DUP_TOP
            142 ROT_THREE
            144 COMPARE_OP               1 (<=)
            146 POP_JUMP_IF_FALSE      156
            148 LOAD_FAST                3 (cols)
            150 COMPARE_OP               0 (<)
            152 POP_JUMP_IF_FALSE       82
            154 JUMP_FORWARD             4 (to 160)
        >>  156 POP_TOP
            158 JUMP_ABSOLUTE           82
        >>  160 LOAD_FAST                1 (grid)
            162 LOAD_FAST                8 (ii)
            164 BINARY_SUBSCR
            166 LOAD_FAST                9 (jj)
            168 BINARY_SUBSCR
            170 LOAD_CONST               2 ('1')
            172 COMPARE_OP               2 (==)
            174 POP_JUMP_IF_FALSE       82

 65         176 LOAD_FAST                5 (i)
            178 LOAD_FAST                3 (cols)
            180 BINARY_MULTIPLY
            182 LOAD_FAST                6 (j)
            184 BINARY_ADD
            186 LOAD_FAST                8 (ii)
            188 LOAD_FAST                3 (cols)
            190 BINARY_MULTIPLY
            192 LOAD_FAST                9 (jj)
            194 BINARY_ADD
            196 ROT_TWO
            198 STORE_FAST              10 (x)
            200 STORE_FAST              11 (y)

 66         202 LOAD_FAST                4 (uf)
            204 LOAD_METHOD              3 (union)
            206 LOAD_FAST               10 (x)
            208 LOAD_FAST               11 (y)
            210 CALL_METHOD              2
            212 POP_TOP
            214 JUMP_ABSOLUTE           82
        >>  216 JUMP_ABSOLUTE           58
        >>  218 JUMP_ABSOLUTE           46

 68     >>  220 LOAD_FAST                4 (uf)
            222 LOAD_ATTR                4 (numofislands)
            224 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ## RC ##
        ## APPROACH : DFS ##
        # 1. find the land, go to surroundings and convert to water
        # 2. increment island count, get back and search for next islands.
        
		## TIME COMPLEXITY : O(N^2) ##
		## SPACE COMPLEXITY : O(1) ##

        def convertLandToWater(grid,i,j):
            if(i<0 or j<0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1'):
                return
            grid[i][j] = '0'
            for x,y in directions:
                convertLandToWater(grid, i + x, j + y)
        
        if len(grid) == 0 : return 0
        isLandCount = 0
        directions = [(0,1), (0,-1), (-1,0), (1,0)]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    isLandCount += 1
                    convertLandToWater(grid, i, j)
        return isLandCount        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3979cd5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3979cd5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f3979cd53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f3979cd53a0, file ""<ast>"", line 2>:
 11           0 LOAD_CLOSURE             0 (convertLandToWater)
              2 LOAD_CLOSURE             1 (directions)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object convertLandToWater at 0x7f3979cd52f0, file ""<ast>"", line 11>)
              8 LOAD_CONST               2 ('Solution.numIslands.<locals>.convertLandToWater')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (convertLandToWater)

 18          14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 CALL_FUNCTION            1
             20 LOAD_CONST               3 (0)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               3 (0)
             28 RETURN_VALUE

 19     >>   30 LOAD_CONST               3 (0)
             32 STORE_FAST               2 (isLandCount)

 20          34 LOAD_CONST               4 ((0, 1))
             36 LOAD_CONST               5 ((0, -1))
             38 LOAD_CONST               6 ((-1, 0))
             40 LOAD_CONST               7 ((1, 0))
             42 BUILD_LIST               4
             44 STORE_DEREF              1 (directions)

 21          46 LOAD_GLOBAL              1 (range)
             48 LOAD_GLOBAL              0 (len)
             50 LOAD_FAST                1 (grid)
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                62 (to 122)
             60 STORE_FAST               3 (i)

 22          62 LOAD_GLOBAL              1 (range)
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (grid)
             68 LOAD_CONST               3 (0)
             70 BINARY_SUBSCR
             72 CALL_FUNCTION            1
             74 CALL_FUNCTION            1
             76 GET_ITER
        >>   78 FOR_ITER                40 (to 120)
             80 STORE_FAST               4 (j)

 23          82 LOAD_FAST                1 (grid)
             84 LOAD_FAST                3 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (j)
             90 BINARY_SUBSCR
             92 LOAD_CONST               8 ('1')
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE       78

 24          98 LOAD_FAST                2 (isLandCount)
            100 LOAD_CONST               9 (1)
            102 INPLACE_ADD
            104 STORE_FAST               2 (isLandCount)

 25         106 LOAD_DEREF               0 (convertLandToWater)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                3 (i)
            112 LOAD_FAST                4 (j)
            114 CALL_FUNCTION            3
            116 POP_TOP
            118 JUMP_ABSOLUTE           78
        >>  120 JUMP_ABSOLUTE           58

 26     >>  122 LOAD_FAST                2 (isLandCount)
            124 RETURN_VALUE

Disassembly of <code object convertLandToWater at 0x7f3979cd52f0, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        60
              8 LOAD_FAST                2 (j)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_TRUE        60
             16 LOAD_FAST                1 (i)
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                0 (grid)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               5 (>=)
             26 POP_JUMP_IF_TRUE        60
             28 LOAD_FAST                2 (j)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                0 (grid)
             34 LOAD_CONST               1 (0)
             36 BINARY_SUBSCR
             38 CALL_FUNCTION            1
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (grid)
             46 LOAD_FAST                1 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (j)
             52 BINARY_SUBSCR
             54 LOAD_CONST               2 ('1')
             56 COMPARE_OP               3 (!=)
             58 POP_JUMP_IF_FALSE       64

 13     >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE

 14     >>   64 LOAD_CONST               3 ('0')
             66 LOAD_FAST                0 (grid)
             68 LOAD_FAST                1 (i)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (j)
             74 STORE_SUBSCR

 15          76 LOAD_DEREF               1 (directions)
             78 GET_ITER
        >>   80 FOR_ITER                28 (to 110)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               3 (x)
             86 STORE_FAST               4 (y)

 16          88 LOAD_DEREF               0 (convertLandToWater)
             90 LOAD_FAST                0 (grid)
             92 LOAD_FAST                1 (i)
             94 LOAD_FAST                3 (x)
             96 BINARY_ADD
             98 LOAD_FAST                2 (j)
            100 LOAD_FAST                4 (y)
            102 BINARY_ADD
            104 CALL_FUNCTION            3
            106 POP_TOP
            108 JUMP_ABSOLUTE           80
        >>  110 LOAD_CONST               0 (None)
            112 RETURN_VALUE
None
"
numIslands,"from queue import Queue

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:            
        result = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == ""1"":
                    self.bfs(grid, i, j)
                    result += 1
        
        
        return result
    
    def bfs(self, grid, i, j):
        q = Queue()
        q.put([i, j])
        grid[i][j] = ""#""
        
        while(q.qsize() > 0):
            i, j  = q.get()
            
            if i - 1 >= 0 and grid[i - 1][j] == ""1"":
                q.put([i - 1, j])
                grid[i - 1][j] = ""#""
            
            if j - 1 >= 0 and grid[i][j - 1] == ""1"":
                q.put([i, j - 1])
                grid[i][j - 1] = ""#""
                
            if i + 1 < len(grid) and grid[i + 1][j] == ""1"":
                q.put([i + 1, j])
                grid[i + 1][j] = ""#""
            
            if j + 1 < len(grid[0]) and grid[i][j + 1] == ""1"":
                q.put([i, j + 1])
                grid[i][j + 1] = ""#""
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Queue',))
              4 IMPORT_NAME              0 (queue)
              6 IMPORT_FROM              1 (Queue)
              8 STORE_NAME               1 (Queue)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f3ffcf753a0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3ffcf753a0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f3ffcf75240, file ""<ast>"", line 4>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 15          32 LOAD_CONST               4 (<code object bfs at 0x7f3ffcf752f0, file ""<ast>"", line 15>)
             34 LOAD_CONST               5 ('Solution.bfs')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (bfs)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f3ffcf75240, file ""<ast>"", line 4>:
  5           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (result)

  6           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (grid)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                64 (to 82)
             18 STORE_FAST               3 (i)

  7          20 LOAD_GLOBAL              0 (range)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                1 (grid)
             26 LOAD_CONST               1 (0)
             28 BINARY_SUBSCR
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                42 (to 80)
             38 STORE_FAST               4 (j)

  8          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                4 (j)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       36

  9          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              2 (bfs)
             60 LOAD_FAST                1 (grid)
             62 LOAD_FAST                3 (i)
             64 LOAD_FAST                4 (j)
             66 CALL_METHOD              3
             68 POP_TOP

 10          70 LOAD_FAST                2 (result)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               2 (result)
             78 JUMP_ABSOLUTE           36
        >>   80 JUMP_ABSOLUTE           16

 13     >>   82 LOAD_FAST                2 (result)
             84 RETURN_VALUE

Disassembly of <code object bfs at 0x7f3ffcf752f0, file ""<ast>"", line 15>:
 16           0 LOAD_GLOBAL              0 (Queue)
              2 CALL_FUNCTION            0
              4 STORE_FAST               4 (q)

 17           6 LOAD_FAST                4 (q)
              8 LOAD_METHOD              1 (put)
             10 LOAD_FAST                2 (i)
             12 LOAD_FAST                3 (j)
             14 BUILD_LIST               2
             16 CALL_METHOD              1
             18 POP_TOP

 18          20 LOAD_CONST               1 ('#')
             22 LOAD_FAST                1 (grid)
             24 LOAD_FAST                2 (i)
             26 BINARY_SUBSCR
             28 LOAD_FAST                3 (j)
             30 STORE_SUBSCR

 20     >>   32 LOAD_FAST                4 (q)
             34 LOAD_METHOD              2 (qsize)
             36 CALL_METHOD              0
             38 LOAD_CONST               2 (0)
             40 COMPARE_OP               4 (>)
             42 EXTENDED_ARG             1
             44 POP_JUMP_IF_FALSE      340

 21          46 LOAD_FAST                4 (q)
             48 LOAD_METHOD              3 (get)
             50 CALL_METHOD              0
             52 UNPACK_SEQUENCE          2
             54 STORE_FAST               2 (i)
             56 STORE_FAST               3 (j)

 23          58 LOAD_FAST                2 (i)
             60 LOAD_CONST               3 (1)
             62 BINARY_SUBTRACT
             64 LOAD_CONST               2 (0)
             66 COMPARE_OP               5 (>=)
             68 POP_JUMP_IF_FALSE      124
             70 LOAD_FAST                1 (grid)
             72 LOAD_FAST                2 (i)
             74 LOAD_CONST               3 (1)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 LOAD_FAST                3 (j)
             82 BINARY_SUBSCR
             84 LOAD_CONST               4 ('1')
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE      124

 24          90 LOAD_FAST                4 (q)
             92 LOAD_METHOD              1 (put)
             94 LOAD_FAST                2 (i)
             96 LOAD_CONST               3 (1)
             98 BINARY_SUBTRACT
            100 LOAD_FAST                3 (j)
            102 BUILD_LIST               2
            104 CALL_METHOD              1
            106 POP_TOP

 25         108 LOAD_CONST               1 ('#')
            110 LOAD_FAST                1 (grid)
            112 LOAD_FAST                2 (i)
            114 LOAD_CONST               3 (1)
            116 BINARY_SUBTRACT
            118 BINARY_SUBSCR
            120 LOAD_FAST                3 (j)
            122 STORE_SUBSCR

 27     >>  124 LOAD_FAST                3 (j)
            126 LOAD_CONST               3 (1)
            128 BINARY_SUBTRACT
            130 LOAD_CONST               2 (0)
            132 COMPARE_OP               5 (>=)
            134 POP_JUMP_IF_FALSE      190
            136 LOAD_FAST                1 (grid)
            138 LOAD_FAST                2 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                3 (j)
            144 LOAD_CONST               3 (1)
            146 BINARY_SUBTRACT
            148 BINARY_SUBSCR
            150 LOAD_CONST               4 ('1')
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      190

 28         156 LOAD_FAST                4 (q)
            158 LOAD_METHOD              1 (put)
            160 LOAD_FAST                2 (i)
            162 LOAD_FAST                3 (j)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 BUILD_LIST               2
            170 CALL_METHOD              1
            172 POP_TOP

 29         174 LOAD_CONST               1 ('#')
            176 LOAD_FAST                1 (grid)
            178 LOAD_FAST                2 (i)
            180 BINARY_SUBSCR
            182 LOAD_FAST                3 (j)
            184 LOAD_CONST               3 (1)
            186 BINARY_SUBTRACT
            188 STORE_SUBSCR

 31     >>  190 LOAD_FAST                2 (i)
            192 LOAD_CONST               3 (1)
            194 BINARY_ADD
            196 LOAD_GLOBAL              4 (len)
            198 LOAD_FAST                1 (grid)
            200 CALL_FUNCTION            1
            202 COMPARE_OP               0 (<)
            204 EXTENDED_ARG             1
            206 POP_JUMP_IF_FALSE      264
            208 LOAD_FAST                1 (grid)
            210 LOAD_FAST                2 (i)
            212 LOAD_CONST               3 (1)
            214 BINARY_ADD
            216 BINARY_SUBSCR
            218 LOAD_FAST                3 (j)
            220 BINARY_SUBSCR
            222 LOAD_CONST               4 ('1')
            224 COMPARE_OP               2 (==)
            226 EXTENDED_ARG             1
            228 POP_JUMP_IF_FALSE      264

 32         230 LOAD_FAST                4 (q)
            232 LOAD_METHOD              1 (put)
            234 LOAD_FAST                2 (i)
            236 LOAD_CONST               3 (1)
            238 BINARY_ADD
            240 LOAD_FAST                3 (j)
            242 BUILD_LIST               2
            244 CALL_METHOD              1
            246 POP_TOP

 33         248 LOAD_CONST               1 ('#')
            250 LOAD_FAST                1 (grid)
            252 LOAD_FAST                2 (i)
            254 LOAD_CONST               3 (1)
            256 BINARY_ADD
            258 BINARY_SUBSCR
            260 LOAD_FAST                3 (j)
            262 STORE_SUBSCR

 35     >>  264 LOAD_FAST                3 (j)
            266 LOAD_CONST               3 (1)
            268 BINARY_ADD
            270 LOAD_GLOBAL              4 (len)
            272 LOAD_FAST                1 (grid)
            274 LOAD_CONST               2 (0)
            276 BINARY_SUBSCR
            278 CALL_FUNCTION            1
            280 COMPARE_OP               0 (<)
            282 POP_JUMP_IF_FALSE       32
            284 LOAD_FAST                1 (grid)
            286 LOAD_FAST                2 (i)
            288 BINARY_SUBSCR
            290 LOAD_FAST                3 (j)
            292 LOAD_CONST               3 (1)
            294 BINARY_ADD
            296 BINARY_SUBSCR
            298 LOAD_CONST               4 ('1')
            300 COMPARE_OP               2 (==)
            302 POP_JUMP_IF_FALSE       32

 36         304 LOAD_FAST                4 (q)
            306 LOAD_METHOD              1 (put)
            308 LOAD_FAST                2 (i)
            310 LOAD_FAST                3 (j)
            312 LOAD_CONST               3 (1)
            314 BINARY_ADD
            316 BUILD_LIST               2
            318 CALL_METHOD              1
            320 POP_TOP

 37         322 LOAD_CONST               1 ('#')
            324 LOAD_FAST                1 (grid)
            326 LOAD_FAST                2 (i)
            328 BINARY_SUBSCR
            330 LOAD_FAST                3 (j)
            332 LOAD_CONST               3 (1)
            334 BINARY_ADD
            336 STORE_SUBSCR
            338 JUMP_ABSOLUTE           32
        >>  340 LOAD_CONST               0 (None)
            342 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0;
        
        visited = grid.copy() # in case we do not want to modify our input
        islands = 0
        stack = [] # this will simulate the call stack 
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if visited[i][j] != 'X' and grid[i][j] == '1':
                    islands += 1
                    stack.append((i, j))
					# perform dfs iteratively
                    while stack:
                        row, col = stack.pop()
                        
                        if grid[row][col] == '1' and visited[row][col] != 'X':
                            visited[row][col] = 'X'
                            
                        if  row + 1 < len(grid) and grid[row + 1][col] == '1':
                            stack.append((row + 1, col))
                        if  col + 1 < len(grid[0]) and grid[row][col + 1] == '1':
                            stack.append((row, col + 1))
                        if row - 1 >= 0 and grid[row - 1][col] == '1':
                            stack.append((row - 1, col))
                        if col - 1 >= 0 and grid[row][col - 1] == '1':
                            stack.append((row, col - 1))
        return islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f30af1452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f30af1452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f30af145240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f30af145240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                1 (grid)
             10 LOAD_METHOD              0 (copy)
             12 CALL_METHOD              0
             14 STORE_FAST               2 (visited)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (islands)

  8          20 BUILD_LIST               0
             22 STORE_FAST               4 (stack)

 10          24 LOAD_GLOBAL              1 (range)
             26 LOAD_GLOBAL              2 (len)
             28 LOAD_FAST                1 (grid)
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 EXTENDED_ARG             1
             38 FOR_ITER               364 (to 404)
             40 STORE_FAST               5 (i)

 11          42 LOAD_GLOBAL              1 (range)
             44 LOAD_GLOBAL              2 (len)
             46 LOAD_FAST                1 (grid)
             48 LOAD_CONST               1 (0)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 EXTENDED_ARG             1
             60 FOR_ITER               340 (to 402)
             62 STORE_FAST               6 (j)

 12          64 LOAD_FAST                2 (visited)
             66 LOAD_FAST                5 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                6 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('X')
             76 COMPARE_OP               3 (!=)
             78 POP_JUMP_IF_FALSE       58
             80 LOAD_FAST                1 (grid)
             82 LOAD_FAST                5 (i)
             84 BINARY_SUBSCR
             86 LOAD_FAST                6 (j)
             88 BINARY_SUBSCR
             90 LOAD_CONST               3 ('1')
             92 COMPARE_OP               2 (==)
             94 POP_JUMP_IF_FALSE       58

 13          96 LOAD_FAST                3 (islands)
             98 LOAD_CONST               4 (1)
            100 INPLACE_ADD
            102 STORE_FAST               3 (islands)

 14         104 LOAD_FAST                4 (stack)
            106 LOAD_METHOD              3 (append)
            108 LOAD_FAST                5 (i)
            110 LOAD_FAST                6 (j)
            112 BUILD_TUPLE              2
            114 CALL_METHOD              1
            116 POP_TOP

 16     >>  118 LOAD_FAST                4 (stack)
            120 POP_JUMP_IF_FALSE       58

 17         122 LOAD_FAST                4 (stack)
            124 LOAD_METHOD              4 (pop)
            126 CALL_METHOD              0
            128 UNPACK_SEQUENCE          2
            130 STORE_FAST               7 (row)
            132 STORE_FAST               8 (col)

 19         134 LOAD_FAST                1 (grid)
            136 LOAD_FAST                7 (row)
            138 BINARY_SUBSCR
            140 LOAD_FAST                8 (col)
            142 BINARY_SUBSCR
            144 LOAD_CONST               3 ('1')
            146 COMPARE_OP               2 (==)
            148 POP_JUMP_IF_FALSE      178
            150 LOAD_FAST                2 (visited)
            152 LOAD_FAST                7 (row)
            154 BINARY_SUBSCR
            156 LOAD_FAST                8 (col)
            158 BINARY_SUBSCR
            160 LOAD_CONST               2 ('X')
            162 COMPARE_OP               3 (!=)
            164 POP_JUMP_IF_FALSE      178

 20         166 LOAD_CONST               2 ('X')
            168 LOAD_FAST                2 (visited)
            170 LOAD_FAST                7 (row)
            172 BINARY_SUBSCR
            174 LOAD_FAST                8 (col)
            176 STORE_SUBSCR

 22     >>  178 LOAD_FAST                7 (row)
            180 LOAD_CONST               4 (1)
            182 BINARY_ADD
            184 LOAD_GLOBAL              2 (len)
            186 LOAD_FAST                1 (grid)
            188 CALL_FUNCTION            1
            190 COMPARE_OP               0 (<)
            192 POP_JUMP_IF_FALSE      232
            194 LOAD_FAST                1 (grid)
            196 LOAD_FAST                7 (row)
            198 LOAD_CONST               4 (1)
            200 BINARY_ADD
            202 BINARY_SUBSCR
            204 LOAD_FAST                8 (col)
            206 BINARY_SUBSCR
            208 LOAD_CONST               3 ('1')
            210 COMPARE_OP               2 (==)
            212 POP_JUMP_IF_FALSE      232

 23         214 LOAD_FAST                4 (stack)
            216 LOAD_METHOD              3 (append)
            218 LOAD_FAST                7 (row)
            220 LOAD_CONST               4 (1)
            222 BINARY_ADD
            224 LOAD_FAST                8 (col)
            226 BUILD_TUPLE              2
            228 CALL_METHOD              1
            230 POP_TOP

 24     >>  232 LOAD_FAST                8 (col)
            234 LOAD_CONST               4 (1)
            236 BINARY_ADD
            238 LOAD_GLOBAL              2 (len)
            240 LOAD_FAST                1 (grid)
            242 LOAD_CONST               1 (0)
            244 BINARY_SUBSCR
            246 CALL_FUNCTION            1
            248 COMPARE_OP               0 (<)
            250 EXTENDED_ARG             1
            252 POP_JUMP_IF_FALSE      294
            254 LOAD_FAST                1 (grid)
            256 LOAD_FAST                7 (row)
            258 BINARY_SUBSCR
            260 LOAD_FAST                8 (col)
            262 LOAD_CONST               4 (1)
            264 BINARY_ADD
            266 BINARY_SUBSCR
            268 LOAD_CONST               3 ('1')
            270 COMPARE_OP               2 (==)
            272 EXTENDED_ARG             1
            274 POP_JUMP_IF_FALSE      294

 25         276 LOAD_FAST                4 (stack)
            278 LOAD_METHOD              3 (append)
            280 LOAD_FAST                7 (row)
            282 LOAD_FAST                8 (col)
            284 LOAD_CONST               4 (1)
            286 BINARY_ADD
            288 BUILD_TUPLE              2
            290 CALL_METHOD              1
            292 POP_TOP

 26     >>  294 LOAD_FAST                7 (row)
            296 LOAD_CONST               4 (1)
            298 BINARY_SUBTRACT
            300 LOAD_CONST               1 (0)
            302 COMPARE_OP               5 (>=)
            304 EXTENDED_ARG             1
            306 POP_JUMP_IF_FALSE      348
            308 LOAD_FAST                1 (grid)
            310 LOAD_FAST                7 (row)
            312 LOAD_CONST               4 (1)
            314 BINARY_SUBTRACT
            316 BINARY_SUBSCR
            318 LOAD_FAST                8 (col)
            320 BINARY_SUBSCR
            322 LOAD_CONST               3 ('1')
            324 COMPARE_OP               2 (==)
            326 EXTENDED_ARG             1
            328 POP_JUMP_IF_FALSE      348

 27         330 LOAD_FAST                4 (stack)
            332 LOAD_METHOD              3 (append)
            334 LOAD_FAST                7 (row)
            336 LOAD_CONST               4 (1)
            338 BINARY_SUBTRACT
            340 LOAD_FAST                8 (col)
            342 BUILD_TUPLE              2
            344 CALL_METHOD              1
            346 POP_TOP

 28     >>  348 LOAD_FAST                8 (col)
            350 LOAD_CONST               4 (1)
            352 BINARY_SUBTRACT
            354 LOAD_CONST               1 (0)
            356 COMPARE_OP               5 (>=)
            358 POP_JUMP_IF_FALSE      118
            360 LOAD_FAST                1 (grid)
            362 LOAD_FAST                7 (row)
            364 BINARY_SUBSCR
            366 LOAD_FAST                8 (col)
            368 LOAD_CONST               4 (1)
            370 BINARY_SUBTRACT
            372 BINARY_SUBSCR
            374 LOAD_CONST               3 ('1')
            376 COMPARE_OP               2 (==)
            378 POP_JUMP_IF_FALSE      118

 29         380 LOAD_FAST                4 (stack)
            382 LOAD_METHOD              3 (append)
            384 LOAD_FAST                7 (row)
            386 LOAD_FAST                8 (col)
            388 LOAD_CONST               4 (1)
            390 BINARY_SUBTRACT
            392 BUILD_TUPLE              2
            394 CALL_METHOD              1
            396 POP_TOP
            398 JUMP_ABSOLUTE          118
            400 JUMP_ABSOLUTE           58
        >>  402 JUMP_ABSOLUTE           36

 30     >>  404 LOAD_FAST                3 (islands)
            406 RETURN_VALUE
None
"
numIslands,"class Solution:

    def numIslands(self, grid: List[List[str]]) -> int:
        rows_count = len(grid)
        cols_count = len(grid[0]) if grid else 0
        num_islands = 0
        stack = []
        for i in range(rows_count):
            for j in range(cols_count):
                if grid[i][j] == '1':
                    num_islands += 1
                    stack.append((i, j))
                    while stack:
                        ci, cj = stack.pop()
                        grid[ci][cj] = '0'

                        if ci > 0 and grid[ci - 1][cj] == '1':
                            stack.append((ci - 1, cj))

                        if ci < rows_count - 1 and grid[ci + 1][cj] == '1':
                            stack.append((ci + 1, cj))

                        if cj > 0 and grid[ci][cj - 1] == '1':
                            stack.append((ci, cj - 1))

                        if cj < cols_count - 1 and grid[ci][cj + 1] == '1':
                            stack.append((ci, cj + 1))

        return num_islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4bb24652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4bb24652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f4bb2465240, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f4bb2465240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (rows_count)

  5           8 LOAD_FAST                1 (grid)
             10 POP_JUMP_IF_FALSE       24
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (grid)
             16 LOAD_CONST               1 (0)
             18 BINARY_SUBSCR
             20 CALL_FUNCTION            1
             22 JUMP_FORWARD             2 (to 26)
        >>   24 LOAD_CONST               1 (0)
        >>   26 STORE_FAST               3 (cols_count)

  6          28 LOAD_CONST               1 (0)
             30 STORE_FAST               4 (num_islands)

  7          32 BUILD_LIST               0
             34 STORE_FAST               5 (stack)

  8          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                2 (rows_count)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 EXTENDED_ARG             1
             46 FOR_ITER               284 (to 332)
             48 STORE_FAST               6 (i)

  9          50 LOAD_GLOBAL              1 (range)
             52 LOAD_FAST                3 (cols_count)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 EXTENDED_ARG             1
             60 FOR_ITER               268 (to 330)
             62 STORE_FAST               7 (j)

 10          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                6 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                7 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       58

 11          80 LOAD_FAST                4 (num_islands)
             82 LOAD_CONST               3 (1)
             84 INPLACE_ADD
             86 STORE_FAST               4 (num_islands)

 12          88 LOAD_FAST                5 (stack)
             90 LOAD_METHOD              2 (append)
             92 LOAD_FAST                6 (i)
             94 LOAD_FAST                7 (j)
             96 BUILD_TUPLE              2
             98 CALL_METHOD              1
            100 POP_TOP

 13     >>  102 LOAD_FAST                5 (stack)
            104 POP_JUMP_IF_FALSE       58

 14         106 LOAD_FAST                5 (stack)
            108 LOAD_METHOD              3 (pop)
            110 CALL_METHOD              0
            112 UNPACK_SEQUENCE          2
            114 STORE_FAST               8 (ci)
            116 STORE_FAST               9 (cj)

 15         118 LOAD_CONST               4 ('0')
            120 LOAD_FAST                1 (grid)
            122 LOAD_FAST                8 (ci)
            124 BINARY_SUBSCR
            126 LOAD_FAST                9 (cj)
            128 STORE_SUBSCR

 17         130 LOAD_FAST                8 (ci)
            132 LOAD_CONST               1 (0)
            134 COMPARE_OP               4 (>)
            136 POP_JUMP_IF_FALSE      176
            138 LOAD_FAST                1 (grid)
            140 LOAD_FAST                8 (ci)
            142 LOAD_CONST               3 (1)
            144 BINARY_SUBTRACT
            146 BINARY_SUBSCR
            148 LOAD_FAST                9 (cj)
            150 BINARY_SUBSCR
            152 LOAD_CONST               2 ('1')
            154 COMPARE_OP               2 (==)
            156 POP_JUMP_IF_FALSE      176

 18         158 LOAD_FAST                5 (stack)
            160 LOAD_METHOD              2 (append)
            162 LOAD_FAST                8 (ci)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 LOAD_FAST                9 (cj)
            170 BUILD_TUPLE              2
            172 CALL_METHOD              1
            174 POP_TOP

 20     >>  176 LOAD_FAST                8 (ci)
            178 LOAD_FAST                2 (rows_count)
            180 LOAD_CONST               3 (1)
            182 BINARY_SUBTRACT
            184 COMPARE_OP               0 (<)
            186 POP_JUMP_IF_FALSE      226
            188 LOAD_FAST                1 (grid)
            190 LOAD_FAST                8 (ci)
            192 LOAD_CONST               3 (1)
            194 BINARY_ADD
            196 BINARY_SUBSCR
            198 LOAD_FAST                9 (cj)
            200 BINARY_SUBSCR
            202 LOAD_CONST               2 ('1')
            204 COMPARE_OP               2 (==)
            206 POP_JUMP_IF_FALSE      226

 21         208 LOAD_FAST                5 (stack)
            210 LOAD_METHOD              2 (append)
            212 LOAD_FAST                8 (ci)
            214 LOAD_CONST               3 (1)
            216 BINARY_ADD
            218 LOAD_FAST                9 (cj)
            220 BUILD_TUPLE              2
            222 CALL_METHOD              1
            224 POP_TOP

 23     >>  226 LOAD_FAST                9 (cj)
            228 LOAD_CONST               1 (0)
            230 COMPARE_OP               4 (>)
            232 EXTENDED_ARG             1
            234 POP_JUMP_IF_FALSE      276
            236 LOAD_FAST                1 (grid)
            238 LOAD_FAST                8 (ci)
            240 BINARY_SUBSCR
            242 LOAD_FAST                9 (cj)
            244 LOAD_CONST               3 (1)
            246 BINARY_SUBTRACT
            248 BINARY_SUBSCR
            250 LOAD_CONST               2 ('1')
            252 COMPARE_OP               2 (==)
            254 EXTENDED_ARG             1
            256 POP_JUMP_IF_FALSE      276

 24         258 LOAD_FAST                5 (stack)
            260 LOAD_METHOD              2 (append)
            262 LOAD_FAST                8 (ci)
            264 LOAD_FAST                9 (cj)
            266 LOAD_CONST               3 (1)
            268 BINARY_SUBTRACT
            270 BUILD_TUPLE              2
            272 CALL_METHOD              1
            274 POP_TOP

 26     >>  276 LOAD_FAST                9 (cj)
            278 LOAD_FAST                3 (cols_count)
            280 LOAD_CONST               3 (1)
            282 BINARY_SUBTRACT
            284 COMPARE_OP               0 (<)
            286 POP_JUMP_IF_FALSE      102
            288 LOAD_FAST                1 (grid)
            290 LOAD_FAST                8 (ci)
            292 BINARY_SUBSCR
            294 LOAD_FAST                9 (cj)
            296 LOAD_CONST               3 (1)
            298 BINARY_ADD
            300 BINARY_SUBSCR
            302 LOAD_CONST               2 ('1')
            304 COMPARE_OP               2 (==)
            306 POP_JUMP_IF_FALSE      102

 27         308 LOAD_FAST                5 (stack)
            310 LOAD_METHOD              2 (append)
            312 LOAD_FAST                8 (ci)
            314 LOAD_FAST                9 (cj)
            316 LOAD_CONST               3 (1)
            318 BINARY_ADD
            320 BUILD_TUPLE              2
            322 CALL_METHOD              1
            324 POP_TOP
            326 JUMP_ABSOLUTE          102
            328 JUMP_ABSOLUTE           58
        >>  330 JUMP_ABSOLUTE           44

 29     >>  332 LOAD_FAST                4 (num_islands)
            334 RETURN_VALUE
None
"
numIslands,"from typing import List, Callable

class Solution:
    def numIslands(self, treasureMap: List[List[str]]) -> int:
        # O(m * n) time and O(m * n) space to store the recursive stackframe calls
        m = len(treasureMap)
        if m == 0: return 0  # dead men tell no tales
        n = len(treasureMap[0])
        if n == 0: return 0  # dead men tell no tales
        num_islands = 0

        sail_down:  Traverser = lambda row, col: findTreasure(row + 1, col, treasureMap)
        sail_up:    Traverser = lambda row, col: findTreasure(row - 1, col, treasureMap)
        sail_right: Traverser = lambda row, col: findTreasure(row, col + 1, treasureMap)
        sail_left:  Traverser = lambda row, col: findTreasure(row, col - 1, treasureMap)

        land_down:  CrowsNestNavigator  = lambda row, col: (row + 1) < m  and treasureMap[row + 1][col] == ""1""
        land_up:    CrowsNestNavigator  = lambda row, col: (row - 1) > -1 and treasureMap[row - 1][col] == ""1""
        land_right: CrowsNestNavigator  = lambda row, col: (col + 1) < n  and treasureMap[row][col + 1] == ""1""
        land_left:  CrowsNestNavigator  = lambda row, col: (col - 1) > -1 and treasureMap[row][col - 1] == ""1""

        def findTreasure(row: int, col: int, grid: List[List[str]]) -> None:
            nonlocal m, n
            grid[row][col] = ""x""
            # for each landpiece, attempt to go left, right, up or down if there is land
            if land_down(row, col):  sail_down(row, col)
            if land_up(row, col):    sail_up(row, col)
            if land_right(row, col): sail_right(row, col)
            if land_left(row, col):  sail_left(row, col)

        for col in range(n):
            for row in range(m):
                if treasureMap[row][col] == ""1"":
                    findTreasure(row, col, treasureMap)
                    num_islands += 1

        return num_islands
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List', 'Callable'))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 IMPORT_FROM              2 (Callable)
             12 STORE_NAME               2 (Callable)
             14 POP_TOP

  3          16 LOAD_BUILD_CLASS
             18 LOAD_CONST               2 (<code object Solution at 0x7fc329c159d0, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution')
             22 MAKE_FUNCTION            0
             24 LOAD_CONST               3 ('Solution')
             26 CALL_FUNCTION            2
             28 STORE_NAME               3 (Solution)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc329c159d0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('treasureMap', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fc329c15920, file ""<ast>"", line 4>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fc329c15920, file ""<ast>"", line 4>:
  6           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF              11 (treasureMap)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              5 (m)

  7           8 LOAD_DEREF               5 (m)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  8     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_DEREF              11 (treasureMap)
             24 LOAD_CONST               1 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_DEREF              6 (n)

  9          32 LOAD_DEREF               6 (n)
             34 LOAD_CONST               1 (0)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       44
             40 LOAD_CONST               1 (0)
             42 RETURN_VALUE

 10     >>   44 LOAD_CONST               1 (0)
             46 STORE_FAST               2 (num_islands)

 12          48 LOAD_CLOSURE             0 (findTreasure)
             50 LOAD_CLOSURE            11 (treasureMap)
             52 BUILD_TUPLE              2
             54 LOAD_CONST               2 (<code object <lambda> at 0x7fc329c15240, file ""<ast>"", line 12>)
             56 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             58 MAKE_FUNCTION            8 (closure)
             60 STORE_DEREF              7 (sail_down)

 13          62 LOAD_CLOSURE             0 (findTreasure)
             64 LOAD_CLOSURE            11 (treasureMap)
             66 BUILD_TUPLE              2
             68 LOAD_CONST               4 (<code object <lambda> at 0x7fc329c152f0, file ""<ast>"", line 13>)
             70 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             72 MAKE_FUNCTION            8 (closure)
             74 STORE_DEREF             10 (sail_up)

 14          76 LOAD_CLOSURE             0 (findTreasure)
             78 LOAD_CLOSURE            11 (treasureMap)
             80 BUILD_TUPLE              2
             82 LOAD_CONST               5 (<code object <lambda> at 0x7fc329c153a0, file ""<ast>"", line 14>)
             84 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             86 MAKE_FUNCTION            8 (closure)
             88 STORE_DEREF              9 (sail_right)

 15          90 LOAD_CLOSURE             0 (findTreasure)
             92 LOAD_CLOSURE            11 (treasureMap)
             94 BUILD_TUPLE              2
             96 LOAD_CONST               6 (<code object <lambda> at 0x7fc329c15450, file ""<ast>"", line 15>)
             98 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            100 MAKE_FUNCTION            8 (closure)
            102 STORE_DEREF              8 (sail_left)

 17         104 LOAD_CLOSURE             5 (m)
            106 LOAD_CLOSURE            11 (treasureMap)
            108 BUILD_TUPLE              2
            110 LOAD_CONST               7 (<code object <lambda> at 0x7fc329c15500, file ""<ast>"", line 17>)
            112 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            114 MAKE_FUNCTION            8 (closure)
            116 STORE_DEREF              1 (land_down)

 18         118 LOAD_CLOSURE            11 (treasureMap)
            120 BUILD_TUPLE              1
            122 LOAD_CONST               8 (<code object <lambda> at 0x7fc329c155b0, file ""<ast>"", line 18>)
            124 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            126 MAKE_FUNCTION            8 (closure)
            128 STORE_DEREF              4 (land_up)

 19         130 LOAD_CLOSURE             6 (n)
            132 LOAD_CLOSURE            11 (treasureMap)
            134 BUILD_TUPLE              2
            136 LOAD_CONST               9 (<code object <lambda> at 0x7fc329c15660, file ""<ast>"", line 19>)
            138 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            140 MAKE_FUNCTION            8 (closure)
            142 STORE_DEREF              3 (land_right)

 20         144 LOAD_CLOSURE            11 (treasureMap)
            146 BUILD_TUPLE              1
            148 LOAD_CONST              10 (<code object <lambda> at 0x7fc329c15710, file ""<ast>"", line 20>)
            150 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            152 MAKE_FUNCTION            8 (closure)
            154 STORE_DEREF              2 (land_left)

 22         156 LOAD_GLOBAL              1 (int)
            158 LOAD_GLOBAL              1 (int)
            160 LOAD_GLOBAL              2 (List)
            162 LOAD_GLOBAL              2 (List)
            164 LOAD_GLOBAL              3 (str)
            166 BINARY_SUBSCR
            168 BINARY_SUBSCR
            170 LOAD_CONST               0 (None)
            172 LOAD_CONST              11 (('row', 'col', 'grid', 'return'))
            174 BUILD_CONST_KEY_MAP      4
            176 LOAD_CLOSURE             1 (land_down)
            178 LOAD_CLOSURE             2 (land_left)
            180 LOAD_CLOSURE             3 (land_right)
            182 LOAD_CLOSURE             4 (land_up)
            184 LOAD_CLOSURE             5 (m)
            186 LOAD_CLOSURE             6 (n)
            188 LOAD_CLOSURE             7 (sail_down)
            190 LOAD_CLOSURE             8 (sail_left)
            192 LOAD_CLOSURE             9 (sail_right)
            194 LOAD_CLOSURE            10 (sail_up)
            196 BUILD_TUPLE             10
            198 LOAD_CONST              12 (<code object findTreasure at 0x7fc329c157c0, file ""<ast>"", line 22>)
            200 LOAD_CONST              13 ('Solution.numIslands.<locals>.findTreasure')
            202 MAKE_FUNCTION           12 (annotations, closure)
            204 STORE_DEREF              0 (findTreasure)

 31         206 LOAD_GLOBAL              4 (range)
            208 LOAD_DEREF               6 (n)
            210 CALL_FUNCTION            1
            212 GET_ITER
        >>  214 FOR_ITER                54 (to 270)
            216 STORE_FAST               3 (col)

 32         218 LOAD_GLOBAL              4 (range)
            220 LOAD_DEREF               5 (m)
            222 CALL_FUNCTION            1
            224 GET_ITER
        >>  226 FOR_ITER                40 (to 268)
            228 STORE_FAST               4 (row)

 33         230 LOAD_DEREF              11 (treasureMap)
            232 LOAD_FAST                4 (row)
            234 BINARY_SUBSCR
            236 LOAD_FAST                3 (col)
            238 BINARY_SUBSCR
            240 LOAD_CONST              14 ('1')
            242 COMPARE_OP               2 (==)
            244 POP_JUMP_IF_FALSE      226

 34         246 LOAD_DEREF               0 (findTreasure)
            248 LOAD_FAST                4 (row)
            250 LOAD_FAST                3 (col)
            252 LOAD_DEREF              11 (treasureMap)
            254 CALL_FUNCTION            3
            256 POP_TOP

 35         258 LOAD_FAST                2 (num_islands)
            260 LOAD_CONST              15 (1)
            262 INPLACE_ADD
            264 STORE_FAST               2 (num_islands)
            266 JUMP_ABSOLUTE          226
        >>  268 JUMP_ABSOLUTE          214

 37     >>  270 LOAD_FAST                2 (num_islands)
            272 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c15240, file ""<ast>"", line 12>:
 12           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_CONST               1 (1)
              6 BINARY_ADD
              8 LOAD_FAST                1 (col)
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c152f0, file ""<ast>"", line 13>:
 13           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_CONST               1 (1)
              6 BINARY_SUBTRACT
              8 LOAD_FAST                1 (col)
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c153a0, file ""<ast>"", line 14>:
 14           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_FAST                1 (col)
              6 LOAD_CONST               1 (1)
              8 BINARY_ADD
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c15450, file ""<ast>"", line 15>:
 15           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_FAST                1 (col)
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c15500, file ""<ast>"", line 17>:
 17           0 LOAD_FAST                0 (row)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 LOAD_DEREF               0 (m)
              8 COMPARE_OP               0 (<)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               1 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 BINARY_SUBSCR
             22 LOAD_FAST                1 (col)
             24 BINARY_SUBSCR
             26 LOAD_CONST               2 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c155b0, file ""<ast>"", line 18>:
 18           0 LOAD_FAST                0 (row)
              2 LOAD_CONST               1 (1)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               2 (-1)
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               0 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 LOAD_CONST               1 (1)
             18 BINARY_SUBTRACT
             20 BINARY_SUBSCR
             22 LOAD_FAST                1 (col)
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c15660, file ""<ast>"", line 19>:
 19           0 LOAD_FAST                1 (col)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 LOAD_DEREF               0 (n)
              8 COMPARE_OP               0 (<)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               1 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (col)
             20 LOAD_CONST               1 (1)
             22 BINARY_ADD
             24 BINARY_SUBSCR
             26 LOAD_CONST               2 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fc329c15710, file ""<ast>"", line 20>:
 20           0 LOAD_FAST                1 (col)
              2 LOAD_CONST               1 (1)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               2 (-1)
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               0 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (col)
             20 LOAD_CONST               1 (1)
             22 BINARY_SUBTRACT
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object findTreasure at 0x7fc329c157c0, file ""<ast>"", line 22>:
 24           0 LOAD_CONST               1 ('x')
              2 LOAD_FAST                2 (grid)
              4 LOAD_FAST                0 (row)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (col)
             10 STORE_SUBSCR

 26          12 LOAD_DEREF               0 (land_down)
             14 LOAD_FAST                0 (row)
             16 LOAD_FAST                1 (col)
             18 CALL_FUNCTION            2
             20 POP_JUMP_IF_FALSE       32
             22 LOAD_DEREF               6 (sail_down)
             24 LOAD_FAST                0 (row)
             26 LOAD_FAST                1 (col)
             28 CALL_FUNCTION            2
             30 POP_TOP

 27     >>   32 LOAD_DEREF               3 (land_up)
             34 LOAD_FAST                0 (row)
             36 LOAD_FAST                1 (col)
             38 CALL_FUNCTION            2
             40 POP_JUMP_IF_FALSE       52
             42 LOAD_DEREF               9 (sail_up)
             44 LOAD_FAST                0 (row)
             46 LOAD_FAST                1 (col)
             48 CALL_FUNCTION            2
             50 POP_TOP

 28     >>   52 LOAD_DEREF               2 (land_right)
             54 LOAD_FAST                0 (row)
             56 LOAD_FAST                1 (col)
             58 CALL_FUNCTION            2
             60 POP_JUMP_IF_FALSE       72
             62 LOAD_DEREF               8 (sail_right)
             64 LOAD_FAST                0 (row)
             66 LOAD_FAST                1 (col)
             68 CALL_FUNCTION            2
             70 POP_TOP

 29     >>   72 LOAD_DEREF               1 (land_left)
             74 LOAD_FAST                0 (row)
             76 LOAD_FAST                1 (col)
             78 CALL_FUNCTION            2
             80 POP_JUMP_IF_FALSE       92
             82 LOAD_DEREF               7 (sail_left)
             84 LOAD_FAST                0 (row)
             86 LOAD_FAST                1 (col)
             88 CALL_FUNCTION            2
             90 POP_TOP
        >>   92 LOAD_CONST               0 (None)
             94 RETURN_VALUE
None
"
numIslands,"def bfs(self, grid, dictionary, tup):
    if tup not in dictionary and grid[tup[0]][tup[1]] == ""1"":
        dictionary[tup] = tup
        if tup[0] > 0:
            tup2 = (tup[0] -1, tup[1])
            bfs(self, grid, dictionary, tup2)
        if tup[1] > 0:
            tup2 = (tup[0], tup[1] -1)
            bfs(self, grid, dictionary, tup2)
        if tup[0] < len(grid)-1:
            tup2 = (tup[0] +1, tup[1])
            bfs(self, grid, dictionary, tup2)
        if tup[1] < len(grid[0])-1:
            tup2 = (tup[0],tup[1] +1)
            bfs(self, grid, dictionary, tup2)


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if grid != None and len(grid) != 0:
            dictionary = {}
            islands = 0
            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    tup = (i,j)
                    if grid[i][j] == ""1"" and tup not in dictionary:
                        islands += 1
                        bfs(self, grid, dictionary, tup)
            return islands 
        else:
            return 0
","  1           0 LOAD_CONST               0 (<code object bfs at 0x7f63ec125240, file ""<ast>"", line 1>)
              2 LOAD_CONST               1 ('bfs')
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (bfs)

 18           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f63ec1252f0, file ""<ast>"", line 18>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object bfs at 0x7f63ec125240, file ""<ast>"", line 1>:
  2           0 LOAD_FAST                3 (tup)
              2 LOAD_FAST                2 (dictionary)
              4 COMPARE_OP               7 (not in)
              6 POP_JUMP_IF_FALSE      244
              8 LOAD_FAST                1 (grid)
             10 LOAD_FAST                3 (tup)
             12 LOAD_CONST               1 (0)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_FAST                3 (tup)
             20 LOAD_CONST               2 (1)
             22 BINARY_SUBSCR
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE      244

  3          32 LOAD_FAST                3 (tup)
             34 LOAD_FAST                2 (dictionary)
             36 LOAD_FAST                3 (tup)
             38 STORE_SUBSCR

  4          40 LOAD_FAST                3 (tup)
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 LOAD_CONST               1 (0)
             48 COMPARE_OP               4 (>)
             50 POP_JUMP_IF_FALSE       86

  5          52 LOAD_FAST                3 (tup)
             54 LOAD_CONST               1 (0)
             56 BINARY_SUBSCR
             58 LOAD_CONST               2 (1)
             60 BINARY_SUBTRACT
             62 LOAD_FAST                3 (tup)
             64 LOAD_CONST               2 (1)
             66 BINARY_SUBSCR
             68 BUILD_TUPLE              2
             70 STORE_FAST               4 (tup2)

  6          72 LOAD_GLOBAL              0 (bfs)
             74 LOAD_FAST                0 (self)
             76 LOAD_FAST                1 (grid)
             78 LOAD_FAST                2 (dictionary)
             80 LOAD_FAST                4 (tup2)
             82 CALL_FUNCTION            4
             84 POP_TOP

  7     >>   86 LOAD_FAST                3 (tup)
             88 LOAD_CONST               2 (1)
             90 BINARY_SUBSCR
             92 LOAD_CONST               1 (0)
             94 COMPARE_OP               4 (>)
             96 POP_JUMP_IF_FALSE      132

  8          98 LOAD_FAST                3 (tup)
            100 LOAD_CONST               1 (0)
            102 BINARY_SUBSCR
            104 LOAD_FAST                3 (tup)
            106 LOAD_CONST               2 (1)
            108 BINARY_SUBSCR
            110 LOAD_CONST               2 (1)
            112 BINARY_SUBTRACT
            114 BUILD_TUPLE              2
            116 STORE_FAST               4 (tup2)

  9         118 LOAD_GLOBAL              0 (bfs)
            120 LOAD_FAST                0 (self)
            122 LOAD_FAST                1 (grid)
            124 LOAD_FAST                2 (dictionary)
            126 LOAD_FAST                4 (tup2)
            128 CALL_FUNCTION            4
            130 POP_TOP

 10     >>  132 LOAD_FAST                3 (tup)
            134 LOAD_CONST               1 (0)
            136 BINARY_SUBSCR
            138 LOAD_GLOBAL              1 (len)
            140 LOAD_FAST                1 (grid)
            142 CALL_FUNCTION            1
            144 LOAD_CONST               2 (1)
            146 BINARY_SUBTRACT
            148 COMPARE_OP               0 (<)
            150 POP_JUMP_IF_FALSE      186

 11         152 LOAD_FAST                3 (tup)
            154 LOAD_CONST               1 (0)
            156 BINARY_SUBSCR
            158 LOAD_CONST               2 (1)
            160 BINARY_ADD
            162 LOAD_FAST                3 (tup)
            164 LOAD_CONST               2 (1)
            166 BINARY_SUBSCR
            168 BUILD_TUPLE              2
            170 STORE_FAST               4 (tup2)

 12         172 LOAD_GLOBAL              0 (bfs)
            174 LOAD_FAST                0 (self)
            176 LOAD_FAST                1 (grid)
            178 LOAD_FAST                2 (dictionary)
            180 LOAD_FAST                4 (tup2)
            182 CALL_FUNCTION            4
            184 POP_TOP

 13     >>  186 LOAD_FAST                3 (tup)
            188 LOAD_CONST               2 (1)
            190 BINARY_SUBSCR
            192 LOAD_GLOBAL              1 (len)
            194 LOAD_FAST                1 (grid)
            196 LOAD_CONST               1 (0)
            198 BINARY_SUBSCR
            200 CALL_FUNCTION            1
            202 LOAD_CONST               2 (1)
            204 BINARY_SUBTRACT
            206 COMPARE_OP               0 (<)
            208 POP_JUMP_IF_FALSE      244

 14         210 LOAD_FAST                3 (tup)
            212 LOAD_CONST               1 (0)
            214 BINARY_SUBSCR
            216 LOAD_FAST                3 (tup)
            218 LOAD_CONST               2 (1)
            220 BINARY_SUBSCR
            222 LOAD_CONST               2 (1)
            224 BINARY_ADD
            226 BUILD_TUPLE              2
            228 STORE_FAST               4 (tup2)

 15         230 LOAD_GLOBAL              0 (bfs)
            232 LOAD_FAST                0 (self)
            234 LOAD_FAST                1 (grid)
            236 LOAD_FAST                2 (dictionary)
            238 LOAD_FAST                4 (tup2)
            240 CALL_FUNCTION            4
            242 POP_TOP
        >>  244 LOAD_CONST               0 (None)
            246 RETURN_VALUE

Disassembly of <code object Solution at 0x7f63ec1252f0, file ""<ast>"", line 18>:
 18           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 19           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f63ec125450, file ""<ast>"", line 19>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f63ec125450, file ""<ast>"", line 19>:
 20           0 LOAD_FAST                1 (grid)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               3 (!=)
              6 POP_JUMP_IF_FALSE      126
              8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE      126

 21          20 BUILD_MAP                0
             22 STORE_FAST               2 (dictionary)

 22          24 LOAD_CONST               1 (0)
             26 STORE_FAST               3 (islands)

 23          28 LOAD_GLOBAL              1 (range)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                80 (to 122)
             42 STORE_FAST               4 (i)

 24          44 LOAD_GLOBAL              1 (range)
             46 LOAD_GLOBAL              0 (len)
             48 LOAD_FAST                1 (grid)
             50 LOAD_CONST               1 (0)
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                58 (to 120)
             62 STORE_FAST               5 (j)

 25          64 LOAD_FAST                4 (i)
             66 LOAD_FAST                5 (j)
             68 BUILD_TUPLE              2
             70 STORE_FAST               6 (tup)

 26          72 LOAD_FAST                1 (grid)
             74 LOAD_FAST                4 (i)
             76 BINARY_SUBSCR
             78 LOAD_FAST                5 (j)
             80 BINARY_SUBSCR
             82 LOAD_CONST               2 ('1')
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE       60
             88 LOAD_FAST                6 (tup)
             90 LOAD_FAST                2 (dictionary)
             92 COMPARE_OP               7 (not in)
             94 POP_JUMP_IF_FALSE       60

 27          96 LOAD_FAST                3 (islands)
             98 LOAD_CONST               3 (1)
            100 INPLACE_ADD
            102 STORE_FAST               3 (islands)

 28         104 LOAD_GLOBAL              2 (bfs)
            106 LOAD_FAST                0 (self)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                2 (dictionary)
            112 LOAD_FAST                6 (tup)
            114 CALL_FUNCTION            4
            116 POP_TOP
            118 JUMP_ABSOLUTE           60
        >>  120 JUMP_ABSOLUTE           40

 29     >>  122 LOAD_FAST                3 (islands)
            124 RETURN_VALUE

 31     >>  126 LOAD_CONST               1 (0)
            128 RETURN_VALUE
            130 LOAD_CONST               0 (None)
            132 RETURN_VALUE
None
"
numIslands,"class Solution:
    def __init__(self):
        self.vis = [[]]
        self.rank = [[]]

    def parent(self,i,j,pvec):
        if pvec[i][j]==(i,j):
            return i,j
        pvec[i][j] = self.parent(pvec[i][j][0],pvec[i][j][1],pvec)
        return pvec[i][j]

    def union(self,i1,j1,i2,j2):
        pvec = self.vis
        rank = self.rank
        ii1,jj1 = self.parent(i1,j1,pvec)
        ii2,jj2 = self.parent(i2,j2,pvec)
        if ii1 == ii2 and jj1 == jj2:
            return
        if rank[ii1][jj1] < rank[ii2][jj2]:
            pvec[ii1][jj1] = (ii2,jj2)
        elif rank[ii1][jj1] > rank[ii2][jj2]:
            pvec[ii2][jj2] = (ii1,jj1)
        else:
            pvec[ii1][jj1] = (ii2,jj2)
            rank[ii2][jj2]+=1
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        n = len(grid)
        if n <1:
            return 0
        
        m = len(grid[0])
        if n == 1:
            if m < 1:
                return 0
            if m == 1:
                if grid[0][0] == '1':
                    return 1
                return 0

        self.vis = [[(j,i) for i in range(m)] for j in range(n)]
        self.rank = [[0 for i in range(m)] for j in range(n)]
        vis = self.vis
        for i in range(n):
            for j in range(m):
                par = 0
                if grid[i][j] == '1':
                    if i > 0 and not par:
                        if grid[i-1][j] == '1':
                            self.union(i,j,i-1,j)
                    if i < n-1 and not par:
                        if grid[i+1][j] == '1':
                            self.union(i,j,i+1,j)
                    if j > 0 and not par:
                        if grid[i][j-1] == '1':
                            self.union(i,j,i,j-1)
                    if j < m-1 and not par:
                        if grid[i][j+1] == '1':
                            self.union(i,j,i,j+1)
        
        freq = [[0 for i in range(m)] for j in range(n)]
        res = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1':
                    setx, sety = self.parent(i,j,vis)
                    if not freq[setx][sety]:
                        res+=1
                    freq[setx][sety]+=1
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff301805920, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff301805920, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7ff301805240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  6          16 LOAD_CONST               3 (<code object parent at 0x7ff3018052f0, file ""<ast>"", line 6>)
             18 LOAD_CONST               4 ('Solution.parent')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (parent)

 12          24 LOAD_CONST               5 (<code object union at 0x7ff3018053a0, file ""<ast>"", line 12>)
             26 LOAD_CONST               6 ('Solution.union')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (union)

 28          32 LOAD_NAME                6 (List)
             34 LOAD_NAME                6 (List)
             36 LOAD_NAME                7 (str)
             38 BINARY_SUBSCR
             40 BINARY_SUBSCR
             42 LOAD_NAME                8 (int)
             44 LOAD_CONST               7 (('grid', 'return'))
             46 BUILD_CONST_KEY_MAP      2
             48 LOAD_CONST               8 (<code object numIslands at 0x7ff301805870, file ""<ast>"", line 28>)
             50 LOAD_CONST               9 ('Solution.numIslands')
             52 MAKE_FUNCTION            4 (annotations)
             54 STORE_NAME               9 (numIslands)
             56 LOAD_CONST              10 (None)
             58 RETURN_VALUE

Disassembly of <code object __init__ at 0x7ff301805240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 BUILD_LIST               1
              4 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (vis)

  4           8 BUILD_LIST               0
             10 BUILD_LIST               1
             12 LOAD_FAST                0 (self)
             14 STORE_ATTR               1 (rank)
             16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

Disassembly of <code object parent at 0x7ff3018052f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                3 (pvec)
              2 LOAD_FAST                1 (i)
              4 BINARY_SUBSCR
              6 LOAD_FAST                2 (j)
              8 BINARY_SUBSCR
             10 LOAD_FAST                1 (i)
             12 LOAD_FAST                2 (j)
             14 BUILD_TUPLE              2
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28

  8          20 LOAD_FAST                1 (i)
             22 LOAD_FAST                2 (j)
             24 BUILD_TUPLE              2
             26 RETURN_VALUE

  9     >>   28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              0 (parent)
             32 LOAD_FAST                3 (pvec)
             34 LOAD_FAST                1 (i)
             36 BINARY_SUBSCR
             38 LOAD_FAST                2 (j)
             40 BINARY_SUBSCR
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 LOAD_FAST                3 (pvec)
             48 LOAD_FAST                1 (i)
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (j)
             54 BINARY_SUBSCR
             56 LOAD_CONST               2 (1)
             58 BINARY_SUBSCR
             60 LOAD_FAST                3 (pvec)
             62 CALL_METHOD              3
             64 LOAD_FAST                3 (pvec)
             66 LOAD_FAST                1 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                2 (j)
             72 STORE_SUBSCR

 10          74 LOAD_FAST                3 (pvec)
             76 LOAD_FAST                1 (i)
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (j)
             82 BINARY_SUBSCR
             84 RETURN_VALUE

Disassembly of <code object union at 0x7ff3018053a0, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (vis)
              4 STORE_FAST               5 (pvec)

 14           6 LOAD_FAST                0 (self)
              8 LOAD_ATTR                1 (rank)
             10 STORE_FAST               6 (rank)

 15          12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              2 (parent)
             16 LOAD_FAST                1 (i1)
             18 LOAD_FAST                2 (j1)
             20 LOAD_FAST                5 (pvec)
             22 CALL_METHOD              3
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               7 (ii1)
             28 STORE_FAST               8 (jj1)

 16          30 LOAD_FAST                0 (self)
             32 LOAD_METHOD              2 (parent)
             34 LOAD_FAST                3 (i2)
             36 LOAD_FAST                4 (j2)
             38 LOAD_FAST                5 (pvec)
             40 CALL_METHOD              3
             42 UNPACK_SEQUENCE          2
             44 STORE_FAST               9 (ii2)
             46 STORE_FAST              10 (jj2)

 17          48 LOAD_FAST                7 (ii1)
             50 LOAD_FAST                9 (ii2)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       68
             56 LOAD_FAST                8 (jj1)
             58 LOAD_FAST               10 (jj2)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       68

 18          64 LOAD_CONST               0 (None)
             66 RETURN_VALUE

 19     >>   68 LOAD_FAST                6 (rank)
             70 LOAD_FAST                7 (ii1)
             72 BINARY_SUBSCR
             74 LOAD_FAST                8 (jj1)
             76 BINARY_SUBSCR
             78 LOAD_FAST                6 (rank)
             80 LOAD_FAST                9 (ii2)
             82 BINARY_SUBSCR
             84 LOAD_FAST               10 (jj2)
             86 BINARY_SUBSCR
             88 COMPARE_OP               0 (<)
             90 POP_JUMP_IF_FALSE      110

 20          92 LOAD_FAST                9 (ii2)
             94 LOAD_FAST               10 (jj2)
             96 BUILD_TUPLE              2
             98 LOAD_FAST                5 (pvec)
            100 LOAD_FAST                7 (ii1)
            102 BINARY_SUBSCR
            104 LOAD_FAST                8 (jj1)
            106 STORE_SUBSCR
            108 JUMP_FORWARD            78 (to 188)

 21     >>  110 LOAD_FAST                6 (rank)
            112 LOAD_FAST                7 (ii1)
            114 BINARY_SUBSCR
            116 LOAD_FAST                8 (jj1)
            118 BINARY_SUBSCR
            120 LOAD_FAST                6 (rank)
            122 LOAD_FAST                9 (ii2)
            124 BINARY_SUBSCR
            126 LOAD_FAST               10 (jj2)
            128 BINARY_SUBSCR
            130 COMPARE_OP               4 (>)
            132 POP_JUMP_IF_FALSE      152

 22         134 LOAD_FAST                7 (ii1)
            136 LOAD_FAST                8 (jj1)
            138 BUILD_TUPLE              2
            140 LOAD_FAST                5 (pvec)
            142 LOAD_FAST                9 (ii2)
            144 BINARY_SUBSCR
            146 LOAD_FAST               10 (jj2)
            148 STORE_SUBSCR
            150 JUMP_FORWARD            36 (to 188)

 24     >>  152 LOAD_FAST                9 (ii2)
            154 LOAD_FAST               10 (jj2)
            156 BUILD_TUPLE              2
            158 LOAD_FAST                5 (pvec)
            160 LOAD_FAST                7 (ii1)
            162 BINARY_SUBSCR
            164 LOAD_FAST                8 (jj1)
            166 STORE_SUBSCR

 25         168 LOAD_FAST                6 (rank)
            170 LOAD_FAST                9 (ii2)
            172 BINARY_SUBSCR
            174 LOAD_FAST               10 (jj2)
            176 DUP_TOP_TWO
            178 BINARY_SUBSCR
            180 LOAD_CONST               1 (1)
            182 INPLACE_ADD
            184 ROT_THREE
            186 STORE_SUBSCR

 26     >>  188 LOAD_CONST               0 (None)
            190 RETURN_VALUE

Disassembly of <code object numIslands at 0x7ff301805870, file ""<ast>"", line 28>:
 29           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (n)

 30           8 LOAD_FAST                2 (n)
             10 LOAD_CONST               1 (1)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

 31          16 LOAD_CONST               2 (0)
             18 RETURN_VALUE

 33     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               2 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_DEREF              0 (m)

 34          32 LOAD_FAST                2 (n)
             34 LOAD_CONST               1 (1)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       84

 35          40 LOAD_DEREF               0 (m)
             42 LOAD_CONST               1 (1)
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       52

 36          48 LOAD_CONST               2 (0)
             50 RETURN_VALUE

 37     >>   52 LOAD_DEREF               0 (m)
             54 LOAD_CONST               1 (1)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       84

 38          60 LOAD_FAST                1 (grid)
             62 LOAD_CONST               2 (0)
             64 BINARY_SUBSCR
             66 LOAD_CONST               2 (0)
             68 BINARY_SUBSCR
             70 LOAD_CONST               3 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       80

 39          76 LOAD_CONST               1 (1)
             78 RETURN_VALUE

 40     >>   80 LOAD_CONST               2 (0)
             82 RETURN_VALUE

 42     >>   84 LOAD_CLOSURE             0 (m)
             86 BUILD_TUPLE              1
             88 LOAD_CONST               4 (<code object <listcomp> at 0x7ff301805500, file ""<ast>"", line 42>)
             90 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
             92 MAKE_FUNCTION            8 (closure)
             94 LOAD_GLOBAL              1 (range)
             96 LOAD_FAST                2 (n)
             98 CALL_FUNCTION            1
            100 GET_ITER
            102 CALL_FUNCTION            1
            104 LOAD_FAST                0 (self)
            106 STORE_ATTR               2 (vis)

 43         108 LOAD_CLOSURE             0 (m)
            110 BUILD_TUPLE              1
            112 LOAD_CONST               6 (<code object <listcomp> at 0x7ff301805660, file ""<ast>"", line 43>)
            114 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
            116 MAKE_FUNCTION            8 (closure)
            118 LOAD_GLOBAL              1 (range)
            120 LOAD_FAST                2 (n)
            122 CALL_FUNCTION            1
            124 GET_ITER
            126 CALL_FUNCTION            1
            128 LOAD_FAST                0 (self)
            130 STORE_ATTR               3 (rank)

 44         132 LOAD_FAST                0 (self)
            134 LOAD_ATTR                2 (vis)
            136 STORE_FAST               3 (vis)

 45         138 LOAD_GLOBAL              1 (range)
            140 LOAD_FAST                2 (n)
            142 CALL_FUNCTION            1
            144 GET_ITER
        >>  146 EXTENDED_ARG             1
            148 FOR_ITER               268 (to 418)
            150 STORE_FAST               4 (i)

 46         152 LOAD_GLOBAL              1 (range)
            154 LOAD_DEREF               0 (m)
            156 CALL_FUNCTION            1
            158 GET_ITER
        >>  160 EXTENDED_ARG             0
            162 FOR_ITER               252 (to 416)
            164 STORE_FAST               5 (j)

 47         166 LOAD_CONST               2 (0)
            168 STORE_FAST               6 (par)

 48         170 LOAD_FAST                1 (grid)
            172 LOAD_FAST                4 (i)
            174 BINARY_SUBSCR
            176 LOAD_FAST                5 (j)
            178 BINARY_SUBSCR
            180 LOAD_CONST               3 ('1')
            182 COMPARE_OP               2 (==)
            184 POP_JUMP_IF_FALSE      160

 49         186 LOAD_FAST                4 (i)
            188 LOAD_CONST               2 (0)
            190 COMPARE_OP               4 (>)
            192 POP_JUMP_IF_FALSE      238
            194 LOAD_FAST                6 (par)
            196 POP_JUMP_IF_TRUE       238

 50         198 LOAD_FAST                1 (grid)
            200 LOAD_FAST                4 (i)
            202 LOAD_CONST               1 (1)
            204 BINARY_SUBTRACT
            206 BINARY_SUBSCR
            208 LOAD_FAST                5 (j)
            210 BINARY_SUBSCR
            212 LOAD_CONST               3 ('1')
            214 COMPARE_OP               2 (==)
            216 POP_JUMP_IF_FALSE      238

 51         218 LOAD_FAST                0 (self)
            220 LOAD_METHOD              4 (union)
            222 LOAD_FAST                4 (i)
            224 LOAD_FAST                5 (j)
            226 LOAD_FAST                4 (i)
            228 LOAD_CONST               1 (1)
            230 BINARY_SUBTRACT
            232 LOAD_FAST                5 (j)
            234 CALL_METHOD              4
            236 POP_TOP

 52     >>  238 LOAD_FAST                4 (i)
            240 LOAD_FAST                2 (n)
            242 LOAD_CONST               1 (1)
            244 BINARY_SUBTRACT
            246 COMPARE_OP               0 (<)
            248 EXTENDED_ARG             1
            250 POP_JUMP_IF_FALSE      300
            252 LOAD_FAST                6 (par)
            254 EXTENDED_ARG             1
            256 POP_JUMP_IF_TRUE       300

 53         258 LOAD_FAST                1 (grid)
            260 LOAD_FAST                4 (i)
            262 LOAD_CONST               1 (1)
            264 BINARY_ADD
            266 BINARY_SUBSCR
            268 LOAD_FAST                5 (j)
            270 BINARY_SUBSCR
            272 LOAD_CONST               3 ('1')
            274 COMPARE_OP               2 (==)
            276 EXTENDED_ARG             1
            278 POP_JUMP_IF_FALSE      300

 54         280 LOAD_FAST                0 (self)
            282 LOAD_METHOD              4 (union)
            284 LOAD_FAST                4 (i)
            286 LOAD_FAST                5 (j)
            288 LOAD_FAST                4 (i)
            290 LOAD_CONST               1 (1)
            292 BINARY_ADD
            294 LOAD_FAST                5 (j)
            296 CALL_METHOD              4
            298 POP_TOP

 55     >>  300 LOAD_FAST                5 (j)
            302 LOAD_CONST               2 (0)
            304 COMPARE_OP               4 (>)
            306 EXTENDED_ARG             1
            308 POP_JUMP_IF_FALSE      358
            310 LOAD_FAST                6 (par)
            312 EXTENDED_ARG             1
            314 POP_JUMP_IF_TRUE       358

 56         316 LOAD_FAST                1 (grid)
            318 LOAD_FAST                4 (i)
            320 BINARY_SUBSCR
            322 LOAD_FAST                5 (j)
            324 LOAD_CONST               1 (1)
            326 BINARY_SUBTRACT
            328 BINARY_SUBSCR
            330 LOAD_CONST               3 ('1')
            332 COMPARE_OP               2 (==)
            334 EXTENDED_ARG             1
            336 POP_JUMP_IF_FALSE      358

 57         338 LOAD_FAST                0 (self)
            340 LOAD_METHOD              4 (union)
            342 LOAD_FAST                4 (i)
            344 LOAD_FAST                5 (j)
            346 LOAD_FAST                4 (i)
            348 LOAD_FAST                5 (j)
            350 LOAD_CONST               1 (1)
            352 BINARY_SUBTRACT
            354 CALL_METHOD              4
            356 POP_TOP

 58     >>  358 LOAD_FAST                5 (j)
            360 LOAD_DEREF               0 (m)
            362 LOAD_CONST               1 (1)
            364 BINARY_SUBTRACT
            366 COMPARE_OP               0 (<)
            368 POP_JUMP_IF_FALSE      160
            370 LOAD_FAST                6 (par)
            372 POP_JUMP_IF_TRUE       160

 59         374 LOAD_FAST                1 (grid)
            376 LOAD_FAST                4 (i)
            378 BINARY_SUBSCR
            380 LOAD_FAST                5 (j)
            382 LOAD_CONST               1 (1)
            384 BINARY_ADD
            386 BINARY_SUBSCR
            388 LOAD_CONST               3 ('1')
            390 COMPARE_OP               2 (==)
            392 POP_JUMP_IF_FALSE      160

 60         394 LOAD_FAST                0 (self)
            396 LOAD_METHOD              4 (union)
            398 LOAD_FAST                4 (i)
            400 LOAD_FAST                5 (j)
            402 LOAD_FAST                4 (i)
            404 LOAD_FAST                5 (j)
            406 LOAD_CONST               1 (1)
            408 BINARY_ADD
            410 CALL_METHOD              4
            412 POP_TOP
            414 JUMP_ABSOLUTE          160
        >>  416 JUMP_ABSOLUTE          146

 62     >>  418 LOAD_CLOSURE             0 (m)
            420 BUILD_TUPLE              1
            422 LOAD_CONST               7 (<code object <listcomp> at 0x7ff3018057c0, file ""<ast>"", line 62>)
            424 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
            426 MAKE_FUNCTION            8 (closure)
            428 LOAD_GLOBAL              1 (range)
            430 LOAD_FAST                2 (n)
            432 CALL_FUNCTION            1
            434 GET_ITER
            436 CALL_FUNCTION            1
            438 STORE_FAST               7 (freq)

 63         440 LOAD_CONST               2 (0)
            442 STORE_FAST               8 (res)

 64         444 LOAD_GLOBAL              1 (range)
            446 LOAD_FAST                2 (n)
            448 CALL_FUNCTION            1
            450 GET_ITER
        >>  452 FOR_ITER               100 (to 554)
            454 STORE_FAST               4 (i)

 65         456 LOAD_GLOBAL              1 (range)
            458 LOAD_DEREF               0 (m)
            460 CALL_FUNCTION            1
            462 GET_ITER
        >>  464 FOR_ITER                84 (to 550)
            466 STORE_FAST               5 (j)

 66         468 LOAD_FAST                1 (grid)
            470 LOAD_FAST                4 (i)
            472 BINARY_SUBSCR
            474 LOAD_FAST                5 (j)
            476 BINARY_SUBSCR
            478 LOAD_CONST               3 ('1')
            480 COMPARE_OP               2 (==)
            482 EXTENDED_ARG             1
            484 POP_JUMP_IF_FALSE      464

 67         486 LOAD_FAST                0 (self)
            488 LOAD_METHOD              5 (parent)
            490 LOAD_FAST                4 (i)
            492 LOAD_FAST                5 (j)
            494 LOAD_FAST                3 (vis)
            496 CALL_METHOD              3
            498 UNPACK_SEQUENCE          2
            500 STORE_FAST               9 (setx)
            502 STORE_FAST              10 (sety)

 68         504 LOAD_FAST                7 (freq)
            506 LOAD_FAST                9 (setx)
            508 BINARY_SUBSCR
            510 LOAD_FAST               10 (sety)
            512 BINARY_SUBSCR
            514 EXTENDED_ARG             2
            516 POP_JUMP_IF_TRUE       526

 69         518 LOAD_FAST                8 (res)
            520 LOAD_CONST               1 (1)
            522 INPLACE_ADD
            524 STORE_FAST               8 (res)

 70     >>  526 LOAD_FAST                7 (freq)
            528 LOAD_FAST                9 (setx)
            530 BINARY_SUBSCR
            532 LOAD_FAST               10 (sety)
            534 DUP_TOP_TWO
            536 BINARY_SUBSCR
            538 LOAD_CONST               1 (1)
            540 INPLACE_ADD
            542 ROT_THREE
            544 STORE_SUBSCR
            546 EXTENDED_ARG             1
            548 JUMP_ABSOLUTE          464
        >>  550 EXTENDED_ARG             1
            552 JUMP_ABSOLUTE          452

 71     >>  554 LOAD_FAST                8 (res)
            556 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff301805500, file ""<ast>"", line 42>:
 42           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                26 (to 32)
              6 STORE_DEREF              0 (j)
              8 LOAD_CLOSURE             0 (j)
             10 BUILD_TUPLE              1
             12 LOAD_CONST               0 (<code object <listcomp> at 0x7ff301805450, file ""<ast>"", line 42>)
             14 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             16 MAKE_FUNCTION            8 (closure)
             18 LOAD_GLOBAL              0 (range)
             20 LOAD_DEREF               1 (m)
             22 CALL_FUNCTION            1
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 LIST_APPEND              2
             30 JUMP_ABSOLUTE            4
        >>   32 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff301805450, file ""<ast>"", line 42>:
 42           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              8 LOAD_DEREF               0 (j)
             10 LOAD_FAST                1 (i)
             12 BUILD_TUPLE              2
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff301805660, file ""<ast>"", line 43>:
 43           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                22 (to 28)
              6 STORE_FAST               1 (j)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7ff3018055b0, file ""<ast>"", line 43>)
             10 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (m)
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 LIST_APPEND              2
             26 JUMP_ABSOLUTE            4
        >>   28 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff3018055b0, file ""<ast>"", line 43>:
 43           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff3018057c0, file ""<ast>"", line 62>:
 62           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                22 (to 28)
              6 STORE_FAST               1 (j)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7ff301805710, file ""<ast>"", line 62>)
             10 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (m)
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 LIST_APPEND              2
             26 JUMP_ABSOLUTE            4
        >>   28 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff301805710, file ""<ast>"", line 62>:
 62           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not len(grid):
            return 0
        
        def dfs(grid,row,col):
            if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == ""0"":
                return
            grid[row][col] = ""0""
            dfs(grid,row+1,col)
            dfs(grid,row-1,col)
            dfs(grid,row,col+1)
            dfs(grid,row,col-1)
            
        count = 0
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] == ""1"":
                    count += 1
                    dfs(grid,row,col)
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5d454b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5d454b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f5d454b53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f5d454b53a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 POP_JUMP_IF_TRUE        12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_CLOSURE             0 (dfs)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               2 (<code object dfs at 0x7f5d454b5240, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (dfs)

 15          24 LOAD_CONST               1 (0)
             26 STORE_FAST               2 (count)

 16          28 LOAD_GLOBAL              1 (range)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                62 (to 104)
             42 STORE_FAST               3 (row)

 17          44 LOAD_GLOBAL              1 (range)
             46 LOAD_GLOBAL              0 (len)
             48 LOAD_FAST                1 (grid)
             50 LOAD_CONST               1 (0)
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                40 (to 102)
             62 STORE_FAST               4 (col)

 18          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                3 (row)
             68 BINARY_SUBSCR
             70 LOAD_FAST                4 (col)
             72 BINARY_SUBSCR
             74 LOAD_CONST               4 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       60

 19          80 LOAD_FAST                2 (count)
             82 LOAD_CONST               5 (1)
             84 INPLACE_ADD
             86 STORE_FAST               2 (count)

 20          88 LOAD_DEREF               0 (dfs)
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                3 (row)
             94 LOAD_FAST                4 (col)
             96 CALL_FUNCTION            3
             98 POP_TOP
            100 JUMP_ABSOLUTE           60
        >>  102 JUMP_ABSOLUTE           40

 21     >>  104 LOAD_FAST                2 (count)
            106 RETURN_VALUE

Disassembly of <code object dfs at 0x7f5d454b5240, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (row)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        60
              8 LOAD_FAST                1 (row)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                0 (grid)
             14 CALL_FUNCTION            1
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_TRUE        60
             20 LOAD_FAST                2 (col)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_TRUE        60
             28 LOAD_FAST                2 (col)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                0 (grid)
             34 LOAD_CONST               1 (0)
             36 BINARY_SUBSCR
             38 CALL_FUNCTION            1
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (grid)
             46 LOAD_FAST                1 (row)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (col)
             52 BINARY_SUBSCR
             54 LOAD_CONST               2 ('0')
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

  8     >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE

  9     >>   64 LOAD_CONST               2 ('0')
             66 LOAD_FAST                0 (grid)
             68 LOAD_FAST                1 (row)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (col)
             74 STORE_SUBSCR

 10          76 LOAD_DEREF               0 (dfs)
             78 LOAD_FAST                0 (grid)
             80 LOAD_FAST                1 (row)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (col)
             88 CALL_FUNCTION            3
             90 POP_TOP

 11          92 LOAD_DEREF               0 (dfs)
             94 LOAD_FAST                0 (grid)
             96 LOAD_FAST                1 (row)
             98 LOAD_CONST               3 (1)
            100 BINARY_SUBTRACT
            102 LOAD_FAST                2 (col)
            104 CALL_FUNCTION            3
            106 POP_TOP

 12         108 LOAD_DEREF               0 (dfs)
            110 LOAD_FAST                0 (grid)
            112 LOAD_FAST                1 (row)
            114 LOAD_FAST                2 (col)
            116 LOAD_CONST               3 (1)
            118 BINARY_ADD
            120 CALL_FUNCTION            3
            122 POP_TOP

 13         124 LOAD_DEREF               0 (dfs)
            126 LOAD_FAST                0 (grid)
            128 LOAD_FAST                1 (row)
            130 LOAD_FAST                2 (col)
            132 LOAD_CONST               3 (1)
            134 BINARY_SUBTRACT
            136 CALL_FUNCTION            3
            138 POP_TOP
            140 LOAD_CONST               0 (None)
            142 RETURN_VALUE
None
"
numIslands,"class Solution:
    def __init__(self):
        self.size = 0
    def numIslands(self, grid: List[List[str]]) -> int:
        if not len(grid):
            return 0
        visited = [[False for val in row] for row in grid]
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if visited[row][col]:
                    continue
                self.findIslands(grid,row,col,visited)
        return self.size
    def findIslands(self,grid,row,col,visited):
        riversize = 0
        explore = [[row,col]]
        while len(explore):
            row,col = explore.pop()
            if visited[row][col]:
                continue
            visited[row][col] = True
            if grid[row][col] == ""0"":
                continue
            riversize+=1
            unvisited = self.getNeighbours(grid,row,col,visited)
            if len(unvisited):
                for node in unvisited:
                    explore.append(node)
        if riversize > 0:
            self.size+=1
           
    def getNeighbours(self,grid,row,col,visited):
        unvisited = []
        if row > 0 and not visited[row-1][col]:
            unvisited.append([row-1,col])
        if row < len(grid)-1 and not visited[row+1][col]:
            unvisited.append([row+1,col])
        if col > 0 and not visited[row][col-1]:
            unvisited.append([row,col-1])
        if col < len(grid[0])-1 and not visited[row][col+1]:
            unvisited.append([row,col+1])
        return unvisited
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5e8c635660, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5e8c635660, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7f5e8c635240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  4          16 LOAD_NAME                4 (List)
             18 LOAD_NAME                4 (List)
             20 LOAD_NAME                5 (str)
             22 BINARY_SUBSCR
             24 BINARY_SUBSCR
             26 LOAD_NAME                6 (int)
             28 LOAD_CONST               3 (('grid', 'return'))
             30 BUILD_CONST_KEY_MAP      2
             32 LOAD_CONST               4 (<code object numIslands at 0x7f5e8c635500, file ""<ast>"", line 4>)
             34 LOAD_CONST               5 ('Solution.numIslands')
             36 MAKE_FUNCTION            4 (annotations)
             38 STORE_NAME               7 (numIslands)

 14          40 LOAD_CONST               6 (<code object findIslands at 0x7f5e8c635450, file ""<ast>"", line 14>)
             42 LOAD_CONST               7 ('Solution.findIslands')
             44 MAKE_FUNCTION            0
             46 STORE_NAME               8 (findIslands)

 32          48 LOAD_CONST               8 (<code object getNeighbours at 0x7f5e8c6355b0, file ""<ast>"", line 32>)
             50 LOAD_CONST               9 ('Solution.getNeighbours')
             52 MAKE_FUNCTION            0
             54 STORE_NAME               9 (getNeighbours)
             56 LOAD_CONST              10 (None)
             58 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f5e8c635240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (size)
              6 LOAD_CONST               0 (None)
              8 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f5e8c635500, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 POP_JUMP_IF_TRUE        12

  6           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  7     >>   12 LOAD_CONST               2 (<code object <listcomp> at 0x7f5e8c6353a0, file ""<ast>"", line 7>)
             14 LOAD_CONST               3 ('Solution.numIslands.<locals>.<listcomp>')
             16 MAKE_FUNCTION            0
             18 LOAD_FAST                1 (grid)
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (visited)

  8          26 LOAD_GLOBAL              1 (range)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (grid)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            1
             36 GET_ITER
        >>   38 FOR_ITER                56 (to 96)
             40 STORE_FAST               3 (row)

  9          42 LOAD_GLOBAL              1 (range)
             44 LOAD_GLOBAL              0 (len)
             46 LOAD_FAST                1 (grid)
             48 LOAD_CONST               1 (0)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                34 (to 94)
             60 STORE_FAST               4 (col)

 10          62 LOAD_FAST                2 (visited)
             64 LOAD_FAST                3 (row)
             66 BINARY_SUBSCR
             68 LOAD_FAST                4 (col)
             70 BINARY_SUBSCR
             72 POP_JUMP_IF_FALSE       76

 11          74 JUMP_ABSOLUTE           58

 12     >>   76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              2 (findIslands)
             80 LOAD_FAST                1 (grid)
             82 LOAD_FAST                3 (row)
             84 LOAD_FAST                4 (col)
             86 LOAD_FAST                2 (visited)
             88 CALL_METHOD              4
             90 POP_TOP
             92 JUMP_ABSOLUTE           58
        >>   94 JUMP_ABSOLUTE           38

 13     >>   96 LOAD_FAST                0 (self)
             98 LOAD_ATTR                3 (size)
            100 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f5e8c6353a0, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                18 (to 24)
              6 STORE_FAST               1 (row)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f5e8c6352f0, file ""<ast>"", line 7>)
             10 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_FAST                1 (row)
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 LIST_APPEND              2
             22 JUMP_ABSOLUTE            4
        >>   24 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f5e8c6352f0, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (val)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object findIslands at 0x7f5e8c635450, file ""<ast>"", line 14>:
 15           0 LOAD_CONST               1 (0)
              2 STORE_FAST               5 (riversize)

 16           4 LOAD_FAST                2 (row)
              6 LOAD_FAST                3 (col)
              8 BUILD_LIST               2
             10 BUILD_LIST               1
             12 STORE_FAST               6 (explore)

 17     >>   14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                6 (explore)
             18 CALL_FUNCTION            1
             20 POP_JUMP_IF_FALSE      132

 18          22 LOAD_FAST                6 (explore)
             24 LOAD_METHOD              1 (pop)
             26 CALL_METHOD              0
             28 UNPACK_SEQUENCE          2
             30 STORE_FAST               2 (row)
             32 STORE_FAST               3 (col)

 19          34 LOAD_FAST                4 (visited)
             36 LOAD_FAST                2 (row)
             38 BINARY_SUBSCR
             40 LOAD_FAST                3 (col)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_FALSE       48

 20          46 JUMP_ABSOLUTE           14

 21     >>   48 LOAD_CONST               2 (True)
             50 LOAD_FAST                4 (visited)
             52 LOAD_FAST                2 (row)
             54 BINARY_SUBSCR
             56 LOAD_FAST                3 (col)
             58 STORE_SUBSCR

 22          60 LOAD_FAST                1 (grid)
             62 LOAD_FAST                2 (row)
             64 BINARY_SUBSCR
             66 LOAD_FAST                3 (col)
             68 BINARY_SUBSCR
             70 LOAD_CONST               3 ('0')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       78

 23          76 JUMP_ABSOLUTE           14

 24     >>   78 LOAD_FAST                5 (riversize)
             80 LOAD_CONST               4 (1)
             82 INPLACE_ADD
             84 STORE_FAST               5 (riversize)

 25          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (getNeighbours)
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                2 (row)
             94 LOAD_FAST                3 (col)
             96 LOAD_FAST                4 (visited)
             98 CALL_METHOD              4
            100 STORE_FAST               7 (unvisited)

 26         102 LOAD_GLOBAL              0 (len)
            104 LOAD_FAST                7 (unvisited)
            106 CALL_FUNCTION            1
            108 POP_JUMP_IF_FALSE       14

 27         110 LOAD_FAST                7 (unvisited)
            112 GET_ITER
        >>  114 FOR_ITER                14 (to 130)
            116 STORE_FAST               8 (node)

 28         118 LOAD_FAST                6 (explore)
            120 LOAD_METHOD              3 (append)
            122 LOAD_FAST                8 (node)
            124 CALL_METHOD              1
            126 POP_TOP
            128 JUMP_ABSOLUTE          114
        >>  130 JUMP_ABSOLUTE           14

 29     >>  132 LOAD_FAST                5 (riversize)
            134 LOAD_CONST               1 (0)
            136 COMPARE_OP               4 (>)
            138 POP_JUMP_IF_FALSE      154

 30         140 LOAD_FAST                0 (self)
            142 DUP_TOP
            144 LOAD_ATTR                4 (size)
            146 LOAD_CONST               4 (1)
            148 INPLACE_ADD
            150 ROT_TWO
            152 STORE_ATTR               4 (size)
        >>  154 LOAD_CONST               0 (None)
            156 RETURN_VALUE

Disassembly of <code object getNeighbours at 0x7f5e8c6355b0, file ""<ast>"", line 32>:
 33           0 BUILD_LIST               0
              2 STORE_FAST               5 (unvisited)

 34           4 LOAD_FAST                2 (row)
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               4 (>)
             10 POP_JUMP_IF_FALSE       46
             12 LOAD_FAST                4 (visited)
             14 LOAD_FAST                2 (row)
             16 LOAD_CONST               2 (1)
             18 BINARY_SUBTRACT
             20 BINARY_SUBSCR
             22 LOAD_FAST                3 (col)
             24 BINARY_SUBSCR
             26 POP_JUMP_IF_TRUE        46

 35          28 LOAD_FAST                5 (unvisited)
             30 LOAD_METHOD              0 (append)
             32 LOAD_FAST                2 (row)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 LOAD_FAST                3 (col)
             40 BUILD_LIST               2
             42 CALL_METHOD              1
             44 POP_TOP

 36     >>   46 LOAD_FAST                2 (row)
             48 LOAD_GLOBAL              1 (len)
             50 LOAD_FAST                1 (grid)
             52 CALL_FUNCTION            1
             54 LOAD_CONST               2 (1)
             56 BINARY_SUBTRACT
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE       96
             62 LOAD_FAST                4 (visited)
             64 LOAD_FAST                2 (row)
             66 LOAD_CONST               2 (1)
             68 BINARY_ADD
             70 BINARY_SUBSCR
             72 LOAD_FAST                3 (col)
             74 BINARY_SUBSCR
             76 POP_JUMP_IF_TRUE        96

 37          78 LOAD_FAST                5 (unvisited)
             80 LOAD_METHOD              0 (append)
             82 LOAD_FAST                2 (row)
             84 LOAD_CONST               2 (1)
             86 BINARY_ADD
             88 LOAD_FAST                3 (col)
             90 BUILD_LIST               2
             92 CALL_METHOD              1
             94 POP_TOP

 38     >>   96 LOAD_FAST                3 (col)
             98 LOAD_CONST               1 (0)
            100 COMPARE_OP               4 (>)
            102 POP_JUMP_IF_FALSE      138
            104 LOAD_FAST                4 (visited)
            106 LOAD_FAST                2 (row)
            108 BINARY_SUBSCR
            110 LOAD_FAST                3 (col)
            112 LOAD_CONST               2 (1)
            114 BINARY_SUBTRACT
            116 BINARY_SUBSCR
            118 POP_JUMP_IF_TRUE       138

 39         120 LOAD_FAST                5 (unvisited)
            122 LOAD_METHOD              0 (append)
            124 LOAD_FAST                2 (row)
            126 LOAD_FAST                3 (col)
            128 LOAD_CONST               2 (1)
            130 BINARY_SUBTRACT
            132 BUILD_LIST               2
            134 CALL_METHOD              1
            136 POP_TOP

 40     >>  138 LOAD_FAST                3 (col)
            140 LOAD_GLOBAL              1 (len)
            142 LOAD_FAST                1 (grid)
            144 LOAD_CONST               1 (0)
            146 BINARY_SUBSCR
            148 CALL_FUNCTION            1
            150 LOAD_CONST               2 (1)
            152 BINARY_SUBTRACT
            154 COMPARE_OP               0 (<)
            156 POP_JUMP_IF_FALSE      192
            158 LOAD_FAST                4 (visited)
            160 LOAD_FAST                2 (row)
            162 BINARY_SUBSCR
            164 LOAD_FAST                3 (col)
            166 LOAD_CONST               2 (1)
            168 BINARY_ADD
            170 BINARY_SUBSCR
            172 POP_JUMP_IF_TRUE       192

 41         174 LOAD_FAST                5 (unvisited)
            176 LOAD_METHOD              0 (append)
            178 LOAD_FAST                2 (row)
            180 LOAD_FAST                3 (col)
            182 LOAD_CONST               2 (1)
            184 BINARY_ADD
            186 BUILD_LIST               2
            188 CALL_METHOD              1
            190 POP_TOP

 42     >>  192 LOAD_FAST                5 (unvisited)
            194 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        
        djs = [] # list of disjoint sets
        lbl = 0  # the label
        
        # One pass and (not very classic) union-find:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
            
            # Set background to int 0.
                if grid[i][j] == '0':
                    grid[i][j] = 0
                    continue
                
            # Get neighboring labels.
                up = grid[i-1][j] if i > 0 else 0
                left = grid[i][j-1] if j > 0 else 0
                    
                # If both neighbors are 0,
                #   assign a new label to the current pixel.
                # And create a new set with only one element.
                if up == 0 and left == 0:
                    lbl += 1
                    grid[i][j] = lbl
                    djs.append({lbl})
                        
                # If only one neighbor is 0 or both neighbors are 
				#   labeled the same, assign that label to the current pixel.
                elif up == left or up == 0 or left == 0:
                    grid[i][j] = max(up,left)
                        
                # If neighbors are labeled differently,
                #   the labels should belong the same set.
                # Union those two sets and assign any of those labels.
                else:
                    uf = union(djs,up,left)
                    grid[i][j] = up
                        
        # The number of sets left in the list djs is the number of islands.    
        return len(djs)
        

def union(djs,l0,l1):
	
    # Find the indecises of the sets containing l0 and l1.
    r0, r1 = None, None; i = 0; # the indecises 
    while r0 is None or r1 is None:
        if r0 is None and l0 in djs[i]:
            r0 = i
        if r1 is None and l1 in djs[i]:
            r1 = i
        i += 1
    
    # If l0 and l1 are in the same set, return.
    if r0 == r1:
        return djs
        
    # Union those two sets.
    djs[r0] = djs[r0].union(djs[r1])
    del djs[r1]
    return djs
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe5414352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)

 46          14 LOAD_CONST               2 (<code object union at 0x7fe541435500, file ""<ast>"", line 46>)
             16 LOAD_CONST               3 ('union')
             18 MAKE_FUNCTION            0
             20 STORE_NAME               1 (union)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe5414352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fe541435240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fe541435240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 BUILD_LIST               0
             10 STORE_FAST               2 (djs)

  7          12 LOAD_CONST               1 (0)
             14 STORE_FAST               3 (lbl)

 10          16 LOAD_GLOBAL              0 (range)
             18 LOAD_GLOBAL              1 (len)
             20 LOAD_FAST                1 (grid)
             22 CALL_FUNCTION            1
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER               230 (to 260)
             30 STORE_FAST               4 (i)

 11          32 LOAD_GLOBAL              0 (range)
             34 LOAD_GLOBAL              1 (len)
             36 LOAD_FAST                1 (grid)
             38 LOAD_CONST               1 (0)
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER               208 (to 258)
             50 STORE_FAST               5 (j)

 14          52 LOAD_FAST                1 (grid)
             54 LOAD_FAST                4 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                5 (j)
             60 BINARY_SUBSCR
             62 LOAD_CONST               2 ('0')
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       82

 15          68 LOAD_CONST               1 (0)
             70 LOAD_FAST                1 (grid)
             72 LOAD_FAST                4 (i)
             74 BINARY_SUBSCR
             76 LOAD_FAST                5 (j)
             78 STORE_SUBSCR

 16          80 JUMP_ABSOLUTE           48

 19     >>   82 LOAD_FAST                4 (i)
             84 LOAD_CONST               1 (0)
             86 COMPARE_OP               4 (>)
             88 POP_JUMP_IF_FALSE      106
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                4 (i)
             94 LOAD_CONST               3 (1)
             96 BINARY_SUBTRACT
             98 BINARY_SUBSCR
            100 LOAD_FAST                5 (j)
            102 BINARY_SUBSCR
            104 JUMP_FORWARD             2 (to 108)
        >>  106 LOAD_CONST               1 (0)
        >>  108 STORE_FAST               6 (up)

 20         110 LOAD_FAST                5 (j)
            112 LOAD_CONST               1 (0)
            114 COMPARE_OP               4 (>)
            116 POP_JUMP_IF_FALSE      134
            118 LOAD_FAST                1 (grid)
            120 LOAD_FAST                4 (i)
            122 BINARY_SUBSCR
            124 LOAD_FAST                5 (j)
            126 LOAD_CONST               3 (1)
            128 BINARY_SUBTRACT
            130 BINARY_SUBSCR
            132 JUMP_FORWARD             2 (to 136)
        >>  134 LOAD_CONST               1 (0)
        >>  136 STORE_FAST               7 (left)

 25         138 LOAD_FAST                6 (up)
            140 LOAD_CONST               1 (0)
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_FALSE      188
            146 LOAD_FAST                7 (left)
            148 LOAD_CONST               1 (0)
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE      188

 26         154 LOAD_FAST                3 (lbl)
            156 LOAD_CONST               3 (1)
            158 INPLACE_ADD
            160 STORE_FAST               3 (lbl)

 27         162 LOAD_FAST                3 (lbl)
            164 LOAD_FAST                1 (grid)
            166 LOAD_FAST                4 (i)
            168 BINARY_SUBSCR
            170 LOAD_FAST                5 (j)
            172 STORE_SUBSCR

 28         174 LOAD_FAST                2 (djs)
            176 LOAD_METHOD              2 (append)
            178 LOAD_FAST                3 (lbl)
            180 BUILD_SET                1
            182 CALL_METHOD              1
            184 POP_TOP
            186 JUMP_ABSOLUTE           48

 32     >>  188 LOAD_FAST                6 (up)
            190 LOAD_FAST                7 (left)
            192 COMPARE_OP               2 (==)
            194 POP_JUMP_IF_TRUE       212
            196 LOAD_FAST                6 (up)
            198 LOAD_CONST               1 (0)
            200 COMPARE_OP               2 (==)
            202 POP_JUMP_IF_TRUE       212
            204 LOAD_FAST                7 (left)
            206 LOAD_CONST               1 (0)
            208 COMPARE_OP               2 (==)
            210 POP_JUMP_IF_FALSE      232

 33     >>  212 LOAD_GLOBAL              3 (max)
            214 LOAD_FAST                6 (up)
            216 LOAD_FAST                7 (left)
            218 CALL_FUNCTION            2
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST                4 (i)
            224 BINARY_SUBSCR
            226 LOAD_FAST                5 (j)
            228 STORE_SUBSCR
            230 JUMP_ABSOLUTE           48

 39     >>  232 LOAD_GLOBAL              4 (union)
            234 LOAD_FAST                2 (djs)
            236 LOAD_FAST                6 (up)
            238 LOAD_FAST                7 (left)
            240 CALL_FUNCTION            3
            242 STORE_FAST               8 (uf)

 40         244 LOAD_FAST                6 (up)
            246 LOAD_FAST                1 (grid)
            248 LOAD_FAST                4 (i)
            250 BINARY_SUBSCR
            252 LOAD_FAST                5 (j)
            254 STORE_SUBSCR
            256 JUMP_ABSOLUTE           48
        >>  258 JUMP_ABSOLUTE           28

 43     >>  260 LOAD_GLOBAL              1 (len)
            262 LOAD_FAST                2 (djs)
            264 CALL_FUNCTION            1
            266 RETURN_VALUE

Disassembly of <code object union at 0x7fe541435500, file ""<ast>"", line 46>:
 49           0 LOAD_CONST               1 ((None, None))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               3 (r0)
              6 STORE_FAST               4 (r1)
              8 LOAD_CONST               2 (0)
             10 STORE_FAST               5 (i)

 50     >>   12 LOAD_FAST                3 (r0)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               8 (is)
             18 POP_JUMP_IF_TRUE        28
             20 LOAD_FAST                4 (r1)
             22 LOAD_CONST               0 (None)
             24 COMPARE_OP               8 (is)
             26 POP_JUMP_IF_FALSE       86

 51     >>   28 LOAD_FAST                3 (r0)
             30 LOAD_CONST               0 (None)
             32 COMPARE_OP               8 (is)
             34 POP_JUMP_IF_FALSE       52
             36 LOAD_FAST                1 (l0)
             38 LOAD_FAST                0 (djs)
             40 LOAD_FAST                5 (i)
             42 BINARY_SUBSCR
             44 COMPARE_OP               6 (in)
             46 POP_JUMP_IF_FALSE       52

 52          48 LOAD_FAST                5 (i)
             50 STORE_FAST               3 (r0)

 53     >>   52 LOAD_FAST                4 (r1)
             54 LOAD_CONST               0 (None)
             56 COMPARE_OP               8 (is)
             58 POP_JUMP_IF_FALSE       76
             60 LOAD_FAST                2 (l1)
             62 LOAD_FAST                0 (djs)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 COMPARE_OP               6 (in)
             70 POP_JUMP_IF_FALSE       76

 54          72 LOAD_FAST                5 (i)
             74 STORE_FAST               4 (r1)

 55     >>   76 LOAD_FAST                5 (i)
             78 LOAD_CONST               3 (1)
             80 INPLACE_ADD
             82 STORE_FAST               5 (i)
             84 JUMP_ABSOLUTE           12

 58     >>   86 LOAD_FAST                3 (r0)
             88 LOAD_FAST                4 (r1)
             90 COMPARE_OP               2 (==)
             92 POP_JUMP_IF_FALSE       98

 59          94 LOAD_FAST                0 (djs)
             96 RETURN_VALUE

 62     >>   98 LOAD_FAST                0 (djs)
            100 LOAD_FAST                3 (r0)
            102 BINARY_SUBSCR
            104 LOAD_METHOD              0 (union)
            106 LOAD_FAST                0 (djs)
            108 LOAD_FAST                4 (r1)
            110 BINARY_SUBSCR
            112 CALL_METHOD              1
            114 LOAD_FAST                0 (djs)
            116 LOAD_FAST                3 (r0)
            118 STORE_SUBSCR

 63         120 LOAD_FAST                0 (djs)
            122 LOAD_FAST                4 (r1)
            124 DELETE_SUBSCR

 64         126 LOAD_FAST                0 (djs)
            128 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        ans = 0
        def dfs(i, j):
            grid[i][j] = '2'
            for di, dj in (0, 1), (0, -1), (1, 0), (-1, 0):
                ii, jj = i+di, j+dj
                if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] == '1':
                    dfs(ii, jj)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    dfs(i, j)
                    ans += 1
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff2a1695240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2a1695240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7ff2a16953a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7ff2a16953a0, file ""<ast>"", line 2>:
  3           0 LOAD_DEREF               1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  4     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_DEREF              2 (m)
             28 STORE_DEREF              3 (n)

  5          30 LOAD_CONST               1 (0)
             32 STORE_FAST               2 (ans)

  6          34 LOAD_CLOSURE             0 (dfs)
             36 LOAD_CLOSURE             1 (grid)
             38 LOAD_CLOSURE             2 (m)
             40 LOAD_CLOSURE             3 (n)
             42 BUILD_TUPLE              4
             44 LOAD_CONST               2 (<code object dfs at 0x7ff2a16952f0, file ""<ast>"", line 6>)
             46 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             48 MAKE_FUNCTION            8 (closure)
             50 STORE_DEREF              0 (dfs)

 12          52 LOAD_GLOBAL              1 (range)
             54 LOAD_DEREF               2 (m)
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                52 (to 114)
             62 STORE_FAST               3 (i)

 13          64 LOAD_GLOBAL              1 (range)
             66 LOAD_DEREF               3 (n)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                38 (to 112)
             74 STORE_FAST               4 (j)

 14          76 LOAD_DEREF               1 (grid)
             78 LOAD_FAST                3 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                4 (j)
             84 BINARY_SUBSCR
             86 LOAD_CONST               4 ('1')
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE       72

 15          92 LOAD_DEREF               0 (dfs)
             94 LOAD_FAST                3 (i)
             96 LOAD_FAST                4 (j)
             98 CALL_FUNCTION            2
            100 POP_TOP

 16         102 LOAD_FAST                2 (ans)
            104 LOAD_CONST               5 (1)
            106 INPLACE_ADD
            108 STORE_FAST               2 (ans)
            110 JUMP_ABSOLUTE           72
        >>  112 JUMP_ABSOLUTE           60

 17     >>  114 LOAD_FAST                2 (ans)
            116 RETURN_VALUE

Disassembly of <code object dfs at 0x7ff2a16952f0, file ""<ast>"", line 6>:
  7           0 LOAD_CONST               1 ('2')
              2 LOAD_DEREF               1 (grid)
              4 LOAD_FAST                0 (i)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (j)
             10 STORE_SUBSCR

  8          12 LOAD_CONST               2 (((0, 1), (0, -1), (1, 0), (-1, 0)))
             14 GET_ITER
        >>   16 FOR_ITER               100 (to 118)
             18 UNPACK_SEQUENCE          2
             20 STORE_FAST               2 (di)
             22 STORE_FAST               3 (dj)

  9          24 LOAD_FAST                0 (i)
             26 LOAD_FAST                2 (di)
             28 BINARY_ADD
             30 LOAD_FAST                1 (j)
             32 LOAD_FAST                3 (dj)
             34 BINARY_ADD
             36 ROT_TWO
             38 STORE_FAST               4 (ii)
             40 STORE_FAST               5 (jj)

 10          42 LOAD_CONST               3 (0)
             44 LOAD_FAST                4 (ii)
             46 DUP_TOP
             48 ROT_THREE
             50 COMPARE_OP               1 (<=)
             52 POP_JUMP_IF_FALSE       62
             54 LOAD_DEREF               2 (m)
             56 COMPARE_OP               0 (<)
             58 POP_JUMP_IF_FALSE       16
             60 JUMP_FORWARD             4 (to 66)
        >>   62 POP_TOP
             64 JUMP_ABSOLUTE           16
        >>   66 LOAD_CONST               3 (0)
             68 LOAD_FAST                5 (jj)
             70 DUP_TOP
             72 ROT_THREE
             74 COMPARE_OP               1 (<=)
             76 POP_JUMP_IF_FALSE       86
             78 LOAD_DEREF               3 (n)
             80 COMPARE_OP               0 (<)
             82 POP_JUMP_IF_FALSE       16
             84 JUMP_FORWARD             4 (to 90)
        >>   86 POP_TOP
             88 JUMP_ABSOLUTE           16
        >>   90 LOAD_DEREF               1 (grid)
             92 LOAD_FAST                4 (ii)
             94 BINARY_SUBSCR
             96 LOAD_FAST                5 (jj)
             98 BINARY_SUBSCR
            100 LOAD_CONST               4 ('1')
            102 COMPARE_OP               2 (==)
            104 POP_JUMP_IF_FALSE       16

 11         106 LOAD_DEREF               0 (dfs)
            108 LOAD_FAST                4 (ii)
            110 LOAD_FAST                5 (jj)
            112 CALL_FUNCTION            2
            114 POP_TOP
            116 JUMP_ABSOLUTE           16
        >>  118 LOAD_CONST               0 (None)
            120 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        ans = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    q = [(i, j)]
                    while q:
                        x, y = q.pop()
                        grid[x][y] = '2'
                        for dx, dy in (0, 1), (0, -1), (1, 0), (-1, 0):
                            xx, yy = x+dx, y+dy
                            if 0 <= xx < m and 0 <= yy < n and grid[xx][yy] == '1':
                                q.append((xx, yy))
                    ans += 1            
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa9a8cb52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa9a8cb52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fa9a8cb5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fa9a8cb5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  4     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (m)
             28 STORE_FAST               3 (n)

  5          30 LOAD_CONST               1 (0)
             32 STORE_FAST               4 (ans)

  6          34 LOAD_GLOBAL              1 (range)
             36 LOAD_FAST                2 (m)
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER               192 (to 236)
             44 STORE_FAST               5 (i)

  7          46 LOAD_GLOBAL              1 (range)
             48 LOAD_FAST                3 (n)
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER               178 (to 234)
             56 STORE_FAST               6 (j)

  8          58 LOAD_FAST                1 (grid)
             60 LOAD_FAST                5 (i)
             62 BINARY_SUBSCR
             64 LOAD_FAST                6 (j)
             66 BINARY_SUBSCR
             68 LOAD_CONST               2 ('1')
             70 COMPARE_OP               2 (==)
             72 POP_JUMP_IF_FALSE       54

  9          74 LOAD_FAST                5 (i)
             76 LOAD_FAST                6 (j)
             78 BUILD_TUPLE              2
             80 BUILD_LIST               1
             82 STORE_FAST               7 (q)

 10     >>   84 LOAD_FAST                7 (q)
             86 POP_JUMP_IF_FALSE      224

 11          88 LOAD_FAST                7 (q)
             90 LOAD_METHOD              2 (pop)
             92 CALL_METHOD              0
             94 UNPACK_SEQUENCE          2
             96 STORE_FAST               8 (x)
             98 STORE_FAST               9 (y)

 12         100 LOAD_CONST               3 ('2')
            102 LOAD_FAST                1 (grid)
            104 LOAD_FAST                8 (x)
            106 BINARY_SUBSCR
            108 LOAD_FAST                9 (y)
            110 STORE_SUBSCR

 13         112 LOAD_CONST               4 (((0, 1), (0, -1), (1, 0), (-1, 0)))
            114 GET_ITER
        >>  116 FOR_ITER               104 (to 222)
            118 UNPACK_SEQUENCE          2
            120 STORE_FAST              10 (dx)
            122 STORE_FAST              11 (dy)

 14         124 LOAD_FAST                8 (x)
            126 LOAD_FAST               10 (dx)
            128 BINARY_ADD
            130 LOAD_FAST                9 (y)
            132 LOAD_FAST               11 (dy)
            134 BINARY_ADD
            136 ROT_TWO
            138 STORE_FAST              12 (xx)
            140 STORE_FAST              13 (yy)

 15         142 LOAD_CONST               1 (0)
            144 LOAD_FAST               12 (xx)
            146 DUP_TOP
            148 ROT_THREE
            150 COMPARE_OP               1 (<=)
            152 POP_JUMP_IF_FALSE      162
            154 LOAD_FAST                2 (m)
            156 COMPARE_OP               0 (<)
            158 POP_JUMP_IF_FALSE      116
            160 JUMP_FORWARD             4 (to 166)
        >>  162 POP_TOP
            164 JUMP_ABSOLUTE          116
        >>  166 LOAD_CONST               1 (0)
            168 LOAD_FAST               13 (yy)
            170 DUP_TOP
            172 ROT_THREE
            174 COMPARE_OP               1 (<=)
            176 POP_JUMP_IF_FALSE      186
            178 LOAD_FAST                3 (n)
            180 COMPARE_OP               0 (<)
            182 POP_JUMP_IF_FALSE      116
            184 JUMP_FORWARD             4 (to 190)
        >>  186 POP_TOP
            188 JUMP_ABSOLUTE          116
        >>  190 LOAD_FAST                1 (grid)
            192 LOAD_FAST               12 (xx)
            194 BINARY_SUBSCR
            196 LOAD_FAST               13 (yy)
            198 BINARY_SUBSCR
            200 LOAD_CONST               2 ('1')
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      116

 16         206 LOAD_FAST                7 (q)
            208 LOAD_METHOD              3 (append)
            210 LOAD_FAST               12 (xx)
            212 LOAD_FAST               13 (yy)
            214 BUILD_TUPLE              2
            216 CALL_METHOD              1
            218 POP_TOP
            220 JUMP_ABSOLUTE          116
        >>  222 JUMP_ABSOLUTE           84

 17     >>  224 LOAD_FAST                4 (ans)
            226 LOAD_CONST               5 (1)
            228 INPLACE_ADD
            230 STORE_FAST               4 (ans)
            232 JUMP_ABSOLUTE           54
        >>  234 JUMP_ABSOLUTE           42

 18     >>  236 LOAD_FAST                4 (ans)
            238 RETURN_VALUE
None
"
numIslands,"class UF:
    def __init__(self, n):
        self.p = [i for i in range(n)]
        self.n = n
        self.size = n

    def union(self, i, j):
        pi, pj = self.find(i), self.find(j)
        if pi != pj:
            self.size -= 1
            self.p[pj] = pi

    def find(self, i):
        if i != self.p[i]:
            self.p[i] = self.find(self.p[i])
        return self.p[i]


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        m, n = len(grid), len(grid[0])
        d = dict()
        idx = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    d[i, j] = idx
                    idx += 1
        uf = UF(idx)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    if i > 0 and grid[i-1][j] == '1':
                        uf.union(d[i-1, j], d[i, j])
                    if j > 0 and grid[i][j-1] == '1':
                        uf.union(d[i, j-1], d[i, j])
        return uf.size
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object UF at 0x7f3baba15500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('UF')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('UF')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (UF)

 19          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f3baba15660, file ""<ast>"", line 19>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object UF at 0x7f3baba15500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('UF')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7f3baba152f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('UF.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  7          16 LOAD_CONST               3 (<code object union at 0x7f3baba153a0, file ""<ast>"", line 7>)
             18 LOAD_CONST               4 ('UF.union')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (union)

 13          24 LOAD_CONST               5 (<code object find at 0x7f3baba15450, file ""<ast>"", line 13>)
             26 LOAD_CONST               6 ('UF.find')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (find)
             32 LOAD_CONST               7 (None)
             34 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f3baba152f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f3baba15240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('UF.__init__.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 LOAD_FAST                0 (self)
             18 STORE_ATTR               1 (p)

  4          20 LOAD_FAST                1 (n)
             22 LOAD_FAST                0 (self)
             24 STORE_ATTR               2 (n)

  5          26 LOAD_FAST                1 (n)
             28 LOAD_FAST                0 (self)
             30 STORE_ATTR               3 (size)
             32 LOAD_CONST               0 (None)
             34 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f3baba15240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_FAST                1 (i)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object union at 0x7f3baba153a0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                1 (i)
              6 CALL_METHOD              1
              8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (find)
             12 LOAD_FAST                2 (j)
             14 CALL_METHOD              1
             16 ROT_TWO
             18 STORE_FAST               3 (pi)
             20 STORE_FAST               4 (pj)

  9          22 LOAD_FAST                3 (pi)
             24 LOAD_FAST                4 (pj)
             26 COMPARE_OP               3 (!=)
             28 POP_JUMP_IF_FALSE       54

 10          30 LOAD_FAST                0 (self)
             32 DUP_TOP
             34 LOAD_ATTR                1 (size)
             36 LOAD_CONST               1 (1)
             38 INPLACE_SUBTRACT
             40 ROT_TWO
             42 STORE_ATTR               1 (size)

 11          44 LOAD_FAST                3 (pi)
             46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                2 (p)
             50 LOAD_FAST                4 (pj)
             52 STORE_SUBSCR
        >>   54 LOAD_CONST               0 (None)
             56 RETURN_VALUE

Disassembly of <code object find at 0x7f3baba15450, file ""<ast>"", line 13>:
 14           0 LOAD_FAST                1 (i)
              2 LOAD_FAST                0 (self)
              4 LOAD_ATTR                0 (p)
              6 LOAD_FAST                1 (i)
              8 BINARY_SUBSCR
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       36

 15          14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (find)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (p)
             22 LOAD_FAST                1 (i)
             24 BINARY_SUBSCR
             26 CALL_METHOD              1
             28 LOAD_FAST                0 (self)
             30 LOAD_ATTR                0 (p)
             32 LOAD_FAST                1 (i)
             34 STORE_SUBSCR

 16     >>   36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                0 (p)
             40 LOAD_FAST                1 (i)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3baba15660, file ""<ast>"", line 19>:
 19           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 20           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f3baba155b0, file ""<ast>"", line 20>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f3baba155b0, file ""<ast>"", line 20>:
 21           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

 22           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 23     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (m)
             28 STORE_FAST               3 (n)

 24          30 LOAD_GLOBAL              1 (dict)
             32 CALL_FUNCTION            0
             34 STORE_FAST               4 (d)

 25          36 LOAD_CONST               1 (0)
             38 STORE_FAST               5 (idx)

 26          40 LOAD_GLOBAL              2 (range)
             42 LOAD_FAST                2 (m)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                54 (to 104)
             50 STORE_FAST               6 (i)

 27          52 LOAD_GLOBAL              2 (range)
             54 LOAD_FAST                3 (n)
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                40 (to 102)
             62 STORE_FAST               7 (j)

 28          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                6 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                7 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       60

 29          80 LOAD_FAST                5 (idx)
             82 LOAD_FAST                4 (d)
             84 LOAD_FAST                6 (i)
             86 LOAD_FAST                7 (j)
             88 BUILD_TUPLE              2
             90 STORE_SUBSCR

 30          92 LOAD_FAST                5 (idx)
             94 LOAD_CONST               3 (1)
             96 INPLACE_ADD
             98 STORE_FAST               5 (idx)
            100 JUMP_ABSOLUTE           60
        >>  102 JUMP_ABSOLUTE           48

 31     >>  104 LOAD_GLOBAL              3 (UF)
            106 LOAD_FAST                5 (idx)
            108 CALL_FUNCTION            1
            110 STORE_FAST               8 (uf)

 32         112 LOAD_GLOBAL              2 (range)
            114 LOAD_FAST                2 (m)
            116 CALL_FUNCTION            1
            118 GET_ITER
        >>  120 FOR_ITER               154 (to 276)
            122 STORE_FAST               6 (i)

 33         124 LOAD_GLOBAL              2 (range)
            126 LOAD_FAST                3 (n)
            128 CALL_FUNCTION            1
            130 GET_ITER
        >>  132 FOR_ITER               140 (to 274)
            134 STORE_FAST               7 (j)

 34         136 LOAD_FAST                1 (grid)
            138 LOAD_FAST                6 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                7 (j)
            144 BINARY_SUBSCR
            146 LOAD_CONST               2 ('1')
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      132

 35         152 LOAD_FAST                6 (i)
            154 LOAD_CONST               1 (0)
            156 COMPARE_OP               4 (>)
            158 POP_JUMP_IF_FALSE      212
            160 LOAD_FAST                1 (grid)
            162 LOAD_FAST                6 (i)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 BINARY_SUBSCR
            170 LOAD_FAST                7 (j)
            172 BINARY_SUBSCR
            174 LOAD_CONST               2 ('1')
            176 COMPARE_OP               2 (==)
            178 POP_JUMP_IF_FALSE      212

 36         180 LOAD_FAST                8 (uf)
            182 LOAD_METHOD              4 (union)
            184 LOAD_FAST                4 (d)
            186 LOAD_FAST                6 (i)
            188 LOAD_CONST               3 (1)
            190 BINARY_SUBTRACT
            192 LOAD_FAST                7 (j)
            194 BUILD_TUPLE              2
            196 BINARY_SUBSCR
            198 LOAD_FAST                4 (d)
            200 LOAD_FAST                6 (i)
            202 LOAD_FAST                7 (j)
            204 BUILD_TUPLE              2
            206 BINARY_SUBSCR
            208 CALL_METHOD              2
            210 POP_TOP

 37     >>  212 LOAD_FAST                7 (j)
            214 LOAD_CONST               1 (0)
            216 COMPARE_OP               4 (>)
            218 POP_JUMP_IF_FALSE      132
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST                6 (i)
            224 BINARY_SUBSCR
            226 LOAD_FAST                7 (j)
            228 LOAD_CONST               3 (1)
            230 BINARY_SUBTRACT
            232 BINARY_SUBSCR
            234 LOAD_CONST               2 ('1')
            236 COMPARE_OP               2 (==)
            238 POP_JUMP_IF_FALSE      132

 38         240 LOAD_FAST                8 (uf)
            242 LOAD_METHOD              4 (union)
            244 LOAD_FAST                4 (d)
            246 LOAD_FAST                6 (i)
            248 LOAD_FAST                7 (j)
            250 LOAD_CONST               3 (1)
            252 BINARY_SUBTRACT
            254 BUILD_TUPLE              2
            256 BINARY_SUBSCR
            258 LOAD_FAST                4 (d)
            260 LOAD_FAST                6 (i)
            262 LOAD_FAST                7 (j)
            264 BUILD_TUPLE              2
            266 BINARY_SUBSCR
            268 CALL_METHOD              2
            270 POP_TOP
            272 JUMP_ABSOLUTE          132
        >>  274 JUMP_ABSOLUTE          120

 39     >>  276 LOAD_FAST                8 (uf)
            278 LOAD_ATTR                5 (size)
            280 RETURN_VALUE
None
"
numIslands,"# python.    code   DFS
class Solution:
    def numIslands(self, m: List[List[str]]) -> int:
        def find(m,i,j,r,c):
            if i<0 or j<0:
                return 0
            if i>r-1 or j>c-1 or m[i][j]!=""1"":
                return 0
            m[i][j]=""2""
            
            for di,dj in [(0,-1),(0,1),(1,0),(-1,0)]:
                find(m,i+di,j+dj,r,c)
        
        
        r=len(m)
        t_i=0
        for i in range (r):
            c=len(m[i])
            for j in range(c):
                if m[i][j]=='1':
                    find(m,i,j,r,c)
                    t_i+=1
        return t_i

","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f274cb75240, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f274cb75240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('m', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f274cb753a0, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f274cb753a0, file ""<ast>"", line 3>:
  4           0 LOAD_CLOSURE             0 (find)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object find at 0x7f274cb752f0, file ""<ast>"", line 4>)
              6 LOAD_CONST               2 ('Solution.numIslands.<locals>.find')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (find)

 15          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (m)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (r)

 16          20 LOAD_CONST               3 (0)
             22 STORE_FAST               3 (t_i)

 17          24 LOAD_GLOBAL              1 (range)
             26 LOAD_FAST                2 (r)
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                70 (to 104)
             34 STORE_FAST               4 (i)

 18          36 LOAD_GLOBAL              0 (len)
             38 LOAD_FAST                1 (m)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 CALL_FUNCTION            1
             46 STORE_FAST               5 (c)

 19          48 LOAD_GLOBAL              1 (range)
             50 LOAD_FAST                5 (c)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                44 (to 102)
             58 STORE_FAST               6 (j)

 20          60 LOAD_FAST                1 (m)
             62 LOAD_FAST                4 (i)
             64 BINARY_SUBSCR
             66 LOAD_FAST                6 (j)
             68 BINARY_SUBSCR
             70 LOAD_CONST               4 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       56

 21          76 LOAD_DEREF               0 (find)
             78 LOAD_FAST                1 (m)
             80 LOAD_FAST                4 (i)
             82 LOAD_FAST                6 (j)
             84 LOAD_FAST                2 (r)
             86 LOAD_FAST                5 (c)
             88 CALL_FUNCTION            5
             90 POP_TOP

 22          92 LOAD_FAST                3 (t_i)
             94 LOAD_CONST               5 (1)
             96 INPLACE_ADD
             98 STORE_FAST               3 (t_i)
            100 JUMP_ABSOLUTE           56
        >>  102 JUMP_ABSOLUTE           32

 23     >>  104 LOAD_FAST                3 (t_i)
            106 RETURN_VALUE

Disassembly of <code object find at 0x7f274cb752f0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                2 (j)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

  6     >>   16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  7     >>   20 LOAD_FAST                1 (i)
             22 LOAD_FAST                3 (r)
             24 LOAD_CONST               2 (1)
             26 BINARY_SUBTRACT
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_TRUE        60
             32 LOAD_FAST                2 (j)
             34 LOAD_FAST                4 (c)
             36 LOAD_CONST               2 (1)
             38 BINARY_SUBTRACT
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (m)
             46 LOAD_FAST                1 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (j)
             52 BINARY_SUBSCR
             54 LOAD_CONST               3 ('1')
             56 COMPARE_OP               3 (!=)
             58 POP_JUMP_IF_FALSE       64

  8     >>   60 LOAD_CONST               1 (0)
             62 RETURN_VALUE

  9     >>   64 LOAD_CONST               4 ('2')
             66 LOAD_FAST                0 (m)
             68 LOAD_FAST                1 (i)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (j)
             74 STORE_SUBSCR

 11          76 LOAD_CONST               5 (((0, -1), (0, 1), (1, 0), (-1, 0)))
             78 GET_ITER
        >>   80 FOR_ITER                32 (to 114)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               5 (di)
             86 STORE_FAST               6 (dj)

 12          88 LOAD_DEREF               0 (find)
             90 LOAD_FAST                0 (m)
             92 LOAD_FAST                1 (i)
             94 LOAD_FAST                5 (di)
             96 BINARY_ADD
             98 LOAD_FAST                2 (j)
            100 LOAD_FAST                6 (dj)
            102 BINARY_ADD
            104 LOAD_FAST                3 (r)
            106 LOAD_FAST                4 (c)
            108 CALL_FUNCTION            5
            110 POP_TOP
            112 JUMP_ABSOLUTE           80
        >>  114 LOAD_CONST               0 (None)
            116 RETURN_VALUE
None
"
numTrees,"class Solution:
	def numTrees(self, n: int) -> int:
			return self.count_bsts(1, n, {})
			
	def count_bsts(self, min_val: int, max_val: int, memo: dict) -> int:
		if min_val >= max_val:
			return 1

		elif (min_val, max_val) in memo:
			return memo[(min_val, max_val)]

		bsts_count = 0
		for val in range(min_val, max_val + 1):

			left_subtrees_count = self.count_bsts(min_val, val - 1, memo)
			right_subtrees_count = self.count_bsts(val + 1, max_val, memo)

			bsts_count += left_subtrees_count * right_subtrees_count

		memo[(min_val, max_val)] = bsts_count
			
		return bsts_count
	
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffd3ba052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffd3ba052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7ffd3ba05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  5          24 LOAD_NAME                3 (int)
             26 LOAD_NAME                3 (int)
             28 LOAD_NAME                5 (dict)
             30 LOAD_NAME                3 (int)
             32 LOAD_CONST               4 (('min_val', 'max_val', 'memo', 'return'))
             34 BUILD_CONST_KEY_MAP      4
             36 LOAD_CONST               5 (<code object count_bsts at 0x7ffd3ba053a0, file ""<ast>"", line 5>)
             38 LOAD_CONST               6 ('Solution.count_bsts')
             40 MAKE_FUNCTION            4 (annotations)
             42 STORE_NAME               6 (count_bsts)
             44 LOAD_CONST               7 (None)
             46 RETURN_VALUE

Disassembly of <code object numTrees at 0x7ffd3ba05240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (count_bsts)
              4 LOAD_CONST               1 (1)
              6 LOAD_FAST                1 (n)
              8 BUILD_MAP                0
             10 CALL_METHOD              3
             12 RETURN_VALUE

Disassembly of <code object count_bsts at 0x7ffd3ba053a0, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                1 (min_val)
              2 LOAD_FAST                2 (max_val)
              4 COMPARE_OP               5 (>=)
              6 POP_JUMP_IF_FALSE       12

  7           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (min_val)
             14 LOAD_FAST                2 (max_val)
             16 BUILD_TUPLE              2
             18 LOAD_FAST                3 (memo)
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE       36

 10          24 LOAD_FAST                3 (memo)
             26 LOAD_FAST                1 (min_val)
             28 LOAD_FAST                2 (max_val)
             30 BUILD_TUPLE              2
             32 BINARY_SUBSCR
             34 RETURN_VALUE

 12     >>   36 LOAD_CONST               2 (0)
             38 STORE_FAST               4 (bsts_count)

 13          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                1 (min_val)
             44 LOAD_FAST                2 (max_val)
             46 LOAD_CONST               1 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                52 (to 108)
             56 STORE_FAST               5 (val)

 15          58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              1 (count_bsts)
             62 LOAD_FAST                1 (min_val)
             64 LOAD_FAST                5 (val)
             66 LOAD_CONST               1 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                3 (memo)
             72 CALL_METHOD              3
             74 STORE_FAST               6 (left_subtrees_count)

 16          76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              1 (count_bsts)
             80 LOAD_FAST                5 (val)
             82 LOAD_CONST               1 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (max_val)
             88 LOAD_FAST                3 (memo)
             90 CALL_METHOD              3
             92 STORE_FAST               7 (right_subtrees_count)

 18          94 LOAD_FAST                4 (bsts_count)
             96 LOAD_FAST                6 (left_subtrees_count)
             98 LOAD_FAST                7 (right_subtrees_count)
            100 BINARY_MULTIPLY
            102 INPLACE_ADD
            104 STORE_FAST               4 (bsts_count)
            106 JUMP_ABSOLUTE           54

 20     >>  108 LOAD_FAST                4 (bsts_count)
            110 LOAD_FAST                3 (memo)
            112 LOAD_FAST                1 (min_val)
            114 LOAD_FAST                2 (max_val)
            116 BUILD_TUPLE              2
            118 STORE_SUBSCR

 22         120 LOAD_FAST                4 (bsts_count)
            122 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
            facts = [1]
            for i in range(2*n):
                facts.append((i + 1)*facts[-1])
            return facts[-1] // (facts[n] * facts[n + 1])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb76b4d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb76b4d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fb76b4d5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fb76b4d5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 BUILD_LIST               1
              4 STORE_FAST               2 (facts)

  4           6 LOAD_GLOBAL              0 (range)
              8 LOAD_CONST               2 (2)
             10 LOAD_FAST                1 (n)
             12 BINARY_MULTIPLY
             14 CALL_FUNCTION            1
             16 GET_ITER
        >>   18 FOR_ITER                26 (to 46)
             20 STORE_FAST               3 (i)

  5          22 LOAD_FAST                2 (facts)
             24 LOAD_METHOD              1 (append)
             26 LOAD_FAST                3 (i)
             28 LOAD_CONST               1 (1)
             30 BINARY_ADD
             32 LOAD_FAST                2 (facts)
             34 LOAD_CONST               3 (-1)
             36 BINARY_SUBSCR
             38 BINARY_MULTIPLY
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           18

  6     >>   46 LOAD_FAST                2 (facts)
             48 LOAD_CONST               3 (-1)
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (facts)
             54 LOAD_FAST                1 (n)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (facts)
             60 LOAD_FAST                1 (n)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 BINARY_SUBSCR
             68 BINARY_MULTIPLY
             70 BINARY_FLOOR_DIVIDE
             72 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        memo={}
        return self.sol(n,memo)
     
    def sol(self, n, memo):
        if(n not in memo):
            if(n==1 or n==0): return 1
            if(n==2): return 2
            if(n==3): return 5
            result=0
            mid=n//2
            if(n%2==0):
                for i in range(1,mid+1):
                    result += 2*self.sol(i-1,memo)*self.sol(n-i,memo)
            else:
                mid+=1
                for i in range(1,mid+1):
                    if(i!=mid):
                        result += 2*self.sol(i-1,memo)*self.sol(n-i,memo)
                    else:
                        result += self.sol(i-1,memo)*self.sol(n-i,memo)
            memo[n]=result
        return memo[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff9a51953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff9a51953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7ff9a5195240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  6          24 LOAD_CONST               4 (<code object sol at 0x7ff9a51952f0, file ""<ast>"", line 6>)
             26 LOAD_CONST               5 ('Solution.sol')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (sol)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object numTrees at 0x7ff9a5195240, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (memo)

  4           4 LOAD_FAST                0 (self)
              6 LOAD_METHOD              0 (sol)
              8 LOAD_FAST                1 (n)
             10 LOAD_FAST                2 (memo)
             12 CALL_METHOD              2
             14 RETURN_VALUE

Disassembly of <code object sol at 0x7ff9a51952f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (n)
              2 LOAD_FAST                2 (memo)
              4 COMPARE_OP               7 (not in)
              6 EXTENDED_ARG             1
              8 POP_JUMP_IF_FALSE      262

  8          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               1 (1)
             14 COMPARE_OP               2 (==)
             16 POP_JUMP_IF_TRUE        26
             18 LOAD_FAST                1 (n)
             20 LOAD_CONST               2 (0)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
        >>   26 LOAD_CONST               1 (1)
             28 RETURN_VALUE

  9     >>   30 LOAD_FAST                1 (n)
             32 LOAD_CONST               3 (2)
             34 COMPARE_OP               2 (==)
             36 POP_JUMP_IF_FALSE       42
             38 LOAD_CONST               3 (2)
             40 RETURN_VALUE

 10     >>   42 LOAD_FAST                1 (n)
             44 LOAD_CONST               4 (3)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       54
             50 LOAD_CONST               5 (5)
             52 RETURN_VALUE

 11     >>   54 LOAD_CONST               2 (0)
             56 STORE_FAST               3 (result)

 12          58 LOAD_FAST                1 (n)
             60 LOAD_CONST               3 (2)
             62 BINARY_FLOOR_DIVIDE
             64 STORE_FAST               4 (mid)

 13          66 LOAD_FAST                1 (n)
             68 LOAD_CONST               3 (2)
             70 BINARY_MODULO
             72 LOAD_CONST               2 (0)
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE      140

 14          78 LOAD_GLOBAL              0 (range)
             80 LOAD_CONST               1 (1)
             82 LOAD_FAST                4 (mid)
             84 LOAD_CONST               1 (1)
             86 BINARY_ADD
             88 CALL_FUNCTION            2
             90 GET_ITER
        >>   92 FOR_ITER                44 (to 138)
             94 STORE_FAST               5 (i)

 15          96 LOAD_FAST                3 (result)
             98 LOAD_CONST               3 (2)
            100 LOAD_FAST                0 (self)
            102 LOAD_METHOD              1 (sol)
            104 LOAD_FAST                5 (i)
            106 LOAD_CONST               1 (1)
            108 BINARY_SUBTRACT
            110 LOAD_FAST                2 (memo)
            112 CALL_METHOD              2
            114 BINARY_MULTIPLY
            116 LOAD_FAST                0 (self)
            118 LOAD_METHOD              1 (sol)
            120 LOAD_FAST                1 (n)
            122 LOAD_FAST                5 (i)
            124 BINARY_SUBTRACT
            126 LOAD_FAST                2 (memo)
            128 CALL_METHOD              2
            130 BINARY_MULTIPLY
            132 INPLACE_ADD
            134 STORE_FAST               3 (result)
            136 JUMP_ABSOLUTE           92
        >>  138 JUMP_FORWARD           114 (to 254)

 17     >>  140 LOAD_FAST                4 (mid)
            142 LOAD_CONST               1 (1)
            144 INPLACE_ADD
            146 STORE_FAST               4 (mid)

 18         148 LOAD_GLOBAL              0 (range)
            150 LOAD_CONST               1 (1)
            152 LOAD_FAST                4 (mid)
            154 LOAD_CONST               1 (1)
            156 BINARY_ADD
            158 CALL_FUNCTION            2
            160 GET_ITER
        >>  162 FOR_ITER                90 (to 254)
            164 STORE_FAST               5 (i)

 19         166 LOAD_FAST                5 (i)
            168 LOAD_FAST                4 (mid)
            170 COMPARE_OP               3 (!=)
            172 POP_JUMP_IF_FALSE      216

 20         174 LOAD_FAST                3 (result)
            176 LOAD_CONST               3 (2)
            178 LOAD_FAST                0 (self)
            180 LOAD_METHOD              1 (sol)
            182 LOAD_FAST                5 (i)
            184 LOAD_CONST               1 (1)
            186 BINARY_SUBTRACT
            188 LOAD_FAST                2 (memo)
            190 CALL_METHOD              2
            192 BINARY_MULTIPLY
            194 LOAD_FAST                0 (self)
            196 LOAD_METHOD              1 (sol)
            198 LOAD_FAST                1 (n)
            200 LOAD_FAST                5 (i)
            202 BINARY_SUBTRACT
            204 LOAD_FAST                2 (memo)
            206 CALL_METHOD              2
            208 BINARY_MULTIPLY
            210 INPLACE_ADD
            212 STORE_FAST               3 (result)
            214 JUMP_ABSOLUTE          162

 22     >>  216 LOAD_FAST                3 (result)
            218 LOAD_FAST                0 (self)
            220 LOAD_METHOD              1 (sol)
            222 LOAD_FAST                5 (i)
            224 LOAD_CONST               1 (1)
            226 BINARY_SUBTRACT
            228 LOAD_FAST                2 (memo)
            230 CALL_METHOD              2
            232 LOAD_FAST                0 (self)
            234 LOAD_METHOD              1 (sol)
            236 LOAD_FAST                1 (n)
            238 LOAD_FAST                5 (i)
            240 BINARY_SUBTRACT
            242 LOAD_FAST                2 (memo)
            244 CALL_METHOD              2
            246 BINARY_MULTIPLY
            248 INPLACE_ADD
            250 STORE_FAST               3 (result)
            252 JUMP_ABSOLUTE          162

 23     >>  254 LOAD_FAST                3 (result)
            256 LOAD_FAST                2 (memo)
            258 LOAD_FAST                1 (n)
            260 STORE_SUBSCR

 24     >>  262 LOAD_FAST                2 (memo)
            264 LOAD_FAST                1 (n)
            266 BINARY_SUBSCR
            268 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        ar=[0]*(n+1)
        ar[0]=1
        for i in range(1,n+1):
            for j in range(i):
                ar[i]=ar[i]+(ar[j]*ar[i-j-1])
        return ar[n]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fedeac95240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fedeac95240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fedeac952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fedeac952f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (ar)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (ar)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (ar)
             54 LOAD_FAST                3 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (ar)
             60 LOAD_FAST                4 (j)
             62 BINARY_SUBSCR
             64 LOAD_FAST                2 (ar)
             66 LOAD_FAST                3 (i)
             68 LOAD_FAST                4 (j)
             70 BINARY_SUBTRACT
             72 LOAD_CONST               2 (1)
             74 BINARY_SUBTRACT
             76 BINARY_SUBSCR
             78 BINARY_MULTIPLY
             80 BINARY_ADD
             82 LOAD_FAST                2 (ar)
             84 LOAD_FAST                3 (i)
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (ar)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int, l = {}) -> int:
        if n==0 or n==1:
            return 1
        if n in l:
            return l[n]
        count = 0
        for i in range(1,n+1):
            count+=self.numTrees(i-1,l)*self.numTrees(n-i,l)
        l[n] = count
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7084685240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7084685240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 BUILD_TUPLE              1
             12 LOAD_NAME                3 (int)
             14 LOAD_NAME                3 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7f70846852f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            5 (defaults, annotations)
             26 STORE_NAME               4 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f70846852f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               2 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (1)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                1 (n)
             22 LOAD_FAST                2 (l)
             24 COMPARE_OP               6 (in)
             26 POP_JUMP_IF_FALSE       36

  6          28 LOAD_FAST                2 (l)
             30 LOAD_FAST                1 (n)
             32 BINARY_SUBSCR
             34 RETURN_VALUE

  7     >>   36 LOAD_CONST               1 (0)
             38 STORE_FAST               3 (count)

  8          40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               2 (1)
             44 LOAD_FAST                1 (n)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                40 (to 96)
             56 STORE_FAST               4 (i)

  9          58 LOAD_FAST                3 (count)
             60 LOAD_FAST                0 (self)
             62 LOAD_METHOD              1 (numTrees)
             64 LOAD_FAST                4 (i)
             66 LOAD_CONST               2 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                2 (l)
             72 CALL_METHOD              2
             74 LOAD_FAST                0 (self)
             76 LOAD_METHOD              1 (numTrees)
             78 LOAD_FAST                1 (n)
             80 LOAD_FAST                4 (i)
             82 BINARY_SUBTRACT
             84 LOAD_FAST                2 (l)
             86 CALL_METHOD              2
             88 BINARY_MULTIPLY
             90 INPLACE_ADD
             92 STORE_FAST               3 (count)
             94 JUMP_ABSOLUTE           54

 10     >>   96 LOAD_FAST                3 (count)
             98 LOAD_FAST                2 (l)
            100 LOAD_FAST                1 (n)
            102 STORE_SUBSCR

 11         104 LOAD_FAST                3 (count)
            106 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        ans = {}
        ans[0] = 1  ### for the case where left side or right side no elements
        ans[1] = 1
        ans[2] = 2
        
        for i in range(3,n+1):   ###  to find numTrees() for elements before n..so we can use that in our DP
            cnt = 0    
            for j in range(1,i+1):  ###  split element on all possible index from index 1 to index last
                right = i-j      ### number of elements in right
                left = j-1       ### number of elements in left
                
                r_cnt=ans[right]  ###  number of combinations of right side
                l_cnt=ans[left]   ###  number of combinations of left side
                
                cnt += l_cnt*r_cnt  ###  total combination possbile from that tree is left*right
                
            ans[i] = cnt           ### add final ans to DP..so we can use later
            
        return ans[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fad94975240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fad94975240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fad949753a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fad949753a0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (ans)

  4           4 LOAD_CONST               1 (1)
              6 LOAD_FAST                2 (ans)
              8 LOAD_CONST               2 (0)
             10 STORE_SUBSCR

  5          12 LOAD_CONST               1 (1)
             14 LOAD_FAST                2 (ans)
             16 LOAD_CONST               1 (1)
             18 STORE_SUBSCR

  6          20 LOAD_CONST               3 (2)
             22 LOAD_FAST                2 (ans)
             24 LOAD_CONST               3 (2)
             26 STORE_SUBSCR

  8          28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               4 (3)
             32 LOAD_FAST                1 (n)
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 GET_ITER
        >>   42 FOR_ITER                80 (to 124)
             44 STORE_FAST               3 (i)

  9          46 LOAD_CONST               2 (0)
             48 STORE_FAST               4 (cnt)

 10          50 LOAD_GLOBAL              0 (range)
             52 LOAD_CONST               1 (1)
             54 LOAD_FAST                3 (i)
             56 LOAD_CONST               1 (1)
             58 BINARY_ADD
             60 CALL_FUNCTION            2
             62 GET_ITER
        >>   64 FOR_ITER                48 (to 114)
             66 STORE_FAST               5 (j)

 11          68 LOAD_FAST                3 (i)
             70 LOAD_FAST                5 (j)
             72 BINARY_SUBTRACT
             74 STORE_FAST               6 (right)

 12          76 LOAD_FAST                5 (j)
             78 LOAD_CONST               1 (1)
             80 BINARY_SUBTRACT
             82 STORE_FAST               7 (left)

 14          84 LOAD_FAST                2 (ans)
             86 LOAD_FAST                6 (right)
             88 BINARY_SUBSCR
             90 STORE_FAST               8 (r_cnt)

 15          92 LOAD_FAST                2 (ans)
             94 LOAD_FAST                7 (left)
             96 BINARY_SUBSCR
             98 STORE_FAST               9 (l_cnt)

 17         100 LOAD_FAST                4 (cnt)
            102 LOAD_FAST                9 (l_cnt)
            104 LOAD_FAST                8 (r_cnt)
            106 BINARY_MULTIPLY
            108 INPLACE_ADD
            110 STORE_FAST               4 (cnt)
            112 JUMP_ABSOLUTE           64

 19     >>  114 LOAD_FAST                4 (cnt)
            116 LOAD_FAST                2 (ans)
            118 LOAD_FAST                3 (i)
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           42

 21     >>  124 LOAD_FAST                2 (ans)
            126 LOAD_FAST                1 (n)
            128 BINARY_SUBSCR
            130 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        num = math.factorial(2*n)
        denom = math.factorial(n)*math.factorial(n+1)
        return num // denom
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7f3c2252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7f3c2252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f7f3c225240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f7f3c225240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (math)
              2 LOAD_METHOD              1 (factorial)
              4 LOAD_CONST               1 (2)
              6 LOAD_FAST                1 (n)
              8 BINARY_MULTIPLY
             10 CALL_METHOD              1
             12 STORE_FAST               2 (num)

  4          14 LOAD_GLOBAL              0 (math)
             16 LOAD_METHOD              1 (factorial)
             18 LOAD_FAST                1 (n)
             20 CALL_METHOD              1
             22 LOAD_GLOBAL              0 (math)
             24 LOAD_METHOD              1 (factorial)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_METHOD              1
             34 BINARY_MULTIPLY
             36 STORE_FAST               3 (denom)

  5          38 LOAD_FAST                2 (num)
             40 LOAD_FAST                3 (denom)
             42 BINARY_FLOOR_DIVIDE
             44 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[0] = 1
        for i in range(1, n+1):
            for j in range(i):
                dp[i] += dp[j] * dp[i-1-j]
        return dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdbe19b5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdbe19b5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fdbe19b52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fdbe19b52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (dp)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (dp)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 DUP_TOP_TWO
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (dp)
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                3 (i)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 LOAD_FAST                4 (j)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 BINARY_MULTIPLY
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_CONST               3 (-1)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        if n ==1:
            return 1
        if n==2:
            return 2
        if n==3:
            return 5
        
        dp = [0]*(n+1)
        
        dp[0]=1
        dp[1] = 1
        dp[2] = 2
        dp[3] = 5
        for i in range(4, n+1):
            for j in range(0, i):
                dp[i] += dp[j] * dp[i-j-1]
        
        return dp[n]
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f856d6952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f856d6952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f856d695240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f856d695240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               2 (2)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               2 (2)
             22 RETURN_VALUE

  7     >>   24 LOAD_FAST                1 (n)
             26 LOAD_CONST               3 (3)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  8          32 LOAD_CONST               4 (5)
             34 RETURN_VALUE

 10     >>   36 LOAD_CONST               5 (0)
             38 BUILD_LIST               1
             40 LOAD_FAST                1 (n)
             42 LOAD_CONST               1 (1)
             44 BINARY_ADD
             46 BINARY_MULTIPLY
             48 STORE_FAST               2 (dp)

 12          50 LOAD_CONST               1 (1)
             52 LOAD_FAST                2 (dp)
             54 LOAD_CONST               5 (0)
             56 STORE_SUBSCR

 13          58 LOAD_CONST               1 (1)
             60 LOAD_FAST                2 (dp)
             62 LOAD_CONST               1 (1)
             64 STORE_SUBSCR

 14          66 LOAD_CONST               2 (2)
             68 LOAD_FAST                2 (dp)
             70 LOAD_CONST               2 (2)
             72 STORE_SUBSCR

 15          74 LOAD_CONST               4 (5)
             76 LOAD_FAST                2 (dp)
             78 LOAD_CONST               3 (3)
             80 STORE_SUBSCR

 16          82 LOAD_GLOBAL              0 (range)
             84 LOAD_CONST               6 (4)
             86 LOAD_FAST                1 (n)
             88 LOAD_CONST               1 (1)
             90 BINARY_ADD
             92 CALL_FUNCTION            2
             94 GET_ITER
        >>   96 FOR_ITER                56 (to 154)
             98 STORE_FAST               3 (i)

 17         100 LOAD_GLOBAL              0 (range)
            102 LOAD_CONST               5 (0)
            104 LOAD_FAST                3 (i)
            106 CALL_FUNCTION            2
            108 GET_ITER
        >>  110 FOR_ITER                40 (to 152)
            112 STORE_FAST               4 (j)

 18         114 LOAD_FAST                2 (dp)
            116 LOAD_FAST                3 (i)
            118 DUP_TOP_TWO
            120 BINARY_SUBSCR
            122 LOAD_FAST                2 (dp)
            124 LOAD_FAST                4 (j)
            126 BINARY_SUBSCR
            128 LOAD_FAST                2 (dp)
            130 LOAD_FAST                3 (i)
            132 LOAD_FAST                4 (j)
            134 BINARY_SUBTRACT
            136 LOAD_CONST               1 (1)
            138 BINARY_SUBTRACT
            140 BINARY_SUBSCR
            142 BINARY_MULTIPLY
            144 INPLACE_ADD
            146 ROT_THREE
            148 STORE_SUBSCR
            150 JUMP_ABSOLUTE          110
        >>  152 JUMP_ABSOLUTE           96

 20     >>  154 LOAD_FAST                2 (dp)
            156 LOAD_FAST                1 (n)
            158 BINARY_SUBSCR
            160 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        if n == 0:
            return 1
        numSubtrees = 0
        for leftSubtreeNodeCount in range(n):
            rightSubtreeNodeCount = n - 1 - leftSubtreeNodeCount
            leftSubtrees = self.numTrees(leftSubtreeNodeCount)
            rightSubtrees = self.numTrees(rightSubtreeNodeCount)
            numSubtrees += leftSubtrees * rightSubtrees
        return numSubtrees
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8e64bd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8e64bd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f8e64bd5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f8e64bd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               1 (0)
             14 STORE_FAST               2 (numSubtrees)

  6          16 LOAD_GLOBAL              0 (range)
             18 LOAD_FAST                1 (n)
             20 CALL_FUNCTION            1
             22 GET_ITER
        >>   24 FOR_ITER                48 (to 74)
             26 STORE_FAST               3 (leftSubtreeNodeCount)

  7          28 LOAD_FAST                1 (n)
             30 LOAD_CONST               2 (1)
             32 BINARY_SUBTRACT
             34 LOAD_FAST                3 (leftSubtreeNodeCount)
             36 BINARY_SUBTRACT
             38 STORE_FAST               4 (rightSubtreeNodeCount)

  8          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              1 (numTrees)
             44 LOAD_FAST                3 (leftSubtreeNodeCount)
             46 CALL_METHOD              1
             48 STORE_FAST               5 (leftSubtrees)

  9          50 LOAD_FAST                0 (self)
             52 LOAD_METHOD              1 (numTrees)
             54 LOAD_FAST                4 (rightSubtreeNodeCount)
             56 CALL_METHOD              1
             58 STORE_FAST               6 (rightSubtrees)

 10          60 LOAD_FAST                2 (numSubtrees)
             62 LOAD_FAST                5 (leftSubtrees)
             64 LOAD_FAST                6 (rightSubtrees)
             66 BINARY_MULTIPLY
             68 INPLACE_ADD
             70 STORE_FAST               2 (numSubtrees)
             72 JUMP_ABSOLUTE           24

 11     >>   74 LOAD_FAST                2 (numSubtrees)
             76 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int, cache={}) -> int:
        if n == 0:
            return 1
        if n in cache:
            return cache[n]
        numSubtrees = 0
        for leftSubtreeNodeCount in range(n):
            rightSubtreeNodeCount = n - 1 - leftSubtreeNodeCount
            leftSubtrees = self.numTrees(leftSubtreeNodeCount, cache)
            rightSubtrees = self.numTrees(rightSubtreeNodeCount, cache)
            numSubtrees += leftSubtrees * rightSubtrees
        cache[n] = numSubtrees
        return numSubtrees
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3d41985240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3d41985240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 BUILD_TUPLE              1
             12 LOAD_NAME                3 (int)
             14 LOAD_NAME                3 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7f3d419852f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            5 (defaults, annotations)
             26 STORE_NAME               4 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f3d419852f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_FAST                2 (cache)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       28

  6          20 LOAD_FAST                2 (cache)
             22 LOAD_FAST                1 (n)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  7     >>   28 LOAD_CONST               1 (0)
             30 STORE_FAST               3 (numSubtrees)

  8          32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (n)
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                52 (to 94)
             42 STORE_FAST               4 (leftSubtreeNodeCount)

  9          44 LOAD_FAST                1 (n)
             46 LOAD_CONST               2 (1)
             48 BINARY_SUBTRACT
             50 LOAD_FAST                4 (leftSubtreeNodeCount)
             52 BINARY_SUBTRACT
             54 STORE_FAST               5 (rightSubtreeNodeCount)

 10          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (numTrees)
             60 LOAD_FAST                4 (leftSubtreeNodeCount)
             62 LOAD_FAST                2 (cache)
             64 CALL_METHOD              2
             66 STORE_FAST               6 (leftSubtrees)

 11          68 LOAD_FAST                0 (self)
             70 LOAD_METHOD              1 (numTrees)
             72 LOAD_FAST                5 (rightSubtreeNodeCount)
             74 LOAD_FAST                2 (cache)
             76 CALL_METHOD              2
             78 STORE_FAST               7 (rightSubtrees)

 12          80 LOAD_FAST                3 (numSubtrees)
             82 LOAD_FAST                6 (leftSubtrees)
             84 LOAD_FAST                7 (rightSubtrees)
             86 BINARY_MULTIPLY
             88 INPLACE_ADD
             90 STORE_FAST               3 (numSubtrees)
             92 JUMP_ABSOLUTE           40

 13     >>   94 LOAD_FAST                3 (numSubtrees)
             96 LOAD_FAST                2 (cache)
             98 LOAD_FAST                1 (n)
            100 STORE_SUBSCR

 14         102 LOAD_FAST                3 (numSubtrees)
            104 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
                
        # G(n) = solutions for n elements
        # F(i,n) = element i as root, n elements
        
        
        # Pseudo Code
        #G(n) = Sum of all F(i,n)
        #F(i,n) = G(i-1)*G(n-i)
        
        
        # Example
        # n = 3
        
        # base cases
        # G(0) = 1
        # G(1) = 1
        
        # G(3) = F(1,3)+F(2,3)+F(3,3)
        
        
        # F(1,3) = G(0)*G(2) = 2
        # Explanation 
        # Ex: G(0) = no elements on the left branch
        # Ex: G(2) = 2 elements on the right branch
        
        # F(2,3) = G(1)*G(1) = 1
        # Explanation
        # Ex: G(1) = 1 element on the left branch
        # Ex: G(1) = 1 element on the right branch
        
        # F(3,3) = G(2)*G(0) = 2
        # Explanation 
        # Ex: G(2) = 2 elements on the left branch
        # Ex: G(0) = no elements on the right branch
        

        g_array = [1,1]
        
        for j in range(2,n+1):
            sum_g = 0
            for i in range(1,j+1):
                f_i = g_array[i-1]*g_array[j-i]
                sum_g += f_i
            g_array.append(sum_g)
                        
        return g_array[n]
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1691205240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1691205240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f16912052f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f16912052f0, file ""<ast>"", line 2>:
 39           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (g_array)

 41           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               2 (2)
             12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                70 (to 94)
             24 STORE_FAST               3 (j)

 42          26 LOAD_CONST               3 (0)
             28 STORE_FAST               4 (sum_g)

 43          30 LOAD_GLOBAL              0 (range)
             32 LOAD_CONST               1 (1)
             34 LOAD_FAST                3 (j)
             36 LOAD_CONST               1 (1)
             38 BINARY_ADD
             40 CALL_FUNCTION            2
             42 GET_ITER
        >>   44 FOR_ITER                36 (to 82)
             46 STORE_FAST               5 (i)

 44          48 LOAD_FAST                2 (g_array)
             50 LOAD_FAST                5 (i)
             52 LOAD_CONST               1 (1)
             54 BINARY_SUBTRACT
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (g_array)
             60 LOAD_FAST                3 (j)
             62 LOAD_FAST                5 (i)
             64 BINARY_SUBTRACT
             66 BINARY_SUBSCR
             68 BINARY_MULTIPLY
             70 STORE_FAST               6 (f_i)

 45          72 LOAD_FAST                4 (sum_g)
             74 LOAD_FAST                6 (f_i)
             76 INPLACE_ADD
             78 STORE_FAST               4 (sum_g)
             80 JUMP_ABSOLUTE           44

 46     >>   82 LOAD_FAST                2 (g_array)
             84 LOAD_METHOD              1 (append)
             86 LOAD_FAST                4 (sum_g)
             88 CALL_METHOD              1
             90 POP_TOP
             92 JUMP_ABSOLUTE           22

 48     >>   94 LOAD_FAST                2 (g_array)
             96 LOAD_FAST                1 (n)
             98 BINARY_SUBSCR
            100 RETURN_VALUE
None
"
numTrees,"class Solution:
    dp = {}
    def numTrees(self, n: int) -> int:
        nodes = {}
        if n == 1 or n == 0:
            return 1
        elif n == 2:
            return 2
        elif n in self.dp:
            return self.dp[n]
        for i in range(1, n+1):
            nodes[i] = self.numTrees(i-1) * self.numTrees(n-i)

        self.dp[n] = sum(nodes[i] for i in nodes)
        return self.dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbd1af453a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbd1af453a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 STORE_NAME               3 (dp)

  3          12 LOAD_NAME                4 (int)
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7fbd1af452f0, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fbd1af452f0, file ""<ast>"", line 3>:
  4           0 BUILD_MAP                0
              2 STORE_DEREF              0 (nodes)

  5           4 LOAD_FAST                1 (n)
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_TRUE        20
             12 LOAD_FAST                1 (n)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6     >>   20 LOAD_CONST               1 (1)
             22 RETURN_VALUE

  7     >>   24 LOAD_FAST                1 (n)
             26 LOAD_CONST               3 (2)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  8          32 LOAD_CONST               3 (2)
             34 RETURN_VALUE

  9     >>   36 LOAD_FAST                1 (n)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                0 (dp)
             42 COMPARE_OP               6 (in)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                0 (dp)
             50 LOAD_FAST                1 (n)
             52 BINARY_SUBSCR
             54 RETURN_VALUE

 11     >>   56 LOAD_GLOBAL              1 (range)
             58 LOAD_CONST               1 (1)
             60 LOAD_FAST                1 (n)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 CALL_FUNCTION            2
             68 GET_ITER
        >>   70 FOR_ITER                36 (to 108)
             72 STORE_FAST               2 (i)

 12          74 LOAD_FAST                0 (self)
             76 LOAD_METHOD              2 (numTrees)
             78 LOAD_FAST                2 (i)
             80 LOAD_CONST               1 (1)
             82 BINARY_SUBTRACT
             84 CALL_METHOD              1
             86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (numTrees)
             90 LOAD_FAST                1 (n)
             92 LOAD_FAST                2 (i)
             94 BINARY_SUBTRACT
             96 CALL_METHOD              1
             98 BINARY_MULTIPLY
            100 LOAD_DEREF               0 (nodes)
            102 LOAD_FAST                2 (i)
            104 STORE_SUBSCR
            106 JUMP_ABSOLUTE           70

 14     >>  108 LOAD_GLOBAL              3 (sum)
            110 LOAD_CLOSURE             0 (nodes)
            112 BUILD_TUPLE              1
            114 LOAD_CONST               4 (<code object <genexpr> at 0x7fbd1af45240, file ""<ast>"", line 14>)
            116 LOAD_CONST               5 ('Solution.numTrees.<locals>.<genexpr>')
            118 MAKE_FUNCTION            8 (closure)
            120 LOAD_DEREF               0 (nodes)
            122 GET_ITER
            124 CALL_FUNCTION            1
            126 CALL_FUNCTION            1
            128 LOAD_FAST                0 (self)
            130 LOAD_ATTR                0 (dp)
            132 LOAD_FAST                1 (n)
            134 STORE_SUBSCR

 15         136 LOAD_FAST                0 (self)
            138 LOAD_ATTR                0 (dp)
            140 LOAD_FAST                1 (n)
            142 BINARY_SUBSCR
            144 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7fbd1af45240, file ""<ast>"", line 14>:
 14           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                14 (to 18)
              4 STORE_FAST               1 (i)
              6 LOAD_DEREF               0 (nodes)
              8 LOAD_FAST                1 (i)
             10 BINARY_SUBSCR
             12 YIELD_VALUE
             14 POP_TOP
             16 JUMP_ABSOLUTE            2
        >>   18 LOAD_CONST               0 (None)
             20 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
            dp = {0:1, 1:1, 2:2}
            if n < 3: return dp[n]
            for i in range(3, n+1):
                num = 0
                for j in range(i):
                    num += dp[j]*dp[i-j-1]
                dp[i] = num
            return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f31425e5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f31425e5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f31425e52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f31425e52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 ((0, 1, 2))
              8 BUILD_CONST_KEY_MAP      3
             10 STORE_FAST               2 (dp)

  4          12 LOAD_FAST                1 (n)
             14 LOAD_CONST               4 (3)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       28
             20 LOAD_FAST                2 (dp)
             22 LOAD_FAST                1 (n)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  5     >>   28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               4 (3)
             32 LOAD_FAST                1 (n)
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 GET_ITER
        >>   42 FOR_ITER                58 (to 102)
             44 STORE_FAST               3 (i)

  6          46 LOAD_CONST               5 (0)
             48 STORE_FAST               4 (num)

  7          50 LOAD_GLOBAL              0 (range)
             52 LOAD_FAST                3 (i)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                32 (to 92)
             60 STORE_FAST               5 (j)

  8          62 LOAD_FAST                4 (num)
             64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                5 (j)
             68 BINARY_SUBSCR
             70 LOAD_FAST                2 (dp)
             72 LOAD_FAST                3 (i)
             74 LOAD_FAST                5 (j)
             76 BINARY_SUBTRACT
             78 LOAD_CONST               1 (1)
             80 BINARY_SUBTRACT
             82 BINARY_SUBSCR
             84 BINARY_MULTIPLY
             86 INPLACE_ADD
             88 STORE_FAST               4 (num)
             90 JUMP_ABSOLUTE           58

  9     >>   92 LOAD_FAST                4 (num)
             94 LOAD_FAST                2 (dp)
             96 LOAD_FAST                3 (i)
             98 STORE_SUBSCR
            100 JUMP_ABSOLUTE           42

 10     >>  102 LOAD_FAST                2 (dp)
            104 LOAD_FAST                1 (n)
            106 BINARY_SUBSCR
            108 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        # Intuition:
        #   - For each n we try to build BST with node i from 1 -> n as root node
        #   - If n = 0 or 1 then only 1 way to form a BST tree
        #   - For each i we have i - 1 nodes on left subtree and n - i nodes on right subtree
        #   - The result is sum of all BST above. 
        #       G(n) = f(1, n) + f(2, n) + ... + f(n, n)
        #   - For each BST tree above we calculate number of left subtree * number of right subtree. We can see the sub problem here
        #       f(i, n) = G(i - 1) * G(n - i)
        #   - Final formula:
        #       G(n) = G(0) * G(n - 1) + G(1) * G(n - 2) + ... + G(n - 1) * G(0)
        
        # There is only one way to form BST with 0 or 1 node
        if n <= 1:
            return 1
        
        # Build up solution from 0 to n
        dp = [0] * (n + 1)
        # We already know the result for input = 1, input = 2
        dp[0], dp[1] = 1, 1
        
        # Continue calculate result for input from 2 -> n
        for i in range(2, n + 1):
            # For each i calculate all possible structurally BSTs that can form by j as root node
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
            
        return dp[n]
        
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe15f735240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe15f735240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fe15f7352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fe15f7352f0, file ""<ast>"", line 2>:
 15           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

 16           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

 19     >>   12 LOAD_CONST               2 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 BINARY_MULTIPLY
             24 STORE_FAST               2 (dp)

 21          26 LOAD_CONST               3 ((1, 1))
             28 UNPACK_SEQUENCE          2
             30 LOAD_FAST                2 (dp)
             32 LOAD_CONST               2 (0)
             34 STORE_SUBSCR
             36 LOAD_FAST                2 (dp)
             38 LOAD_CONST               1 (1)
             40 STORE_SUBSCR

 24          42 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               4 (2)
             46 LOAD_FAST                1 (n)
             48 LOAD_CONST               1 (1)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 GET_ITER
        >>   56 FOR_ITER                60 (to 118)
             58 STORE_FAST               3 (i)

 26          60 LOAD_GLOBAL              0 (range)
             62 LOAD_CONST               1 (1)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               1 (1)
             68 BINARY_ADD
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER                40 (to 116)
             76 STORE_FAST               4 (j)

 27          78 LOAD_FAST                2 (dp)
             80 LOAD_FAST                3 (i)
             82 DUP_TOP_TWO
             84 BINARY_SUBSCR
             86 LOAD_FAST                2 (dp)
             88 LOAD_FAST                4 (j)
             90 LOAD_CONST               1 (1)
             92 BINARY_SUBTRACT
             94 BINARY_SUBSCR
             96 LOAD_FAST                2 (dp)
             98 LOAD_FAST                3 (i)
            100 LOAD_FAST                4 (j)
            102 BINARY_SUBTRACT
            104 BINARY_SUBSCR
            106 BINARY_MULTIPLY
            108 INPLACE_ADD
            110 ROT_THREE
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE           74
        >>  116 JUMP_ABSOLUTE           56

 29     >>  118 LOAD_FAST                2 (dp)
            120 LOAD_FAST                1 (n)
            122 BINARY_SUBSCR
            124 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0 for i in range(n+1)]
        dp[0], i = 1, 1
        while i<=n:
            l, r = i-1, 0
            while l >= 0:
                dp[i] += (dp[l]*dp[r])
                l-=1
                r+=1
            i+=1
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fad9f0252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fad9f0252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fad9f025450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fad9f025450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fad9f025240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.numTrees.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (dp)

  4          22 LOAD_CONST               4 ((1, 1))
             24 UNPACK_SEQUENCE          2
             26 LOAD_FAST                2 (dp)
             28 LOAD_CONST               5 (0)
             30 STORE_SUBSCR
             32 STORE_FAST               3 (i)

  5     >>   34 LOAD_FAST                3 (i)
             36 LOAD_FAST                1 (n)
             38 COMPARE_OP               1 (<=)
             40 POP_JUMP_IF_FALSE      120

  6          42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (1)
             46 BINARY_SUBTRACT
             48 LOAD_CONST               5 (0)
             50 ROT_TWO
             52 STORE_FAST               4 (l)
             54 STORE_FAST               5 (r)

  7     >>   56 LOAD_FAST                4 (l)
             58 LOAD_CONST               5 (0)
             60 COMPARE_OP               5 (>=)
             62 POP_JUMP_IF_FALSE      110

  8          64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                3 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (dp)
             74 LOAD_FAST                4 (l)
             76 BINARY_SUBSCR
             78 LOAD_FAST                2 (dp)
             80 LOAD_FAST                5 (r)
             82 BINARY_SUBSCR
             84 BINARY_MULTIPLY
             86 INPLACE_ADD
             88 ROT_THREE
             90 STORE_SUBSCR

  9          92 LOAD_FAST                4 (l)
             94 LOAD_CONST               3 (1)
             96 INPLACE_SUBTRACT
             98 STORE_FAST               4 (l)

 10         100 LOAD_FAST                5 (r)
            102 LOAD_CONST               3 (1)
            104 INPLACE_ADD
            106 STORE_FAST               5 (r)
            108 JUMP_ABSOLUTE           56

 11     >>  110 LOAD_FAST                3 (i)
            112 LOAD_CONST               3 (1)
            114 INPLACE_ADD
            116 STORE_FAST               3 (i)
            118 JUMP_ABSOLUTE           34

 12     >>  120 LOAD_FAST                2 (dp)
            122 LOAD_FAST                1 (n)
            124 BINARY_SUBSCR
            126 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fad9f025240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
numTrees,"class Solution:
	def numTrees(self, n: int) -> int:
		dp=[0]*(n+1)
		dp[0]=1
		dp[1]=1
		for i in range(2,n+1):
			for j in range(i):
				dp[i]+=dp[j]*dp[i-j-1]
		return dp[-1]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f872d955240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f872d955240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f872d9552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f872d9552f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (dp)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (dp)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_CONST               2 (1)
             24 LOAD_FAST                2 (dp)
             26 LOAD_CONST               2 (1)
             28 STORE_SUBSCR

  6          30 LOAD_GLOBAL              0 (range)
             32 LOAD_CONST               3 (2)
             34 LOAD_FAST                1 (n)
             36 LOAD_CONST               2 (1)
             38 BINARY_ADD
             40 CALL_FUNCTION            2
             42 GET_ITER
        >>   44 FOR_ITER                54 (to 100)
             46 STORE_FAST               3 (i)

  7          48 LOAD_GLOBAL              0 (range)
             50 LOAD_FAST                3 (i)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                40 (to 98)
             58 STORE_FAST               4 (j)

  8          60 LOAD_FAST                2 (dp)
             62 LOAD_FAST                3 (i)
             64 DUP_TOP_TWO
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (dp)
             70 LOAD_FAST                4 (j)
             72 BINARY_SUBSCR
             74 LOAD_FAST                2 (dp)
             76 LOAD_FAST                3 (i)
             78 LOAD_FAST                4 (j)
             80 BINARY_SUBTRACT
             82 LOAD_CONST               2 (1)
             84 BINARY_SUBTRACT
             86 BINARY_SUBSCR
             88 BINARY_MULTIPLY
             90 INPLACE_ADD
             92 ROT_THREE
             94 STORE_SUBSCR
             96 JUMP_ABSOLUTE           56
        >>   98 JUMP_ABSOLUTE           44

  9     >>  100 LOAD_FAST                2 (dp)
            102 LOAD_CONST               4 (-1)
            104 BINARY_SUBSCR
            106 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        if n <= 2:
            return n
        
        dp = {0: 1, 1: 1, 2: 2}
        for i in range(3, n+1): #n+1 so that N is also included
            #now assume every node as a root and then calculate
            #start from 1, because, I assume I take 1st node as the root
            sm = 0
            for j in range(1, i+1):
                sm += dp[j-1]*dp[i - j]
            dp[i] = sm
        return dp[n]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd194b35240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd194b35240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fd194b352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fd194b352f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_FAST                1 (n)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (1)
             14 LOAD_CONST               2 (1)
             16 LOAD_CONST               1 (2)
             18 LOAD_CONST               3 ((0, 1, 2))
             20 BUILD_CONST_KEY_MAP      3
             22 STORE_FAST               2 (dp)

  7          24 LOAD_GLOBAL              0 (range)
             26 LOAD_CONST               4 (3)
             28 LOAD_FAST                1 (n)
             30 LOAD_CONST               2 (1)
             32 BINARY_ADD
             34 CALL_FUNCTION            2
             36 GET_ITER
        >>   38 FOR_ITER                64 (to 104)
             40 STORE_FAST               3 (i)

 10          42 LOAD_CONST               5 (0)
             44 STORE_FAST               4 (sm)

 11          46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST               2 (1)
             50 LOAD_FAST                3 (i)
             52 LOAD_CONST               2 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER                32 (to 94)
             62 STORE_FAST               5 (j)

 12          64 LOAD_FAST                4 (sm)
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                5 (j)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 BINARY_SUBSCR
             76 LOAD_FAST                2 (dp)
             78 LOAD_FAST                3 (i)
             80 LOAD_FAST                5 (j)
             82 BINARY_SUBTRACT
             84 BINARY_SUBSCR
             86 BINARY_MULTIPLY
             88 INPLACE_ADD
             90 STORE_FAST               4 (sm)
             92 JUMP_ABSOLUTE           60

 13     >>   94 LOAD_FAST                4 (sm)
             96 LOAD_FAST                2 (dp)
             98 LOAD_FAST                3 (i)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           38

 14     >>  104 LOAD_FAST                2 (dp)
            106 LOAD_FAST                1 (n)
            108 BINARY_SUBSCR
            110 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n):
        dp = { 0:1, 1:1 }
        for x in range(2,n+1):
            dp[x] = sum([ dp[y]*dp[x-y-1] for y in range(x) ] )
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fad098e5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fad098e5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object numTrees at 0x7fad098e53a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.numTrees')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numTrees)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fad098e53a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 ((0, 1))
              6 BUILD_CONST_KEY_MAP      2
              8 STORE_DEREF              0 (dp)

  4          10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (2)
             14 LOAD_FAST                1 (n)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER                36 (to 62)
             26 STORE_DEREF              1 (x)

  5          28 LOAD_GLOBAL              1 (sum)
             30 LOAD_CLOSURE             0 (dp)
             32 LOAD_CLOSURE             1 (x)
             34 BUILD_TUPLE              2
             36 LOAD_CONST               4 (<code object <listcomp> at 0x7fad098e52f0, file ""<ast>"", line 5>)
             38 LOAD_CONST               5 ('Solution.numTrees.<locals>.<listcomp>')
             40 MAKE_FUNCTION            8 (closure)
             42 LOAD_GLOBAL              0 (range)
             44 LOAD_DEREF               1 (x)
             46 CALL_FUNCTION            1
             48 GET_ITER
             50 CALL_FUNCTION            1
             52 CALL_FUNCTION            1
             54 LOAD_DEREF               0 (dp)
             56 LOAD_DEREF               1 (x)
             58 STORE_SUBSCR
             60 JUMP_ABSOLUTE           24

  6     >>   62 LOAD_DEREF               0 (dp)
             64 LOAD_FAST                1 (n)
             66 BINARY_SUBSCR
             68 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fad098e52f0, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (y)
              8 LOAD_DEREF               0 (dp)
             10 LOAD_FAST                1 (y)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (dp)
             16 LOAD_DEREF               1 (x)
             18 LOAD_FAST                1 (y)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               0 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 BINARY_MULTIPLY
             30 LIST_APPEND              2
             32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n):
        dp = { 0:1, 1:1 }
        for x in range(2,n+1):
            dp[x] = 2 * sum([ dp[y]*dp[x-y-1] for y in range(x//2) ] )
            if x%2:
                dp[x] += dp[x//2]**2
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa2474152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa2474152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object numTrees at 0x7fa2474153a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.numTrees')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numTrees)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fa2474153a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 ((0, 1))
              6 BUILD_CONST_KEY_MAP      2
              8 STORE_DEREF              0 (dp)

  4          10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (2)
             14 LOAD_FAST                1 (n)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER                80 (to 106)
             26 STORE_DEREF              1 (x)

  5          28 LOAD_CONST               3 (2)
             30 LOAD_GLOBAL              1 (sum)
             32 LOAD_CLOSURE             0 (dp)
             34 LOAD_CLOSURE             1 (x)
             36 BUILD_TUPLE              2
             38 LOAD_CONST               4 (<code object <listcomp> at 0x7fa247415240, file ""<ast>"", line 5>)
             40 LOAD_CONST               5 ('Solution.numTrees.<locals>.<listcomp>')
             42 MAKE_FUNCTION            8 (closure)
             44 LOAD_GLOBAL              0 (range)
             46 LOAD_DEREF               1 (x)
             48 LOAD_CONST               3 (2)
             50 BINARY_FLOOR_DIVIDE
             52 CALL_FUNCTION            1
             54 GET_ITER
             56 CALL_FUNCTION            1
             58 CALL_FUNCTION            1
             60 BINARY_MULTIPLY
             62 LOAD_DEREF               0 (dp)
             64 LOAD_DEREF               1 (x)
             66 STORE_SUBSCR

  6          68 LOAD_DEREF               1 (x)
             70 LOAD_CONST               3 (2)
             72 BINARY_MODULO
             74 POP_JUMP_IF_FALSE       24

  7          76 LOAD_DEREF               0 (dp)
             78 LOAD_DEREF               1 (x)
             80 DUP_TOP_TWO
             82 BINARY_SUBSCR
             84 LOAD_DEREF               0 (dp)
             86 LOAD_DEREF               1 (x)
             88 LOAD_CONST               3 (2)
             90 BINARY_FLOOR_DIVIDE
             92 BINARY_SUBSCR
             94 LOAD_CONST               3 (2)
             96 BINARY_POWER
             98 INPLACE_ADD
            100 ROT_THREE
            102 STORE_SUBSCR
            104 JUMP_ABSOLUTE           24

  8     >>  106 LOAD_DEREF               0 (dp)
            108 LOAD_FAST                1 (n)
            110 BINARY_SUBSCR
            112 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fa247415240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (y)
              8 LOAD_DEREF               0 (dp)
             10 LOAD_FAST                1 (y)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (dp)
             16 LOAD_DEREF               1 (x)
             18 LOAD_FAST                1 (y)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               0 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 BINARY_MULTIPLY
             30 LIST_APPEND              2
             32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
		# dp: store the result(status) in dictionary from the bottom, so we don't have to calculate every time
        dp = {}
        dp[0] = 1

        # num : every size of the tree in range(1, n + 1)
        for num in range(1, n + 1):
            res = 0
            
			# choose pivot i, the total result = left * right
            for i in range(1, num + 1): 
                res = res + dp[i - 1] * dp[num - i]
            dp[num] = res
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1e0cf05240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1e0cf05240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f1e0cf052f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f1e0cf052f0, file ""<ast>"", line 2>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               2 (dp)

  5           4 LOAD_CONST               1 (1)
              6 LOAD_FAST                2 (dp)
              8 LOAD_CONST               2 (0)
             10 STORE_SUBSCR

  8          12 LOAD_GLOBAL              0 (range)
             14 LOAD_CONST               1 (1)
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 CALL_FUNCTION            2
             24 GET_ITER
        >>   26 FOR_ITER                64 (to 92)
             28 STORE_FAST               3 (num)

  9          30 LOAD_CONST               2 (0)
             32 STORE_FAST               4 (res)

 12          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               1 (1)
             38 LOAD_FAST                3 (num)
             40 LOAD_CONST               1 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                32 (to 82)
             50 STORE_FAST               5 (i)

 13          52 LOAD_FAST                4 (res)
             54 LOAD_FAST                2 (dp)
             56 LOAD_FAST                5 (i)
             58 LOAD_CONST               1 (1)
             60 BINARY_SUBTRACT
             62 BINARY_SUBSCR
             64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                3 (num)
             68 LOAD_FAST                5 (i)
             70 BINARY_SUBTRACT
             72 BINARY_SUBSCR
             74 BINARY_MULTIPLY
             76 BINARY_ADD
             78 STORE_FAST               4 (res)
             80 JUMP_ABSOLUTE           48

 14     >>   82 LOAD_FAST                4 (res)
             84 LOAD_FAST                2 (dp)
             86 LOAD_FAST                3 (num)
             88 STORE_SUBSCR
             90 JUMP_ABSOLUTE           26

 15     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    from functools import reduce
    def numTrees(self, n: int) -> int:
        return int(round(reduce(lambda a, b: a * ((b + n) / b), list(range(2, n + 1)), 1)))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa3d16c5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa3d16c5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (0)
             10 LOAD_CONST               2 (('reduce',))
             12 IMPORT_NAME              3 (functools)
             14 IMPORT_FROM              4 (reduce)
             16 STORE_NAME               4 (reduce)
             18 POP_TOP

  3          20 LOAD_NAME                5 (int)
             22 LOAD_NAME                5 (int)
             24 LOAD_CONST               3 (('n', 'return'))
             26 BUILD_CONST_KEY_MAP      2
             28 LOAD_CONST               4 (<code object numTrees at 0x7fa3d16c5450, file ""<ast>"", line 3>)
             30 LOAD_CONST               5 ('Solution.numTrees')
             32 MAKE_FUNCTION            4 (annotations)
             34 STORE_NAME               6 (numTrees)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fa3d16c5450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (round)
              4 LOAD_GLOBAL              2 (reduce)
              6 LOAD_CLOSURE             0 (n)
              8 BUILD_TUPLE              1
             10 LOAD_CONST               1 (<code object <lambda> at 0x7fa3d16c53a0, file ""<ast>"", line 4>)
             12 LOAD_CONST               2 ('Solution.numTrees.<locals>.<lambda>')
             14 MAKE_FUNCTION            8 (closure)
             16 LOAD_GLOBAL              3 (list)
             18 LOAD_GLOBAL              4 (range)
             20 LOAD_CONST               3 (2)
             22 LOAD_DEREF               0 (n)
             24 LOAD_CONST               4 (1)
             26 BINARY_ADD
             28 CALL_FUNCTION            2
             30 CALL_FUNCTION            1
             32 LOAD_CONST               4 (1)
             34 CALL_FUNCTION            3
             36 CALL_FUNCTION            1
             38 CALL_FUNCTION            1
             40 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fa3d16c53a0, file ""<ast>"", line 4>:
  4           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 LOAD_DEREF               0 (n)
              6 BINARY_ADD
              8 LOAD_FAST                1 (b)
             10 BINARY_TRUE_DIVIDE
             12 BINARY_MULTIPLY
             14 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        self.table = [-1] * (n+1)
        self.table[0] = 1
        return self.numTreesRec(n)
        
    def numTreesRec(self, n):
        if self.table[n] != -1:
            return self.table[n]
        total = 0
        for m in range(n):
            total += (self.numTreesRec(n-1-m) * self.numTreesRec(m))
        self.table[n] = total
        return total
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff14b9953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff14b9953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7ff14b995240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  7          24 LOAD_CONST               4 (<code object numTreesRec at 0x7ff14b9952f0, file ""<ast>"", line 7>)
             26 LOAD_CONST               5 ('Solution.numTreesRec')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (numTreesRec)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object numTrees at 0x7ff14b995240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (-1)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 LOAD_FAST                0 (self)
             14 STORE_ATTR               0 (table)

  4          16 LOAD_CONST               2 (1)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (table)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  5          26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              1 (numTreesRec)
             30 LOAD_FAST                1 (n)
             32 CALL_METHOD              1
             34 RETURN_VALUE

Disassembly of <code object numTreesRec at 0x7ff14b9952f0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (table)
              4 LOAD_FAST                1 (n)
              6 BINARY_SUBSCR
              8 LOAD_CONST               1 (-1)
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       24

  9          14 LOAD_FAST                0 (self)
             16 LOAD_ATTR                0 (table)
             18 LOAD_FAST                1 (n)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

 10     >>   24 LOAD_CONST               2 (0)
             26 STORE_FAST               2 (total)

 11          28 LOAD_GLOBAL              1 (range)
             30 LOAD_FAST                1 (n)
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                36 (to 74)
             38 STORE_FAST               3 (m)

 12          40 LOAD_FAST                2 (total)
             42 LOAD_FAST                0 (self)
             44 LOAD_METHOD              2 (numTreesRec)
             46 LOAD_FAST                1 (n)
             48 LOAD_CONST               3 (1)
             50 BINARY_SUBTRACT
             52 LOAD_FAST                3 (m)
             54 BINARY_SUBTRACT
             56 CALL_METHOD              1
             58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              2 (numTreesRec)
             62 LOAD_FAST                3 (m)
             64 CALL_METHOD              1
             66 BINARY_MULTIPLY
             68 INPLACE_ADD
             70 STORE_FAST               2 (total)
             72 JUMP_ABSOLUTE           36

 13     >>   74 LOAD_FAST                2 (total)
             76 LOAD_FAST                0 (self)
             78 LOAD_ATTR                0 (table)
             80 LOAD_FAST                1 (n)
             82 STORE_SUBSCR

 14          84 LOAD_FAST                2 (total)
             86 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0] * (n+1)
        dp[0] = 1
        for i in range(1, n+1):
            for j in range(i):
                dp[i] += dp[j] * dp[i- 1 - j]
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f109a265240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f109a265240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f109a2652f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f109a2652f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (dp)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (dp)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 DUP_TOP_TWO
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (dp)
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                3 (i)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 LOAD_FAST                4 (j)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 BINARY_MULTIPLY
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:        
        return comb(2 * n , n) // (n + 1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffe65835450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffe65835450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7ffe658353a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7ffe658353a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (comb)
              2 LOAD_CONST               1 (2)
              4 LOAD_FAST                1 (n)
              6 BINARY_MULTIPLY
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            2
             12 LOAD_FAST                1 (n)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 BINARY_FLOOR_DIVIDE
             20 RETURN_VALUE
None
"
sortArray,"from itertools import accumulate
class Solution:
    def sortArray(self, nums:list):
        # radix sort implementation, O(n) time complexity, where n == len(nums)
        nums = [num + 50000 for num in nums] # unsorted array
        A = [0] * len(nums) # each loop's sorted array
        I = [0] * 10 # set up index array
        for i in range(6): # because there are 6 digits
            for num in nums:
                I[num // (10 ** i) % 10] += 1 # find out how many occurrences of each digit
            I = list(accumulate(I, lambda a, b: a + b)) # calculate the prefix sum
            for j in reversed(range(len(nums))):
                # invariant: The list is sorted at digit [j + 1:], waiting to be sorted at digit j
                A[I[nums[j] // (10 ** i) % 10] - 1] = nums[j] # update A from the back
                I[nums[j] // (10 ** i) % 10] -= 1 # update I at that position
            nums[:], I[:] = A[:], [0] * 10 # copy result to nums to begin new loop, and refresh I
        return [num - 50000 for num in nums]
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('accumulate',))
              4 IMPORT_NAME              0 (itertools)
              6 IMPORT_FROM              1 (accumulate)
              8 STORE_NAME               1 (accumulate)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fb321465500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb321465500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fb321465450, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fb321465450, file ""<ast>"", line 3>:
  5           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fb321465240, file ""<ast>"", line 5>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_FAST                1 (nums)
              8 GET_ITER
             10 CALL_FUNCTION            1
             12 STORE_FAST               1 (nums)

  6          14 LOAD_CONST               3 (0)
             16 BUILD_LIST               1
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                1 (nums)
             22 CALL_FUNCTION            1
             24 BINARY_MULTIPLY
             26 STORE_FAST               2 (A)

  7          28 LOAD_CONST               3 (0)
             30 BUILD_LIST               1
             32 LOAD_CONST               4 (10)
             34 BINARY_MULTIPLY
             36 STORE_FAST               3 (I)

  8          38 LOAD_GLOBAL              1 (range)
             40 LOAD_CONST               5 (6)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER               190 (to 238)
             48 STORE_FAST               4 (i)

  9          50 LOAD_FAST                1 (nums)
             52 GET_ITER
        >>   54 FOR_ITER                32 (to 88)
             56 STORE_FAST               5 (num)

 10          58 LOAD_FAST                3 (I)
             60 LOAD_FAST                5 (num)
             62 LOAD_CONST               4 (10)
             64 LOAD_FAST                4 (i)
             66 BINARY_POWER
             68 BINARY_FLOOR_DIVIDE
             70 LOAD_CONST               4 (10)
             72 BINARY_MODULO
             74 DUP_TOP_TWO
             76 BINARY_SUBSCR
             78 LOAD_CONST               6 (1)
             80 INPLACE_ADD
             82 ROT_THREE
             84 STORE_SUBSCR
             86 JUMP_ABSOLUTE           54

 11     >>   88 LOAD_GLOBAL              2 (list)
             90 LOAD_GLOBAL              3 (accumulate)
             92 LOAD_FAST                3 (I)
             94 LOAD_CONST               7 (<code object <lambda> at 0x7fb3214652f0, file ""<ast>"", line 11>)
             96 LOAD_CONST               8 ('Solution.sortArray.<locals>.<lambda>')
             98 MAKE_FUNCTION            0
            100 CALL_FUNCTION            2
            102 CALL_FUNCTION            1
            104 STORE_FAST               3 (I)

 12         106 LOAD_GLOBAL              4 (reversed)
            108 LOAD_GLOBAL              1 (range)
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                1 (nums)
            114 CALL_FUNCTION            1
            116 CALL_FUNCTION            1
            118 CALL_FUNCTION            1
            120 GET_ITER
        >>  122 FOR_ITER                72 (to 196)
            124 STORE_FAST               6 (j)

 14         126 LOAD_FAST                1 (nums)
            128 LOAD_FAST                6 (j)
            130 BINARY_SUBSCR
            132 LOAD_FAST                2 (A)
            134 LOAD_FAST                3 (I)
            136 LOAD_FAST                1 (nums)
            138 LOAD_FAST                6 (j)
            140 BINARY_SUBSCR
            142 LOAD_CONST               4 (10)
            144 LOAD_FAST                4 (i)
            146 BINARY_POWER
            148 BINARY_FLOOR_DIVIDE
            150 LOAD_CONST               4 (10)
            152 BINARY_MODULO
            154 BINARY_SUBSCR
            156 LOAD_CONST               6 (1)
            158 BINARY_SUBTRACT
            160 STORE_SUBSCR

 15         162 LOAD_FAST                3 (I)
            164 LOAD_FAST                1 (nums)
            166 LOAD_FAST                6 (j)
            168 BINARY_SUBSCR
            170 LOAD_CONST               4 (10)
            172 LOAD_FAST                4 (i)
            174 BINARY_POWER
            176 BINARY_FLOOR_DIVIDE
            178 LOAD_CONST               4 (10)
            180 BINARY_MODULO
            182 DUP_TOP_TWO
            184 BINARY_SUBSCR
            186 LOAD_CONST               6 (1)
            188 INPLACE_SUBTRACT
            190 ROT_THREE
            192 STORE_SUBSCR
            194 JUMP_ABSOLUTE          122

 16     >>  196 LOAD_FAST                2 (A)
            198 LOAD_CONST               0 (None)
            200 LOAD_CONST               0 (None)
            202 BUILD_SLICE              2
            204 BINARY_SUBSCR
            206 LOAD_CONST               3 (0)
            208 BUILD_LIST               1
            210 LOAD_CONST               4 (10)
            212 BINARY_MULTIPLY
            214 ROT_TWO
            216 LOAD_FAST                1 (nums)
            218 LOAD_CONST               0 (None)
            220 LOAD_CONST               0 (None)
            222 BUILD_SLICE              2
            224 STORE_SUBSCR
            226 LOAD_FAST                3 (I)
            228 LOAD_CONST               0 (None)
            230 LOAD_CONST               0 (None)
            232 BUILD_SLICE              2
            234 STORE_SUBSCR
            236 JUMP_ABSOLUTE           46

 17     >>  238 LOAD_CONST               9 (<code object <listcomp> at 0x7fb3214653a0, file ""<ast>"", line 17>)
            240 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
            242 MAKE_FUNCTION            0
            244 LOAD_FAST                1 (nums)
            246 GET_ITER
            248 CALL_FUNCTION            1
            250 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fb321465240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 LOAD_CONST               0 (50000)
             12 BINARY_ADD
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fb3214652f0, file ""<ast>"", line 11>:
 11           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 BINARY_ADD
              6 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fb3214653a0, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 LOAD_CONST               0 (50000)
             12 BINARY_SUBTRACT
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L = len(N)
        return [N.pop(min(range(L-i), key = lambda x: N[x])) for i in range(L)]
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fff27545870, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fff27545870, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fff275457c0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fff275457c0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF               1 (N)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              0 (L)

  4           8 LOAD_CLOSURE             0 (L)
             10 LOAD_CLOSURE             1 (N)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               1 (<code object <listcomp> at 0x7fff27545710, file ""<ast>"", line 4>)
             16 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
             18 MAKE_FUNCTION            8 (closure)
             20 LOAD_GLOBAL              1 (range)
             22 LOAD_DEREF               0 (L)
             24 CALL_FUNCTION            1
             26 GET_ITER
             28 CALL_FUNCTION            1
             30 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fff27545710, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                38 (to 44)
              6 STORE_FAST               1 (i)
              8 LOAD_DEREF               1 (N)
             10 LOAD_METHOD              0 (pop)
             12 LOAD_GLOBAL              1 (min)
             14 LOAD_GLOBAL              2 (range)
             16 LOAD_DEREF               0 (L)
             18 LOAD_FAST                1 (i)
             20 BINARY_SUBTRACT
             22 CALL_FUNCTION            1
             24 LOAD_CLOSURE             1 (N)
             26 BUILD_TUPLE              1
             28 LOAD_CONST               0 (<code object <lambda> at 0x7fff27545660, file ""<ast>"", line 4>)
             30 LOAD_CONST               1 ('Solution.sortArray.<locals>.<listcomp>.<lambda>')
             32 MAKE_FUNCTION            8 (closure)
             34 LOAD_CONST               2 (('key',))
             36 CALL_FUNCTION_KW         2
             38 CALL_METHOD              1
             40 LIST_APPEND              2
             42 JUMP_ABSOLUTE            4
        >>   44 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fff27545660, file ""<ast>"", line 4>:
  4           0 LOAD_DEREF               0 (N)
              2 LOAD_FAST                0 (x)
              4 BINARY_SUBSCR
              6 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L, B = len(N), 1
        while B:
            B = 0
            for i in range(L-1):
                if N[i] > N[i+1]: N[i], N[i+1], B = N[i+1], N[i], 1
        return N
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe437395240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe437395240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fe4373952f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fe4373952f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 ROT_TWO
             10 STORE_FAST               2 (L)
             12 STORE_FAST               3 (B)

  4     >>   14 LOAD_FAST                3 (B)
             16 POP_JUMP_IF_FALSE      102

  5          18 LOAD_CONST               2 (0)
             20 STORE_FAST               3 (B)

  6          22 LOAD_GLOBAL              1 (range)
             24 LOAD_FAST                2 (L)
             26 LOAD_CONST               1 (1)
             28 BINARY_SUBTRACT
             30 CALL_FUNCTION            1
             32 GET_ITER
        >>   34 FOR_ITER                64 (to 100)
             36 STORE_FAST               4 (i)

  7          38 LOAD_FAST                1 (N)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                1 (N)
             46 LOAD_FAST                4 (i)
             48 LOAD_CONST               1 (1)
             50 BINARY_ADD
             52 BINARY_SUBSCR
             54 COMPARE_OP               4 (>)
             56 POP_JUMP_IF_FALSE       34
             58 LOAD_FAST                1 (N)
             60 LOAD_FAST                4 (i)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 BINARY_SUBSCR
             68 LOAD_FAST                1 (N)
             70 LOAD_FAST                4 (i)
             72 BINARY_SUBSCR
             74 LOAD_CONST               1 (1)
             76 ROT_THREE
             78 ROT_TWO
             80 LOAD_FAST                1 (N)
             82 LOAD_FAST                4 (i)
             84 STORE_SUBSCR
             86 LOAD_FAST                1 (N)
             88 LOAD_FAST                4 (i)
             90 LOAD_CONST               1 (1)
             92 BINARY_ADD
             94 STORE_SUBSCR
             96 STORE_FAST               3 (B)
             98 JUMP_ABSOLUTE           34
        >>  100 JUMP_ABSOLUTE           14

  8     >>  102 LOAD_FAST                1 (N)
            104 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L = len(N)
        for i in range(1,L):
            for j in range(0,i):
                if N[i] < N[j]:
                    N.insert(j, N.pop(i))
                    break
        return N		
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f50f17e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f50f17e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f50f17e5240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f50f17e5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (L)

  4           8 LOAD_GLOBAL              1 (range)
             10 LOAD_CONST               1 (1)
             12 LOAD_FAST                2 (L)
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                58 (to 78)
             20 STORE_FAST               3 (i)

  5          22 LOAD_GLOBAL              1 (range)
             24 LOAD_CONST               2 (0)
             26 LOAD_FAST                3 (i)
             28 CALL_FUNCTION            2
             30 GET_ITER
        >>   32 FOR_ITER                42 (to 76)
             34 STORE_FAST               4 (j)

  6          36 LOAD_FAST                1 (N)
             38 LOAD_FAST                3 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (N)
             44 LOAD_FAST                4 (j)
             46 BINARY_SUBSCR
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       32

  7          52 LOAD_FAST                1 (N)
             54 LOAD_METHOD              2 (insert)
             56 LOAD_FAST                4 (j)
             58 LOAD_FAST                1 (N)
             60 LOAD_METHOD              3 (pop)
             62 LOAD_FAST                3 (i)
             64 CALL_METHOD              1
             66 CALL_METHOD              2
             68 POP_TOP

  8          70 POP_TOP
             72 JUMP_ABSOLUTE           18
             74 JUMP_ABSOLUTE           32
        >>   76 JUMP_ABSOLUTE           18

  9     >>   78 LOAD_FAST                1 (N)
             80 RETURN_VALUE
None
"
sortArray,"from bisect import insort_left
class Solution:
    def sortArray(self, N:list):
        L = len(N)
        for i in range(1,L): insort_left(N, N.pop(i), 0, i)
        return N
		
		
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('insort_left',))
              4 IMPORT_NAME              0 (bisect)
              6 IMPORT_FROM              1 (insort_left)
              8 STORE_NAME               1 (insort_left)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7faa291d52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7faa291d52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7faa291d5240, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7faa291d5240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (L)

  5           8 LOAD_GLOBAL              1 (range)
             10 LOAD_CONST               1 (1)
             12 LOAD_FAST                2 (L)
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                24 (to 44)
             20 STORE_FAST               3 (i)
             22 LOAD_GLOBAL              2 (insort_left)
             24 LOAD_FAST                1 (N)
             26 LOAD_FAST                1 (N)
             28 LOAD_METHOD              3 (pop)
             30 LOAD_FAST                3 (i)
             32 CALL_METHOD              1
             34 LOAD_CONST               2 (0)
             36 LOAD_FAST                3 (i)
             38 CALL_FUNCTION            4
             40 POP_TOP
             42 JUMP_ABSOLUTE           18

  6     >>   44 LOAD_FAST                1 (N)
             46 RETURN_VALUE
None
"
sortArray,"from collections import Counter
class Solution:
    def sortArray(self, N:list):
        C, m, M, S = Counter(N), min(N), max(N), []
        for n in range(m,M+1): S.extend([n]*C[n])
        return S
		
		
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fe7a72d52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe7a72d52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fe7a72d5240, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fe7a72d5240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              1 (min)
              8 LOAD_FAST                1 (N)
             10 CALL_FUNCTION            1
             12 LOAD_GLOBAL              2 (max)
             14 LOAD_FAST                1 (N)
             16 CALL_FUNCTION            1
             18 BUILD_LIST               0
             20 BUILD_TUPLE              4
             22 UNPACK_SEQUENCE          4
             24 STORE_FAST               2 (C)
             26 STORE_FAST               3 (m)
             28 STORE_FAST               4 (M)
             30 STORE_FAST               5 (S)

  5          32 LOAD_GLOBAL              3 (range)
             34 LOAD_FAST                3 (m)
             36 LOAD_FAST                4 (M)
             38 LOAD_CONST               1 (1)
             40 BINARY_ADD
             42 CALL_FUNCTION            2
             44 GET_ITER
        >>   46 FOR_ITER                24 (to 72)
             48 STORE_FAST               6 (n)
             50 LOAD_FAST                5 (S)
             52 LOAD_METHOD              4 (extend)
             54 LOAD_FAST                6 (n)
             56 BUILD_LIST               1
             58 LOAD_FAST                2 (C)
             60 LOAD_FAST                6 (n)
             62 BINARY_SUBSCR
             64 BINARY_MULTIPLY
             66 CALL_METHOD              1
             68 POP_TOP
             70 JUMP_ABSOLUTE           46

  6     >>   72 LOAD_FAST                5 (S)
             74 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        def quicksort(A, I, J):
            if J - I <= 1: return
            p = partition(A, I, J)
            quicksort(A, I, p), quicksort(A, p + 1, J)
        
        def partition(A, I, J):
            A[J-1], A[(I + J - 1)//2], i = A[(I + J - 1)//2], A[J-1], I
            for j in range(I,J):
                if A[j] < A[J-1]: A[i], A[j], i = A[j], A[i], i + 1
            A[J-1], A[i] = A[i], A[J-1]
            return i
        
        quicksort(N,0,len(N))
        return N
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6fcb065450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6fcb065450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f6fcb0653a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f6fcb0653a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (partition)
              2 LOAD_CLOSURE             1 (quicksort)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object quicksort at 0x7f6fcb065240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.sortArray.<locals>.quicksort')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              1 (quicksort)

  8          14 LOAD_CONST               3 (<code object partition at 0x7f6fcb0652f0, file ""<ast>"", line 8>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.partition')
             18 MAKE_FUNCTION            0
             20 STORE_DEREF              0 (partition)

 15          22 LOAD_DEREF               1 (quicksort)
             24 LOAD_FAST                1 (N)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (N)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            3
             36 POP_TOP

 16          38 LOAD_FAST                1 (N)
             40 RETURN_VALUE

Disassembly of <code object quicksort at 0x7f6fcb065240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                2 (J)
              2 LOAD_FAST                1 (I)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               0 (None)
             14 RETURN_VALUE

  5     >>   16 LOAD_DEREF               0 (partition)
             18 LOAD_FAST                0 (A)
             20 LOAD_FAST                1 (I)
             22 LOAD_FAST                2 (J)
             24 CALL_FUNCTION            3
             26 STORE_FAST               3 (p)

  6          28 LOAD_DEREF               1 (quicksort)
             30 LOAD_FAST                0 (A)
             32 LOAD_FAST                1 (I)
             34 LOAD_FAST                3 (p)
             36 CALL_FUNCTION            3
             38 LOAD_DEREF               1 (quicksort)
             40 LOAD_FAST                0 (A)
             42 LOAD_FAST                3 (p)
             44 LOAD_CONST               1 (1)
             46 BINARY_ADD
             48 LOAD_FAST                2 (J)
             50 CALL_FUNCTION            3
             52 BUILD_TUPLE              2
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE

Disassembly of <code object partition at 0x7f6fcb0652f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (A)
              2 LOAD_FAST                1 (I)
              4 LOAD_FAST                2 (J)
              6 BINARY_ADD
              8 LOAD_CONST               1 (1)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               2 (2)
             14 BINARY_FLOOR_DIVIDE
             16 BINARY_SUBSCR
             18 LOAD_FAST                0 (A)
             20 LOAD_FAST                2 (J)
             22 LOAD_CONST               1 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 LOAD_FAST                1 (I)
             30 ROT_THREE
             32 ROT_TWO
             34 LOAD_FAST                0 (A)
             36 LOAD_FAST                2 (J)
             38 LOAD_CONST               1 (1)
             40 BINARY_SUBTRACT
             42 STORE_SUBSCR
             44 LOAD_FAST                0 (A)
             46 LOAD_FAST                1 (I)
             48 LOAD_FAST                2 (J)
             50 BINARY_ADD
             52 LOAD_CONST               1 (1)
             54 BINARY_SUBTRACT
             56 LOAD_CONST               2 (2)
             58 BINARY_FLOOR_DIVIDE
             60 STORE_SUBSCR
             62 STORE_FAST               3 (i)

 10          64 LOAD_GLOBAL              0 (range)
             66 LOAD_FAST                1 (I)
             68 LOAD_FAST                2 (J)
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER                60 (to 136)
             76 STORE_FAST               4 (j)

 11          78 LOAD_FAST                0 (A)
             80 LOAD_FAST                4 (j)
             82 BINARY_SUBSCR
             84 LOAD_FAST                0 (A)
             86 LOAD_FAST                2 (J)
             88 LOAD_CONST               1 (1)
             90 BINARY_SUBTRACT
             92 BINARY_SUBSCR
             94 COMPARE_OP               0 (<)
             96 POP_JUMP_IF_FALSE       74
             98 LOAD_FAST                0 (A)
            100 LOAD_FAST                4 (j)
            102 BINARY_SUBSCR
            104 LOAD_FAST                0 (A)
            106 LOAD_FAST                3 (i)
            108 BINARY_SUBSCR
            110 LOAD_FAST                3 (i)
            112 LOAD_CONST               1 (1)
            114 BINARY_ADD
            116 ROT_THREE
            118 ROT_TWO
            120 LOAD_FAST                0 (A)
            122 LOAD_FAST                3 (i)
            124 STORE_SUBSCR
            126 LOAD_FAST                0 (A)
            128 LOAD_FAST                4 (j)
            130 STORE_SUBSCR
            132 STORE_FAST               3 (i)
            134 JUMP_ABSOLUTE           74

 12     >>  136 LOAD_FAST                0 (A)
            138 LOAD_FAST                3 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                0 (A)
            144 LOAD_FAST                2 (J)
            146 LOAD_CONST               1 (1)
            148 BINARY_SUBTRACT
            150 BINARY_SUBSCR
            152 ROT_TWO
            154 LOAD_FAST                0 (A)
            156 LOAD_FAST                2 (J)
            158 LOAD_CONST               1 (1)
            160 BINARY_SUBTRACT
            162 STORE_SUBSCR
            164 LOAD_FAST                0 (A)
            166 LOAD_FAST                3 (i)
            168 STORE_SUBSCR

 13         170 LOAD_FAST                3 (i)
            172 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        def mergesort(A):
            LA = len(A)
            if LA == 1: return A
            LH, RH = mergesort(A[:LA//2]), mergesort(A[LA//2:])
            return merge(LH,RH)

        def merge(LH, RH):
            LLH, LRH = len(LH), len(RH)
            S, i, j = [], 0, 0
            while i < LLH and j < LRH:
                if LH[i] <= RH[j]: i, _ = i + 1, S.append(LH[i])
                else: j, _ = j + 1, S.append(RH[j])
            return S + (RH[j:] if i == LLH else LH[i:])
        
        return mergesort(N)		
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4daa095450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4daa095450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f4daa0953a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f4daa0953a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (merge)
              2 LOAD_CLOSURE             1 (mergesort)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object mergesort at 0x7f4daa095240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.sortArray.<locals>.mergesort')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              1 (mergesort)

  9          14 LOAD_CONST               3 (<code object merge at 0x7f4daa0952f0, file ""<ast>"", line 9>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.merge')
             18 MAKE_FUNCTION            0
             20 STORE_DEREF              0 (merge)

 17          22 LOAD_DEREF               1 (mergesort)
             24 LOAD_FAST                1 (N)
             26 CALL_FUNCTION            1
             28 RETURN_VALUE

Disassembly of <code object mergesort at 0x7f4daa095240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (A)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (LA)

  5           8 LOAD_FAST                1 (LA)
             10 LOAD_CONST               1 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_FAST                0 (A)
             18 RETURN_VALUE

  6     >>   20 LOAD_DEREF               1 (mergesort)
             22 LOAD_FAST                0 (A)
             24 LOAD_CONST               0 (None)
             26 LOAD_FAST                1 (LA)
             28 LOAD_CONST               2 (2)
             30 BINARY_FLOOR_DIVIDE
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            1
             38 LOAD_DEREF               1 (mergesort)
             40 LOAD_FAST                0 (A)
             42 LOAD_FAST                1 (LA)
             44 LOAD_CONST               2 (2)
             46 BINARY_FLOOR_DIVIDE
             48 LOAD_CONST               0 (None)
             50 BUILD_SLICE              2
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 ROT_TWO
             58 STORE_FAST               2 (LH)
             60 STORE_FAST               3 (RH)

  7          62 LOAD_DEREF               0 (merge)
             64 LOAD_FAST                2 (LH)
             66 LOAD_FAST                3 (RH)
             68 CALL_FUNCTION            2
             70 RETURN_VALUE

Disassembly of <code object merge at 0x7f4daa0952f0, file ""<ast>"", line 9>:
 10           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (LH)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (RH)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               2 (LLH)
             16 STORE_FAST               3 (LRH)

 11          18 BUILD_LIST               0
             20 LOAD_CONST               1 (0)
             22 LOAD_CONST               1 (0)
             24 ROT_THREE
             26 ROT_TWO
             28 STORE_FAST               4 (S)
             30 STORE_FAST               5 (i)
             32 STORE_FAST               6 (j)

 12     >>   34 LOAD_FAST                5 (i)
             36 LOAD_FAST                2 (LLH)
             38 COMPARE_OP               0 (<)
             40 POP_JUMP_IF_FALSE      118
             42 LOAD_FAST                6 (j)
             44 LOAD_FAST                3 (LRH)
             46 COMPARE_OP               0 (<)
             48 POP_JUMP_IF_FALSE      118

 13          50 LOAD_FAST                0 (LH)
             52 LOAD_FAST                5 (i)
             54 BINARY_SUBSCR
             56 LOAD_FAST                1 (RH)
             58 LOAD_FAST                6 (j)
             60 BINARY_SUBSCR
             62 COMPARE_OP               1 (<=)
             64 POP_JUMP_IF_FALSE       92
             66 LOAD_FAST                5 (i)
             68 LOAD_CONST               2 (1)
             70 BINARY_ADD
             72 LOAD_FAST                4 (S)
             74 LOAD_METHOD              1 (append)
             76 LOAD_FAST                0 (LH)
             78 LOAD_FAST                5 (i)
             80 BINARY_SUBSCR
             82 CALL_METHOD              1
             84 ROT_TWO
             86 STORE_FAST               5 (i)
             88 STORE_FAST               7 (_)
             90 JUMP_ABSOLUTE           34

 14     >>   92 LOAD_FAST                6 (j)
             94 LOAD_CONST               2 (1)
             96 BINARY_ADD
             98 LOAD_FAST                4 (S)
            100 LOAD_METHOD              1 (append)
            102 LOAD_FAST                1 (RH)
            104 LOAD_FAST                6 (j)
            106 BINARY_SUBSCR
            108 CALL_METHOD              1
            110 ROT_TWO
            112 STORE_FAST               6 (j)
            114 STORE_FAST               7 (_)
            116 JUMP_ABSOLUTE           34

 15     >>  118 LOAD_FAST                4 (S)
            120 LOAD_FAST                5 (i)
            122 LOAD_FAST                2 (LLH)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE      140
            128 LOAD_FAST                1 (RH)
            130 LOAD_FAST                6 (j)
            132 LOAD_CONST               0 (None)
            134 BUILD_SLICE              2
            136 BINARY_SUBSCR
            138 JUMP_FORWARD            10 (to 150)
        >>  140 LOAD_FAST                0 (LH)
            142 LOAD_FAST                5 (i)
            144 LOAD_CONST               0 (None)
            146 BUILD_SLICE              2
            148 BINARY_SUBSCR
        >>  150 BINARY_ADD
            152 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        # Hoare’s Partition Scheme works by initializing two indexes that start at two ends, 
		# the two indexes move toward each other until an inversion is found
        # the partition function will seperate the array by two, smaller than pivot, and greater than pivot
        # and return the final position of the pivot element.
        def partition(nums, left, right):
            if left > right: return
            
            # use the left most element as the pivot element
            pivot_index = left
            pivot=nums[left]
            
            # if the element we are looking for is greater than pivot, then it is on the correct side
            # when right pointer meet the left pointer, we know all the elements are in the correct sides
            # just need to put the pivot to the correct position
            while True:
                while left < right and nums[right] >=pivot:
                    right -=1
            # do the opposite thing to the left hand side
                while left < right and nums[left] <=pivot:
                    left +=1
            # if both of the numbers from the left hand side and the right hand side are on the wron side,
            # we exchange them.
                if left < right:
                    nums[left],nums[right] = nums[right],nums[left]
            # if all the elements are on the correct side, break the loop, just need to insert the pivot now.        
                else:
                    break
            # insert the pivot to the correct position to seperate the array by two
            nums[right],nums[pivot_index] = nums[pivot_index],nums[right]
            return right
        
        def Hoare_quicksort(nums, start, end):
            if end < start: return
            p = partition(nums,start,end)
            Hoare_quicksort(nums,start,p-1)
            Hoare_quicksort(nums,p+1,end)
            
        Hoare_quicksort(nums,0,len(nums)-1)
        return nums
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe91bca5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe91bca5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fe91bca53a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fe91bca53a0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object partition at 0x7fe91bca5240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.partition')
              4 MAKE_FUNCTION            0
              6 STORE_DEREF              1 (partition)

 34           8 LOAD_CLOSURE             0 (Hoare_quicksort)
             10 LOAD_CLOSURE             1 (partition)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               3 (<code object Hoare_quicksort at 0x7fe91bca52f0, file ""<ast>"", line 34>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.Hoare_quicksort')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (Hoare_quicksort)

 40          22 LOAD_DEREF               0 (Hoare_quicksort)
             24 LOAD_FAST                1 (nums)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (nums)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               6 (1)
             36 BINARY_SUBTRACT
             38 CALL_FUNCTION            3
             40 POP_TOP

 41          42 LOAD_FAST                1 (nums)
             44 RETURN_VALUE

Disassembly of <code object partition at 0x7fe91bca5240, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (left)
              2 LOAD_FAST                2 (right)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 11     >>   12 LOAD_FAST                1 (left)
             14 STORE_FAST               3 (pivot_index)

 12          16 LOAD_FAST                0 (nums)
             18 LOAD_FAST                1 (left)
             20 BINARY_SUBSCR
             22 STORE_FAST               4 (pivot)

 18     >>   24 LOAD_FAST                1 (left)
             26 LOAD_FAST                2 (right)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_FALSE       54
             32 LOAD_FAST                0 (nums)
             34 LOAD_FAST                2 (right)
             36 BINARY_SUBSCR
             38 LOAD_FAST                4 (pivot)
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_FALSE       54

 19          44 LOAD_FAST                2 (right)
             46 LOAD_CONST               1 (1)
             48 INPLACE_SUBTRACT
             50 STORE_FAST               2 (right)
             52 JUMP_ABSOLUTE           24

 21     >>   54 LOAD_FAST                1 (left)
             56 LOAD_FAST                2 (right)
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE       84
             62 LOAD_FAST                0 (nums)
             64 LOAD_FAST                1 (left)
             66 BINARY_SUBSCR
             68 LOAD_FAST                4 (pivot)
             70 COMPARE_OP               1 (<=)
             72 POP_JUMP_IF_FALSE       84

 22          74 LOAD_FAST                1 (left)
             76 LOAD_CONST               1 (1)
             78 INPLACE_ADD
             80 STORE_FAST               1 (left)
             82 JUMP_ABSOLUTE           54

 25     >>   84 LOAD_FAST                1 (left)
             86 LOAD_FAST                2 (right)
             88 COMPARE_OP               0 (<)
             90 POP_JUMP_IF_FALSE      124

 26          92 LOAD_FAST                0 (nums)
             94 LOAD_FAST                2 (right)
             96 BINARY_SUBSCR
             98 LOAD_FAST                0 (nums)
            100 LOAD_FAST                1 (left)
            102 BINARY_SUBSCR
            104 ROT_TWO
            106 LOAD_FAST                0 (nums)
            108 LOAD_FAST                1 (left)
            110 STORE_SUBSCR
            112 LOAD_FAST                0 (nums)
            114 LOAD_FAST                2 (right)
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE           24

 29         120 JUMP_ABSOLUTE          124
            122 JUMP_ABSOLUTE           24

 31     >>  124 LOAD_FAST                0 (nums)
            126 LOAD_FAST                3 (pivot_index)
            128 BINARY_SUBSCR
            130 LOAD_FAST                0 (nums)
            132 LOAD_FAST                2 (right)
            134 BINARY_SUBSCR
            136 ROT_TWO
            138 LOAD_FAST                0 (nums)
            140 LOAD_FAST                2 (right)
            142 STORE_SUBSCR
            144 LOAD_FAST                0 (nums)
            146 LOAD_FAST                3 (pivot_index)
            148 STORE_SUBSCR

 32         150 LOAD_FAST                2 (right)
            152 RETURN_VALUE

Disassembly of <code object Hoare_quicksort at 0x7fe91bca52f0, file ""<ast>"", line 34>:
 35           0 LOAD_FAST                2 (end)
              2 LOAD_FAST                1 (start)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 36     >>   12 LOAD_DEREF               1 (partition)
             14 LOAD_FAST                0 (nums)
             16 LOAD_FAST                1 (start)
             18 LOAD_FAST                2 (end)
             20 CALL_FUNCTION            3
             22 STORE_FAST               3 (p)

 37          24 LOAD_DEREF               0 (Hoare_quicksort)
             26 LOAD_FAST                0 (nums)
             28 LOAD_FAST                1 (start)
             30 LOAD_FAST                3 (p)
             32 LOAD_CONST               1 (1)
             34 BINARY_SUBTRACT
             36 CALL_FUNCTION            3
             38 POP_TOP

 38          40 LOAD_DEREF               0 (Hoare_quicksort)
             42 LOAD_FAST                0 (nums)
             44 LOAD_FAST                3 (p)
             46 LOAD_CONST               1 (1)
             48 BINARY_ADD
             50 LOAD_FAST                2 (end)
             52 CALL_FUNCTION            3
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):

        def partition(nums, left, right):
            if left > right: return
            
            # use the middle  element as the pivot
            pivot_index = left + (right-left)//2
            pivot=nums[pivot_index]

            while left<=right:
                while left <= right and nums[left] <pivot:
                    left +=1
                while left <= right and nums[right] >pivot:
                    right -=1
                if left <= right:
                    nums[left],nums[right] = nums[right],nums[left]
                    left +=1
                    right -=1
                else:
                    break
            return (left,right)
        
        def Hoare_quicksort(nums, start, end):
            if end < start: return
            p = partition(nums,start,end)
            Hoare_quicksort(nums,start,p[1])
            Hoare_quicksort(nums,p[0],end)
            
        Hoare_quicksort(nums,0,len(nums)-1)
        return nums
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0ef7e35450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0ef7e35450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f0ef7e353a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f0ef7e353a0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object partition at 0x7f0ef7e35240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.partition')
              4 MAKE_FUNCTION            0
              6 STORE_DEREF              1 (partition)

 24           8 LOAD_CLOSURE             0 (Hoare_quicksort)
             10 LOAD_CLOSURE             1 (partition)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               3 (<code object Hoare_quicksort at 0x7f0ef7e352f0, file ""<ast>"", line 24>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.Hoare_quicksort')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (Hoare_quicksort)

 30          22 LOAD_DEREF               0 (Hoare_quicksort)
             24 LOAD_FAST                1 (nums)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (nums)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               6 (1)
             36 BINARY_SUBTRACT
             38 CALL_FUNCTION            3
             40 POP_TOP

 31          42 LOAD_FAST                1 (nums)
             44 RETURN_VALUE

Disassembly of <code object partition at 0x7f0ef7e35240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (left)
              2 LOAD_FAST                2 (right)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

  8     >>   12 LOAD_FAST                1 (left)
             14 LOAD_FAST                2 (right)
             16 LOAD_FAST                1 (left)
             18 BINARY_SUBTRACT
             20 LOAD_CONST               1 (2)
             22 BINARY_FLOOR_DIVIDE
             24 BINARY_ADD
             26 STORE_FAST               3 (pivot_index)

  9          28 LOAD_FAST                0 (nums)
             30 LOAD_FAST                3 (pivot_index)
             32 BINARY_SUBSCR
             34 STORE_FAST               4 (pivot)

 11     >>   36 LOAD_FAST                1 (left)
             38 LOAD_FAST                2 (right)
             40 COMPARE_OP               1 (<=)
             42 POP_JUMP_IF_FALSE      160

 12     >>   44 LOAD_FAST                1 (left)
             46 LOAD_FAST                2 (right)
             48 COMPARE_OP               1 (<=)
             50 POP_JUMP_IF_FALSE       74
             52 LOAD_FAST                0 (nums)
             54 LOAD_FAST                1 (left)
             56 BINARY_SUBSCR
             58 LOAD_FAST                4 (pivot)
             60 COMPARE_OP               0 (<)
             62 POP_JUMP_IF_FALSE       74

 13          64 LOAD_FAST                1 (left)
             66 LOAD_CONST               2 (1)
             68 INPLACE_ADD
             70 STORE_FAST               1 (left)
             72 JUMP_ABSOLUTE           44

 14     >>   74 LOAD_FAST                1 (left)
             76 LOAD_FAST                2 (right)
             78 COMPARE_OP               1 (<=)
             80 POP_JUMP_IF_FALSE      104
             82 LOAD_FAST                0 (nums)
             84 LOAD_FAST                2 (right)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (pivot)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE      104

 15          94 LOAD_FAST                2 (right)
             96 LOAD_CONST               2 (1)
             98 INPLACE_SUBTRACT
            100 STORE_FAST               2 (right)
            102 JUMP_ABSOLUTE           74

 16     >>  104 LOAD_FAST                1 (left)
            106 LOAD_FAST                2 (right)
            108 COMPARE_OP               1 (<=)
            110 POP_JUMP_IF_FALSE      160

 17         112 LOAD_FAST                0 (nums)
            114 LOAD_FAST                2 (right)
            116 BINARY_SUBSCR
            118 LOAD_FAST                0 (nums)
            120 LOAD_FAST                1 (left)
            122 BINARY_SUBSCR
            124 ROT_TWO
            126 LOAD_FAST                0 (nums)
            128 LOAD_FAST                1 (left)
            130 STORE_SUBSCR
            132 LOAD_FAST                0 (nums)
            134 LOAD_FAST                2 (right)
            136 STORE_SUBSCR

 18         138 LOAD_FAST                1 (left)
            140 LOAD_CONST               2 (1)
            142 INPLACE_ADD
            144 STORE_FAST               1 (left)

 19         146 LOAD_FAST                2 (right)
            148 LOAD_CONST               2 (1)
            150 INPLACE_SUBTRACT
            152 STORE_FAST               2 (right)
            154 JUMP_ABSOLUTE           36

 21         156 JUMP_ABSOLUTE          160
            158 JUMP_ABSOLUTE           36

 22     >>  160 LOAD_FAST                1 (left)
            162 LOAD_FAST                2 (right)
            164 BUILD_TUPLE              2
            166 RETURN_VALUE

Disassembly of <code object Hoare_quicksort at 0x7f0ef7e352f0, file ""<ast>"", line 24>:
 25           0 LOAD_FAST                2 (end)
              2 LOAD_FAST                1 (start)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 26     >>   12 LOAD_DEREF               1 (partition)
             14 LOAD_FAST                0 (nums)
             16 LOAD_FAST                1 (start)
             18 LOAD_FAST                2 (end)
             20 CALL_FUNCTION            3
             22 STORE_FAST               3 (p)

 27          24 LOAD_DEREF               0 (Hoare_quicksort)
             26 LOAD_FAST                0 (nums)
             28 LOAD_FAST                1 (start)
             30 LOAD_FAST                3 (p)
             32 LOAD_CONST               1 (1)
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            3
             38 POP_TOP

 28          40 LOAD_DEREF               0 (Hoare_quicksort)
             42 LOAD_FAST                0 (nums)
             44 LOAD_FAST                3 (p)
             46 LOAD_CONST               2 (0)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (end)
             52 CALL_FUNCTION            3
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        # Merge Sort
        
        # merge takes two sorted array, and return the merged sorted array
        # Leetcode #88
        def merge(left, right):
            l = len(left)-1
            r = len(right)-1
            end = l+r+1
            
            for _ in range(r+1):
                left.append(None)
                
            while l>=0 and r>=0:
                if left[l] >=right[r]:
                    left[end]=left[l]
                    l-=1
                else:
                    left[end]=right[r]
                    r-=1
                end-=1
            if l ==-1:
                for _ in range(r+1):
                    left[_]=right[_]
            
            return left
        
        # if there is only one number, return the number
        # if both left and right are sorted arrays, merge these two
        if len(nums)<=1: return nums
        mid = len(nums)//2
        leftarray = self.sortArray(nums[:mid])
        rightarray= self.sortArray(nums[mid:])
        return merge(leftarray,rightarray)
        
    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2d9ace53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2d9ace53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f2d9ace52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f2d9ace52f0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object merge at 0x7f2d9ace5240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.merge')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (merge)

 31           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (nums)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               3 (1)
             16 COMPARE_OP               1 (<=)
             18 POP_JUMP_IF_FALSE       24
             20 LOAD_FAST                1 (nums)
             22 RETURN_VALUE

 32     >>   24 LOAD_GLOBAL              0 (len)
             26 LOAD_FAST                1 (nums)
             28 CALL_FUNCTION            1
             30 LOAD_CONST               4 (2)
             32 BINARY_FLOOR_DIVIDE
             34 STORE_FAST               3 (mid)

 33          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              1 (sortArray)
             40 LOAD_FAST                1 (nums)
             42 LOAD_CONST               0 (None)
             44 LOAD_FAST                3 (mid)
             46 BUILD_SLICE              2
             48 BINARY_SUBSCR
             50 CALL_METHOD              1
             52 STORE_FAST               4 (leftarray)

 34          54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              1 (sortArray)
             58 LOAD_FAST                1 (nums)
             60 LOAD_FAST                3 (mid)
             62 LOAD_CONST               0 (None)
             64 BUILD_SLICE              2
             66 BINARY_SUBSCR
             68 CALL_METHOD              1
             70 STORE_FAST               5 (rightarray)

 35          72 LOAD_FAST                2 (merge)
             74 LOAD_FAST                4 (leftarray)
             76 LOAD_FAST                5 (rightarray)
             78 CALL_FUNCTION            2
             80 RETURN_VALUE

Disassembly of <code object merge at 0x7f2d9ace5240, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (left)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 STORE_FAST               2 (l)

  9          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (right)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBTRACT
             22 STORE_FAST               3 (r)

 10          24 LOAD_FAST                2 (l)
             26 LOAD_FAST                3 (r)
             28 BINARY_ADD
             30 LOAD_CONST               1 (1)
             32 BINARY_ADD
             34 STORE_FAST               4 (end)

 12          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                3 (r)
             40 LOAD_CONST               1 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                14 (to 64)
             50 STORE_FAST               5 (_)

 13          52 LOAD_FAST                0 (left)
             54 LOAD_METHOD              2 (append)
             56 LOAD_CONST               0 (None)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           48

 15     >>   64 LOAD_FAST                2 (l)
             66 LOAD_CONST               2 (0)
             68 COMPARE_OP               5 (>=)
             70 POP_JUMP_IF_FALSE      148
             72 LOAD_FAST                3 (r)
             74 LOAD_CONST               2 (0)
             76 COMPARE_OP               5 (>=)
             78 POP_JUMP_IF_FALSE      148

 16          80 LOAD_FAST                0 (left)
             82 LOAD_FAST                2 (l)
             84 BINARY_SUBSCR
             86 LOAD_FAST                1 (right)
             88 LOAD_FAST                3 (r)
             90 BINARY_SUBSCR
             92 COMPARE_OP               5 (>=)
             94 POP_JUMP_IF_FALSE      118

 17          96 LOAD_FAST                0 (left)
             98 LOAD_FAST                2 (l)
            100 BINARY_SUBSCR
            102 LOAD_FAST                0 (left)
            104 LOAD_FAST                4 (end)
            106 STORE_SUBSCR

 18         108 LOAD_FAST                2 (l)
            110 LOAD_CONST               1 (1)
            112 INPLACE_SUBTRACT
            114 STORE_FAST               2 (l)
            116 JUMP_FORWARD            20 (to 138)

 20     >>  118 LOAD_FAST                1 (right)
            120 LOAD_FAST                3 (r)
            122 BINARY_SUBSCR
            124 LOAD_FAST                0 (left)
            126 LOAD_FAST                4 (end)
            128 STORE_SUBSCR

 21         130 LOAD_FAST                3 (r)
            132 LOAD_CONST               1 (1)
            134 INPLACE_SUBTRACT
            136 STORE_FAST               3 (r)

 22     >>  138 LOAD_FAST                4 (end)
            140 LOAD_CONST               1 (1)
            142 INPLACE_SUBTRACT
            144 STORE_FAST               4 (end)
            146 JUMP_ABSOLUTE           64

 23     >>  148 LOAD_FAST                2 (l)
            150 LOAD_CONST               3 (-1)
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      186

 24         156 LOAD_GLOBAL              1 (range)
            158 LOAD_FAST                3 (r)
            160 LOAD_CONST               1 (1)
            162 BINARY_ADD
            164 CALL_FUNCTION            1
            166 GET_ITER
        >>  168 FOR_ITER                16 (to 186)
            170 STORE_FAST               5 (_)

 25         172 LOAD_FAST                1 (right)
            174 LOAD_FAST                5 (_)
            176 BINARY_SUBSCR
            178 LOAD_FAST                0 (left)
            180 LOAD_FAST                5 (_)
            182 STORE_SUBSCR
            184 JUMP_ABSOLUTE          168

 27     >>  186 LOAD_FAST                0 (left)
            188 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        def heapify(nums, n, i):
            # 
            if i > n: return
            largest = i
            l = 2*i+1
            r = 2*i+2

            if l < n and nums[l] > nums[largest]:largest = l
            if r < n and nums[r] > nums[largest]:largest = r
            # swap the largest element with the parent node of the tree
            if largest != i: 
                nums[i], nums[largest] = nums[largest],nums[i]
                heapify(nums, n, largest) # 
        
        
        def build_heap(nums):
            n = len(nums)
            lastNode = n-1
            lastParent = (lastNode-1)//2
            for i in range(lastParent+1)[::-1]:
                heapify(nums, n, i)
        build_heap(nums)

        def heap_sort(nums):
            n = len(nums)
            for i in range(n)[::-1]:
                nums[0],nums[i]=nums[i],nums[0]
                heapify(nums, i, 0)
        heap_sort(nums)

        return nums
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f18a1545500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f18a1545500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f18a1545450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f18a1545450, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (heapify)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object heapify at 0x7f18a1545240, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.sortArray.<locals>.heapify')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (heapify)

 18          12 LOAD_CLOSURE             0 (heapify)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               3 (<code object build_heap at 0x7f18a15452f0, file ""<ast>"", line 18>)
             18 LOAD_CONST               4 ('Solution.sortArray.<locals>.build_heap')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_FAST               2 (build_heap)

 24          24 LOAD_FAST                2 (build_heap)
             26 LOAD_FAST                1 (nums)
             28 CALL_FUNCTION            1
             30 POP_TOP

 26          32 LOAD_CLOSURE             0 (heapify)
             34 BUILD_TUPLE              1
             36 LOAD_CONST               5 (<code object heap_sort at 0x7f18a15453a0, file ""<ast>"", line 26>)
             38 LOAD_CONST               6 ('Solution.sortArray.<locals>.heap_sort')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_FAST               3 (heap_sort)

 31          44 LOAD_FAST                3 (heap_sort)
             46 LOAD_FAST                1 (nums)
             48 CALL_FUNCTION            1
             50 POP_TOP

 33          52 LOAD_FAST                1 (nums)
             54 RETURN_VALUE

Disassembly of <code object heapify at 0x7f18a1545240, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                2 (i)
              2 LOAD_FAST                1 (n)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (i)
             14 STORE_FAST               3 (largest)

  7          16 LOAD_CONST               1 (2)
             18 LOAD_FAST                2 (i)
             20 BINARY_MULTIPLY
             22 LOAD_CONST               2 (1)
             24 BINARY_ADD
             26 STORE_FAST               4 (l)

  8          28 LOAD_CONST               1 (2)
             30 LOAD_FAST                2 (i)
             32 BINARY_MULTIPLY
             34 LOAD_CONST               1 (2)
             36 BINARY_ADD
             38 STORE_FAST               5 (r)

 10          40 LOAD_FAST                4 (l)
             42 LOAD_FAST                1 (n)
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       68
             48 LOAD_FAST                0 (nums)
             50 LOAD_FAST                4 (l)
             52 BINARY_SUBSCR
             54 LOAD_FAST                0 (nums)
             56 LOAD_FAST                3 (largest)
             58 BINARY_SUBSCR
             60 COMPARE_OP               4 (>)
             62 POP_JUMP_IF_FALSE       68
             64 LOAD_FAST                4 (l)
             66 STORE_FAST               3 (largest)

 11     >>   68 LOAD_FAST                5 (r)
             70 LOAD_FAST                1 (n)
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE       96
             76 LOAD_FAST                0 (nums)
             78 LOAD_FAST                5 (r)
             80 BINARY_SUBSCR
             82 LOAD_FAST                0 (nums)
             84 LOAD_FAST                3 (largest)
             86 BINARY_SUBSCR
             88 COMPARE_OP               4 (>)
             90 POP_JUMP_IF_FALSE       96
             92 LOAD_FAST                5 (r)
             94 STORE_FAST               3 (largest)

 13     >>   96 LOAD_FAST                3 (largest)
             98 LOAD_FAST                2 (i)
            100 COMPARE_OP               3 (!=)
            102 POP_JUMP_IF_FALSE      142

 14         104 LOAD_FAST                0 (nums)
            106 LOAD_FAST                3 (largest)
            108 BINARY_SUBSCR
            110 LOAD_FAST                0 (nums)
            112 LOAD_FAST                2 (i)
            114 BINARY_SUBSCR
            116 ROT_TWO
            118 LOAD_FAST                0 (nums)
            120 LOAD_FAST                2 (i)
            122 STORE_SUBSCR
            124 LOAD_FAST                0 (nums)
            126 LOAD_FAST                3 (largest)
            128 STORE_SUBSCR

 15         130 LOAD_DEREF               0 (heapify)
            132 LOAD_FAST                0 (nums)
            134 LOAD_FAST                1 (n)
            136 LOAD_FAST                3 (largest)
            138 CALL_FUNCTION            3
            140 POP_TOP
        >>  142 LOAD_CONST               0 (None)
            144 RETURN_VALUE

Disassembly of <code object build_heap at 0x7f18a15452f0, file ""<ast>"", line 18>:
 19           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (n)

 20           8 LOAD_FAST                1 (n)
             10 LOAD_CONST               1 (1)
             12 BINARY_SUBTRACT
             14 STORE_FAST               2 (lastNode)

 21          16 LOAD_FAST                2 (lastNode)
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               2 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               3 (lastParent)

 22          28 LOAD_GLOBAL              1 (range)
             30 LOAD_FAST                3 (lastParent)
             32 LOAD_CONST               1 (1)
             34 BINARY_ADD
             36 CALL_FUNCTION            1
             38 LOAD_CONST               0 (None)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               3 (-1)
             44 BUILD_SLICE              3
             46 BINARY_SUBSCR
             48 GET_ITER
        >>   50 FOR_ITER                16 (to 68)
             52 STORE_FAST               4 (i)

 23          54 LOAD_DEREF               0 (heapify)
             56 LOAD_FAST                0 (nums)
             58 LOAD_FAST                1 (n)
             60 LOAD_FAST                4 (i)
             62 CALL_FUNCTION            3
             64 POP_TOP
             66 JUMP_ABSOLUTE           50
        >>   68 LOAD_CONST               0 (None)
             70 RETURN_VALUE

Disassembly of <code object heap_sort at 0x7f18a15453a0, file ""<ast>"", line 26>:
 27           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (n)

 28           8 LOAD_GLOBAL              1 (range)
             10 LOAD_FAST                1 (n)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               1 (-1)
             20 BUILD_SLICE              3
             22 BINARY_SUBSCR
             24 GET_ITER
        >>   26 FOR_ITER                42 (to 70)
             28 STORE_FAST               2 (i)

 29          30 LOAD_FAST                0 (nums)
             32 LOAD_FAST                2 (i)
             34 BINARY_SUBSCR
             36 LOAD_FAST                0 (nums)
             38 LOAD_CONST               2 (0)
             40 BINARY_SUBSCR
             42 ROT_TWO
             44 LOAD_FAST                0 (nums)
             46 LOAD_CONST               2 (0)
             48 STORE_SUBSCR
             50 LOAD_FAST                0 (nums)
             52 LOAD_FAST                2 (i)
             54 STORE_SUBSCR

 30          56 LOAD_DEREF               0 (heapify)
             58 LOAD_FAST                0 (nums)
             60 LOAD_FAST                2 (i)
             62 LOAD_CONST               2 (0)
             64 CALL_FUNCTION            3
             66 POP_TOP
             68 JUMP_ABSOLUTE           26
        >>   70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        count = [0]*100000
        for num in nums:
            count[num+50000] += 1 # count the number of times we see the number
        nums = []
        for i,counter in enumerate(count):
            for _ in range(counter):
                nums.append(i-50000) # this line runs at most n times total
        return nums
    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0e705e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0e705e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f0e705e5240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f0e705e5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_CONST               2 (100000)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (count)

  4          10 LOAD_FAST                1 (nums)
             12 GET_ITER
        >>   14 FOR_ITER                24 (to 40)
             16 STORE_FAST               3 (num)

  5          18 LOAD_FAST                2 (count)
             20 LOAD_FAST                3 (num)
             22 LOAD_CONST               3 (50000)
             24 BINARY_ADD
             26 DUP_TOP_TWO
             28 BINARY_SUBSCR
             30 LOAD_CONST               4 (1)
             32 INPLACE_ADD
             34 ROT_THREE
             36 STORE_SUBSCR
             38 JUMP_ABSOLUTE           14

  6     >>   40 BUILD_LIST               0
             42 STORE_FAST               1 (nums)

  7          44 LOAD_GLOBAL              0 (enumerate)
             46 LOAD_FAST                2 (count)
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 UNPACK_SEQUENCE          2
             56 STORE_FAST               4 (i)
             58 STORE_FAST               5 (counter)

  8          60 LOAD_GLOBAL              1 (range)
             62 LOAD_FAST                5 (counter)
             64 CALL_FUNCTION            1
             66 GET_ITER
        >>   68 FOR_ITER                18 (to 88)
             70 STORE_FAST               6 (_)

  9          72 LOAD_FAST                1 (nums)
             74 LOAD_METHOD              2 (append)
             76 LOAD_FAST                4 (i)
             78 LOAD_CONST               3 (50000)
             80 BINARY_SUBTRACT
             82 CALL_METHOD              1
             84 POP_TOP
             86 JUMP_ABSOLUTE           68
        >>   88 JUMP_ABSOLUTE           52

 10     >>   90 LOAD_FAST                1 (nums)
             92 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        block_size = 1;
        while block_size <= len(nums):
            for l in range(0, len(nums), block_size * 2):
                r = min((l + (2 * block_size)), len(nums));
                mid = l + block_size;
                
                L = nums[l:mid];
                R = nums[mid:r];
                
                srt = [];
                i = j = 0;
                
                while i < len(L) and j < len(R):
                    if L[i] <= R[j]:
                        srt.append(L[i]);
                        i += 1;
                    else:
                        srt.append(R[j]);
                        j += 1;
                while i < len(L):
                    srt.append(L[i]);
                    i += 1;
                while j < len(R):
                    srt.append(R[j]);
                    j += 1;
                nums[l:r] = srt;
            block_size = block_size * 2;
        return nums;
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0e32b152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0e32b152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f0e32b15240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f0e32b15240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (block_size)

  4     >>    4 LOAD_FAST                2 (block_size)
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               1 (<=)
             14 EXTENDED_ARG             1
             16 POP_JUMP_IF_FALSE      294

  5          18 LOAD_GLOBAL              1 (range)
             20 LOAD_CONST               2 (0)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (block_size)
             30 LOAD_CONST               3 (2)
             32 BINARY_MULTIPLY
             34 CALL_FUNCTION            3
             36 GET_ITER
        >>   38 FOR_ITER               244 (to 284)
             40 STORE_FAST               3 (l)

  6          42 LOAD_GLOBAL              2 (min)
             44 LOAD_FAST                3 (l)
             46 LOAD_CONST               3 (2)
             48 LOAD_FAST                2 (block_size)
             50 BINARY_MULTIPLY
             52 BINARY_ADD
             54 LOAD_GLOBAL              0 (len)
             56 LOAD_FAST                1 (nums)
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            2
             62 STORE_FAST               4 (r)

  7          64 LOAD_FAST                3 (l)
             66 LOAD_FAST                2 (block_size)
             68 BINARY_ADD
             70 STORE_FAST               5 (mid)

  9          72 LOAD_FAST                1 (nums)
             74 LOAD_FAST                3 (l)
             76 LOAD_FAST                5 (mid)
             78 BUILD_SLICE              2
             80 BINARY_SUBSCR
             82 STORE_FAST               6 (L)

 10          84 LOAD_FAST                1 (nums)
             86 LOAD_FAST                5 (mid)
             88 LOAD_FAST                4 (r)
             90 BUILD_SLICE              2
             92 BINARY_SUBSCR
             94 STORE_FAST               7 (R)

 12          96 BUILD_LIST               0
             98 STORE_FAST               8 (srt)

 13         100 LOAD_CONST               2 (0)
            102 DUP_TOP
            104 STORE_FAST               9 (i)
            106 STORE_FAST              10 (j)

 15     >>  108 LOAD_FAST                9 (i)
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                6 (L)
            114 CALL_FUNCTION            1
            116 COMPARE_OP               0 (<)
            118 POP_JUMP_IF_FALSE      196
            120 LOAD_FAST               10 (j)
            122 LOAD_GLOBAL              0 (len)
            124 LOAD_FAST                7 (R)
            126 CALL_FUNCTION            1
            128 COMPARE_OP               0 (<)
            130 POP_JUMP_IF_FALSE      196

 16         132 LOAD_FAST                6 (L)
            134 LOAD_FAST                9 (i)
            136 BINARY_SUBSCR
            138 LOAD_FAST                7 (R)
            140 LOAD_FAST               10 (j)
            142 BINARY_SUBSCR
            144 COMPARE_OP               1 (<=)
            146 POP_JUMP_IF_FALSE      172

 17         148 LOAD_FAST                8 (srt)
            150 LOAD_METHOD              3 (append)
            152 LOAD_FAST                6 (L)
            154 LOAD_FAST                9 (i)
            156 BINARY_SUBSCR
            158 CALL_METHOD              1
            160 POP_TOP

 18         162 LOAD_FAST                9 (i)
            164 LOAD_CONST               1 (1)
            166 INPLACE_ADD
            168 STORE_FAST               9 (i)
            170 JUMP_ABSOLUTE          108

 20     >>  172 LOAD_FAST                8 (srt)
            174 LOAD_METHOD              3 (append)
            176 LOAD_FAST                7 (R)
            178 LOAD_FAST               10 (j)
            180 BINARY_SUBSCR
            182 CALL_METHOD              1
            184 POP_TOP

 21         186 LOAD_FAST               10 (j)
            188 LOAD_CONST               1 (1)
            190 INPLACE_ADD
            192 STORE_FAST              10 (j)
            194 JUMP_ABSOLUTE          108

 22     >>  196 LOAD_FAST                9 (i)
            198 LOAD_GLOBAL              0 (len)
            200 LOAD_FAST                6 (L)
            202 CALL_FUNCTION            1
            204 COMPARE_OP               0 (<)
            206 POP_JUMP_IF_FALSE      232

 23         208 LOAD_FAST                8 (srt)
            210 LOAD_METHOD              3 (append)
            212 LOAD_FAST                6 (L)
            214 LOAD_FAST                9 (i)
            216 BINARY_SUBSCR
            218 CALL_METHOD              1
            220 POP_TOP

 24         222 LOAD_FAST                9 (i)
            224 LOAD_CONST               1 (1)
            226 INPLACE_ADD
            228 STORE_FAST               9 (i)
            230 JUMP_ABSOLUTE          196

 25     >>  232 LOAD_FAST               10 (j)
            234 LOAD_GLOBAL              0 (len)
            236 LOAD_FAST                7 (R)
            238 CALL_FUNCTION            1
            240 COMPARE_OP               0 (<)
            242 EXTENDED_ARG             1
            244 POP_JUMP_IF_FALSE      270

 26         246 LOAD_FAST                8 (srt)
            248 LOAD_METHOD              3 (append)
            250 LOAD_FAST                7 (R)
            252 LOAD_FAST               10 (j)
            254 BINARY_SUBSCR
            256 CALL_METHOD              1
            258 POP_TOP

 27         260 LOAD_FAST               10 (j)
            262 LOAD_CONST               1 (1)
            264 INPLACE_ADD
            266 STORE_FAST              10 (j)
            268 JUMP_ABSOLUTE          232

 28     >>  270 LOAD_FAST                8 (srt)
            272 LOAD_FAST                1 (nums)
            274 LOAD_FAST                3 (l)
            276 LOAD_FAST                4 (r)
            278 BUILD_SLICE              2
            280 STORE_SUBSCR
            282 JUMP_ABSOLUTE           38

 29     >>  284 LOAD_FAST                2 (block_size)
            286 LOAD_CONST               3 (2)
            288 BINARY_MULTIPLY
            290 STORE_FAST               2 (block_size)
            292 JUMP_ABSOLUTE            4

 30     >>  294 LOAD_FAST                1 (nums)
            296 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        
        nums = [[num] for num in nums]

        def merge(l1, l2):
            i = 0
            j = 0
            new = []
            
            while i < len(l1) and j < len(l2):
                if l1[i] < l2[j]:
                    new.append(l1[i])
                    i += 1
                else:
                    new.append(l2[j])
                    j += 1
                    
            while i < len(l1):
                new.append(l1[i])
                i += 1
                
            while j < len(l2):
                new.append(l2[j])
                j += 1
                
            return new

        
        while len(nums) > 1:
            new = []
            for i in range(0, len(nums), 2):
                if i + 1 < len(nums):
                    new_arr = merge(nums[i], nums[i+1])
                    new.append(new_arr)
                else:
                    new.append(nums[i])
            nums = new
            
        return nums[0]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9c12c953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9c12c953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f9c12c95500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f9c12c95500, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f9c12c95240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_FAST                1 (nums)
              8 GET_ITER
             10 CALL_FUNCTION            1
             12 STORE_FAST               1 (nums)

  6          14 LOAD_CONST               3 (<code object merge at 0x7f9c12c952f0, file ""<ast>"", line 6>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.merge')
             18 MAKE_FUNCTION            0
             20 STORE_FAST               2 (merge)

 30     >>   22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               5 (1)
             30 COMPARE_OP               4 (>)
             32 POP_JUMP_IF_FALSE      130

 31          34 BUILD_LIST               0
             36 STORE_FAST               3 (new)

 32          38 LOAD_GLOBAL              1 (range)
             40 LOAD_CONST               6 (0)
             42 LOAD_GLOBAL              0 (len)
             44 LOAD_FAST                1 (nums)
             46 CALL_FUNCTION            1
             48 LOAD_CONST               7 (2)
             50 CALL_FUNCTION            3
             52 GET_ITER
        >>   54 FOR_ITER                68 (to 124)
             56 STORE_FAST               4 (i)

 33          58 LOAD_FAST                4 (i)
             60 LOAD_CONST               5 (1)
             62 BINARY_ADD
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (nums)
             68 CALL_FUNCTION            1
             70 COMPARE_OP               0 (<)
             72 POP_JUMP_IF_FALSE      108

 34          74 LOAD_FAST                2 (merge)
             76 LOAD_FAST                1 (nums)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                1 (nums)
             84 LOAD_FAST                4 (i)
             86 LOAD_CONST               5 (1)
             88 BINARY_ADD
             90 BINARY_SUBSCR
             92 CALL_FUNCTION            2
             94 STORE_FAST               5 (new_arr)

 35          96 LOAD_FAST                3 (new)
             98 LOAD_METHOD              2 (append)
            100 LOAD_FAST                5 (new_arr)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           54

 37     >>  108 LOAD_FAST                3 (new)
            110 LOAD_METHOD              2 (append)
            112 LOAD_FAST                1 (nums)
            114 LOAD_FAST                4 (i)
            116 BINARY_SUBSCR
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           54

 38     >>  124 LOAD_FAST                3 (new)
            126 STORE_FAST               1 (nums)
            128 JUMP_ABSOLUTE           22

 40     >>  130 LOAD_FAST                1 (nums)
            132 LOAD_CONST               6 (0)
            134 BINARY_SUBSCR
            136 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f9c12c95240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 BUILD_LIST               1
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object merge at 0x7f9c12c952f0, file ""<ast>"", line 6>:
  7           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (i)

  8           4 LOAD_CONST               1 (0)
              6 STORE_FAST               3 (j)

  9           8 BUILD_LIST               0
             10 STORE_FAST               4 (new)

 11     >>   12 LOAD_FAST                2 (i)
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                0 (l1)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               0 (<)
             22 POP_JUMP_IF_FALSE      100
             24 LOAD_FAST                3 (j)
             26 LOAD_GLOBAL              0 (len)
             28 LOAD_FAST                1 (l2)
             30 CALL_FUNCTION            1
             32 COMPARE_OP               0 (<)
             34 POP_JUMP_IF_FALSE      100

 12          36 LOAD_FAST                0 (l1)
             38 LOAD_FAST                2 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (l2)
             44 LOAD_FAST                3 (j)
             46 BINARY_SUBSCR
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       76

 13          52 LOAD_FAST                4 (new)
             54 LOAD_METHOD              1 (append)
             56 LOAD_FAST                0 (l1)
             58 LOAD_FAST                2 (i)
             60 BINARY_SUBSCR
             62 CALL_METHOD              1
             64 POP_TOP

 14          66 LOAD_FAST                2 (i)
             68 LOAD_CONST               2 (1)
             70 INPLACE_ADD
             72 STORE_FAST               2 (i)
             74 JUMP_ABSOLUTE           12

 16     >>   76 LOAD_FAST                4 (new)
             78 LOAD_METHOD              1 (append)
             80 LOAD_FAST                1 (l2)
             82 LOAD_FAST                3 (j)
             84 BINARY_SUBSCR
             86 CALL_METHOD              1
             88 POP_TOP

 17          90 LOAD_FAST                3 (j)
             92 LOAD_CONST               2 (1)
             94 INPLACE_ADD
             96 STORE_FAST               3 (j)
             98 JUMP_ABSOLUTE           12

 19     >>  100 LOAD_FAST                2 (i)
            102 LOAD_GLOBAL              0 (len)
            104 LOAD_FAST                0 (l1)
            106 CALL_FUNCTION            1
            108 COMPARE_OP               0 (<)
            110 POP_JUMP_IF_FALSE      136

 20         112 LOAD_FAST                4 (new)
            114 LOAD_METHOD              1 (append)
            116 LOAD_FAST                0 (l1)
            118 LOAD_FAST                2 (i)
            120 BINARY_SUBSCR
            122 CALL_METHOD              1
            124 POP_TOP

 21         126 LOAD_FAST                2 (i)
            128 LOAD_CONST               2 (1)
            130 INPLACE_ADD
            132 STORE_FAST               2 (i)
            134 JUMP_ABSOLUTE          100

 23     >>  136 LOAD_FAST                3 (j)
            138 LOAD_GLOBAL              0 (len)
            140 LOAD_FAST                1 (l2)
            142 CALL_FUNCTION            1
            144 COMPARE_OP               0 (<)
            146 POP_JUMP_IF_FALSE      172

 24         148 LOAD_FAST                4 (new)
            150 LOAD_METHOD              1 (append)
            152 LOAD_FAST                1 (l2)
            154 LOAD_FAST                3 (j)
            156 BINARY_SUBSCR
            158 CALL_METHOD              1
            160 POP_TOP

 25         162 LOAD_FAST                3 (j)
            164 LOAD_CONST               2 (1)
            166 INPLACE_ADD
            168 STORE_FAST               3 (j)
            170 JUMP_ABSOLUTE          136

 27     >>  172 LOAD_FAST                4 (new)
            174 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
	
        if len(nums) <=1: return nums
        less , greater , base = [] , [] , nums.pop()
        for i in nums:
            if i < base: less.append(i)
            else: greater.append(i)
        return self.sortArray(less) + [base] + self.sortArray(greater)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe143955240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe143955240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fe1439552f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fe1439552f0, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_FAST                1 (nums)
             14 RETURN_VALUE

  5     >>   16 BUILD_LIST               0
             18 BUILD_LIST               0
             20 LOAD_FAST                1 (nums)
             22 LOAD_METHOD              1 (pop)
             24 CALL_METHOD              0
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_FAST               2 (less)
             32 STORE_FAST               3 (greater)
             34 STORE_FAST               4 (base)

  6          36 LOAD_FAST                1 (nums)
             38 GET_ITER
        >>   40 FOR_ITER                34 (to 76)
             42 STORE_FAST               5 (i)

  7          44 LOAD_FAST                5 (i)
             46 LOAD_FAST                4 (base)
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       64
             52 LOAD_FAST                2 (less)
             54 LOAD_METHOD              2 (append)
             56 LOAD_FAST                5 (i)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           40

  8     >>   64 LOAD_FAST                3 (greater)
             66 LOAD_METHOD              2 (append)
             68 LOAD_FAST                5 (i)
             70 CALL_METHOD              1
             72 POP_TOP
             74 JUMP_ABSOLUTE           40

  9     >>   76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              3 (sortArray)
             80 LOAD_FAST                2 (less)
             82 CALL_METHOD              1
             84 LOAD_FAST                4 (base)
             86 BUILD_LIST               1
             88 BINARY_ADD
             90 LOAD_FAST                0 (self)
             92 LOAD_METHOD              3 (sortArray)
             94 LOAD_FAST                3 (greater)
             96 CALL_METHOD              1
             98 BINARY_ADD
            100 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.index(needle) if needle in haystack else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6a454c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6a454c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f6a454c5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f6a454c5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_FAST                1 (haystack)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       18
              8 LOAD_FAST                1 (haystack)
             10 LOAD_METHOD              0 (index)
             12 LOAD_FAST                2 (needle)
             14 CALL_METHOD              1
             16 RETURN_VALUE
        >>   18 LOAD_CONST               1 (-1)
             20 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        ind=0
        if needle=="""":
            return 0
        elif haystack=="""":
            return -1
        elif needle in haystack:
            for index in range(0, len(haystack)):
                if haystack[index]==needle[0]:
                    ind, ind1=0, index
                    while True: 
                        if ind>=len(needle):
                            return index
                        elif haystack[ind1] != needle[ind]:
                            break
                        ind1 += 1
                        ind += 1
        else:
             return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f60f67652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f60f67652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f60f6765240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f60f6765240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (ind)

  4           4 LOAD_FAST                2 (needle)
              6 LOAD_CONST               2 ('')
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  5          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  6     >>   16 LOAD_FAST                1 (haystack)
             18 LOAD_CONST               2 ('')
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               3 (-1)
             26 RETURN_VALUE

  8     >>   28 LOAD_FAST                2 (needle)
             30 LOAD_FAST                1 (haystack)
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_FALSE      140

  9          36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               1 (0)
             40 LOAD_GLOBAL              1 (len)
             42 LOAD_FAST                1 (haystack)
             44 CALL_FUNCTION            1
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                86 (to 138)
             52 STORE_FAST               4 (index)

 10          54 LOAD_FAST                1 (haystack)
             56 LOAD_FAST                4 (index)
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (needle)
             62 LOAD_CONST               1 (0)
             64 BINARY_SUBSCR
             66 COMPARE_OP               2 (==)
             68 POP_JUMP_IF_FALSE       50

 11          70 LOAD_CONST               1 (0)
             72 LOAD_FAST                4 (index)
             74 ROT_TWO
             76 STORE_FAST               3 (ind)
             78 STORE_FAST               5 (ind1)

 13     >>   80 LOAD_FAST                3 (ind)
             82 LOAD_GLOBAL              1 (len)
             84 LOAD_FAST                2 (needle)
             86 CALL_FUNCTION            1
             88 COMPARE_OP               5 (>=)
             90 POP_JUMP_IF_FALSE      100

 14          92 LOAD_FAST                4 (index)
             94 ROT_TWO
             96 POP_TOP
             98 RETURN_VALUE

 15     >>  100 LOAD_FAST                1 (haystack)
            102 LOAD_FAST                5 (ind1)
            104 BINARY_SUBSCR
            106 LOAD_FAST                2 (needle)
            108 LOAD_FAST                3 (ind)
            110 BINARY_SUBSCR
            112 COMPARE_OP               3 (!=)
            114 POP_JUMP_IF_FALSE      118

 16         116 JUMP_ABSOLUTE           50

 17     >>  118 LOAD_FAST                5 (ind1)
            120 LOAD_CONST               4 (1)
            122 INPLACE_ADD
            124 STORE_FAST               5 (ind1)

 18         126 LOAD_FAST                3 (ind)
            128 LOAD_CONST               4 (1)
            130 INPLACE_ADD
            132 STORE_FAST               3 (ind)
            134 JUMP_ABSOLUTE           80
            136 JUMP_ABSOLUTE           50
        >>  138 JUMP_FORWARD             4 (to 144)

 20     >>  140 LOAD_CONST               3 (-1)
            142 RETURN_VALUE
        >>  144 LOAD_CONST               0 (None)
            146 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if text==pat:
            return 0
        if pat=="""":
            return 0
        def patlps(pat,lps,m):
            left=0
            i=1
            while i<m:
                if pat[left]==pat[i]:
                    left+=1
                    lps[i]=left
                    i+=1
                else:
                    if left!=0:
                        left=lps[left-1]
                    else:
                        lps[i]=0
                        i+=1
        n=len(text)
        m=len(pat)
        lps=[0]*m
        patlps(pat,lps,m)
        j=0
        i=0
        while i<n:
            if pat[j]==text[i]:
                i+=1
                j+=1
            if j==m:
                return i-j
            elif i<n and pat[j]!=text[i]:
                if j!=0:
                    j=lps[j-1]
                else:
                    i+=1
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6fed8753a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6fed8753a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f6fed875240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f6fed875240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (text)
              2 LOAD_FAST                2 (pat)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                2 (pat)
             14 LOAD_CONST               2 ('')
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               1 (0)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               3 (<code object patlps at 0x7f6fed8752f0, file ""<ast>"", line 7>)
             26 LOAD_CONST               4 ('Solution.strStr.<locals>.patlps')
             28 MAKE_FUNCTION            0
             30 STORE_FAST               3 (patlps)

 21          32 LOAD_GLOBAL              0 (len)
             34 LOAD_FAST                1 (text)
             36 CALL_FUNCTION            1
             38 STORE_FAST               4 (n)

 22          40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                2 (pat)
             44 CALL_FUNCTION            1
             46 STORE_FAST               5 (m)

 23          48 LOAD_CONST               1 (0)
             50 BUILD_LIST               1
             52 LOAD_FAST                5 (m)
             54 BINARY_MULTIPLY
             56 STORE_FAST               6 (lps)

 24          58 LOAD_FAST                3 (patlps)
             60 LOAD_FAST                2 (pat)
             62 LOAD_FAST                6 (lps)
             64 LOAD_FAST                5 (m)
             66 CALL_FUNCTION            3
             68 POP_TOP

 25          70 LOAD_CONST               1 (0)
             72 STORE_FAST               7 (j)

 26          74 LOAD_CONST               1 (0)
             76 STORE_FAST               8 (i)

 27     >>   78 LOAD_FAST                8 (i)
             80 LOAD_FAST                4 (n)
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE      190

 28          86 LOAD_FAST                2 (pat)
             88 LOAD_FAST                7 (j)
             90 BINARY_SUBSCR
             92 LOAD_FAST                1 (text)
             94 LOAD_FAST                8 (i)
             96 BINARY_SUBSCR
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE      118

 29         102 LOAD_FAST                8 (i)
            104 LOAD_CONST               5 (1)
            106 INPLACE_ADD
            108 STORE_FAST               8 (i)

 30         110 LOAD_FAST                7 (j)
            112 LOAD_CONST               5 (1)
            114 INPLACE_ADD
            116 STORE_FAST               7 (j)

 31     >>  118 LOAD_FAST                7 (j)
            120 LOAD_FAST                5 (m)
            122 COMPARE_OP               2 (==)
            124 POP_JUMP_IF_FALSE      134

 32         126 LOAD_FAST                8 (i)
            128 LOAD_FAST                7 (j)
            130 BINARY_SUBTRACT
            132 RETURN_VALUE

 33     >>  134 LOAD_FAST                8 (i)
            136 LOAD_FAST                4 (n)
            138 COMPARE_OP               0 (<)
            140 POP_JUMP_IF_FALSE       78
            142 LOAD_FAST                2 (pat)
            144 LOAD_FAST                7 (j)
            146 BINARY_SUBSCR
            148 LOAD_FAST                1 (text)
            150 LOAD_FAST                8 (i)
            152 BINARY_SUBSCR
            154 COMPARE_OP               3 (!=)
            156 POP_JUMP_IF_FALSE       78

 34         158 LOAD_FAST                7 (j)
            160 LOAD_CONST               1 (0)
            162 COMPARE_OP               3 (!=)
            164 POP_JUMP_IF_FALSE      180

 35         166 LOAD_FAST                6 (lps)
            168 LOAD_FAST                7 (j)
            170 LOAD_CONST               5 (1)
            172 BINARY_SUBTRACT
            174 BINARY_SUBSCR
            176 STORE_FAST               7 (j)
            178 JUMP_ABSOLUTE           78

 37     >>  180 LOAD_FAST                8 (i)
            182 LOAD_CONST               5 (1)
            184 INPLACE_ADD
            186 STORE_FAST               8 (i)
            188 JUMP_ABSOLUTE           78

 38     >>  190 LOAD_CONST               6 (-1)
            192 RETURN_VALUE

Disassembly of <code object patlps at 0x7f6fed8752f0, file ""<ast>"", line 7>:
  8           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (left)

  9           4 LOAD_CONST               2 (1)
              6 STORE_FAST               4 (i)

 10     >>    8 LOAD_FAST                4 (i)
             10 LOAD_FAST                2 (m)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       98

 11          16 LOAD_FAST                0 (pat)
             18 LOAD_FAST                3 (left)
             20 BINARY_SUBSCR
             22 LOAD_FAST                0 (pat)
             24 LOAD_FAST                4 (i)
             26 BINARY_SUBSCR
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       58

 12          32 LOAD_FAST                3 (left)
             34 LOAD_CONST               2 (1)
             36 INPLACE_ADD
             38 STORE_FAST               3 (left)

 13          40 LOAD_FAST                3 (left)
             42 LOAD_FAST                1 (lps)
             44 LOAD_FAST                4 (i)
             46 STORE_SUBSCR

 14          48 LOAD_FAST                4 (i)
             50 LOAD_CONST               2 (1)
             52 INPLACE_ADD
             54 STORE_FAST               4 (i)
             56 JUMP_ABSOLUTE            8

 16     >>   58 LOAD_FAST                3 (left)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               3 (!=)
             64 POP_JUMP_IF_FALSE       80

 17          66 LOAD_FAST                1 (lps)
             68 LOAD_FAST                3 (left)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 BINARY_SUBSCR
             76 STORE_FAST               3 (left)
             78 JUMP_ABSOLUTE            8

 19     >>   80 LOAD_CONST               1 (0)
             82 LOAD_FAST                1 (lps)
             84 LOAD_FAST                4 (i)
             86 STORE_SUBSCR

 20          88 LOAD_FAST                4 (i)
             90 LOAD_CONST               2 (1)
             92 INPLACE_ADD
             94 STORE_FAST               4 (i)
             96 JUMP_ABSOLUTE            8
        >>   98 LOAD_CONST               0 (None)
            100 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if pat=="""":
            return 0
        
        con=pat+""$""+text
        left=0
        right=0
        k=0
        n=len(con)
        z=[0]*n
        for i in range(1,n):
            if right<i:
                left,right=i,i
                while right<n and con[right-left]==con[right]:
                    right+=1
                z[i]=right-left
                right-=1
            else:
                k=i-left
                if z[k]<right-i+1:
                    z[i]=z[k]
                else:
                    left=i
                    while right<n and con[right-left]==con[right]:
                        right+=1
                    z[i]=right-left
                    right-=1 
        for i in range(n):
            if z[i]==len(pat):
                return i-len(pat)-1
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f12b83952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f12b83952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f12b8395240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f12b8395240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (pat)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (pat)
             14 LOAD_CONST               3 ('$')
             16 BINARY_ADD
             18 LOAD_FAST                1 (text)
             20 BINARY_ADD
             22 STORE_FAST               3 (con)

  7          24 LOAD_CONST               2 (0)
             26 STORE_FAST               4 (left)

  8          28 LOAD_CONST               2 (0)
             30 STORE_FAST               5 (right)

  9          32 LOAD_CONST               2 (0)
             34 STORE_FAST               6 (k)

 10          36 LOAD_GLOBAL              0 (len)
             38 LOAD_FAST                3 (con)
             40 CALL_FUNCTION            1
             42 STORE_FAST               7 (n)

 11          44 LOAD_CONST               2 (0)
             46 BUILD_LIST               1
             48 LOAD_FAST                7 (n)
             50 BINARY_MULTIPLY
             52 STORE_FAST               8 (z)

 12          54 LOAD_GLOBAL              1 (range)
             56 LOAD_CONST               4 (1)
             58 LOAD_FAST                7 (n)
             60 CALL_FUNCTION            2
             62 GET_ITER
        >>   64 FOR_ITER               186 (to 252)
             66 STORE_FAST               9 (i)

 13          68 LOAD_FAST                5 (right)
             70 LOAD_FAST                9 (i)
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE      146

 14          76 LOAD_FAST                9 (i)
             78 LOAD_FAST                9 (i)
             80 ROT_TWO
             82 STORE_FAST               4 (left)
             84 STORE_FAST               5 (right)

 15     >>   86 LOAD_FAST                5 (right)
             88 LOAD_FAST                7 (n)
             90 COMPARE_OP               0 (<)
             92 POP_JUMP_IF_FALSE      124
             94 LOAD_FAST                3 (con)
             96 LOAD_FAST                5 (right)
             98 LOAD_FAST                4 (left)
            100 BINARY_SUBTRACT
            102 BINARY_SUBSCR
            104 LOAD_FAST                3 (con)
            106 LOAD_FAST                5 (right)
            108 BINARY_SUBSCR
            110 COMPARE_OP               2 (==)
            112 POP_JUMP_IF_FALSE      124

 16         114 LOAD_FAST                5 (right)
            116 LOAD_CONST               4 (1)
            118 INPLACE_ADD
            120 STORE_FAST               5 (right)
            122 JUMP_ABSOLUTE           86

 17     >>  124 LOAD_FAST                5 (right)
            126 LOAD_FAST                4 (left)
            128 BINARY_SUBTRACT
            130 LOAD_FAST                8 (z)
            132 LOAD_FAST                9 (i)
            134 STORE_SUBSCR

 18         136 LOAD_FAST                5 (right)
            138 LOAD_CONST               4 (1)
            140 INPLACE_SUBTRACT
            142 STORE_FAST               5 (right)
            144 JUMP_ABSOLUTE           64

 20     >>  146 LOAD_FAST                9 (i)
            148 LOAD_FAST                4 (left)
            150 BINARY_SUBTRACT
            152 STORE_FAST               6 (k)

 21         154 LOAD_FAST                8 (z)
            156 LOAD_FAST                6 (k)
            158 BINARY_SUBSCR
            160 LOAD_FAST                5 (right)
            162 LOAD_FAST                9 (i)
            164 BINARY_SUBTRACT
            166 LOAD_CONST               4 (1)
            168 BINARY_ADD
            170 COMPARE_OP               0 (<)
            172 POP_JUMP_IF_FALSE      188

 22         174 LOAD_FAST                8 (z)
            176 LOAD_FAST                6 (k)
            178 BINARY_SUBSCR
            180 LOAD_FAST                8 (z)
            182 LOAD_FAST                9 (i)
            184 STORE_SUBSCR
            186 JUMP_ABSOLUTE           64

 24     >>  188 LOAD_FAST                9 (i)
            190 STORE_FAST               4 (left)

 25     >>  192 LOAD_FAST                5 (right)
            194 LOAD_FAST                7 (n)
            196 COMPARE_OP               0 (<)
            198 POP_JUMP_IF_FALSE      230
            200 LOAD_FAST                3 (con)
            202 LOAD_FAST                5 (right)
            204 LOAD_FAST                4 (left)
            206 BINARY_SUBTRACT
            208 BINARY_SUBSCR
            210 LOAD_FAST                3 (con)
            212 LOAD_FAST                5 (right)
            214 BINARY_SUBSCR
            216 COMPARE_OP               2 (==)
            218 POP_JUMP_IF_FALSE      230

 26         220 LOAD_FAST                5 (right)
            222 LOAD_CONST               4 (1)
            224 INPLACE_ADD
            226 STORE_FAST               5 (right)
            228 JUMP_ABSOLUTE          192

 27     >>  230 LOAD_FAST                5 (right)
            232 LOAD_FAST                4 (left)
            234 BINARY_SUBTRACT
            236 LOAD_FAST                8 (z)
            238 LOAD_FAST                9 (i)
            240 STORE_SUBSCR

 28         242 LOAD_FAST                5 (right)
            244 LOAD_CONST               4 (1)
            246 INPLACE_SUBTRACT
            248 STORE_FAST               5 (right)
            250 JUMP_ABSOLUTE           64

 29     >>  252 LOAD_GLOBAL              1 (range)
            254 LOAD_FAST                7 (n)
            256 CALL_FUNCTION            1
            258 GET_ITER
        >>  260 FOR_ITER                44 (to 306)
            262 STORE_FAST               9 (i)

 30         264 LOAD_FAST                8 (z)
            266 LOAD_FAST                9 (i)
            268 BINARY_SUBSCR
            270 LOAD_GLOBAL              0 (len)
            272 LOAD_FAST                2 (pat)
            274 CALL_FUNCTION            1
            276 COMPARE_OP               2 (==)
            278 EXTENDED_ARG             1
            280 POP_JUMP_IF_FALSE      260

 31         282 LOAD_FAST                9 (i)
            284 LOAD_GLOBAL              0 (len)
            286 LOAD_FAST                2 (pat)
            288 CALL_FUNCTION            1
            290 BINARY_SUBTRACT
            292 LOAD_CONST               4 (1)
            294 BINARY_SUBTRACT
            296 ROT_TWO
            298 POP_TOP
            300 RETURN_VALUE
            302 EXTENDED_ARG             1
            304 JUMP_ABSOLUTE          260

 32     >>  306 LOAD_CONST               5 (-1)
            308 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if text==pat or pat=="""":
            return 0
        d=26 # no of char in input alphabet
        M=len(pat)
        N=len(text)
        if M>N:
            return -1
        q=5381 # any prime no to avoid hash collision ,greater will be effective
        i,j=0,0
        p=0 # hash value for pattern
        t=0 # hash value for text
        h=1
        # The value of h would be ""pow(d, M-1)%q"" 
        for i in range(M-1): 
            h = (h*d)%q 
        for i in range(M):
            p=(d*p+ord(pat[i]))%q
            t=(d*t+ord(text[i]))%q
        for i in range(N-M+1):
            if p==t:
                for j in range(M):
                    if text[i+j]!=pat[j]:
                        break
                j+=1
                if j==M:
                    return i
            if i < N-M: 
                t = (d*(t-ord(text[i])*h) + ord(text[i+M]))%q 
                if t < 0: 
                    t = t+q 
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9fc74a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9fc74a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f9fc74a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f9fc74a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (text)
              2 LOAD_FAST                2 (pat)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                2 (pat)
             10 LOAD_CONST               1 ('')
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (0)
             18 RETURN_VALUE

  5     >>   20 LOAD_CONST               3 (26)
             22 STORE_FAST               3 (d)

  6          24 LOAD_GLOBAL              0 (len)
             26 LOAD_FAST                2 (pat)
             28 CALL_FUNCTION            1
             30 STORE_FAST               4 (M)

  7          32 LOAD_GLOBAL              0 (len)
             34 LOAD_FAST                1 (text)
             36 CALL_FUNCTION            1
             38 STORE_FAST               5 (N)

  8          40 LOAD_FAST                4 (M)
             42 LOAD_FAST                5 (N)
             44 COMPARE_OP               4 (>)
             46 POP_JUMP_IF_FALSE       52

  9          48 LOAD_CONST               4 (-1)
             50 RETURN_VALUE

 10     >>   52 LOAD_CONST               5 (5381)
             54 STORE_FAST               6 (q)

 11          56 LOAD_CONST               6 ((0, 0))
             58 UNPACK_SEQUENCE          2
             60 STORE_FAST               7 (i)
             62 STORE_FAST               8 (j)

 12          64 LOAD_CONST               2 (0)
             66 STORE_FAST               9 (p)

 13          68 LOAD_CONST               2 (0)
             70 STORE_FAST              10 (t)

 14          72 LOAD_CONST               7 (1)
             74 STORE_FAST              11 (h)

 16          76 LOAD_GLOBAL              1 (range)
             78 LOAD_FAST                4 (M)
             80 LOAD_CONST               7 (1)
             82 BINARY_SUBTRACT
             84 CALL_FUNCTION            1
             86 GET_ITER
        >>   88 FOR_ITER                16 (to 106)
             90 STORE_FAST               7 (i)

 17          92 LOAD_FAST               11 (h)
             94 LOAD_FAST                3 (d)
             96 BINARY_MULTIPLY
             98 LOAD_FAST                6 (q)
            100 BINARY_MODULO
            102 STORE_FAST              11 (h)
            104 JUMP_ABSOLUTE           88

 18     >>  106 LOAD_GLOBAL              1 (range)
            108 LOAD_FAST                4 (M)
            110 CALL_FUNCTION            1
            112 GET_ITER
        >>  114 FOR_ITER                52 (to 168)
            116 STORE_FAST               7 (i)

 19         118 LOAD_FAST                3 (d)
            120 LOAD_FAST                9 (p)
            122 BINARY_MULTIPLY
            124 LOAD_GLOBAL              2 (ord)
            126 LOAD_FAST                2 (pat)
            128 LOAD_FAST                7 (i)
            130 BINARY_SUBSCR
            132 CALL_FUNCTION            1
            134 BINARY_ADD
            136 LOAD_FAST                6 (q)
            138 BINARY_MODULO
            140 STORE_FAST               9 (p)

 20         142 LOAD_FAST                3 (d)
            144 LOAD_FAST               10 (t)
            146 BINARY_MULTIPLY
            148 LOAD_GLOBAL              2 (ord)
            150 LOAD_FAST                1 (text)
            152 LOAD_FAST                7 (i)
            154 BINARY_SUBSCR
            156 CALL_FUNCTION            1
            158 BINARY_ADD
            160 LOAD_FAST                6 (q)
            162 BINARY_MODULO
            164 STORE_FAST              10 (t)
            166 JUMP_ABSOLUTE          114

 21     >>  168 LOAD_GLOBAL              1 (range)
            170 LOAD_FAST                5 (N)
            172 LOAD_FAST                4 (M)
            174 BINARY_SUBTRACT
            176 LOAD_CONST               7 (1)
            178 BINARY_ADD
            180 CALL_FUNCTION            1
            182 GET_ITER
        >>  184 FOR_ITER               150 (to 336)
            186 STORE_FAST               7 (i)

 22         188 LOAD_FAST                9 (p)
            190 LOAD_FAST               10 (t)
            192 COMPARE_OP               2 (==)
            194 EXTENDED_ARG             1
            196 POP_JUMP_IF_FALSE      262

 23         198 LOAD_GLOBAL              1 (range)
            200 LOAD_FAST                4 (M)
            202 CALL_FUNCTION            1
            204 GET_ITER
        >>  206 FOR_ITER                28 (to 236)
            208 STORE_FAST               8 (j)

 24         210 LOAD_FAST                1 (text)
            212 LOAD_FAST                7 (i)
            214 LOAD_FAST                8 (j)
            216 BINARY_ADD
            218 BINARY_SUBSCR
            220 LOAD_FAST                2 (pat)
            222 LOAD_FAST                8 (j)
            224 BINARY_SUBSCR
            226 COMPARE_OP               3 (!=)
            228 POP_JUMP_IF_FALSE      206

 25         230 POP_TOP
            232 JUMP_ABSOLUTE          236
            234 JUMP_ABSOLUTE          206

 26     >>  236 LOAD_FAST                8 (j)
            238 LOAD_CONST               7 (1)
            240 INPLACE_ADD
            242 STORE_FAST               8 (j)

 27         244 LOAD_FAST                8 (j)
            246 LOAD_FAST                4 (M)
            248 COMPARE_OP               2 (==)
            250 EXTENDED_ARG             1
            252 POP_JUMP_IF_FALSE      262

 28         254 LOAD_FAST                7 (i)
            256 ROT_TWO
            258 POP_TOP
            260 RETURN_VALUE

 29     >>  262 LOAD_FAST                7 (i)
            264 LOAD_FAST                5 (N)
            266 LOAD_FAST                4 (M)
            268 BINARY_SUBTRACT
            270 COMPARE_OP               0 (<)
            272 POP_JUMP_IF_FALSE      184

 30         274 LOAD_FAST                3 (d)
            276 LOAD_FAST               10 (t)
            278 LOAD_GLOBAL              2 (ord)
            280 LOAD_FAST                1 (text)
            282 LOAD_FAST                7 (i)
            284 BINARY_SUBSCR
            286 CALL_FUNCTION            1
            288 LOAD_FAST               11 (h)
            290 BINARY_MULTIPLY
            292 BINARY_SUBTRACT
            294 BINARY_MULTIPLY
            296 LOAD_GLOBAL              2 (ord)
            298 LOAD_FAST                1 (text)
            300 LOAD_FAST                7 (i)
            302 LOAD_FAST                4 (M)
            304 BINARY_ADD
            306 BINARY_SUBSCR
            308 CALL_FUNCTION            1
            310 BINARY_ADD
            312 LOAD_FAST                6 (q)
            314 BINARY_MODULO
            316 STORE_FAST              10 (t)

 31         318 LOAD_FAST               10 (t)
            320 LOAD_CONST               2 (0)
            322 COMPARE_OP               0 (<)
            324 POP_JUMP_IF_FALSE      184

 32         326 LOAD_FAST               10 (t)
            328 LOAD_FAST                6 (q)
            330 BINARY_ADD
            332 STORE_FAST              10 (t)
            334 JUMP_ABSOLUTE          184

 33     >>  336 LOAD_CONST               4 (-1)
            338 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return(0)
        if haystack == needle:
            return(0)
        if needle in haystack:
            for i in range(len(haystack)+1):
                if needle in haystack[0:i]:
                    return(i - len(needle))
                print(haystack[0:i])
        else:
            return(-1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fff354a5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fff354a5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fff354a52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fff354a52f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_FAST                1 (haystack)
             18 LOAD_FAST                2 (needle)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  6          24 LOAD_CONST               1 (0)
             26 RETURN_VALUE

  7     >>   28 LOAD_FAST                2 (needle)
             30 LOAD_FAST                1 (haystack)
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_FALSE      108

  8          36 LOAD_GLOBAL              1 (range)
             38 LOAD_GLOBAL              0 (len)
             40 LOAD_FAST                1 (haystack)
             42 CALL_FUNCTION            1
             44 LOAD_CONST               2 (1)
             46 BINARY_ADD
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                52 (to 106)
             54 STORE_FAST               3 (i)

  9          56 LOAD_FAST                2 (needle)
             58 LOAD_FAST                1 (haystack)
             60 LOAD_CONST               1 (0)
             62 LOAD_FAST                3 (i)
             64 BUILD_SLICE              2
             66 BINARY_SUBSCR
             68 COMPARE_OP               6 (in)
             70 POP_JUMP_IF_FALSE       88

 10          72 LOAD_FAST                3 (i)
             74 LOAD_GLOBAL              0 (len)
             76 LOAD_FAST                2 (needle)
             78 CALL_FUNCTION            1
             80 BINARY_SUBTRACT
             82 ROT_TWO
             84 POP_TOP
             86 RETURN_VALUE

 11     >>   88 LOAD_GLOBAL              2 (print)
             90 LOAD_FAST                1 (haystack)
             92 LOAD_CONST               1 (0)
             94 LOAD_FAST                3 (i)
             96 BUILD_SLICE              2
             98 BINARY_SUBSCR
            100 CALL_FUNCTION            1
            102 POP_TOP
            104 JUMP_ABSOLUTE           52
        >>  106 JUMP_FORWARD             4 (to 112)

 13     >>  108 LOAD_CONST               3 (-1)
            110 RETURN_VALUE
        >>  112 LOAD_CONST               0 (None)
            114 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		return haystack.find(needle)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6f67535500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6f67535500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f6f67535450, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f6f67535450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                2 (needle)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		n, h = len(needle), len(haystack)
		hash_n = hash(needle)
		for i in range(h-n+1):
			if hash(haystack[i:i+n]) == hash_n:
				return i
		return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f22bc4152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f22bc4152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f22bc415240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f22bc415240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (haystack)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               3 (n)
             16 STORE_FAST               4 (h)

  4          18 LOAD_GLOBAL              1 (hash)
             20 LOAD_FAST                2 (needle)
             22 CALL_FUNCTION            1
             24 STORE_FAST               5 (hash_n)

  5          26 LOAD_GLOBAL              2 (range)
             28 LOAD_FAST                4 (h)
             30 LOAD_FAST                3 (n)
             32 BINARY_SUBTRACT
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER                36 (to 80)
             44 STORE_FAST               6 (i)

  6          46 LOAD_GLOBAL              1 (hash)
             48 LOAD_FAST                1 (haystack)
             50 LOAD_FAST                6 (i)
             52 LOAD_FAST                6 (i)
             54 LOAD_FAST                3 (n)
             56 BINARY_ADD
             58 BUILD_SLICE              2
             60 BINARY_SUBSCR
             62 CALL_FUNCTION            1
             64 LOAD_FAST                5 (hash_n)
             66 COMPARE_OP               2 (==)
             68 POP_JUMP_IF_FALSE       42

  7          70 LOAD_FAST                6 (i)
             72 ROT_TWO
             74 POP_TOP
             76 RETURN_VALUE
             78 JUMP_ABSOLUTE           42

  8     >>   80 LOAD_CONST               2 (-1)
             82 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		def f(c):
			return ord(c)-ord('A')

		n, h, d, m = len(needle), len(haystack), ord('z')-ord('A')+1, sys.maxint 
		if n > h: return -1
		nd, hash_n, hash_h = d**(n-1), 0, 0   
		for i in range(n):
			hash_n = (d*hash_n+f(needle[i]))%m
			hash_h = (d*hash_h+f(haystack[i]))%m            
		if hash_n == hash_h: return 0        
		for i in range(1, h-n+1):
			hash_h = (d*(hash_h-f(haystack[i-1])*nd)+f(haystack[i+n-1]))%m    # e.g. 10*(1234-1*10**3)+5=2345
			if hash_n == hash_h: return i
		return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f664a9853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f664a9853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f664a9852f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f664a9852f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object f at 0x7f664a985240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.strStr.<locals>.f')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               3 (f)

  6           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                2 (needle)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (haystack)
             18 CALL_FUNCTION            1
             20 LOAD_GLOBAL              1 (ord)
             22 LOAD_CONST               3 ('z')
             24 CALL_FUNCTION            1
             26 LOAD_GLOBAL              1 (ord)
             28 LOAD_CONST               4 ('A')
             30 CALL_FUNCTION            1
             32 BINARY_SUBTRACT
             34 LOAD_CONST               5 (1)
             36 BINARY_ADD
             38 LOAD_GLOBAL              2 (sys)
             40 LOAD_ATTR                3 (maxint)
             42 BUILD_TUPLE              4
             44 UNPACK_SEQUENCE          4
             46 STORE_FAST               4 (n)
             48 STORE_FAST               5 (h)
             50 STORE_FAST               6 (d)
             52 STORE_FAST               7 (m)

  7          54 LOAD_FAST                4 (n)
             56 LOAD_FAST                5 (h)
             58 COMPARE_OP               4 (>)
             60 POP_JUMP_IF_FALSE       66
             62 LOAD_CONST               6 (-1)
             64 RETURN_VALUE

  8     >>   66 LOAD_FAST                6 (d)
             68 LOAD_FAST                4 (n)
             70 LOAD_CONST               5 (1)
             72 BINARY_SUBTRACT
             74 BINARY_POWER
             76 LOAD_CONST               7 (0)
             78 LOAD_CONST               7 (0)
             80 ROT_THREE
             82 ROT_TWO
             84 STORE_FAST               8 (nd)
             86 STORE_FAST               9 (hash_n)
             88 STORE_FAST              10 (hash_h)

  9          90 LOAD_GLOBAL              4 (range)
             92 LOAD_FAST                4 (n)
             94 CALL_FUNCTION            1
             96 GET_ITER
        >>   98 FOR_ITER                52 (to 152)
            100 STORE_FAST              11 (i)

 10         102 LOAD_FAST                6 (d)
            104 LOAD_FAST                9 (hash_n)
            106 BINARY_MULTIPLY
            108 LOAD_FAST                3 (f)
            110 LOAD_FAST                2 (needle)
            112 LOAD_FAST               11 (i)
            114 BINARY_SUBSCR
            116 CALL_FUNCTION            1
            118 BINARY_ADD
            120 LOAD_FAST                7 (m)
            122 BINARY_MODULO
            124 STORE_FAST               9 (hash_n)

 11         126 LOAD_FAST                6 (d)
            128 LOAD_FAST               10 (hash_h)
            130 BINARY_MULTIPLY
            132 LOAD_FAST                3 (f)
            134 LOAD_FAST                1 (haystack)
            136 LOAD_FAST               11 (i)
            138 BINARY_SUBSCR
            140 CALL_FUNCTION            1
            142 BINARY_ADD
            144 LOAD_FAST                7 (m)
            146 BINARY_MODULO
            148 STORE_FAST              10 (hash_h)
            150 JUMP_ABSOLUTE           98

 12     >>  152 LOAD_FAST                9 (hash_n)
            154 LOAD_FAST               10 (hash_h)
            156 COMPARE_OP               2 (==)
            158 POP_JUMP_IF_FALSE      164
            160 LOAD_CONST               7 (0)
            162 RETURN_VALUE

 13     >>  164 LOAD_GLOBAL              4 (range)
            166 LOAD_CONST               5 (1)
            168 LOAD_FAST                5 (h)
            170 LOAD_FAST                4 (n)
            172 BINARY_SUBTRACT
            174 LOAD_CONST               5 (1)
            176 BINARY_ADD
            178 CALL_FUNCTION            2
            180 GET_ITER
        >>  182 FOR_ITER                72 (to 256)
            184 STORE_FAST              11 (i)

 14         186 LOAD_FAST                6 (d)
            188 LOAD_FAST               10 (hash_h)
            190 LOAD_FAST                3 (f)
            192 LOAD_FAST                1 (haystack)
            194 LOAD_FAST               11 (i)
            196 LOAD_CONST               5 (1)
            198 BINARY_SUBTRACT
            200 BINARY_SUBSCR
            202 CALL_FUNCTION            1
            204 LOAD_FAST                8 (nd)
            206 BINARY_MULTIPLY
            208 BINARY_SUBTRACT
            210 BINARY_MULTIPLY
            212 LOAD_FAST                3 (f)
            214 LOAD_FAST                1 (haystack)
            216 LOAD_FAST               11 (i)
            218 LOAD_FAST                4 (n)
            220 BINARY_ADD
            222 LOAD_CONST               5 (1)
            224 BINARY_SUBTRACT
            226 BINARY_SUBSCR
            228 CALL_FUNCTION            1
            230 BINARY_ADD
            232 LOAD_FAST                7 (m)
            234 BINARY_MODULO
            236 STORE_FAST              10 (hash_h)

 15         238 LOAD_FAST                9 (hash_n)
            240 LOAD_FAST               10 (hash_h)
            242 COMPARE_OP               2 (==)
            244 POP_JUMP_IF_FALSE      182
            246 LOAD_FAST               11 (i)
            248 ROT_TWO
            250 POP_TOP
            252 RETURN_VALUE
            254 JUMP_ABSOLUTE          182

 16     >>  256 LOAD_CONST               6 (-1)
            258 RETURN_VALUE

Disassembly of <code object f at 0x7f664a985240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (ord)
              2 LOAD_FAST                0 (c)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (ord)
              8 LOAD_CONST               1 ('A')
             10 CALL_FUNCTION            1
             12 BINARY_SUBTRACT
             14 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		n, h = len(needle), len(haystack)
		i, j, nxt = 1, 0, [-1]+[0]*n
		while i < n:                                # calculate next array
			if j == -1 or needle[i] == needle[j]:   
				i += 1
				j += 1
				nxt[i] = j
			else:
				j = nxt[j]
		i = j = 0
		while i < h and j < n:
			if j == -1 or haystack[i] == needle[j]:
				i += 1
				j += 1
			else:
				j = nxt[j]
		return i-j if j == n else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff602cc52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff602cc52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7ff602cc5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7ff602cc5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (haystack)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               3 (n)
             16 STORE_FAST               4 (h)

  4          18 LOAD_CONST               1 (1)
             20 LOAD_CONST               2 (0)
             22 LOAD_CONST               3 (-1)
             24 BUILD_LIST               1
             26 LOAD_CONST               2 (0)
             28 BUILD_LIST               1
             30 LOAD_FAST                3 (n)
             32 BINARY_MULTIPLY
             34 BINARY_ADD
             36 ROT_THREE
             38 ROT_TWO
             40 STORE_FAST               5 (i)
             42 STORE_FAST               6 (j)
             44 STORE_FAST               7 (nxt)

  5     >>   46 LOAD_FAST                5 (i)
             48 LOAD_FAST                3 (n)
             50 COMPARE_OP               0 (<)
             52 POP_JUMP_IF_FALSE      114

  6          54 LOAD_FAST                6 (j)
             56 LOAD_CONST               3 (-1)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_TRUE        78
             62 LOAD_FAST                2 (needle)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (needle)
             70 LOAD_FAST                6 (j)
             72 BINARY_SUBSCR
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE      104

  7     >>   78 LOAD_FAST                5 (i)
             80 LOAD_CONST               1 (1)
             82 INPLACE_ADD
             84 STORE_FAST               5 (i)

  8          86 LOAD_FAST                6 (j)
             88 LOAD_CONST               1 (1)
             90 INPLACE_ADD
             92 STORE_FAST               6 (j)

  9          94 LOAD_FAST                6 (j)
             96 LOAD_FAST                7 (nxt)
             98 LOAD_FAST                5 (i)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           46

 11     >>  104 LOAD_FAST                7 (nxt)
            106 LOAD_FAST                6 (j)
            108 BINARY_SUBSCR
            110 STORE_FAST               6 (j)
            112 JUMP_ABSOLUTE           46

 12     >>  114 LOAD_CONST               2 (0)
            116 DUP_TOP
            118 STORE_FAST               5 (i)
            120 STORE_FAST               6 (j)

 13     >>  122 LOAD_FAST                5 (i)
            124 LOAD_FAST                4 (h)
            126 COMPARE_OP               0 (<)
            128 POP_JUMP_IF_FALSE      190
            130 LOAD_FAST                6 (j)
            132 LOAD_FAST                3 (n)
            134 COMPARE_OP               0 (<)
            136 POP_JUMP_IF_FALSE      190

 14         138 LOAD_FAST                6 (j)
            140 LOAD_CONST               3 (-1)
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_TRUE       162
            146 LOAD_FAST                1 (haystack)
            148 LOAD_FAST                5 (i)
            150 BINARY_SUBSCR
            152 LOAD_FAST                2 (needle)
            154 LOAD_FAST                6 (j)
            156 BINARY_SUBSCR
            158 COMPARE_OP               2 (==)
            160 POP_JUMP_IF_FALSE      180

 15     >>  162 LOAD_FAST                5 (i)
            164 LOAD_CONST               1 (1)
            166 INPLACE_ADD
            168 STORE_FAST               5 (i)

 16         170 LOAD_FAST                6 (j)
            172 LOAD_CONST               1 (1)
            174 INPLACE_ADD
            176 STORE_FAST               6 (j)
            178 JUMP_ABSOLUTE          122

 18     >>  180 LOAD_FAST                7 (nxt)
            182 LOAD_FAST                6 (j)
            184 BINARY_SUBSCR
            186 STORE_FAST               6 (j)
            188 JUMP_ABSOLUTE          122

 19     >>  190 LOAD_FAST                6 (j)
            192 LOAD_FAST                3 (n)
            194 COMPARE_OP               2 (==)
            196 POP_JUMP_IF_FALSE      206
            198 LOAD_FAST                5 (i)
            200 LOAD_FAST                6 (j)
            202 BINARY_SUBTRACT
            204 RETURN_VALUE
        >>  206 LOAD_CONST               3 (-1)
            208 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return 0
        if needle in haystack:
            return haystack.index(needle)
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb52cfd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb52cfd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fb52cfd5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fb52cfd5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_FAST                2 (needle)
             18 LOAD_FAST                1 (haystack)
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE       34

  6          24 LOAD_FAST                1 (haystack)
             26 LOAD_METHOD              1 (index)
             28 LOAD_FAST                2 (needle)
             30 CALL_METHOD              1
             32 RETURN_VALUE

  7     >>   34 LOAD_CONST               2 (-1)
             36 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle or haystack == needle:
            return 0
        len_needle, len_haystack = len(needle), len(haystack)
        if len_needle > len_haystack:
            return -1
        for i in range(len_haystack):
            index = 0
            for j in range(i, i + len_needle):
                if j >= len_haystack:
                    return -1
                if haystack[j] == needle[index]:
                    index += 1
                    continue
                else:
                    break
            if index == len_needle:
                return i
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4ed47b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4ed47b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f4ed47b5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f4ed47b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 POP_JUMP_IF_FALSE       12
              4 LOAD_FAST                1 (haystack)
              6 LOAD_FAST                2 (needle)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4     >>   12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                2 (needle)
             20 CALL_FUNCTION            1
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (haystack)
             26 CALL_FUNCTION            1
             28 ROT_TWO
             30 STORE_FAST               3 (len_needle)
             32 STORE_FAST               4 (len_haystack)

  6          34 LOAD_FAST                3 (len_needle)
             36 LOAD_FAST                4 (len_haystack)
             38 COMPARE_OP               4 (>)
             40 POP_JUMP_IF_FALSE       46

  7          42 LOAD_CONST               2 (-1)
             44 RETURN_VALUE

  8     >>   46 LOAD_GLOBAL              1 (range)
             48 LOAD_FAST                4 (len_haystack)
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER                92 (to 148)
             56 STORE_FAST               5 (i)

  9          58 LOAD_CONST               1 (0)
             60 STORE_FAST               6 (index)

 10          62 LOAD_GLOBAL              1 (range)
             64 LOAD_FAST                5 (i)
             66 LOAD_FAST                5 (i)
             68 LOAD_FAST                3 (len_needle)
             70 BINARY_ADD
             72 CALL_FUNCTION            2
             74 GET_ITER
        >>   76 FOR_ITER                52 (to 130)
             78 STORE_FAST               7 (j)

 11          80 LOAD_FAST                7 (j)
             82 LOAD_FAST                4 (len_haystack)
             84 COMPARE_OP               5 (>=)
             86 POP_JUMP_IF_FALSE       96

 12          88 POP_TOP
             90 POP_TOP
             92 LOAD_CONST               2 (-1)
             94 RETURN_VALUE

 13     >>   96 LOAD_FAST                1 (haystack)
             98 LOAD_FAST                7 (j)
            100 BINARY_SUBSCR
            102 LOAD_FAST                2 (needle)
            104 LOAD_FAST                6 (index)
            106 BINARY_SUBSCR
            108 COMPARE_OP               2 (==)
            110 POP_JUMP_IF_FALSE      124

 14         112 LOAD_FAST                6 (index)
            114 LOAD_CONST               3 (1)
            116 INPLACE_ADD
            118 STORE_FAST               6 (index)

 15         120 JUMP_ABSOLUTE           76
            122 JUMP_ABSOLUTE           76

 17     >>  124 POP_TOP
            126 JUMP_ABSOLUTE          130
            128 JUMP_ABSOLUTE           76

 18     >>  130 LOAD_FAST                6 (index)
            132 LOAD_FAST                3 (len_needle)
            134 COMPARE_OP               2 (==)
            136 POP_JUMP_IF_FALSE       54

 19         138 LOAD_FAST                5 (i)
            140 ROT_TWO
            142 POP_TOP
            144 RETURN_VALUE
            146 JUMP_ABSOLUTE           54

 20     >>  148 LOAD_CONST               2 (-1)
            150 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack, needle):
        """"""
        :type haystack: str
        :type needle: str
        :rtype: int
        """"""
        l1 = len(needle)
        l2 = len(haystack)
        if l1 > l2:
            return -1
        if l1 == 0 or l2 == 0:
            return 0
        if l1 == l2:
            if needle == haystack:
                return 0
        j = 0
        for i in range(l2-1):
            if haystack[i:l1+j] == needle:
                return i
            j+=1
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe71bc05240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe71bc05240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7fe71bc053a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7fe71bc053a0, file ""<ast>"", line 2>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (l1)

  9           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (haystack)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (l2)

 10          16 LOAD_FAST                3 (l1)
             18 LOAD_FAST                4 (l2)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       28

 11          24 LOAD_CONST               1 (-1)
             26 RETURN_VALUE

 12     >>   28 LOAD_FAST                3 (l1)
             30 LOAD_CONST               2 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_TRUE        44
             36 LOAD_FAST                4 (l2)
             38 LOAD_CONST               2 (0)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

 13     >>   44 LOAD_CONST               2 (0)
             46 RETURN_VALUE

 14     >>   48 LOAD_FAST                3 (l1)
             50 LOAD_FAST                4 (l2)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       68

 15          56 LOAD_FAST                2 (needle)
             58 LOAD_FAST                1 (haystack)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       68

 16          64 LOAD_CONST               2 (0)
             66 RETURN_VALUE

 17     >>   68 LOAD_CONST               2 (0)
             70 STORE_FAST               5 (j)

 18          72 LOAD_GLOBAL              1 (range)
             74 LOAD_FAST                4 (l2)
             76 LOAD_CONST               3 (1)
             78 BINARY_SUBTRACT
             80 CALL_FUNCTION            1
             82 GET_ITER
        >>   84 FOR_ITER                40 (to 126)
             86 STORE_FAST               6 (i)

 19          88 LOAD_FAST                1 (haystack)
             90 LOAD_FAST                6 (i)
             92 LOAD_FAST                3 (l1)
             94 LOAD_FAST                5 (j)
             96 BINARY_ADD
             98 BUILD_SLICE              2
            100 BINARY_SUBSCR
            102 LOAD_FAST                2 (needle)
            104 COMPARE_OP               2 (==)
            106 POP_JUMP_IF_FALSE      116

 20         108 LOAD_FAST                6 (i)
            110 ROT_TWO
            112 POP_TOP
            114 RETURN_VALUE

 21     >>  116 LOAD_FAST                5 (j)
            118 LOAD_CONST               3 (1)
            120 INPLACE_ADD
            122 STORE_FAST               5 (j)
            124 JUMP_ABSOLUTE           84

 22     >>  126 LOAD_CONST               1 (-1)
            128 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == '' :
            return 0
        
        if needle in haystack :
            l = len(needle)
            h = len(haystack)
            if l ==  h :
                return 0
            for x in range(0, h - l+1) :
                if haystack[x : l + x] == needle :
                    return x 
        else :
            return -1 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc4b41d5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc4b41d5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fc4b41d52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fc4b41d52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (needle)
             14 LOAD_FAST                1 (haystack)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE      102

  7          20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                2 (needle)
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (l)

  8          28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (haystack)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (h)

  9          36 LOAD_FAST                3 (l)
             38 LOAD_FAST                4 (h)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

 10          44 LOAD_CONST               2 (0)
             46 RETURN_VALUE

 11     >>   48 LOAD_GLOBAL              1 (range)
             50 LOAD_CONST               2 (0)
             52 LOAD_FAST                4 (h)
             54 LOAD_FAST                3 (l)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               3 (1)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 GET_ITER
        >>   66 FOR_ITER                32 (to 100)
             68 STORE_FAST               5 (x)

 12          70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                5 (x)
             74 LOAD_FAST                3 (l)
             76 LOAD_FAST                5 (x)
             78 BINARY_ADD
             80 BUILD_SLICE              2
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (needle)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       66

 13          90 LOAD_FAST                5 (x)
             92 ROT_TWO
             94 POP_TOP
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           66
        >>  100 JUMP_FORWARD             4 (to 106)

 15     >>  102 LOAD_CONST               4 (-1)
            104 RETURN_VALUE
        >>  106 LOAD_CONST               0 (None)
            108 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle=="""": return 0
        x = len(haystack.split(needle)[0])
        return x if len(haystack)!=x else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd381cd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd381cd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fd381cd5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fd381cd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (haystack)
             16 LOAD_METHOD              1 (split)
             18 LOAD_FAST                2 (needle)
             20 CALL_METHOD              1
             22 LOAD_CONST               2 (0)
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 STORE_FAST               3 (x)

  5          30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (haystack)
             34 CALL_FUNCTION            1
             36 LOAD_FAST                3 (x)
             38 COMPARE_OP               3 (!=)
             40 POP_JUMP_IF_FALSE       46
             42 LOAD_FAST                3 (x)
             44 RETURN_VALUE
        >>   46 LOAD_CONST               3 (-1)
             48 RETURN_VALUE
None
"
strStr,"class Solution:
        def strStr(self, haystack: str, needle: str) -> int:
                return (haystack.find(needle)) # .find helps in finding the index of the first letter in the substring
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd3105a5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd3105a5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fd3105a5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fd3105a5450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                2 (needle)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
            if not needle:
                return 0
            else:
                try:
                    return haystack.index(needle)
                except:
                    return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4f9fc652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4f9fc652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f4f9fc65240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f4f9fc65240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 SETUP_FINALLY           12 (to 22)

  7          10 LOAD_FAST                1 (haystack)
             12 LOAD_METHOD              0 (index)
             14 LOAD_FAST                2 (needle)
             16 CALL_METHOD              1
             18 POP_BLOCK
             20 RETURN_VALUE

  8     >>   22 POP_TOP
             24 POP_TOP
             26 POP_TOP

  9          28 POP_EXCEPT
             30 LOAD_CONST               2 (-1)
             32 RETURN_VALUE
             34 END_FINALLY
             36 LOAD_CONST               0 (None)
             38 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack, needle):
        if haystack == needle: return 0
        if len(haystack) < len(needle): return -1
        
        for i in range(len(haystack) - len(needle) + 1):
            foundIt = True
            for j, patternChar in enumerate(needle):
                if haystack[i + j] != patternChar:
                    foundIt = False
                    break
            if foundIt: return i
        return -1
                
        """"""
        :type haystack: str
        :type needle: str
        :rtype: int
        """"""  
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f41ed815240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f41ed815240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f41ed8152f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f41ed8152f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_FAST                2 (needle)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (haystack)
             16 CALL_FUNCTION            1
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                2 (needle)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               2 (-1)
             30 RETURN_VALUE

  6     >>   32 LOAD_GLOBAL              1 (range)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                1 (haystack)
             38 CALL_FUNCTION            1
             40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                2 (needle)
             44 CALL_FUNCTION            1
             46 BINARY_SUBTRACT
             48 LOAD_CONST               3 (1)
             50 BINARY_ADD
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                62 (to 120)
             58 STORE_FAST               3 (i)

  7          60 LOAD_CONST               4 (True)
             62 STORE_FAST               4 (foundIt)

  8          64 LOAD_GLOBAL              2 (enumerate)
             66 LOAD_FAST                2 (needle)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                32 (to 106)
             74 UNPACK_SEQUENCE          2
             76 STORE_FAST               5 (j)
             78 STORE_FAST               6 (patternChar)

  9          80 LOAD_FAST                1 (haystack)
             82 LOAD_FAST                3 (i)
             84 LOAD_FAST                5 (j)
             86 BINARY_ADD
             88 BINARY_SUBSCR
             90 LOAD_FAST                6 (patternChar)
             92 COMPARE_OP               3 (!=)
             94 POP_JUMP_IF_FALSE       72

 10          96 LOAD_CONST               5 (False)
             98 STORE_FAST               4 (foundIt)

 11         100 POP_TOP
            102 JUMP_ABSOLUTE          106
            104 JUMP_ABSOLUTE           72

 12     >>  106 LOAD_FAST                4 (foundIt)
            108 POP_JUMP_IF_FALSE       56
            110 LOAD_FAST                3 (i)
            112 ROT_TWO
            114 POP_TOP
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           56

 13     >>  120 LOAD_CONST               2 (-1)
            122 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
	
        x = len(haystack)
        l = len(needle)
        if haystack==needle:
            return 0
        if x==0 and l==0:
            return 0
        for i in range(0,x-l+1):
            if haystack[i:i+l]==needle:
                return i
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0f404b5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0f404b5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f0f404b52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f0f404b52f0, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (haystack)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (x)

  5           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                2 (needle)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (l)

  6          16 LOAD_FAST                1 (haystack)
             18 LOAD_FAST                2 (needle)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               1 (0)
             26 RETURN_VALUE

  8     >>   28 LOAD_FAST                3 (x)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       48
             36 LOAD_FAST                4 (l)
             38 LOAD_CONST               1 (0)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

  9          44 LOAD_CONST               1 (0)
             46 RETURN_VALUE

 10     >>   48 LOAD_GLOBAL              1 (range)
             50 LOAD_CONST               1 (0)
             52 LOAD_FAST                3 (x)
             54 LOAD_FAST                4 (l)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               2 (1)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 GET_ITER
        >>   66 FOR_ITER                32 (to 100)
             68 STORE_FAST               5 (i)

 11          70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                5 (i)
             74 LOAD_FAST                5 (i)
             76 LOAD_FAST                4 (l)
             78 BINARY_ADD
             80 BUILD_SLICE              2
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (needle)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       66

 12          90 LOAD_FAST                5 (i)
             92 ROT_TWO
             94 POP_TOP
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           66

 13     >>  100 LOAD_CONST               3 (-1)
            102 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == """":
            return 0
        elif needle in haystack:
            return haystack.index(needle)
        else:
            return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f49c0f052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f49c0f052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f49c0f05240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f49c0f05240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                2 (needle)
             14 LOAD_FAST                1 (haystack)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       30

  6          20 LOAD_FAST                1 (haystack)
             22 LOAD_METHOD              0 (index)
             24 LOAD_FAST                2 (needle)
             26 CALL_METHOD              1
             28 RETURN_VALUE

  8     >>   30 LOAD_CONST               3 (-1)
             32 RETURN_VALUE
             34 LOAD_CONST               0 (None)
             36 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if haystack == needle:
            return 0
        
        if not needle:
            return 0
        
        len_needle = len(needle)
        len_haystack = len(haystack)

        dp = self.kmp_algo(needle)
        
        i = 0
        j = 0
        
        while i < len_haystack:
            while j > 0 and haystack[i] != needle[j]:
                j = dp[j-1]

            if haystack[i] == needle[j]:
                j += 1            
            i += 1

            if j == len_needle:
                return i - j

        return -1
    
    def kmp_algo(self, needle):
        len_needle = len(needle)
        dp = [0] * len(needle)
        
        i = 1
        j = 0
        
        while i < len_needle:
            while j > 0 and needle[j] != needle[i]:
                j = dp[j-1]
            if needle[i] == needle[j]:
                j += 1
                dp[i] = j

            i += 1
        return dp
                    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3c688052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3c688052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f3c68805240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)

 30          26 LOAD_CONST               4 (<code object kmp_algo at 0x7f3c688053a0, file ""<ast>"", line 30>)
             28 LOAD_CONST               5 ('Solution.kmp_algo')
             30 MAKE_FUNCTION            0
             32 STORE_NAME               6 (kmp_algo)
             34 LOAD_CONST               6 (None)
             36 RETURN_VALUE

Disassembly of <code object strStr at 0x7f3c68805240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_FAST                2 (needle)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (needle)
             14 POP_JUMP_IF_TRUE        20

  7          16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  9     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                2 (needle)
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (len_needle)

 10          28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (haystack)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (len_haystack)

 12          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              1 (kmp_algo)
             40 LOAD_FAST                2 (needle)
             42 CALL_METHOD              1
             44 STORE_FAST               5 (dp)

 14          46 LOAD_CONST               1 (0)
             48 STORE_FAST               6 (i)

 15          50 LOAD_CONST               1 (0)
             52 STORE_FAST               7 (j)

 17     >>   54 LOAD_FAST                6 (i)
             56 LOAD_FAST                4 (len_haystack)
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE      150

 18     >>   62 LOAD_FAST                7 (j)
             64 LOAD_CONST               1 (0)
             66 COMPARE_OP               4 (>)
             68 POP_JUMP_IF_FALSE      100
             70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                6 (i)
             74 BINARY_SUBSCR
             76 LOAD_FAST                2 (needle)
             78 LOAD_FAST                7 (j)
             80 BINARY_SUBSCR
             82 COMPARE_OP               3 (!=)
             84 POP_JUMP_IF_FALSE      100

 19          86 LOAD_FAST                5 (dp)
             88 LOAD_FAST                7 (j)
             90 LOAD_CONST               2 (1)
             92 BINARY_SUBTRACT
             94 BINARY_SUBSCR
             96 STORE_FAST               7 (j)
             98 JUMP_ABSOLUTE           62

 21     >>  100 LOAD_FAST                1 (haystack)
            102 LOAD_FAST                6 (i)
            104 BINARY_SUBSCR
            106 LOAD_FAST                2 (needle)
            108 LOAD_FAST                7 (j)
            110 BINARY_SUBSCR
            112 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_FALSE      124

 22         116 LOAD_FAST                7 (j)
            118 LOAD_CONST               2 (1)
            120 INPLACE_ADD
            122 STORE_FAST               7 (j)

 23     >>  124 LOAD_FAST                6 (i)
            126 LOAD_CONST               2 (1)
            128 INPLACE_ADD
            130 STORE_FAST               6 (i)

 25         132 LOAD_FAST                7 (j)
            134 LOAD_FAST                3 (len_needle)
            136 COMPARE_OP               2 (==)
            138 POP_JUMP_IF_FALSE       54

 26         140 LOAD_FAST                6 (i)
            142 LOAD_FAST                7 (j)
            144 BINARY_SUBTRACT
            146 RETURN_VALUE
            148 JUMP_ABSOLUTE           54

 28     >>  150 LOAD_CONST               3 (-1)
            152 RETURN_VALUE

Disassembly of <code object kmp_algo at 0x7f3c688053a0, file ""<ast>"", line 30>:
 31           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (needle)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (len_needle)

 32           8 LOAD_CONST               1 (0)
             10 BUILD_LIST               1
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (needle)
             16 CALL_FUNCTION            1
             18 BINARY_MULTIPLY
             20 STORE_FAST               3 (dp)

 34          22 LOAD_CONST               2 (1)
             24 STORE_FAST               4 (i)

 35          26 LOAD_CONST               1 (0)
             28 STORE_FAST               5 (j)

 37     >>   30 LOAD_FAST                4 (i)
             32 LOAD_FAST                2 (len_needle)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE      118

 38     >>   38 LOAD_FAST                5 (j)
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               4 (>)
             44 POP_JUMP_IF_FALSE       76
             46 LOAD_FAST                1 (needle)
             48 LOAD_FAST                5 (j)
             50 BINARY_SUBSCR
             52 LOAD_FAST                1 (needle)
             54 LOAD_FAST                4 (i)
             56 BINARY_SUBSCR
             58 COMPARE_OP               3 (!=)
             60 POP_JUMP_IF_FALSE       76

 39          62 LOAD_FAST                3 (dp)
             64 LOAD_FAST                5 (j)
             66 LOAD_CONST               2 (1)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 STORE_FAST               5 (j)
             74 JUMP_ABSOLUTE           38

 40     >>   76 LOAD_FAST                1 (needle)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                1 (needle)
             84 LOAD_FAST                5 (j)
             86 BINARY_SUBSCR
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE      108

 41          92 LOAD_FAST                5 (j)
             94 LOAD_CONST               2 (1)
             96 INPLACE_ADD
             98 STORE_FAST               5 (j)

 42         100 LOAD_FAST                5 (j)
            102 LOAD_FAST                3 (dp)
            104 LOAD_FAST                4 (i)
            106 STORE_SUBSCR

 44     >>  108 LOAD_FAST                4 (i)
            110 LOAD_CONST               2 (1)
            112 INPLACE_ADD
            114 STORE_FAST               4 (i)
            116 JUMP_ABSOLUTE           30

 45     >>  118 LOAD_FAST                3 (dp)
            120 RETURN_VALUE
None
"
