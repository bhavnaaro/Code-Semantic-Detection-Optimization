canFinish,"from typing import List
from collections import defaultdict
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        in_degrees = [0 for x in range(numCourses)]
        start_nodes = []
        adj_matrix = defaultdict(list)
        for edge in prerequisites:
            if edge[0] == edge[1]:
                return False
            in_degrees[edge[1]] += 1
            adj_matrix[edge[0]].append(edge[1])
        
        for course_id, in_degree in enumerate(in_degrees):
            if in_degree == 0:
                start_nodes.append(course_id)
        
        if len(start_nodes) == 0:
            return False
        
        # bfs 
        visited = set() 
        for start_node in start_nodes:
            queue = [start_node]
            while queue:
                current = queue.pop()
                visited.add(current)
                for child in adj_matrix[current]:
                    if child in visited:
                        continue
                    in_degrees[child] -= 1
                    if in_degrees[child] < 1:
                        queue.append(child)
        return len(visited) == numCourses     
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_CONST               0 (0)
             14 LOAD_CONST               2 (('defaultdict',))
             16 IMPORT_NAME              2 (collections)
             18 IMPORT_FROM              3 (defaultdict)
             20 STORE_NAME               3 (defaultdict)
             22 POP_TOP

  3          24 LOAD_BUILD_CLASS
             26 LOAD_CONST               3 (<code object Solution at 0x7fc71e6153a0, file ""<ast>"", line 3>)
             28 LOAD_CONST               4 ('Solution')
             30 MAKE_FUNCTION            0
             32 LOAD_CONST               4 ('Solution')
             34 CALL_FUNCTION            2
             36 STORE_NAME               4 (Solution)
             38 LOAD_CONST               5 (None)
             40 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc71e6153a0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fc71e6152f0, file ""<ast>"", line 4>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fc71e6152f0, file ""<ast>"", line 4>:
  5           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fc71e615240, file ""<ast>"", line 5>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (in_degrees)

  6          18 BUILD_LIST               0
             20 STORE_FAST               4 (start_nodes)

  7          22 LOAD_GLOBAL              1 (defaultdict)
             24 LOAD_GLOBAL              2 (list)
             26 CALL_FUNCTION            1
             28 STORE_FAST               5 (adj_matrix)

  8          30 LOAD_FAST                2 (prerequisites)
             32 GET_ITER
        >>   34 FOR_ITER                68 (to 104)
             36 STORE_FAST               6 (edge)

  9          38 LOAD_FAST                6 (edge)
             40 LOAD_CONST               3 (0)
             42 BINARY_SUBSCR
             44 LOAD_FAST                6 (edge)
             46 LOAD_CONST               4 (1)
             48 BINARY_SUBSCR
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_FALSE       60

 10          54 POP_TOP
             56 LOAD_CONST               5 (False)
             58 RETURN_VALUE

 11     >>   60 LOAD_FAST                3 (in_degrees)
             62 LOAD_FAST                6 (edge)
             64 LOAD_CONST               4 (1)
             66 BINARY_SUBSCR
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               4 (1)
             74 INPLACE_ADD
             76 ROT_THREE
             78 STORE_SUBSCR

 12          80 LOAD_FAST                5 (adj_matrix)
             82 LOAD_FAST                6 (edge)
             84 LOAD_CONST               3 (0)
             86 BINARY_SUBSCR
             88 BINARY_SUBSCR
             90 LOAD_METHOD              3 (append)
             92 LOAD_FAST                6 (edge)
             94 LOAD_CONST               4 (1)
             96 BINARY_SUBSCR
             98 CALL_METHOD              1
            100 POP_TOP
            102 JUMP_ABSOLUTE           34

 14     >>  104 LOAD_GLOBAL              4 (enumerate)
            106 LOAD_FAST                3 (in_degrees)
            108 CALL_FUNCTION            1
            110 GET_ITER
        >>  112 FOR_ITER                26 (to 140)
            114 UNPACK_SEQUENCE          2
            116 STORE_FAST               7 (course_id)
            118 STORE_FAST               8 (in_degree)

 15         120 LOAD_FAST                8 (in_degree)
            122 LOAD_CONST               3 (0)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE      112

 16         128 LOAD_FAST                4 (start_nodes)
            130 LOAD_METHOD              3 (append)
            132 LOAD_FAST                7 (course_id)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE          112

 18     >>  140 LOAD_GLOBAL              5 (len)
            142 LOAD_FAST                4 (start_nodes)
            144 CALL_FUNCTION            1
            146 LOAD_CONST               3 (0)
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      156

 19         152 LOAD_CONST               5 (False)
            154 RETURN_VALUE

 22     >>  156 LOAD_GLOBAL              6 (set)
            158 CALL_FUNCTION            0
            160 STORE_FAST               9 (visited)

 23         162 LOAD_FAST                4 (start_nodes)
            164 GET_ITER
        >>  166 FOR_ITER                96 (to 264)
            168 STORE_FAST              10 (start_node)

 24         170 LOAD_FAST               10 (start_node)
            172 BUILD_LIST               1
            174 STORE_FAST              11 (queue)

 25     >>  176 LOAD_FAST               11 (queue)
            178 POP_JUMP_IF_FALSE      166

 26         180 LOAD_FAST               11 (queue)
            182 LOAD_METHOD              7 (pop)
            184 CALL_METHOD              0
            186 STORE_FAST              12 (current)

 27         188 LOAD_FAST                9 (visited)
            190 LOAD_METHOD              8 (add)
            192 LOAD_FAST               12 (current)
            194 CALL_METHOD              1
            196 POP_TOP

 28         198 LOAD_FAST                5 (adj_matrix)
            200 LOAD_FAST               12 (current)
            202 BINARY_SUBSCR
            204 GET_ITER
        >>  206 FOR_ITER                52 (to 260)
            208 STORE_FAST              13 (child)

 29         210 LOAD_FAST               13 (child)
            212 LOAD_FAST                9 (visited)
            214 COMPARE_OP               6 (in)
            216 POP_JUMP_IF_FALSE      220

 30         218 JUMP_ABSOLUTE          206

 31     >>  220 LOAD_FAST                3 (in_degrees)
            222 LOAD_FAST               13 (child)
            224 DUP_TOP_TWO
            226 BINARY_SUBSCR
            228 LOAD_CONST               4 (1)
            230 INPLACE_SUBTRACT
            232 ROT_THREE
            234 STORE_SUBSCR

 32         236 LOAD_FAST                3 (in_degrees)
            238 LOAD_FAST               13 (child)
            240 BINARY_SUBSCR
            242 LOAD_CONST               4 (1)
            244 COMPARE_OP               0 (<)
            246 POP_JUMP_IF_FALSE      206

 33         248 LOAD_FAST               11 (queue)
            250 LOAD_METHOD              3 (append)
            252 LOAD_FAST               13 (child)
            254 CALL_METHOD              1
            256 POP_TOP
            258 JUMP_ABSOLUTE          206
        >>  260 JUMP_ABSOLUTE          176
            262 JUMP_ABSOLUTE          166

 34     >>  264 LOAD_GLOBAL              5 (len)
            266 LOAD_FAST                9 (visited)
            268 CALL_FUNCTION            1
            270 LOAD_FAST                1 (numCourses)
            272 COMPARE_OP               2 (==)
            274 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc71e615240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (x)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, n: int, prerequisites: List[List[int]]) -> bool:
        adj_list = [[] for _ in range(n)]
        for pos, nb in prerequisites:
            adj_list[pos].append(nb)

        visited = [False] * n
        rec_stack = [False] * n

        for node in range(n):
            if not visited[node]:
                if self.is_cyclic(node, visited, rec_stack, adj_list):
                    return False
        return True

    def is_cyclic(self, node, visited, rec_stack, adj_list):
        visited[node] = True
        rec_stack[node] = True

        for nb in adj_list[node]:
            if not visited[nb]:
                if self.is_cyclic(nb, visited, rec_stack, adj_list):
                    return True
            elif rec_stack[nb]:
                return True
        rec_stack[node] = False
        return False


","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3bf1bc5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3bf1bc5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('n', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f3bf1bc53a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 16          34 LOAD_CONST               4 (<code object is_cyclic at 0x7f3bf1bc52f0, file ""<ast>"", line 16>)
             36 LOAD_CONST               5 ('Solution.is_cyclic')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (is_cyclic)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f3bf1bc53a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f3bf1bc5240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adj_list)

  4          18 LOAD_FAST                2 (prerequisites)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (pos)
             28 STORE_FAST               5 (nb)

  5          30 LOAD_FAST                3 (adj_list)
             32 LOAD_FAST                4 (pos)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                5 (nb)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  7     >>   46 LOAD_CONST               3 (False)
             48 BUILD_LIST               1
             50 LOAD_FAST                1 (n)
             52 BINARY_MULTIPLY
             54 STORE_FAST               6 (visited)

  8          56 LOAD_CONST               3 (False)
             58 BUILD_LIST               1
             60 LOAD_FAST                1 (n)
             62 BINARY_MULTIPLY
             64 STORE_FAST               7 (rec_stack)

 10          66 LOAD_GLOBAL              0 (range)
             68 LOAD_FAST                1 (n)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                34 (to 110)
             76 STORE_FAST               8 (node)

 11          78 LOAD_FAST                6 (visited)
             80 LOAD_FAST                8 (node)
             82 BINARY_SUBSCR
             84 POP_JUMP_IF_TRUE        74

 12          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (is_cyclic)
             90 LOAD_FAST                8 (node)
             92 LOAD_FAST                6 (visited)
             94 LOAD_FAST                7 (rec_stack)
             96 LOAD_FAST                3 (adj_list)
             98 CALL_METHOD              4
            100 POP_JUMP_IF_FALSE       74

 13         102 POP_TOP
            104 LOAD_CONST               3 (False)
            106 RETURN_VALUE
            108 JUMP_ABSOLUTE           74

 14     >>  110 LOAD_CONST               4 (True)
            112 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f3bf1bc5240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object is_cyclic at 0x7f3bf1bc52f0, file ""<ast>"", line 16>:
 17           0 LOAD_CONST               1 (True)
              2 LOAD_FAST                2 (visited)
              4 LOAD_FAST                1 (node)
              6 STORE_SUBSCR

 18           8 LOAD_CONST               1 (True)
             10 LOAD_FAST                3 (rec_stack)
             12 LOAD_FAST                1 (node)
             14 STORE_SUBSCR

 20          16 LOAD_FAST                4 (adj_list)
             18 LOAD_FAST                1 (node)
             20 BINARY_SUBSCR
             22 GET_ITER
        >>   24 FOR_ITER                50 (to 76)
             26 STORE_FAST               5 (nb)

 21          28 LOAD_FAST                2 (visited)
             30 LOAD_FAST                5 (nb)
             32 BINARY_SUBSCR
             34 POP_JUMP_IF_TRUE        60

 22          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              0 (is_cyclic)
             40 LOAD_FAST                5 (nb)
             42 LOAD_FAST                2 (visited)
             44 LOAD_FAST                3 (rec_stack)
             46 LOAD_FAST                4 (adj_list)
             48 CALL_METHOD              4
             50 POP_JUMP_IF_FALSE       74

 23          52 POP_TOP
             54 LOAD_CONST               1 (True)
             56 RETURN_VALUE
             58 JUMP_ABSOLUTE           24

 24     >>   60 LOAD_FAST                3 (rec_stack)
             62 LOAD_FAST                5 (nb)
             64 BINARY_SUBSCR
             66 POP_JUMP_IF_FALSE       24

 25          68 POP_TOP
             70 LOAD_CONST               1 (True)
             72 RETURN_VALUE
        >>   74 JUMP_ABSOLUTE           24

 26     >>   76 LOAD_CONST               2 (False)
             78 LOAD_FAST                3 (rec_stack)
             80 LOAD_FAST                1 (node)
             82 STORE_SUBSCR

 27          84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
None
"
canFinish,"class Solution:
    def helper(self, course):
        if self.finish[course] == 1:  # visiting
            return False
        if self.finish[course] == -1:  # already finished course
            return True
        # when self.finish[course] == 0, for unvisited course
        self.finish[course] = 1  # mark as visiting
        if self.prerequisites[course]:  # when prerequisites for this course is not None
            for base in self.prerequisites[course]:
                if not self.helper(base):
                    return False
        self.finish[course] = -1  # mark as finished course
        return True

    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        self.prerequisites = [[] for i in range(numCourses)]
        self.finish = [0 for i in range(numCourses)]
        for course, base in prerequisites:
            self.prerequisites[course].append(base)
        len_prerequisite = [len(prerequisite) for prerequisite in self.prerequisites]
        if min(len_prerequisite) > 0:
            return False
        for i in range(numCourses):
            if not self.helper(i):
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb7fcfe5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb7fcfe5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object helper at 0x7fb7fcfe52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.helper')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (helper)

 16          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7fb7fcfe5660, file ""<ast>"", line 16>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object helper at 0x7fb7fcfe52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (finish)
              4 LOAD_FAST                1 (course)
              6 BINARY_SUBSCR
              8 LOAD_CONST               1 (1)
             10 COMPARE_OP               2 (==)
             12 POP_JUMP_IF_FALSE       18

  4          14 LOAD_CONST               2 (False)
             16 RETURN_VALUE

  5     >>   18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (finish)
             22 LOAD_FAST                1 (course)
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 (-1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  6          32 LOAD_CONST               4 (True)
             34 RETURN_VALUE

  8     >>   36 LOAD_CONST               1 (1)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                0 (finish)
             42 LOAD_FAST                1 (course)
             44 STORE_SUBSCR

  9          46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                1 (prerequisites)
             50 LOAD_FAST                1 (course)
             52 BINARY_SUBSCR
             54 POP_JUMP_IF_FALSE       88

 10          56 LOAD_FAST                0 (self)
             58 LOAD_ATTR                1 (prerequisites)
             60 LOAD_FAST                1 (course)
             62 BINARY_SUBSCR
             64 GET_ITER
        >>   66 FOR_ITER                20 (to 88)
             68 STORE_FAST               2 (base)

 11          70 LOAD_FAST                0 (self)
             72 LOAD_METHOD              2 (helper)
             74 LOAD_FAST                2 (base)
             76 CALL_METHOD              1
             78 POP_JUMP_IF_TRUE        66

 12          80 POP_TOP
             82 LOAD_CONST               2 (False)
             84 RETURN_VALUE
             86 JUMP_ABSOLUTE           66

 13     >>   88 LOAD_CONST               3 (-1)
             90 LOAD_FAST                0 (self)
             92 LOAD_ATTR                0 (finish)
             94 LOAD_FAST                1 (course)
             96 STORE_SUBSCR

 14          98 LOAD_CONST               4 (True)
            100 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fb7fcfe5660, file ""<ast>"", line 16>:
 17           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fb7fcfe5240, file ""<ast>"", line 17>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 LOAD_FAST                0 (self)
             18 STORE_ATTR               1 (prerequisites)

 18          20 LOAD_CONST               3 (<code object <listcomp> at 0x7fb7fcfe53a0, file ""<ast>"", line 18>)
             22 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             24 MAKE_FUNCTION            0
             26 LOAD_GLOBAL              0 (range)
             28 LOAD_FAST                1 (numCourses)
             30 CALL_FUNCTION            1
             32 GET_ITER
             34 CALL_FUNCTION            1
             36 LOAD_FAST                0 (self)
             38 STORE_ATTR               2 (finish)

 19          40 LOAD_FAST                2 (prerequisites)
             42 GET_ITER
        >>   44 FOR_ITER                24 (to 70)
             46 UNPACK_SEQUENCE          2
             48 STORE_FAST               3 (course)
             50 STORE_FAST               4 (base)

 20          52 LOAD_FAST                0 (self)
             54 LOAD_ATTR                1 (prerequisites)
             56 LOAD_FAST                3 (course)
             58 BINARY_SUBSCR
             60 LOAD_METHOD              3 (append)
             62 LOAD_FAST                4 (base)
             64 CALL_METHOD              1
             66 POP_TOP
             68 JUMP_ABSOLUTE           44

 21     >>   70 LOAD_CONST               4 (<code object <listcomp> at 0x7fb7fcfe5450, file ""<ast>"", line 21>)
             72 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             74 MAKE_FUNCTION            0
             76 LOAD_FAST                0 (self)
             78 LOAD_ATTR                1 (prerequisites)
             80 GET_ITER
             82 CALL_FUNCTION            1
             84 STORE_FAST               5 (len_prerequisite)

 22          86 LOAD_GLOBAL              4 (min)
             88 LOAD_FAST                5 (len_prerequisite)
             90 CALL_FUNCTION            1
             92 LOAD_CONST               5 (0)
             94 COMPARE_OP               4 (>)
             96 POP_JUMP_IF_FALSE      102

 23          98 LOAD_CONST               6 (False)
            100 RETURN_VALUE

 24     >>  102 LOAD_GLOBAL              0 (range)
            104 LOAD_FAST                1 (numCourses)
            106 CALL_FUNCTION            1
            108 GET_ITER
        >>  110 FOR_ITER                20 (to 132)
            112 STORE_FAST               6 (i)

 25         114 LOAD_FAST                0 (self)
            116 LOAD_METHOD              5 (helper)
            118 LOAD_FAST                6 (i)
            120 CALL_METHOD              1
            122 POP_JUMP_IF_TRUE       110

 26         124 POP_TOP
            126 LOAD_CONST               6 (False)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE          110

 27     >>  132 LOAD_CONST               7 (True)
            134 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fb7fcfe5240, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fb7fcfe53a0, file ""<ast>"", line 18>:
 18           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fb7fcfe5450, file ""<ast>"", line 21>:
 21           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (prerequisite)
              8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (prerequisite)
             12 CALL_FUNCTION            1
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        self.mat = {}
        for i in range(numCourses):
            self.mat[i] = {}
        
        self.visited = [False for i in range(numCourses)]
        self.repeated = [False for i in range(numCourses)]
        self.stack = []
        
        for u, v in prerequisites:
            self.mat[v][u] = 1
        
        def topologicalSort(node):
            self.visited[node] = True
            self.repeated[node] = True

            for child in self.mat[node]:
                if not self.visited[child]:
                    if topologicalSort(child):
                        return True
                elif self.repeated[child]:
                    return True
                    
            self.stack.append(node)
            self.repeated[node] = False
            return False

        cycle = False
        for node in range(numCourses):
            if not self.visited[node]:
                if topologicalSort(node):
                    cycle = True
                    break

        return not cycle
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f16f4235500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f16f4235500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f16f42353a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f16f42353a0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 LOAD_DEREF               0 (self)
              4 STORE_ATTR               0 (mat)

  4           6 LOAD_GLOBAL              1 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
        >>   14 FOR_ITER                14 (to 30)
             16 STORE_FAST               3 (i)

  5          18 BUILD_MAP                0
             20 LOAD_DEREF               0 (self)
             22 LOAD_ATTR                0 (mat)
             24 LOAD_FAST                3 (i)
             26 STORE_SUBSCR
             28 JUMP_ABSOLUTE           14

  7     >>   30 LOAD_CONST               1 (<code object <listcomp> at 0x7f16f4235240, file ""<ast>"", line 7>)
             32 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             34 MAKE_FUNCTION            0
             36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                1 (numCourses)
             40 CALL_FUNCTION            1
             42 GET_ITER
             44 CALL_FUNCTION            1
             46 LOAD_DEREF               0 (self)
             48 STORE_ATTR               2 (visited)

  8          50 LOAD_CONST               3 (<code object <listcomp> at 0x7f16f42352f0, file ""<ast>"", line 8>)
             52 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             54 MAKE_FUNCTION            0
             56 LOAD_GLOBAL              1 (range)
             58 LOAD_FAST                1 (numCourses)
             60 CALL_FUNCTION            1
             62 GET_ITER
             64 CALL_FUNCTION            1
             66 LOAD_DEREF               0 (self)
             68 STORE_ATTR               3 (repeated)

  9          70 BUILD_LIST               0
             72 LOAD_DEREF               0 (self)
             74 STORE_ATTR               4 (stack)

 11          76 LOAD_FAST                2 (prerequisites)
             78 GET_ITER
        >>   80 FOR_ITER                22 (to 104)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               4 (u)
             86 STORE_FAST               5 (v)

 12          88 LOAD_CONST               4 (1)
             90 LOAD_DEREF               0 (self)
             92 LOAD_ATTR                0 (mat)
             94 LOAD_FAST                5 (v)
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (u)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           80

 14     >>  104 LOAD_CLOSURE             0 (self)
            106 LOAD_CLOSURE             1 (topologicalSort)
            108 BUILD_TUPLE              2
            110 LOAD_CONST               5 (<code object topologicalSort at 0x7f16f4235450, file ""<ast>"", line 14>)
            112 LOAD_CONST               6 ('Solution.canFinish.<locals>.topologicalSort')
            114 MAKE_FUNCTION            8 (closure)
            116 STORE_DEREF              1 (topologicalSort)

 29         118 LOAD_CONST               7 (False)
            120 STORE_FAST               6 (cycle)

 30         122 LOAD_GLOBAL              1 (range)
            124 LOAD_FAST                1 (numCourses)
            126 CALL_FUNCTION            1
            128 GET_ITER
        >>  130 FOR_ITER                30 (to 162)
            132 STORE_FAST               7 (node)

 31         134 LOAD_DEREF               0 (self)
            136 LOAD_ATTR                2 (visited)
            138 LOAD_FAST                7 (node)
            140 BINARY_SUBSCR
            142 POP_JUMP_IF_TRUE       130

 32         144 LOAD_DEREF               1 (topologicalSort)
            146 LOAD_FAST                7 (node)
            148 CALL_FUNCTION            1
            150 POP_JUMP_IF_FALSE      130

 33         152 LOAD_CONST               8 (True)
            154 STORE_FAST               6 (cycle)

 34         156 POP_TOP
            158 JUMP_ABSOLUTE          162
            160 JUMP_ABSOLUTE          130

 36     >>  162 LOAD_FAST                6 (cycle)
            164 UNARY_NOT
            166 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f16f4235240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f16f42352f0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object topologicalSort at 0x7f16f4235450, file ""<ast>"", line 14>:
 15           0 LOAD_CONST               1 (True)
              2 LOAD_DEREF               0 (self)
              4 LOAD_ATTR                0 (visited)
              6 LOAD_FAST                0 (node)
              8 STORE_SUBSCR

 16          10 LOAD_CONST               1 (True)
             12 LOAD_DEREF               0 (self)
             14 LOAD_ATTR                1 (repeated)
             16 LOAD_FAST                0 (node)
             18 STORE_SUBSCR

 18          20 LOAD_DEREF               0 (self)
             22 LOAD_ATTR                2 (mat)
             24 LOAD_FAST                0 (node)
             26 BINARY_SUBSCR
             28 GET_ITER
        >>   30 FOR_ITER                46 (to 78)
             32 STORE_FAST               1 (child)

 19          34 LOAD_DEREF               0 (self)
             36 LOAD_ATTR                0 (visited)
             38 LOAD_FAST                1 (child)
             40 BINARY_SUBSCR
             42 POP_JUMP_IF_TRUE        60

 20          44 LOAD_DEREF               1 (topologicalSort)
             46 LOAD_FAST                1 (child)
             48 CALL_FUNCTION            1
             50 POP_JUMP_IF_FALSE       76

 21          52 POP_TOP
             54 LOAD_CONST               1 (True)
             56 RETURN_VALUE
             58 JUMP_ABSOLUTE           30

 22     >>   60 LOAD_DEREF               0 (self)
             62 LOAD_ATTR                1 (repeated)
             64 LOAD_FAST                1 (child)
             66 BINARY_SUBSCR
             68 POP_JUMP_IF_FALSE       30

 23          70 POP_TOP
             72 LOAD_CONST               1 (True)
             74 RETURN_VALUE
        >>   76 JUMP_ABSOLUTE           30

 25     >>   78 LOAD_DEREF               0 (self)
             80 LOAD_ATTR                3 (stack)
             82 LOAD_METHOD              4 (append)
             84 LOAD_FAST                0 (node)
             86 CALL_METHOD              1
             88 POP_TOP

 26          90 LOAD_CONST               2 (False)
             92 LOAD_DEREF               0 (self)
             94 LOAD_ATTR                1 (repeated)
             96 LOAD_FAST                0 (node)
             98 STORE_SUBSCR

 27         100 LOAD_CONST               2 (False)
            102 RETURN_VALUE
None
"
canFinish,"from collections import *
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        child = defaultdict(set)
        parent = defaultdict(int)
        for p in prerequisites:
            child[p[1]].add(p[0])
            parent[p[0]]+=1
        
        q = deque()
        for i in range(numCourses):
            if parent[i] == 0:
                del parent[i]
                q.append(i)
        if not q:
            return False
        res = []
        while q:
            couses = q.popleft()
            res.append(couses)
            for c in child[couses]:
                parent[c] -= 1
                if parent[c] == 0:
                    del parent[c]
                    q.append(c)
                    
        return len(res) == numCourses
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('*',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_STAR

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f9f65cc52f0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9f65cc52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f9f65cc5240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f9f65cc5240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (set)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (child)

  5           8 LOAD_GLOBAL              0 (defaultdict)
             10 LOAD_GLOBAL              2 (int)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (parent)

  6          16 LOAD_FAST                2 (prerequisites)
             18 GET_ITER
        >>   20 FOR_ITER                46 (to 68)
             22 STORE_FAST               5 (p)

  7          24 LOAD_FAST                3 (child)
             26 LOAD_FAST                5 (p)
             28 LOAD_CONST               1 (1)
             30 BINARY_SUBSCR
             32 BINARY_SUBSCR
             34 LOAD_METHOD              3 (add)
             36 LOAD_FAST                5 (p)
             38 LOAD_CONST               2 (0)
             40 BINARY_SUBSCR
             42 CALL_METHOD              1
             44 POP_TOP

  8          46 LOAD_FAST                4 (parent)
             48 LOAD_FAST                5 (p)
             50 LOAD_CONST               2 (0)
             52 BINARY_SUBSCR
             54 DUP_TOP_TWO
             56 BINARY_SUBSCR
             58 LOAD_CONST               1 (1)
             60 INPLACE_ADD
             62 ROT_THREE
             64 STORE_SUBSCR
             66 JUMP_ABSOLUTE           20

 10     >>   68 LOAD_GLOBAL              4 (deque)
             70 CALL_FUNCTION            0
             72 STORE_FAST               6 (q)

 11          74 LOAD_GLOBAL              5 (range)
             76 LOAD_FAST                1 (numCourses)
             78 CALL_FUNCTION            1
             80 GET_ITER
        >>   82 FOR_ITER                32 (to 116)
             84 STORE_FAST               7 (i)

 12          86 LOAD_FAST                4 (parent)
             88 LOAD_FAST                7 (i)
             90 BINARY_SUBSCR
             92 LOAD_CONST               2 (0)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE       82

 13          98 LOAD_FAST                4 (parent)
            100 LOAD_FAST                7 (i)
            102 DELETE_SUBSCR

 14         104 LOAD_FAST                6 (q)
            106 LOAD_METHOD              6 (append)
            108 LOAD_FAST                7 (i)
            110 CALL_METHOD              1
            112 POP_TOP
            114 JUMP_ABSOLUTE           82

 15     >>  116 LOAD_FAST                6 (q)
            118 POP_JUMP_IF_TRUE       124

 16         120 LOAD_CONST               3 (False)
            122 RETURN_VALUE

 17     >>  124 BUILD_LIST               0
            126 STORE_FAST               8 (res)

 18     >>  128 LOAD_FAST                6 (q)
            130 POP_JUMP_IF_FALSE      210

 19         132 LOAD_FAST                6 (q)
            134 LOAD_METHOD              7 (popleft)
            136 CALL_METHOD              0
            138 STORE_FAST               9 (couses)

 20         140 LOAD_FAST                8 (res)
            142 LOAD_METHOD              6 (append)
            144 LOAD_FAST                9 (couses)
            146 CALL_METHOD              1
            148 POP_TOP

 21         150 LOAD_FAST                3 (child)
            152 LOAD_FAST                9 (couses)
            154 BINARY_SUBSCR
            156 GET_ITER
        >>  158 FOR_ITER                48 (to 208)
            160 STORE_FAST              10 (c)

 22         162 LOAD_FAST                4 (parent)
            164 LOAD_FAST               10 (c)
            166 DUP_TOP_TWO
            168 BINARY_SUBSCR
            170 LOAD_CONST               1 (1)
            172 INPLACE_SUBTRACT
            174 ROT_THREE
            176 STORE_SUBSCR

 23         178 LOAD_FAST                4 (parent)
            180 LOAD_FAST               10 (c)
            182 BINARY_SUBSCR
            184 LOAD_CONST               2 (0)
            186 COMPARE_OP               2 (==)
            188 POP_JUMP_IF_FALSE      158

 24         190 LOAD_FAST                4 (parent)
            192 LOAD_FAST               10 (c)
            194 DELETE_SUBSCR

 25         196 LOAD_FAST                6 (q)
            198 LOAD_METHOD              6 (append)
            200 LOAD_FAST               10 (c)
            202 CALL_METHOD              1
            204 POP_TOP
            206 JUMP_ABSOLUTE          158
        >>  208 JUMP_ABSOLUTE          128

 27     >>  210 LOAD_GLOBAL              8 (len)
            212 LOAD_FAST                8 (res)
            214 CALL_FUNCTION            1
            216 LOAD_FAST                1 (numCourses)
            218 COMPARE_OP               2 (==)
            220 RETURN_VALUE
None
"
canFinish,"from collections import deque

class Solution:    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
	    # extract a set of vertices from the edge list
        vertices = set([v for sublist in prerequisites for v in sublist]) 
		# transform the set of vertices and edge list into an adjacency list
        graph = { v: [e[1] for e in prerequisites if e[0] == v] for v in vertices}
        
		# traverse the graph starting at each vertex
        for v in vertices:
            bfs = deque(graph[v]) # add all the neighbours of starting node to the BFS queue
            visited = set() # use a set to keep track of the visited nodes and not get stuck in a cycle
            
            while bfs:
                current = bfs.pop()
                visited.add(current)
                if current == v: # we ended up at the same vertex where we started - there's a cycle
                    return False
                for n in graph[current]: # cycle not detected, continue the traversal to the next nodes
                    if n not in visited:
                        bfs.appendleft(n)            
        
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f1594e95500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1594e95500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f1594e95660, file ""<ast>"", line 4>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f1594e95660, file ""<ast>"", line 4>:
  6           0 LOAD_GLOBAL              0 (set)
              2 LOAD_CONST               1 (<code object <listcomp> at 0x7f1594e95240, file ""<ast>"", line 6>)
              4 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              6 MAKE_FUNCTION            0
              8 LOAD_DEREF               0 (prerequisites)
             10 GET_ITER
             12 CALL_FUNCTION            1
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (vertices)

  8          18 LOAD_CLOSURE             0 (prerequisites)
             20 BUILD_TUPLE              1
             22 LOAD_CONST               3 (<code object <dictcomp> at 0x7f1594e95450, file ""<ast>"", line 8>)
             24 LOAD_CONST               4 ('Solution.canFinish.<locals>.<dictcomp>')
             26 MAKE_FUNCTION            8 (closure)
             28 LOAD_FAST                3 (vertices)
             30 GET_ITER
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (graph)

 11          36 LOAD_FAST                3 (vertices)
             38 GET_ITER
        >>   40 FOR_ITER                92 (to 134)
             42 STORE_FAST               5 (v)

 12          44 LOAD_GLOBAL              1 (deque)
             46 LOAD_FAST                4 (graph)
             48 LOAD_FAST                5 (v)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 STORE_FAST               6 (bfs)

 13          56 LOAD_GLOBAL              0 (set)
             58 CALL_FUNCTION            0
             60 STORE_FAST               7 (visited)

 15     >>   62 LOAD_FAST                6 (bfs)
             64 POP_JUMP_IF_FALSE       40

 16          66 LOAD_FAST                6 (bfs)
             68 LOAD_METHOD              2 (pop)
             70 CALL_METHOD              0
             72 STORE_FAST               8 (current)

 17          74 LOAD_FAST                7 (visited)
             76 LOAD_METHOD              3 (add)
             78 LOAD_FAST                8 (current)
             80 CALL_METHOD              1
             82 POP_TOP

 18          84 LOAD_FAST                8 (current)
             86 LOAD_FAST                5 (v)
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE       98

 19          92 POP_TOP
             94 LOAD_CONST               5 (False)
             96 RETURN_VALUE

 20     >>   98 LOAD_FAST                4 (graph)
            100 LOAD_FAST                8 (current)
            102 BINARY_SUBSCR
            104 GET_ITER
        >>  106 FOR_ITER                22 (to 130)
            108 STORE_FAST               9 (n)

 21         110 LOAD_FAST                9 (n)
            112 LOAD_FAST                7 (visited)
            114 COMPARE_OP               7 (not in)
            116 POP_JUMP_IF_FALSE      106

 22         118 LOAD_FAST                6 (bfs)
            120 LOAD_METHOD              4 (appendleft)
            122 LOAD_FAST                9 (n)
            124 CALL_METHOD              1
            126 POP_TOP
            128 JUMP_ABSOLUTE          106
        >>  130 JUMP_ABSOLUTE           62
            132 JUMP_ABSOLUTE           40

 24     >>  134 LOAD_CONST               6 (True)
            136 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1594e95240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                18 (to 24)
              6 STORE_FAST               1 (sublist)
              8 LOAD_FAST                1 (sublist)
             10 GET_ITER
        >>   12 FOR_ITER                 8 (to 22)
             14 STORE_FAST               2 (v)
             16 LOAD_FAST                2 (v)
             18 LIST_APPEND              3
             20 JUMP_ABSOLUTE           12
        >>   22 JUMP_ABSOLUTE            4
        >>   24 RETURN_VALUE

Disassembly of <code object <dictcomp> at 0x7f1594e95450, file ""<ast>"", line 8>:
  8           0 BUILD_MAP                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                24 (to 30)
              6 STORE_DEREF              0 (v)
              8 LOAD_DEREF               0 (v)
             10 LOAD_CLOSURE             0 (v)
             12 BUILD_TUPLE              1
             14 LOAD_CONST               0 (<code object <listcomp> at 0x7f1594e953a0, file ""<ast>"", line 8>)
             16 LOAD_CONST               1 ('Solution.canFinish.<locals>.<dictcomp>.<listcomp>')
             18 MAKE_FUNCTION            8 (closure)
             20 LOAD_DEREF               1 (prerequisites)
             22 GET_ITER
             24 CALL_FUNCTION            1
             26 MAP_ADD                  2
             28 JUMP_ABSOLUTE            4
        >>   30 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1594e953a0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                24 (to 30)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (0)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (v)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE        4
             20 LOAD_FAST                1 (e)
             22 LOAD_CONST               1 (1)
             24 BINARY_SUBSCR
             26 LIST_APPEND              2
             28 JUMP_ABSOLUTE            4
        >>   30 RETURN_VALUE
None
"
canFinish,"from collections import defaultdict
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        pre = defaultdict(list)
        count = {}
        
        for i in prerequisites:
            pre[i[1]].append(i[0])
            count[i[0]]=count.get(i[0],0) + 1
            
        queue = []
        for i in range(numCourses):
            if i not in count:
                queue.append(i)
        solution_count = 0       
        while len(queue):
            solution_count +=1
            x = queue.pop(0)
            for n in pre[x]:
                count[n] -= 1
                if count[n] == 0:
                    del count[n]
                    queue.append(n)
        
        if solution_count == numCourses:
            return True
        return False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('defaultdict',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (defaultdict)
              8 STORE_NAME               1 (defaultdict)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f8da6e352f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8da6e352f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f8da6e35240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f8da6e35240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (pre)

  5           8 BUILD_MAP                0
             10 STORE_FAST               4 (count)

  7          12 LOAD_FAST                2 (prerequisites)
             14 GET_ITER
        >>   16 FOR_ITER                54 (to 72)
             18 STORE_FAST               5 (i)

  8          20 LOAD_FAST                3 (pre)
             22 LOAD_FAST                5 (i)
             24 LOAD_CONST               1 (1)
             26 BINARY_SUBSCR
             28 BINARY_SUBSCR
             30 LOAD_METHOD              2 (append)
             32 LOAD_FAST                5 (i)
             34 LOAD_CONST               2 (0)
             36 BINARY_SUBSCR
             38 CALL_METHOD              1
             40 POP_TOP

  9          42 LOAD_FAST                4 (count)
             44 LOAD_METHOD              3 (get)
             46 LOAD_FAST                5 (i)
             48 LOAD_CONST               2 (0)
             50 BINARY_SUBSCR
             52 LOAD_CONST               2 (0)
             54 CALL_METHOD              2
             56 LOAD_CONST               1 (1)
             58 BINARY_ADD
             60 LOAD_FAST                4 (count)
             62 LOAD_FAST                5 (i)
             64 LOAD_CONST               2 (0)
             66 BINARY_SUBSCR
             68 STORE_SUBSCR
             70 JUMP_ABSOLUTE           16

 11     >>   72 BUILD_LIST               0
             74 STORE_FAST               6 (queue)

 12          76 LOAD_GLOBAL              4 (range)
             78 LOAD_FAST                1 (numCourses)
             80 CALL_FUNCTION            1
             82 GET_ITER
        >>   84 FOR_ITER                22 (to 108)
             86 STORE_FAST               5 (i)

 13          88 LOAD_FAST                5 (i)
             90 LOAD_FAST                4 (count)
             92 COMPARE_OP               7 (not in)
             94 POP_JUMP_IF_FALSE       84

 14          96 LOAD_FAST                6 (queue)
             98 LOAD_METHOD              2 (append)
            100 LOAD_FAST                5 (i)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           84

 15     >>  108 LOAD_CONST               2 (0)
            110 STORE_FAST               7 (solution_count)

 16     >>  112 LOAD_GLOBAL              5 (len)
            114 LOAD_FAST                6 (queue)
            116 CALL_FUNCTION            1
            118 POP_JUMP_IF_FALSE      198

 17         120 LOAD_FAST                7 (solution_count)
            122 LOAD_CONST               1 (1)
            124 INPLACE_ADD
            126 STORE_FAST               7 (solution_count)

 18         128 LOAD_FAST                6 (queue)
            130 LOAD_METHOD              6 (pop)
            132 LOAD_CONST               2 (0)
            134 CALL_METHOD              1
            136 STORE_FAST               8 (x)

 19         138 LOAD_FAST                3 (pre)
            140 LOAD_FAST                8 (x)
            142 BINARY_SUBSCR
            144 GET_ITER
        >>  146 FOR_ITER                48 (to 196)
            148 STORE_FAST               9 (n)

 20         150 LOAD_FAST                4 (count)
            152 LOAD_FAST                9 (n)
            154 DUP_TOP_TWO
            156 BINARY_SUBSCR
            158 LOAD_CONST               1 (1)
            160 INPLACE_SUBTRACT
            162 ROT_THREE
            164 STORE_SUBSCR

 21         166 LOAD_FAST                4 (count)
            168 LOAD_FAST                9 (n)
            170 BINARY_SUBSCR
            172 LOAD_CONST               2 (0)
            174 COMPARE_OP               2 (==)
            176 POP_JUMP_IF_FALSE      146

 22         178 LOAD_FAST                4 (count)
            180 LOAD_FAST                9 (n)
            182 DELETE_SUBSCR

 23         184 LOAD_FAST                6 (queue)
            186 LOAD_METHOD              2 (append)
            188 LOAD_FAST                9 (n)
            190 CALL_METHOD              1
            192 POP_TOP
            194 JUMP_ABSOLUTE          146
        >>  196 JUMP_ABSOLUTE          112

 25     >>  198 LOAD_FAST                7 (solution_count)
            200 LOAD_FAST                1 (numCourses)
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      210

 26         206 LOAD_CONST               3 (True)
            208 RETURN_VALUE

 27     >>  210 LOAD_CONST               4 (False)
            212 RETURN_VALUE
None
"
canFinish,"class Solution:
    def buildAdjacencyList(self, n, edgesList):
        adjList = [[] for _ in range(n)]
        # c2 (course 2) is a prerequisite of c1 (course 1)
        # i.e c2c1 is a directed edge in the graph
        for c1, c2 in edgesList:
            adjList[c2].append(c1)
        return adjList
        
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # build Adjacency list from Edges list
        adjList = self.buildAdjacencyList(numCourses, prerequisites)

        # Each vertex can have 3 different states:
        # state 0   : vertex is not visited. It's a default state.
        # state -1  : vertex is being processed. Either all of its descendants
        #             are not processed or it's still in the function call stack.
        # state 1   : vertex and all its descendants are processed.
        state = [0] * numCourses

        def hasCycle(v):
            if state[v] == 1:
                # This vertex is processed so we pass.
                return False
            if state[v] == -1:
                # This vertex is being processed and it means we have a cycle.
                return True

            # Set state to -1
            state[v] = -1

            for i in adjList[v]:
                if hasCycle(i):
                    return True

            state[v] = 1
            return False

        # we traverse each vertex using DFS, if we find a cycle, stop and return
        for v in range(numCourses):
            if hasCycle(v):
                return False

        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f375eb45500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f375eb45500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7f375eb452f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7f375eb45450, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7f375eb452f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f375eb45240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f375eb45240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f375eb45450, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 STORE_DEREF              0 (adjList)

 19          12 LOAD_CONST               1 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (numCourses)
             18 BINARY_MULTIPLY
             20 STORE_DEREF              2 (state)

 21          22 LOAD_CLOSURE             0 (adjList)
             24 LOAD_CLOSURE             1 (hasCycle)
             26 LOAD_CLOSURE             2 (state)
             28 BUILD_TUPLE              3
             30 LOAD_CONST               2 (<code object hasCycle at 0x7f375eb453a0, file ""<ast>"", line 21>)
             32 LOAD_CONST               3 ('Solution.canFinish.<locals>.hasCycle')
             34 MAKE_FUNCTION            8 (closure)
             36 STORE_DEREF              1 (hasCycle)

 40          38 LOAD_GLOBAL              1 (range)
             40 LOAD_FAST                1 (numCourses)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER                18 (to 66)
             48 STORE_FAST               3 (v)

 41          50 LOAD_DEREF               1 (hasCycle)
             52 LOAD_FAST                3 (v)
             54 CALL_FUNCTION            1
             56 POP_JUMP_IF_FALSE       46

 42          58 POP_TOP
             60 LOAD_CONST               4 (False)
             62 RETURN_VALUE
             64 JUMP_ABSOLUTE           46

 44     >>   66 LOAD_CONST               5 (True)
             68 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f375eb453a0, file ""<ast>"", line 21>:
 22           0 LOAD_DEREF               2 (state)
              2 LOAD_FAST                0 (v)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 24          12 LOAD_CONST               2 (False)
             14 RETURN_VALUE

 25     >>   16 LOAD_DEREF               2 (state)
             18 LOAD_FAST                0 (v)
             20 BINARY_SUBSCR
             22 LOAD_CONST               3 (-1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 27          28 LOAD_CONST               4 (True)
             30 RETURN_VALUE

 30     >>   32 LOAD_CONST               3 (-1)
             34 LOAD_DEREF               2 (state)
             36 LOAD_FAST                0 (v)
             38 STORE_SUBSCR

 32          40 LOAD_DEREF               0 (adjList)
             42 LOAD_FAST                0 (v)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                18 (to 68)
             50 STORE_FAST               1 (i)

 33          52 LOAD_DEREF               1 (hasCycle)
             54 LOAD_FAST                1 (i)
             56 CALL_FUNCTION            1
             58 POP_JUMP_IF_FALSE       48

 34          60 POP_TOP
             62 LOAD_CONST               4 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           48

 36     >>   68 LOAD_CONST               1 (1)
             70 LOAD_DEREF               2 (state)
             72 LOAD_FAST                0 (v)
             74 STORE_SUBSCR

 37          76 LOAD_CONST               2 (False)
             78 RETURN_VALUE
None
"
canFinish,"class Solution:
    def buildAdjacencyList(self, n, edgesList):
        adjList = [[] for _ in range(n)]
        # c2 (course 2) is a prerequisite of c1 (course 1)
        # i.e c2c1 is a directed edge in the graph
        for c1, c2 in edgesList:
            adjList[c2].append(c1)
        return adjList

    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # build Adjacency list from Edges list
        adjList = self.buildAdjacencyList(numCourses, prerequisites)
        visited = set()

        def hasCycle(v, stack):
            if v in visited:
                if v in stack:
                    # This vertex is being processed and it means we have a cycle.
                    return True
                # This vertex is processed so we pass
                return False

            # mark this vertex as visited
            visited.add(v)
            # add it to the current stack
            stack.append(v)

            for i in adjList[v]:
                if hasCycle(i, stack):
                    return True

            # once processed, we pop it out of the stack
            stack.pop()
            return False

        # we traverse each vertex using DFS, if we find a cycle, stop and return
        for v in range(numCourses):
            if hasCycle(v, []):
                return False

        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f064c6d5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f064c6d5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7f064c6d52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_NAME                4 (int)
             18 LOAD_NAME                5 (List)
             20 LOAD_NAME                5 (List)
             22 LOAD_NAME                4 (int)
             24 BINARY_SUBSCR
             26 BINARY_SUBSCR
             28 LOAD_NAME                6 (bool)
             30 LOAD_CONST               3 (('numCourses', 'prerequisites', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               4 (<code object canFinish at 0x7f064c6d5450, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.canFinish')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               7 (canFinish)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7f064c6d52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f064c6d5240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f064c6d5240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f064c6d5450, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 STORE_DEREF              0 (adjList)

 13          12 LOAD_GLOBAL              1 (set)
             14 CALL_FUNCTION            0
             16 STORE_DEREF              2 (visited)

 15          18 LOAD_CLOSURE             0 (adjList)
             20 LOAD_CLOSURE             1 (hasCycle)
             22 LOAD_CLOSURE             2 (visited)
             24 BUILD_TUPLE              3
             26 LOAD_CONST               1 (<code object hasCycle at 0x7f064c6d53a0, file ""<ast>"", line 15>)
             28 LOAD_CONST               2 ('Solution.canFinish.<locals>.hasCycle')
             30 MAKE_FUNCTION            8 (closure)
             32 STORE_DEREF              1 (hasCycle)

 37          34 LOAD_GLOBAL              2 (range)
             36 LOAD_FAST                1 (numCourses)
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER                20 (to 64)
             44 STORE_FAST               3 (v)

 38          46 LOAD_DEREF               1 (hasCycle)
             48 LOAD_FAST                3 (v)
             50 BUILD_LIST               0
             52 CALL_FUNCTION            2
             54 POP_JUMP_IF_FALSE       42

 39          56 POP_TOP
             58 LOAD_CONST               3 (False)
             60 RETURN_VALUE
             62 JUMP_ABSOLUTE           42

 41     >>   64 LOAD_CONST               4 (True)
             66 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f064c6d53a0, file ""<ast>"", line 15>:
 16           0 LOAD_FAST                0 (v)
              2 LOAD_DEREF               2 (visited)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       24

 17           8 LOAD_FAST                0 (v)
             10 LOAD_FAST                1 (stack)
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_FALSE       20

 19          16 LOAD_CONST               1 (True)
             18 RETURN_VALUE

 21     >>   20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 24     >>   24 LOAD_DEREF               2 (visited)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                0 (v)
             30 CALL_METHOD              1
             32 POP_TOP

 26          34 LOAD_FAST                1 (stack)
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                0 (v)
             40 CALL_METHOD              1
             42 POP_TOP

 28          44 LOAD_DEREF               0 (adjList)
             46 LOAD_FAST                0 (v)
             48 BINARY_SUBSCR
             50 GET_ITER
        >>   52 FOR_ITER                20 (to 74)
             54 STORE_FAST               2 (i)

 29          56 LOAD_DEREF               1 (hasCycle)
             58 LOAD_FAST                2 (i)
             60 LOAD_FAST                1 (stack)
             62 CALL_FUNCTION            2
             64 POP_JUMP_IF_FALSE       52

 30          66 POP_TOP
             68 LOAD_CONST               1 (True)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           52

 33     >>   74 LOAD_FAST                1 (stack)
             76 LOAD_METHOD              2 (pop)
             78 CALL_METHOD              0
             80 POP_TOP

 34          82 LOAD_CONST               2 (False)
             84 RETURN_VALUE
None
"
canFinish,"class Solution:
    def buildAdjacencyList(self, n, edgesList):
        adjList = [[] for _ in range(n)]
        # c2 (course 2) is a prerequisite of c1 (course 1)
        # i.e c2c1 is a directed edge in the graph
        for c1, c2 in edgesList:
            adjList[c2].append(c1)
        return adjList

    def topoBFS(self, numNodes, edgesList):
        # Note: for consistency with other solutions above, we keep building
        # an adjacency list here. We can also merge this step with the next step.
        adjList = self.buildAdjacencyList(numNodes, edgesList)

        # 1. A list stores No. of incoming edges of each vertex
        inDegrees = [0] * numNodes
        for v1, v2 in edgesList:
            # v2v1 form a directed edge
            inDegrees[v1] += 1

        # 2. a queue of all vertices with no incoming edge
        # at least one such node must exist in a non-empty acyclic graph
        # vertices in this queue have the same order as the eventual topological
        # sort
        queue = []
        for v in range(numNodes):
            if inDegrees[v] == 0:
                queue.append(v)

        # initialize count of visited vertices
        count = 0
        # an empty list that will contain the final topological order
        topoOrder = []

        while queue:
            # a. pop a vertex from front of queue
            # depending on the order that vertices are removed from queue,
            # a different solution is created
            v = queue.pop(0)
            # b. append it to topoOrder
            topoOrder.append(v)

            # increase count by 1
            count += 1

            # for each descendant of current vertex, reduce its in-degree by 1
            for des in adjList[v]:
                inDegrees[des] -= 1
                # if in-degree becomes 0, add it to queue
                if inDegrees[des] == 0:
                    queue.append(des)

        if count != numNodes:
            return None  # graph has at least one cycle
        else:
            return topoOrder

    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        return True if self.topoBFS(numCourses, prerequisites) else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f450d3c5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f450d3c5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object buildAdjacencyList at 0x7f450d3c52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.buildAdjacencyList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (buildAdjacencyList)

 10          16 LOAD_CONST               3 (<code object topoBFS at 0x7f450d3c53a0, file ""<ast>"", line 10>)
             18 LOAD_CONST               4 ('Solution.topoBFS')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (topoBFS)

 58          24 LOAD_NAME                5 (int)
             26 LOAD_NAME                6 (List)
             28 LOAD_NAME                6 (List)
             30 LOAD_NAME                5 (int)
             32 BINARY_SUBSCR
             34 BINARY_SUBSCR
             36 LOAD_NAME                7 (bool)
             38 LOAD_CONST               5 (('numCourses', 'prerequisites', 'return'))
             40 BUILD_CONST_KEY_MAP      3
             42 LOAD_CONST               6 (<code object canFinish at 0x7f450d3c5450, file ""<ast>"", line 58>)
             44 LOAD_CONST               7 ('Solution.canFinish')
             46 MAKE_FUNCTION            4 (annotations)
             48 STORE_NAME               8 (canFinish)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object buildAdjacencyList at 0x7f450d3c52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f450d3c5240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.buildAdjacencyList.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (adjList)

  6          18 LOAD_FAST                2 (edgesList)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               4 (c1)
             28 STORE_FAST               5 (c2)

  7          30 LOAD_FAST                3 (adjList)
             32 LOAD_FAST                5 (c2)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                4 (c1)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

  8     >>   46 LOAD_FAST                3 (adjList)
             48 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f450d3c5240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object topoBFS at 0x7f450d3c53a0, file ""<ast>"", line 10>:
 13           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (buildAdjacencyList)
              4 LOAD_FAST                1 (numNodes)
              6 LOAD_FAST                2 (edgesList)
              8 CALL_METHOD              2
             10 STORE_FAST               3 (adjList)

 16          12 LOAD_CONST               1 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (numNodes)
             18 BINARY_MULTIPLY
             20 STORE_FAST               4 (inDegrees)

 17          22 LOAD_FAST                2 (edgesList)
             24 GET_ITER
        >>   26 FOR_ITER                24 (to 52)
             28 UNPACK_SEQUENCE          2
             30 STORE_FAST               5 (v1)
             32 STORE_FAST               6 (v2)

 19          34 LOAD_FAST                4 (inDegrees)
             36 LOAD_FAST                5 (v1)
             38 DUP_TOP_TWO
             40 BINARY_SUBSCR
             42 LOAD_CONST               2 (1)
             44 INPLACE_ADD
             46 ROT_THREE
             48 STORE_SUBSCR
             50 JUMP_ABSOLUTE           26

 25     >>   52 BUILD_LIST               0
             54 STORE_FAST               7 (queue)

 26          56 LOAD_GLOBAL              1 (range)
             58 LOAD_FAST                1 (numNodes)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                26 (to 92)
             66 STORE_FAST               8 (v)

 27          68 LOAD_FAST                4 (inDegrees)
             70 LOAD_FAST                8 (v)
             72 BINARY_SUBSCR
             74 LOAD_CONST               1 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       64

 28          80 LOAD_FAST                7 (queue)
             82 LOAD_METHOD              2 (append)
             84 LOAD_FAST                8 (v)
             86 CALL_METHOD              1
             88 POP_TOP
             90 JUMP_ABSOLUTE           64

 31     >>   92 LOAD_CONST               1 (0)
             94 STORE_FAST               9 (count)

 33          96 BUILD_LIST               0
             98 STORE_FAST              10 (topoOrder)

 35     >>  100 LOAD_FAST                7 (queue)
            102 POP_JUMP_IF_FALSE      186

 39         104 LOAD_FAST                7 (queue)
            106 LOAD_METHOD              3 (pop)
            108 LOAD_CONST               1 (0)
            110 CALL_METHOD              1
            112 STORE_FAST               8 (v)

 41         114 LOAD_FAST               10 (topoOrder)
            116 LOAD_METHOD              2 (append)
            118 LOAD_FAST                8 (v)
            120 CALL_METHOD              1
            122 POP_TOP

 44         124 LOAD_FAST                9 (count)
            126 LOAD_CONST               2 (1)
            128 INPLACE_ADD
            130 STORE_FAST               9 (count)

 47         132 LOAD_FAST                3 (adjList)
            134 LOAD_FAST                8 (v)
            136 BINARY_SUBSCR
            138 GET_ITER
        >>  140 FOR_ITER                42 (to 184)
            142 STORE_FAST              11 (des)

 48         144 LOAD_FAST                4 (inDegrees)
            146 LOAD_FAST               11 (des)
            148 DUP_TOP_TWO
            150 BINARY_SUBSCR
            152 LOAD_CONST               2 (1)
            154 INPLACE_SUBTRACT
            156 ROT_THREE
            158 STORE_SUBSCR

 50         160 LOAD_FAST                4 (inDegrees)
            162 LOAD_FAST               11 (des)
            164 BINARY_SUBSCR
            166 LOAD_CONST               1 (0)
            168 COMPARE_OP               2 (==)
            170 POP_JUMP_IF_FALSE      140

 51         172 LOAD_FAST                7 (queue)
            174 LOAD_METHOD              2 (append)
            176 LOAD_FAST               11 (des)
            178 CALL_METHOD              1
            180 POP_TOP
            182 JUMP_ABSOLUTE          140
        >>  184 JUMP_ABSOLUTE          100

 53     >>  186 LOAD_FAST                9 (count)
            188 LOAD_FAST                1 (numNodes)
            190 COMPARE_OP               3 (!=)
            192 POP_JUMP_IF_FALSE      198

 54         194 LOAD_CONST               0 (None)
            196 RETURN_VALUE

 56     >>  198 LOAD_FAST               10 (topoOrder)
            200 RETURN_VALUE
            202 LOAD_CONST               0 (None)
            204 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f450d3c5450, file ""<ast>"", line 58>:
 59           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (topoBFS)
              4 LOAD_FAST                1 (numCourses)
              6 LOAD_FAST                2 (prerequisites)
              8 CALL_METHOD              2
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (True)
             14 RETURN_VALUE
        >>   16 LOAD_CONST               2 (False)
             18 RETURN_VALUE
None
"
canFinish,"from collections import deque

class Solution:
    def canFinish(self, numCourses, prereqs):            
        # Create edge list
        edge_list = [deque() for _ in range(numCourses)]
        for [neighbour, node] in prereqs:
            edge_list[node].append(neighbour)
        
        # Define recursive DFS function
        def DFS(source, path):
            if source in path:
                return(True)
            elif not visited[source]:
                visited[source] = True
                neighbours = edge_list[source]
                for n in neighbours:
                    node_path = path.union([source])
                    if DFS(n, node_path):
                        return(True)
        # Call DFS for each node
        visited = [False for _ in range(numCourses)]  # use as a memo table, thanks to
                                                      # nonlocal scoping in nested functions (here DFS)
        cycle_found = False
        for node in range(numCourses):
            if DFS(node, set()):
                cycle_found = True
                break
        return(not cycle_found)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fda3e125450, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fda3e125450, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object canFinish at 0x7fda3e125500, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.canFinish')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (canFinish)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fda3e125500, file ""<ast>"", line 4>:
  6           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fda3e125240, file ""<ast>"", line 6>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_DEREF              1 (edge_list)

  7          18 LOAD_FAST                2 (prereqs)
             20 GET_ITER
        >>   22 FOR_ITER                22 (to 46)
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               3 (neighbour)
             28 STORE_FAST               4 (node)

  8          30 LOAD_DEREF               1 (edge_list)
             32 LOAD_FAST                4 (node)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                3 (neighbour)
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           22

 11     >>   46 LOAD_CLOSURE             0 (DFS)
             48 LOAD_CLOSURE             1 (edge_list)
             50 LOAD_CLOSURE             2 (visited)
             52 BUILD_TUPLE              3
             54 LOAD_CONST               3 (<code object DFS at 0x7fda3e1252f0, file ""<ast>"", line 11>)
             56 LOAD_CONST               4 ('Solution.canFinish.<locals>.DFS')
             58 MAKE_FUNCTION            8 (closure)
             60 STORE_DEREF              0 (DFS)

 22          62 LOAD_CONST               5 (<code object <listcomp> at 0x7fda3e1253a0, file ""<ast>"", line 22>)
             64 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             66 MAKE_FUNCTION            0
             68 LOAD_GLOBAL              0 (range)
             70 LOAD_FAST                1 (numCourses)
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 STORE_DEREF              2 (visited)

 24          80 LOAD_CONST               6 (False)
             82 STORE_FAST               5 (cycle_found)

 25          84 LOAD_GLOBAL              0 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
        >>   92 FOR_ITER                24 (to 118)
             94 STORE_FAST               4 (node)

 26          96 LOAD_DEREF               0 (DFS)
             98 LOAD_FAST                4 (node)
            100 LOAD_GLOBAL              2 (set)
            102 CALL_FUNCTION            0
            104 CALL_FUNCTION            2
            106 POP_JUMP_IF_FALSE       92

 27         108 LOAD_CONST               7 (True)
            110 STORE_FAST               5 (cycle_found)

 28         112 POP_TOP
            114 JUMP_ABSOLUTE          118
            116 JUMP_ABSOLUTE           92

 29     >>  118 LOAD_FAST                5 (cycle_found)
            120 UNARY_NOT
            122 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fda3e125240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (deque)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object DFS at 0x7fda3e1252f0, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (source)
              2 LOAD_FAST                1 (path)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 13           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 14     >>   12 LOAD_DEREF               2 (visited)
             14 LOAD_FAST                0 (source)
             16 BINARY_SUBSCR
             18 POP_JUMP_IF_TRUE        74

 15          20 LOAD_CONST               1 (True)
             22 LOAD_DEREF               2 (visited)
             24 LOAD_FAST                0 (source)
             26 STORE_SUBSCR

 16          28 LOAD_DEREF               1 (edge_list)
             30 LOAD_FAST                0 (source)
             32 BINARY_SUBSCR
             34 STORE_FAST               2 (neighbours)

 17          36 LOAD_FAST                2 (neighbours)
             38 GET_ITER
        >>   40 FOR_ITER                32 (to 74)
             42 STORE_FAST               3 (n)

 18          44 LOAD_FAST                1 (path)
             46 LOAD_METHOD              0 (union)
             48 LOAD_FAST                0 (source)
             50 BUILD_LIST               1
             52 CALL_METHOD              1
             54 STORE_FAST               4 (node_path)

 19          56 LOAD_DEREF               0 (DFS)
             58 LOAD_FAST                3 (n)
             60 LOAD_FAST                4 (node_path)
             62 CALL_FUNCTION            2
             64 POP_JUMP_IF_FALSE       40

 20          66 POP_TOP
             68 LOAD_CONST               1 (True)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           40
        >>   74 LOAD_CONST               0 (None)
             76 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fda3e1253a0, file ""<ast>"", line 22>:
 22           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
canFinish,"from collections import defaultdict
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        white = defaultdict(list)
        for x,y in prerequisites:
            white[x].append(y)
        
        return not self.iscycle(white)
    
    def iscycle(self, white):
        black, grey = set(), set()
        for node in range(len(white)):
            if not self.dfs(node, black, grey, white):
                return True
        return False
    
    def dfs(self, node, black, grey, white):
        if node in black:
            return True
        if node in grey:
            return False
        grey.add(node)
        for neighbor in white[node]:
            if not self.dfs(neighbor, black, grey, white):
                return False
        black.add(node)
        grey.remove(node)
        return True
            
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('defaultdict',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (defaultdict)
              8 STORE_NAME               1 (defaultdict)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fe6e4ca5450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe6e4ca5450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fe6e4ca5240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 10          34 LOAD_CONST               4 (<code object iscycle at 0x7fe6e4ca52f0, file ""<ast>"", line 10>)
             36 LOAD_CONST               5 ('Solution.iscycle')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (iscycle)

 17          42 LOAD_CONST               6 (<code object dfs at 0x7fe6e4ca53a0, file ""<ast>"", line 17>)
             44 LOAD_CONST               7 ('Solution.dfs')
             46 MAKE_FUNCTION            0
             48 STORE_NAME               8 (dfs)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fe6e4ca5240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (white)

  5           8 LOAD_FAST                2 (prerequisites)
             10 GET_ITER
        >>   12 FOR_ITER                22 (to 36)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               4 (x)
             18 STORE_FAST               5 (y)

  6          20 LOAD_FAST                3 (white)
             22 LOAD_FAST                4 (x)
             24 BINARY_SUBSCR
             26 LOAD_METHOD              2 (append)
             28 LOAD_FAST                5 (y)
             30 CALL_METHOD              1
             32 POP_TOP
             34 JUMP_ABSOLUTE           12

  8     >>   36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              3 (iscycle)
             40 LOAD_FAST                3 (white)
             42 CALL_METHOD              1
             44 UNARY_NOT
             46 RETURN_VALUE

Disassembly of <code object iscycle at 0x7fe6e4ca52f0, file ""<ast>"", line 10>:
 11           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 LOAD_GLOBAL              0 (set)
              6 CALL_FUNCTION            0
              8 ROT_TWO
             10 STORE_FAST               2 (black)
             12 STORE_FAST               3 (grey)

 12          14 LOAD_GLOBAL              1 (range)
             16 LOAD_GLOBAL              2 (len)
             18 LOAD_FAST                1 (white)
             20 CALL_FUNCTION            1
             22 CALL_FUNCTION            1
             24 GET_ITER
        >>   26 FOR_ITER                26 (to 54)
             28 STORE_FAST               4 (node)

 13          30 LOAD_FAST                0 (self)
             32 LOAD_METHOD              3 (dfs)
             34 LOAD_FAST                4 (node)
             36 LOAD_FAST                2 (black)
             38 LOAD_FAST                3 (grey)
             40 LOAD_FAST                1 (white)
             42 CALL_METHOD              4
             44 POP_JUMP_IF_TRUE        26

 14          46 POP_TOP
             48 LOAD_CONST               1 (True)
             50 RETURN_VALUE
             52 JUMP_ABSOLUTE           26

 15     >>   54 LOAD_CONST               2 (False)
             56 RETURN_VALUE

Disassembly of <code object dfs at 0x7fe6e4ca53a0, file ""<ast>"", line 17>:
 18           0 LOAD_FAST                1 (node)
              2 LOAD_FAST                2 (black)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 19           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 20     >>   12 LOAD_FAST                1 (node)
             14 LOAD_FAST                3 (grey)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       24

 21          20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 22     >>   24 LOAD_FAST                3 (grey)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                1 (node)
             30 CALL_METHOD              1
             32 POP_TOP

 23          34 LOAD_FAST                4 (white)
             36 LOAD_FAST                1 (node)
             38 BINARY_SUBSCR
             40 GET_ITER
        >>   42 FOR_ITER                26 (to 70)
             44 STORE_FAST               5 (neighbor)

 24          46 LOAD_FAST                0 (self)
             48 LOAD_METHOD              1 (dfs)
             50 LOAD_FAST                5 (neighbor)
             52 LOAD_FAST                2 (black)
             54 LOAD_FAST                3 (grey)
             56 LOAD_FAST                4 (white)
             58 CALL_METHOD              4
             60 POP_JUMP_IF_TRUE        42

 25          62 POP_TOP
             64 LOAD_CONST               2 (False)
             66 RETURN_VALUE
             68 JUMP_ABSOLUTE           42

 26     >>   70 LOAD_FAST                2 (black)
             72 LOAD_METHOD              0 (add)
             74 LOAD_FAST                1 (node)
             76 CALL_METHOD              1
             78 POP_TOP

 27          80 LOAD_FAST                3 (grey)
             82 LOAD_METHOD              2 (remove)
             84 LOAD_FAST                1 (node)
             86 CALL_METHOD              1
             88 POP_TOP

 28          90 LOAD_CONST               1 (True)
             92 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        if not numCourses or not prerequisites: return True
        # build the graph
        graph = {}
        for pair in prerequisites:
            _from, _to = pair
            graph.setdefault(_from, []).append(_to)
        # we need to find a topological sort if we detect a cycle we are done
        visiting, visited = set(), set()
        def dfs(node):
            # cycle detected
            if node in visiting: return False
            visiting.add(node)
            # explore children
            res = True
            for child in graph.get(node, []):
                if child not in visited:
                    res &= dfs(child)
                    if not res: return False
            # done with this node and its children
            visiting.discard(node)
            visited.add(node)
            return res
        # explore all nodes
        for i in range(numCourses):
            if not dfs(i): return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f467c0252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f467c0252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f467c0253a0, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f467c0253a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (numCourses)
              2 POP_JUMP_IF_FALSE        8
              4 LOAD_FAST                2 (prerequisites)
              6 POP_JUMP_IF_TRUE        12
        >>    8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

  5     >>   12 BUILD_MAP                0
             14 STORE_DEREF              1 (graph)

  6          16 LOAD_FAST                2 (prerequisites)
             18 GET_ITER
        >>   20 FOR_ITER                30 (to 52)
             22 STORE_FAST               3 (pair)

  7          24 LOAD_FAST                3 (pair)
             26 UNPACK_SEQUENCE          2
             28 STORE_FAST               4 (_from)
             30 STORE_FAST               5 (_to)

  8          32 LOAD_DEREF               1 (graph)
             34 LOAD_METHOD              0 (setdefault)
             36 LOAD_FAST                4 (_from)
             38 BUILD_LIST               0
             40 CALL_METHOD              2
             42 LOAD_METHOD              1 (append)
             44 LOAD_FAST                5 (_to)
             46 CALL_METHOD              1
             48 POP_TOP
             50 JUMP_ABSOLUTE           20

 10     >>   52 LOAD_GLOBAL              2 (set)
             54 CALL_FUNCTION            0
             56 LOAD_GLOBAL              2 (set)
             58 CALL_FUNCTION            0
             60 ROT_TWO
             62 STORE_DEREF              3 (visiting)
             64 STORE_DEREF              2 (visited)

 11          66 LOAD_CLOSURE             0 (dfs)
             68 LOAD_CLOSURE             1 (graph)
             70 LOAD_CLOSURE             2 (visited)
             72 LOAD_CLOSURE             3 (visiting)
             74 BUILD_TUPLE              4
             76 LOAD_CONST               2 (<code object dfs at 0x7f467c025240, file ""<ast>"", line 11>)
             78 LOAD_CONST               3 ('Solution.canFinish.<locals>.dfs')
             80 MAKE_FUNCTION            8 (closure)
             82 STORE_DEREF              0 (dfs)

 26          84 LOAD_GLOBAL              3 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
        >>   92 FOR_ITER                18 (to 112)
             94 STORE_FAST               6 (i)

 27          96 LOAD_DEREF               0 (dfs)
             98 LOAD_FAST                6 (i)
            100 CALL_FUNCTION            1
            102 POP_JUMP_IF_TRUE        92
            104 POP_TOP
            106 LOAD_CONST               4 (False)
            108 RETURN_VALUE
            110 JUMP_ABSOLUTE           92

 28     >>  112 LOAD_CONST               1 (True)
            114 RETURN_VALUE

Disassembly of <code object dfs at 0x7f467c025240, file ""<ast>"", line 11>:
 13           0 LOAD_FAST                0 (node)
              2 LOAD_DEREF               3 (visiting)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (False)
             10 RETURN_VALUE

 14     >>   12 LOAD_DEREF               3 (visiting)
             14 LOAD_METHOD              0 (add)
             16 LOAD_FAST                0 (node)
             18 CALL_METHOD              1
             20 POP_TOP

 16          22 LOAD_CONST               2 (True)
             24 STORE_FAST               1 (res)

 17          26 LOAD_DEREF               1 (graph)
             28 LOAD_METHOD              1 (get)
             30 LOAD_FAST                0 (node)
             32 BUILD_LIST               0
             34 CALL_METHOD              2
             36 GET_ITER
        >>   38 FOR_ITER                34 (to 74)
             40 STORE_FAST               2 (child)

 18          42 LOAD_FAST                2 (child)
             44 LOAD_DEREF               2 (visited)
             46 COMPARE_OP               7 (not in)
             48 POP_JUMP_IF_FALSE       38

 19          50 LOAD_FAST                1 (res)
             52 LOAD_DEREF               0 (dfs)
             54 LOAD_FAST                2 (child)
             56 CALL_FUNCTION            1
             58 INPLACE_AND
             60 STORE_FAST               1 (res)

 20          62 LOAD_FAST                1 (res)
             64 POP_JUMP_IF_TRUE        38
             66 POP_TOP
             68 LOAD_CONST               1 (False)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           38

 22     >>   74 LOAD_DEREF               3 (visiting)
             76 LOAD_METHOD              2 (discard)
             78 LOAD_FAST                0 (node)
             80 CALL_METHOD              1
             82 POP_TOP

 23          84 LOAD_DEREF               2 (visited)
             86 LOAD_METHOD              0 (add)
             88 LOAD_FAST                0 (node)
             90 CALL_METHOD              1
             92 POP_TOP

 24          94 LOAD_FAST                1 (res)
             96 RETURN_VALUE
None
"
canFinish,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for _ in range(numCourses)]
        visited = [0 for _ in range(numCourses)]
        for x,y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs(graph, visited, i):
                return False
        return True

    def dfs(self, graph, visited, i):
        if visited[i] == -1:
            return False
        if visited[i] == 1:
            return True
        visited[i] = -1
        
        for j in graph[i]:
            if not self.dfs(graph, visited, j):
                return False
        visited[i] = 1
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe804b45500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe804b45500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7fe804b45450, file ""<ast>"", line 2>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)

 12          34 LOAD_CONST               4 (<code object dfs at 0x7fe804b453a0, file ""<ast>"", line 12>)
             36 LOAD_CONST               5 ('Solution.dfs')
             38 MAKE_FUNCTION            0
             40 STORE_NAME               7 (dfs)
             42 LOAD_CONST               6 (None)
             44 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fe804b45450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7fe804b45240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (numCourses)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               3 (graph)

  4          18 LOAD_CONST               3 (<code object <listcomp> at 0x7fe804b452f0, file ""<ast>"", line 4>)
             20 LOAD_CONST               2 ('Solution.canFinish.<locals>.<listcomp>')
             22 MAKE_FUNCTION            0
             24 LOAD_GLOBAL              0 (range)
             26 LOAD_FAST                1 (numCourses)
             28 CALL_FUNCTION            1
             30 GET_ITER
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (visited)

  5          36 LOAD_FAST                2 (prerequisites)
             38 GET_ITER
        >>   40 FOR_ITER                22 (to 64)
             42 UNPACK_SEQUENCE          2
             44 STORE_FAST               5 (x)
             46 STORE_FAST               6 (y)

  6          48 LOAD_FAST                3 (graph)
             50 LOAD_FAST                5 (x)
             52 BINARY_SUBSCR
             54 LOAD_METHOD              1 (append)
             56 LOAD_FAST                6 (y)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           40

  7     >>   64 LOAD_GLOBAL              0 (range)
             66 LOAD_FAST                1 (numCourses)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                24 (to 98)
             74 STORE_FAST               7 (i)

  8          76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              2 (dfs)
             80 LOAD_FAST                3 (graph)
             82 LOAD_FAST                4 (visited)
             84 LOAD_FAST                7 (i)
             86 CALL_METHOD              3
             88 POP_JUMP_IF_TRUE        72

  9          90 POP_TOP
             92 LOAD_CONST               4 (False)
             94 RETURN_VALUE
             96 JUMP_ABSOLUTE           72

 10     >>   98 LOAD_CONST               5 (True)
            100 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fe804b45240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fe804b452f0, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object dfs at 0x7fe804b453a0, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                2 (visited)
              2 LOAD_FAST                3 (i)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (-1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 14          12 LOAD_CONST               2 (False)
             14 RETURN_VALUE

 15     >>   16 LOAD_FAST                2 (visited)
             18 LOAD_FAST                3 (i)
             20 BINARY_SUBSCR
             22 LOAD_CONST               3 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 16          28 LOAD_CONST               4 (True)
             30 RETURN_VALUE

 17     >>   32 LOAD_CONST               1 (-1)
             34 LOAD_FAST                2 (visited)
             36 LOAD_FAST                3 (i)
             38 STORE_SUBSCR

 19          40 LOAD_FAST                1 (graph)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                24 (to 74)
             50 STORE_FAST               4 (j)

 20          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              0 (dfs)
             56 LOAD_FAST                1 (graph)
             58 LOAD_FAST                2 (visited)
             60 LOAD_FAST                4 (j)
             62 CALL_METHOD              3
             64 POP_JUMP_IF_TRUE        48

 21          66 POP_TOP
             68 LOAD_CONST               2 (False)
             70 RETURN_VALUE
             72 JUMP_ABSOLUTE           48

 22     >>   74 LOAD_CONST               3 (1)
             76 LOAD_FAST                2 (visited)
             78 LOAD_FAST                3 (i)
             80 STORE_SUBSCR

 23          82 LOAD_CONST               4 (True)
             84 RETURN_VALUE
None
"
canFinish,"class Solution:
    
    def makeEdgeList(self,prerequisites):
        prereq = {}
        for prereuisite in prerequisites:
            prereq[prereuisite[1]] = prereq.get(prereuisite[1],[])+[prereuisite[0]]
            prereq[prereuisite[0]] = prereq.get(prereuisite[0],[])
        return prereq
    
    def calculateIndegree(self,edgelist):
        indegree = [0]*len(edgelist)
        vertex2id = dict((i,j) for j,i in enumerate(edgelist))
        zero_indegree = set(list(edgelist))
        for prereq in edgelist:
            for pre in edgelist[prereq]:
                indegree[vertex2id[pre]]+=1
                zero_indegree.discard(pre)
        return indegree,vertex2id,zero_indegree
                
        
    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        if len(prerequisites)==0:
            return True
        prerequisite = self.makeEdgeList(prerequisites)
        indegree,vertex2id,zero_indegree = self.calculateIndegree(prerequisite)
        count = 0
        Q = list(zero_indegree)
        while Q:
            course = Q.pop(0)
            count+=1
            prereq = prerequisite[course]
            for p in prereq:
                indegree[vertex2id[p]]-=1
                if indegree[vertex2id[p]]==0:
                    Q.append(p)
                    
        if count ==len(prerequisite):
            return True
        else:
            return False
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f927b755500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f927b755500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object makeEdgeList at 0x7f927b755240, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.makeEdgeList')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (makeEdgeList)

 10          16 LOAD_CONST               3 (<code object calculateIndegree at 0x7f927b755450, file ""<ast>"", line 10>)
             18 LOAD_CONST               4 ('Solution.calculateIndegree')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (calculateIndegree)

 22          24 LOAD_NAME                5 (int)
             26 LOAD_NAME                6 (List)
             28 LOAD_NAME                6 (List)
             30 LOAD_NAME                5 (int)
             32 BINARY_SUBSCR
             34 BINARY_SUBSCR
             36 LOAD_NAME                7 (bool)
             38 LOAD_CONST               5 (('numCourses', 'prerequisites', 'return'))
             40 BUILD_CONST_KEY_MAP      3
             42 LOAD_CONST               6 (<code object canFinish at 0x7f927b7553a0, file ""<ast>"", line 22>)
             44 LOAD_CONST               7 ('Solution.canFinish')
             46 MAKE_FUNCTION            4 (annotations)
             48 STORE_NAME               8 (canFinish)
             50 LOAD_CONST               8 (None)
             52 RETURN_VALUE

Disassembly of <code object makeEdgeList at 0x7f927b755240, file ""<ast>"", line 3>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               2 (prereq)

  5           4 LOAD_FAST                1 (prerequisites)
              6 GET_ITER
        >>    8 FOR_ITER                62 (to 72)
             10 STORE_FAST               3 (prereuisite)

  6          12 LOAD_FAST                2 (prereq)
             14 LOAD_METHOD              0 (get)
             16 LOAD_FAST                3 (prereuisite)
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBSCR
             22 BUILD_LIST               0
             24 CALL_METHOD              2
             26 LOAD_FAST                3 (prereuisite)
             28 LOAD_CONST               2 (0)
             30 BINARY_SUBSCR
             32 BUILD_LIST               1
             34 BINARY_ADD
             36 LOAD_FAST                2 (prereq)
             38 LOAD_FAST                3 (prereuisite)
             40 LOAD_CONST               1 (1)
             42 BINARY_SUBSCR
             44 STORE_SUBSCR

  7          46 LOAD_FAST                2 (prereq)
             48 LOAD_METHOD              0 (get)
             50 LOAD_FAST                3 (prereuisite)
             52 LOAD_CONST               2 (0)
             54 BINARY_SUBSCR
             56 BUILD_LIST               0
             58 CALL_METHOD              2
             60 LOAD_FAST                2 (prereq)
             62 LOAD_FAST                3 (prereuisite)
             64 LOAD_CONST               2 (0)
             66 BINARY_SUBSCR
             68 STORE_SUBSCR
             70 JUMP_ABSOLUTE            8

  8     >>   72 LOAD_FAST                2 (prereq)
             74 RETURN_VALUE

Disassembly of <code object calculateIndegree at 0x7f927b755450, file ""<ast>"", line 10>:
 11           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                1 (edgelist)
              8 CALL_FUNCTION            1
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (indegree)

 12          14 LOAD_GLOBAL              1 (dict)
             16 LOAD_CONST               2 (<code object <genexpr> at 0x7f927b7552f0, file ""<ast>"", line 12>)
             18 LOAD_CONST               3 ('Solution.calculateIndegree.<locals>.<genexpr>')
             20 MAKE_FUNCTION            0
             22 LOAD_GLOBAL              2 (enumerate)
             24 LOAD_FAST                1 (edgelist)
             26 CALL_FUNCTION            1
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 STORE_FAST               3 (vertex2id)

 13          36 LOAD_GLOBAL              3 (set)
             38 LOAD_GLOBAL              4 (list)
             40 LOAD_FAST                1 (edgelist)
             42 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             46 STORE_FAST               4 (zero_indegree)

 14          48 LOAD_FAST                1 (edgelist)
             50 GET_ITER
        >>   52 FOR_ITER                48 (to 102)
             54 STORE_FAST               5 (prereq)

 15          56 LOAD_FAST                1 (edgelist)
             58 LOAD_FAST                5 (prereq)
             60 BINARY_SUBSCR
             62 GET_ITER
        >>   64 FOR_ITER                34 (to 100)
             66 STORE_FAST               6 (pre)

 16          68 LOAD_FAST                2 (indegree)
             70 LOAD_FAST                3 (vertex2id)
             72 LOAD_FAST                6 (pre)
             74 BINARY_SUBSCR
             76 DUP_TOP_TWO
             78 BINARY_SUBSCR
             80 LOAD_CONST               4 (1)
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR

 17          88 LOAD_FAST                4 (zero_indegree)
             90 LOAD_METHOD              5 (discard)
             92 LOAD_FAST                6 (pre)
             94 CALL_METHOD              1
             96 POP_TOP
             98 JUMP_ABSOLUTE           64
        >>  100 JUMP_ABSOLUTE           52

 18     >>  102 LOAD_FAST                2 (indegree)
            104 LOAD_FAST                3 (vertex2id)
            106 LOAD_FAST                4 (zero_indegree)
            108 BUILD_TUPLE              3
            110 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f927b7552f0, file ""<ast>"", line 12>:
 12           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                18 (to 22)
              4 UNPACK_SEQUENCE          2
              6 STORE_FAST               1 (j)
              8 STORE_FAST               2 (i)
             10 LOAD_FAST                2 (i)
             12 LOAD_FAST                1 (j)
             14 BUILD_TUPLE              2
             16 YIELD_VALUE
             18 POP_TOP
             20 JUMP_ABSOLUTE            2
        >>   22 LOAD_CONST               0 (None)
             24 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f927b7553a0, file ""<ast>"", line 22>:
 23           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (prerequisites)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 24          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

 25     >>   16 LOAD_FAST                0 (self)
             18 LOAD_METHOD              1 (makeEdgeList)
             20 LOAD_FAST                2 (prerequisites)
             22 CALL_METHOD              1
             24 STORE_FAST               3 (prerequisite)

 26          26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              2 (calculateIndegree)
             30 LOAD_FAST                3 (prerequisite)
             32 CALL_METHOD              1
             34 UNPACK_SEQUENCE          3
             36 STORE_FAST               4 (indegree)
             38 STORE_FAST               5 (vertex2id)
             40 STORE_FAST               6 (zero_indegree)

 27          42 LOAD_CONST               1 (0)
             44 STORE_FAST               7 (count)

 28          46 LOAD_GLOBAL              3 (list)
             48 LOAD_FAST                6 (zero_indegree)
             50 CALL_FUNCTION            1
             52 STORE_FAST               8 (Q)

 29     >>   54 LOAD_FAST                8 (Q)
             56 POP_JUMP_IF_FALSE      142

 30          58 LOAD_FAST                8 (Q)
             60 LOAD_METHOD              4 (pop)
             62 LOAD_CONST               1 (0)
             64 CALL_METHOD              1
             66 STORE_FAST               9 (course)

 31          68 LOAD_FAST                7 (count)
             70 LOAD_CONST               3 (1)
             72 INPLACE_ADD
             74 STORE_FAST               7 (count)

 32          76 LOAD_FAST                3 (prerequisite)
             78 LOAD_FAST                9 (course)
             80 BINARY_SUBSCR
             82 STORE_FAST              10 (prereq)

 33          84 LOAD_FAST               10 (prereq)
             86 GET_ITER
        >>   88 FOR_ITER                50 (to 140)
             90 STORE_FAST              11 (p)

 34          92 LOAD_FAST                4 (indegree)
             94 LOAD_FAST                5 (vertex2id)
             96 LOAD_FAST               11 (p)
             98 BINARY_SUBSCR
            100 DUP_TOP_TWO
            102 BINARY_SUBSCR
            104 LOAD_CONST               3 (1)
            106 INPLACE_SUBTRACT
            108 ROT_THREE
            110 STORE_SUBSCR

 35         112 LOAD_FAST                4 (indegree)
            114 LOAD_FAST                5 (vertex2id)
            116 LOAD_FAST               11 (p)
            118 BINARY_SUBSCR
            120 BINARY_SUBSCR
            122 LOAD_CONST               1 (0)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE       88

 36         128 LOAD_FAST                8 (Q)
            130 LOAD_METHOD              5 (append)
            132 LOAD_FAST               11 (p)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE           88
        >>  140 JUMP_ABSOLUTE           54

 38     >>  142 LOAD_FAST                7 (count)
            144 LOAD_GLOBAL              0 (len)
            146 LOAD_FAST                3 (prerequisite)
            148 CALL_FUNCTION            1
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE      158

 39         154 LOAD_CONST               2 (True)
            156 RETURN_VALUE

 41     >>  158 LOAD_CONST               4 (False)
            160 RETURN_VALUE
            162 LOAD_CONST               0 (None)
            164 RETURN_VALUE
None
"
canFinish,"from collections import defaultdict
class Solution:
    def canFinish(self, n, E):
        arrow   = defaultdict(list)
        prereqs = defaultdict(set)
        for x,y in E:
            arrow  [y].append(x)  # courses must be taken as y -> x
            prereqs[x].add   (y)  # x, after y
        #
        # Waiting: courses with prerequisites (the rest are ok)
        waiting = {e[0] for e in E}
        # Front: Foundational courses that we can use to get started
        #        ""Courses that are foundational to others without having prerequisites themselves""
        front    = {e[1] for e in E} - waiting 
        #
        while front:
            new = []
            for y in front:
                # Visit all ""courses=x"" that depend on ""front=y""
                for x in arrow[y]:
                    #     Arrow-Order: y -> [x1,x2,x3]
                    # Remove ""y"" as prerequisite of ""xi"" (it's free to take now)
                    prereqs[x].remove(y) 
                    # if x is now free of prerequisites, then declare it a foundational course
                    if not prereqs[x]:   
                        # append to new generation of foundational courses
                        new.append(x)
                        # Remove problematic course ""x""
                        waiting.remove(x)
            front = new
        if waiting:
            return False
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('defaultdict',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (defaultdict)
              8 STORE_NAME               1 (defaultdict)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fc52f735450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc52f735450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object canFinish at 0x7fc52f7353a0, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.canFinish')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (canFinish)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object canFinish at 0x7fc52f7353a0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (defaultdict)
              2 LOAD_GLOBAL              1 (list)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (arrow)

  5           8 LOAD_GLOBAL              0 (defaultdict)
             10 LOAD_GLOBAL              2 (set)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (prereqs)

  6          16 LOAD_FAST                2 (E)
             18 GET_ITER
        >>   20 FOR_ITER                36 (to 58)
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               5 (x)
             26 STORE_FAST               6 (y)

  7          28 LOAD_FAST                3 (arrow)
             30 LOAD_FAST                6 (y)
             32 BINARY_SUBSCR
             34 LOAD_METHOD              3 (append)
             36 LOAD_FAST                5 (x)
             38 CALL_METHOD              1
             40 POP_TOP

  8          42 LOAD_FAST                4 (prereqs)
             44 LOAD_FAST                5 (x)
             46 BINARY_SUBSCR
             48 LOAD_METHOD              4 (add)
             50 LOAD_FAST                6 (y)
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           20

 11     >>   58 LOAD_CONST               1 (<code object <setcomp> at 0x7fc52f735240, file ""<ast>"", line 11>)
             60 LOAD_CONST               2 ('Solution.canFinish.<locals>.<setcomp>')
             62 MAKE_FUNCTION            0
             64 LOAD_FAST                2 (E)
             66 GET_ITER
             68 CALL_FUNCTION            1
             70 STORE_FAST               7 (waiting)

 14          72 LOAD_CONST               3 (<code object <setcomp> at 0x7fc52f7352f0, file ""<ast>"", line 14>)
             74 LOAD_CONST               2 ('Solution.canFinish.<locals>.<setcomp>')
             76 MAKE_FUNCTION            0
             78 LOAD_FAST                2 (E)
             80 GET_ITER
             82 CALL_FUNCTION            1
             84 LOAD_FAST                7 (waiting)
             86 BINARY_SUBTRACT
             88 STORE_FAST               8 (front)

 16     >>   90 LOAD_FAST                8 (front)
             92 POP_JUMP_IF_FALSE      170

 17          94 BUILD_LIST               0
             96 STORE_FAST               9 (new)

 18          98 LOAD_FAST                8 (front)
            100 GET_ITER
        >>  102 FOR_ITER                60 (to 164)
            104 STORE_FAST               6 (y)

 20         106 LOAD_FAST                3 (arrow)
            108 LOAD_FAST                6 (y)
            110 BINARY_SUBSCR
            112 GET_ITER
        >>  114 FOR_ITER                46 (to 162)
            116 STORE_FAST               5 (x)

 23         118 LOAD_FAST                4 (prereqs)
            120 LOAD_FAST                5 (x)
            122 BINARY_SUBSCR
            124 LOAD_METHOD              5 (remove)
            126 LOAD_FAST                6 (y)
            128 CALL_METHOD              1
            130 POP_TOP

 25         132 LOAD_FAST                4 (prereqs)
            134 LOAD_FAST                5 (x)
            136 BINARY_SUBSCR
            138 POP_JUMP_IF_TRUE       114

 27         140 LOAD_FAST                9 (new)
            142 LOAD_METHOD              3 (append)
            144 LOAD_FAST                5 (x)
            146 CALL_METHOD              1
            148 POP_TOP

 29         150 LOAD_FAST                7 (waiting)
            152 LOAD_METHOD              5 (remove)
            154 LOAD_FAST                5 (x)
            156 CALL_METHOD              1
            158 POP_TOP
            160 JUMP_ABSOLUTE          114
        >>  162 JUMP_ABSOLUTE          102

 30     >>  164 LOAD_FAST                9 (new)
            166 STORE_FAST               8 (front)
            168 JUMP_ABSOLUTE           90

 31     >>  170 LOAD_FAST                7 (waiting)
            172 POP_JUMP_IF_FALSE      178

 32         174 LOAD_CONST               4 (False)
            176 RETURN_VALUE

 33     >>  178 LOAD_CONST               5 (True)
            180 RETURN_VALUE

Disassembly of <code object <setcomp> at 0x7fc52f735240, file ""<ast>"", line 11>:
 11           0 BUILD_SET                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (0)
             12 BINARY_SUBSCR
             14 SET_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <setcomp> at 0x7fc52f7352f0, file ""<ast>"", line 14>:
 14           0 BUILD_SET                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (e)
              8 LOAD_FAST                1 (e)
             10 LOAD_CONST               0 (1)
             12 BINARY_SUBSCR
             14 SET_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
canFinish,"from typing import collections
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        T = []
        visited = [False]*numCourses
        queue = collections.deque()
        indegree = [0]*numCourses
        graph = collections.defaultdict(list)
        for i,j in prerequisites:
            indegree[i] += 1
            graph[j].append(i)
        n = len(graph)
        for i in range(numCourses):
            if indegree[i] == 0:
                queue.appendleft(i)
                visited[i] = True
        while queue:
            v = queue.popleft()
            T.append(v)
            for i in graph[v]:
                if not visited[i]:
                    indegree[i] -= 1
                    if indegree[i] == 0:
                        queue.appendleft(i)
                        visited[i] = True
        return True if len(T) == numCourses else False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('collections',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (collections)
              8 STORE_NAME               1 (collections)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f800aa852f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f800aa852f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f800aa85240, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f800aa85240, file ""<ast>"", line 3>:
  4           0 BUILD_LIST               0
              2 STORE_FAST               3 (T)

  5           4 LOAD_CONST               1 (False)
              6 BUILD_LIST               1
              8 LOAD_FAST                1 (numCourses)
             10 BINARY_MULTIPLY
             12 STORE_FAST               4 (visited)

  6          14 LOAD_GLOBAL              0 (collections)
             16 LOAD_METHOD              1 (deque)
             18 CALL_METHOD              0
             20 STORE_FAST               5 (queue)

  7          22 LOAD_CONST               2 (0)
             24 BUILD_LIST               1
             26 LOAD_FAST                1 (numCourses)
             28 BINARY_MULTIPLY
             30 STORE_FAST               6 (indegree)

  8          32 LOAD_GLOBAL              0 (collections)
             34 LOAD_METHOD              2 (defaultdict)
             36 LOAD_GLOBAL              3 (list)
             38 CALL_METHOD              1
             40 STORE_FAST               7 (graph)

  9          42 LOAD_FAST                2 (prerequisites)
             44 GET_ITER
        >>   46 FOR_ITER                38 (to 86)
             48 UNPACK_SEQUENCE          2
             50 STORE_FAST               8 (i)
             52 STORE_FAST               9 (j)

 10          54 LOAD_FAST                6 (indegree)
             56 LOAD_FAST                8 (i)
             58 DUP_TOP_TWO
             60 BINARY_SUBSCR
             62 LOAD_CONST               3 (1)
             64 INPLACE_ADD
             66 ROT_THREE
             68 STORE_SUBSCR

 11          70 LOAD_FAST                7 (graph)
             72 LOAD_FAST                9 (j)
             74 BINARY_SUBSCR
             76 LOAD_METHOD              4 (append)
             78 LOAD_FAST                8 (i)
             80 CALL_METHOD              1
             82 POP_TOP
             84 JUMP_ABSOLUTE           46

 12     >>   86 LOAD_GLOBAL              5 (len)
             88 LOAD_FAST                7 (graph)
             90 CALL_FUNCTION            1
             92 STORE_FAST              10 (n)

 13          94 LOAD_GLOBAL              6 (range)
             96 LOAD_FAST                1 (numCourses)
             98 CALL_FUNCTION            1
            100 GET_ITER
        >>  102 FOR_ITER                34 (to 138)
            104 STORE_FAST               8 (i)

 14         106 LOAD_FAST                6 (indegree)
            108 LOAD_FAST                8 (i)
            110 BINARY_SUBSCR
            112 LOAD_CONST               2 (0)
            114 COMPARE_OP               2 (==)
            116 POP_JUMP_IF_FALSE      102

 15         118 LOAD_FAST                5 (queue)
            120 LOAD_METHOD              7 (appendleft)
            122 LOAD_FAST                8 (i)
            124 CALL_METHOD              1
            126 POP_TOP

 16         128 LOAD_CONST               4 (True)
            130 LOAD_FAST                4 (visited)
            132 LOAD_FAST                8 (i)
            134 STORE_SUBSCR
            136 JUMP_ABSOLUTE          102

 17     >>  138 LOAD_FAST                5 (queue)
            140 POP_JUMP_IF_FALSE      230

 18         142 LOAD_FAST                5 (queue)
            144 LOAD_METHOD              8 (popleft)
            146 CALL_METHOD              0
            148 STORE_FAST              11 (v)

 19         150 LOAD_FAST                3 (T)
            152 LOAD_METHOD              4 (append)
            154 LOAD_FAST               11 (v)
            156 CALL_METHOD              1
            158 POP_TOP

 20         160 LOAD_FAST                7 (graph)
            162 LOAD_FAST               11 (v)
            164 BINARY_SUBSCR
            166 GET_ITER
        >>  168 FOR_ITER                58 (to 228)
            170 STORE_FAST               8 (i)

 21         172 LOAD_FAST                4 (visited)
            174 LOAD_FAST                8 (i)
            176 BINARY_SUBSCR
            178 POP_JUMP_IF_TRUE       168

 22         180 LOAD_FAST                6 (indegree)
            182 LOAD_FAST                8 (i)
            184 DUP_TOP_TWO
            186 BINARY_SUBSCR
            188 LOAD_CONST               3 (1)
            190 INPLACE_SUBTRACT
            192 ROT_THREE
            194 STORE_SUBSCR

 23         196 LOAD_FAST                6 (indegree)
            198 LOAD_FAST                8 (i)
            200 BINARY_SUBSCR
            202 LOAD_CONST               2 (0)
            204 COMPARE_OP               2 (==)
            206 POP_JUMP_IF_FALSE      168

 24         208 LOAD_FAST                5 (queue)
            210 LOAD_METHOD              7 (appendleft)
            212 LOAD_FAST                8 (i)
            214 CALL_METHOD              1
            216 POP_TOP

 25         218 LOAD_CONST               4 (True)
            220 LOAD_FAST                4 (visited)
            222 LOAD_FAST                8 (i)
            224 STORE_SUBSCR
            226 JUMP_ABSOLUTE          168
        >>  228 JUMP_ABSOLUTE          138

 26     >>  230 LOAD_GLOBAL              5 (len)
            232 LOAD_FAST                3 (T)
            234 CALL_FUNCTION            1
            236 LOAD_FAST                1 (numCourses)
            238 COMPARE_OP               2 (==)
            240 POP_JUMP_IF_FALSE      246
            242 LOAD_CONST               4 (True)
            244 RETURN_VALUE
        >>  246 LOAD_CONST               1 (False)
            248 RETURN_VALUE
None
"
canFinish,"import collections
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        ## RC ##
        ## APPROACH : DFS ##
        ## LOGIC: DETECT CYCLE IN DIRECTED GRAPH. ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##

        # DFS function will return False when a cycle is detected else returns True. (at one particular node)
        def hasCycle(node):
            
            if(node in exploring):                     # Cycle detected. If you are still exploring and found the same element again in exploring.
                return True
            
            if(node in explored):                       
                return False

            exploring.add(node)                         # mark this node as visited.
                                                         
            for nei in graph[node]:                     # visit all neigbhors of this node.
                if( hasCycle(nei) ):
                    return True                         # if one of its child has cycle return from function call
            
            explored.add(node)
            exploring.remove(node)
            
            return False
        
        graph = collections.defaultdict(list)
        for u,v in prerequisites:
            graph[u].append(v)
        explored = set()                                 # To keep track of explored nodes in the graph
        exploring = set()                                # still in exploring, not yet finished.
        
        for node in list(graph):                         # watch out => list(graph)
            if(node not in explored):
                if(hasCycle(node)):         
                    return False
        return True
        
        ## APPROACH : BFS ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##
        graph = collections.defaultdict(list)
        in_degree = collections.defaultdict(int)
        for u,v in prerequisites:
            graph[u].append(v)
            in_degree[v] += 1

        # init queue with indegree 0 nodes
        queue = collections.deque([ u for u in range(0, numCourses) if u not in in_degree])

        count = 0
        while(queue):
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                count += 1
                for nei in graph[node]:
                    in_degree[nei] -= 1

                    if in_degree[nei] == 0:
                        queue.append( nei )
        return count == numCourses      # check if all courses are completed
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f9a742d5450, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9a742d5450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f9a742d53a0, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f9a742d53a0, file ""<ast>"", line 3>:
 12           0 LOAD_CLOSURE             0 (explored)
              2 LOAD_CLOSURE             1 (exploring)
              4 LOAD_CLOSURE             2 (graph)
              6 LOAD_CLOSURE             3 (hasCycle)
              8 BUILD_TUPLE              4
             10 LOAD_CONST               1 (<code object hasCycle at 0x7f9a742d5240, file ""<ast>"", line 12>)
             12 LOAD_CONST               2 ('Solution.canFinish.<locals>.hasCycle')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              3 (hasCycle)

 31          18 LOAD_GLOBAL              0 (collections)
             20 LOAD_METHOD              1 (defaultdict)
             22 LOAD_GLOBAL              2 (list)
             24 CALL_METHOD              1
             26 STORE_DEREF              2 (graph)

 32          28 LOAD_FAST                2 (prerequisites)
             30 GET_ITER
        >>   32 FOR_ITER                22 (to 56)
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               3 (u)
             38 STORE_FAST               4 (v)

 33          40 LOAD_DEREF               2 (graph)
             42 LOAD_FAST                3 (u)
             44 BINARY_SUBSCR
             46 LOAD_METHOD              3 (append)
             48 LOAD_FAST                4 (v)
             50 CALL_METHOD              1
             52 POP_TOP
             54 JUMP_ABSOLUTE           32

 34     >>   56 LOAD_GLOBAL              4 (set)
             58 CALL_FUNCTION            0
             60 STORE_DEREF              0 (explored)

 35          62 LOAD_GLOBAL              4 (set)
             64 CALL_FUNCTION            0
             66 STORE_DEREF              1 (exploring)

 37          68 LOAD_GLOBAL              2 (list)
             70 LOAD_DEREF               2 (graph)
             72 CALL_FUNCTION            1
             74 GET_ITER
        >>   76 FOR_ITER                26 (to 104)
             78 STORE_FAST               5 (node)

 38          80 LOAD_FAST                5 (node)
             82 LOAD_DEREF               0 (explored)
             84 COMPARE_OP               7 (not in)
             86 POP_JUMP_IF_FALSE       76

 39          88 LOAD_DEREF               3 (hasCycle)
             90 LOAD_FAST                5 (node)
             92 CALL_FUNCTION            1
             94 POP_JUMP_IF_FALSE       76

 40          96 POP_TOP
             98 LOAD_CONST               3 (False)
            100 RETURN_VALUE
            102 JUMP_ABSOLUTE           76

 41     >>  104 LOAD_CONST               4 (True)
            106 RETURN_VALUE

 48     >>  108 FOR_ITER                38 (to 148)
            110 UNPACK_SEQUENCE          2
            112 STORE_FAST               3 (u)
            114 STORE_FAST               4 (v)

 49         116 LOAD_DEREF               2 (graph)
            118 LOAD_FAST                3 (u)
            120 BINARY_SUBSCR
            122 LOAD_METHOD              3 (append)
            124 LOAD_FAST                4 (v)
            126 CALL_METHOD              1
            128 POP_TOP

 50         130 LOAD_DEREF               4 (in_degree)
            132 LOAD_FAST                4 (v)
            134 DUP_TOP_TWO
            136 BINARY_SUBSCR
            138 LOAD_CONST               5 (1)
            140 INPLACE_ADD
            142 ROT_THREE
            144 STORE_SUBSCR
            146 JUMP_ABSOLUTE          108

 53     >>  148 LOAD_GLOBAL              0 (collections)
            150 LOAD_METHOD              6 (deque)
            152 LOAD_CLOSURE             4 (in_degree)
            154 BUILD_TUPLE              1
            156 LOAD_CONST               6 (<code object <listcomp> at 0x7f9a742d52f0, file ""<ast>"", line 53>)
            158 LOAD_CONST               7 ('Solution.canFinish.<locals>.<listcomp>')
            160 MAKE_FUNCTION            8 (closure)
            162 LOAD_GLOBAL              7 (range)
            164 LOAD_CONST               8 (0)
            166 LOAD_FAST                1 (numCourses)
            168 CALL_FUNCTION            2
            170 GET_ITER
            172 CALL_FUNCTION            1
            174 CALL_METHOD              1
            176 STORE_FAST               6 (queue)

 55         178 LOAD_CONST               8 (0)
            180 STORE_FAST               7 (count)

 56     >>  182 LOAD_FAST                6 (queue)
            184 EXTENDED_ARG             1
            186 POP_JUMP_IF_FALSE      284

 57         188 LOAD_GLOBAL              8 (len)
            190 LOAD_FAST                6 (queue)
            192 CALL_FUNCTION            1
            194 STORE_FAST               8 (size)

 58         196 LOAD_GLOBAL              7 (range)
            198 LOAD_FAST                8 (size)
            200 CALL_FUNCTION            1
            202 GET_ITER
        >>  204 FOR_ITER                76 (to 282)
            206 STORE_FAST               9 (_)

 59         208 LOAD_FAST                6 (queue)
            210 LOAD_METHOD              9 (popleft)
            212 CALL_METHOD              0
            214 STORE_FAST               5 (node)

 60         216 LOAD_FAST                7 (count)
            218 LOAD_CONST               5 (1)
            220 INPLACE_ADD
            222 STORE_FAST               7 (count)

 61         224 LOAD_DEREF               2 (graph)
            226 LOAD_FAST                5 (node)
            228 BINARY_SUBSCR
            230 GET_ITER
        >>  232 FOR_ITER                46 (to 280)
            234 STORE_FAST              10 (nei)

 62         236 LOAD_DEREF               4 (in_degree)
            238 LOAD_FAST               10 (nei)
            240 DUP_TOP_TWO
            242 BINARY_SUBSCR
            244 LOAD_CONST               5 (1)
            246 INPLACE_SUBTRACT
            248 ROT_THREE
            250 STORE_SUBSCR

 64         252 LOAD_DEREF               4 (in_degree)
            254 LOAD_FAST               10 (nei)
            256 BINARY_SUBSCR
            258 LOAD_CONST               8 (0)
            260 COMPARE_OP               2 (==)
            262 EXTENDED_ARG             0
            264 POP_JUMP_IF_FALSE      232

 65         266 LOAD_FAST                6 (queue)
            268 LOAD_METHOD              3 (append)
            270 LOAD_FAST               10 (nei)
            272 CALL_METHOD              1
            274 POP_TOP
            276 EXTENDED_ARG             0
            278 JUMP_ABSOLUTE          232
        >>  280 JUMP_ABSOLUTE          204
        >>  282 JUMP_ABSOLUTE          182

 66     >>  284 LOAD_FAST                7 (count)
            286 LOAD_FAST                1 (numCourses)
            288 COMPARE_OP               2 (==)
            290 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f9a742d5240, file ""<ast>"", line 12>:
 14           0 LOAD_FAST                0 (node)
              2 LOAD_DEREF               1 (exploring)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 15           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 17     >>   12 LOAD_FAST                0 (node)
             14 LOAD_DEREF               0 (explored)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       24

 18          20 LOAD_CONST               2 (False)
             22 RETURN_VALUE

 20     >>   24 LOAD_DEREF               1 (exploring)
             26 LOAD_METHOD              0 (add)
             28 LOAD_FAST                0 (node)
             30 CALL_METHOD              1
             32 POP_TOP

 22          34 LOAD_DEREF               2 (graph)
             36 LOAD_FAST                0 (node)
             38 BINARY_SUBSCR
             40 GET_ITER
        >>   42 FOR_ITER                18 (to 62)
             44 STORE_FAST               1 (nei)

 23          46 LOAD_DEREF               3 (hasCycle)
             48 LOAD_FAST                1 (nei)
             50 CALL_FUNCTION            1
             52 POP_JUMP_IF_FALSE       42

 24          54 POP_TOP
             56 LOAD_CONST               1 (True)
             58 RETURN_VALUE
             60 JUMP_ABSOLUTE           42

 26     >>   62 LOAD_DEREF               0 (explored)
             64 LOAD_METHOD              0 (add)
             66 LOAD_FAST                0 (node)
             68 CALL_METHOD              1
             70 POP_TOP

 27          72 LOAD_DEREF               1 (exploring)
             74 LOAD_METHOD              1 (remove)
             76 LOAD_FAST                0 (node)
             78 CALL_METHOD              1
             80 POP_TOP

 29          82 LOAD_CONST               2 (False)
             84 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f9a742d52f0, file ""<ast>"", line 53>:
 53           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (u)
              8 LOAD_FAST                1 (u)
             10 LOAD_DEREF               0 (in_degree)
             12 COMPARE_OP               7 (not in)
             14 POP_JUMP_IF_FALSE        4
             16 LOAD_FAST                1 (u)
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        >>   22 RETURN_VALUE
None
"
canFinish,"import collections
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        
		# Constant defined for course state
        NOT_CHECKED, CHECKING, COMPLETED = 0, 1, 2
        
        # -------------------------------
        
        def has_deadlock( course )->bool:
            
            if course_state[course] == CHECKING:
                # There is a cycle(i.e., deadlock ) in prerequisites
                return True
            
            elif course_state[course] == COMPLETED:
                # current course has been checked and marked as completed
                return False
            
            
            
            # update current course as checking
            course_state[course] = CHECKING
            
            # check pre_course in DFS and detect whether there is deadlock
            for pre_course in requirement[course]:
                
                if has_deadlock( pre_course ):
                    # deadlock is found, impossible to finish all courses
                    return True
                
                                
            # update current course as completed
            course_state[course] = COMPLETED
            
            return False
        
        # -------------------------------
        
        # each course maintain a list of its own prerequisites
        requirement = collections.defaultdict( list )
        
        for course, pre_course in prerequisites:
            requirement[course].append( pre_course )
        
        
        # each course maintain a state among {NOT_CHECKED, CHECKING, COMPLETED}
		# Initial state is NOT_CHECKED 
        course_state = [ NOT_CHECKED for _ in range(numCourses) ]
           
        # Launch cycle (i.e., deadlock ) detection in DFS
        for course_idx in range(0, numCourses):
            
            if has_deadlock(course_idx):
                # deadlock is found, impossible to finish all courses
                return False
        
        # we can finish all course with required order 
        return True
            
            
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f7f8ad853a0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7f8ad853a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_NAME                5 (bool)
             22 LOAD_CONST               1 (('numCourses', 'prerequisites', 'return'))
             24 BUILD_CONST_KEY_MAP      3
             26 LOAD_CONST               2 (<code object canFinish at 0x7f7f8ad85500, file ""<ast>"", line 3>)
             28 LOAD_CONST               3 ('Solution.canFinish')
             30 MAKE_FUNCTION            4 (annotations)
             32 STORE_NAME               6 (canFinish)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object canFinish at 0x7f7f8ad85500, file ""<ast>"", line 3>:
  6           0 LOAD_CONST               1 ((0, 1, 2))
              2 UNPACK_SEQUENCE          3
              4 STORE_DEREF              2 (NOT_CHECKED)
              6 STORE_DEREF              0 (CHECKING)
              8 STORE_DEREF              1 (COMPLETED)

 10          10 LOAD_GLOBAL              0 (bool)
             12 LOAD_CONST               2 (('return',))
             14 BUILD_CONST_KEY_MAP      1
             16 LOAD_CLOSURE             0 (CHECKING)
             18 LOAD_CLOSURE             1 (COMPLETED)
             20 LOAD_CLOSURE             3 (course_state)
             22 LOAD_CLOSURE             4 (has_deadlock)
             24 LOAD_CLOSURE             5 (requirement)
             26 BUILD_TUPLE              5
             28 LOAD_CONST               3 (<code object has_deadlock at 0x7f7f8ad85240, file ""<ast>"", line 10>)
             30 LOAD_CONST               4 ('Solution.canFinish.<locals>.has_deadlock')
             32 MAKE_FUNCTION           12 (annotations, closure)
             34 STORE_DEREF              4 (has_deadlock)

 41          36 LOAD_GLOBAL              1 (collections)
             38 LOAD_METHOD              2 (defaultdict)
             40 LOAD_GLOBAL              3 (list)
             42 CALL_METHOD              1
             44 STORE_DEREF              5 (requirement)

 43          46 LOAD_FAST                2 (prerequisites)
             48 GET_ITER
        >>   50 FOR_ITER                22 (to 74)
             52 UNPACK_SEQUENCE          2
             54 STORE_FAST               3 (course)
             56 STORE_FAST               4 (pre_course)

 44          58 LOAD_DEREF               5 (requirement)
             60 LOAD_FAST                3 (course)
             62 BINARY_SUBSCR
             64 LOAD_METHOD              4 (append)
             66 LOAD_FAST                4 (pre_course)
             68 CALL_METHOD              1
             70 POP_TOP
             72 JUMP_ABSOLUTE           50

 49     >>   74 LOAD_CLOSURE             2 (NOT_CHECKED)
             76 BUILD_TUPLE              1
             78 LOAD_CONST               5 (<code object <listcomp> at 0x7f7f8ad852f0, file ""<ast>"", line 49>)
             80 LOAD_CONST               6 ('Solution.canFinish.<locals>.<listcomp>')
             82 MAKE_FUNCTION            8 (closure)
             84 LOAD_GLOBAL              5 (range)
             86 LOAD_FAST                1 (numCourses)
             88 CALL_FUNCTION            1
             90 GET_ITER
             92 CALL_FUNCTION            1
             94 STORE_DEREF              3 (course_state)

 52          96 LOAD_GLOBAL              5 (range)
             98 LOAD_CONST               7 (0)
            100 LOAD_FAST                1 (numCourses)
            102 CALL_FUNCTION            2
            104 GET_ITER
        >>  106 FOR_ITER                18 (to 126)
            108 STORE_FAST               5 (course_idx)

 54         110 LOAD_DEREF               4 (has_deadlock)
            112 LOAD_FAST                5 (course_idx)
            114 CALL_FUNCTION            1
            116 POP_JUMP_IF_FALSE      106

 56         118 POP_TOP
            120 LOAD_CONST               8 (False)
            122 RETURN_VALUE
            124 JUMP_ABSOLUTE          106

 59     >>  126 LOAD_CONST               9 (True)
            128 RETURN_VALUE

Disassembly of <code object has_deadlock at 0x7f7f8ad85240, file ""<ast>"", line 10>:
 12           0 LOAD_DEREF               2 (course_state)
              2 LOAD_FAST                0 (course)
              4 BINARY_SUBSCR
              6 LOAD_DEREF               0 (CHECKING)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 14          12 LOAD_CONST               1 (True)
             14 RETURN_VALUE

 16     >>   16 LOAD_DEREF               2 (course_state)
             18 LOAD_FAST                0 (course)
             20 BINARY_SUBSCR
             22 LOAD_DEREF               1 (COMPLETED)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

 18          28 LOAD_CONST               2 (False)
             30 RETURN_VALUE

 23     >>   32 LOAD_DEREF               0 (CHECKING)
             34 LOAD_DEREF               2 (course_state)
             36 LOAD_FAST                0 (course)
             38 STORE_SUBSCR

 26          40 LOAD_DEREF               4 (requirement)
             42 LOAD_FAST                0 (course)
             44 BINARY_SUBSCR
             46 GET_ITER
        >>   48 FOR_ITER                18 (to 68)
             50 STORE_FAST               1 (pre_course)

 28          52 LOAD_DEREF               3 (has_deadlock)
             54 LOAD_FAST                1 (pre_course)
             56 CALL_FUNCTION            1
             58 POP_JUMP_IF_FALSE       48

 30          60 POP_TOP
             62 LOAD_CONST               1 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           48

 34     >>   68 LOAD_DEREF               1 (COMPLETED)
             70 LOAD_DEREF               2 (course_state)
             72 LOAD_FAST                0 (course)
             74 STORE_SUBSCR

 36          76 LOAD_CONST               2 (False)
             78 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f7f8ad852f0, file ""<ast>"", line 49>:
 49           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_DEREF               0 (NOT_CHECKED)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
canJump,"from typing import List
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        if nums[0] == 0 and len(nums) > 1:
            return False
        
        # maximum_dis stands for the maximum distance we can reach so far 
        maximum_dis = 0
        for i in range(len(nums)):
            # If the current index is beyond the maximum distance we can jump to, directly return False
            if i > maximum_dis:
                return False
            
            # If maximum_dis larger or equal to the last index, it means we can reach the last index for sure
            if maximum_dis >= len(nums) - 1:
                return True
            
            # Update the maximum_dis
            if nums[i] + i > maximum_dis:
                maximum_dis = nums[i] + i
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f066a595240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f066a595240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f066a5952f0, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f066a5952f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       28
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (nums)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               2 (1)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       28

  5          24 LOAD_CONST               3 (False)
             26 RETURN_VALUE

  8     >>   28 LOAD_CONST               1 (0)
             30 STORE_FAST               2 (maximum_dis)

  9          32 LOAD_GLOBAL              1 (range)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                1 (nums)
             38 CALL_FUNCTION            1
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                68 (to 114)
             46 STORE_FAST               3 (i)

 11          48 LOAD_FAST                3 (i)
             50 LOAD_FAST                2 (maximum_dis)
             52 COMPARE_OP               4 (>)
             54 POP_JUMP_IF_FALSE       62

 12          56 POP_TOP
             58 LOAD_CONST               3 (False)
             60 RETURN_VALUE

 15     >>   62 LOAD_FAST                2 (maximum_dis)
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (nums)
             68 CALL_FUNCTION            1
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 COMPARE_OP               5 (>=)
             76 POP_JUMP_IF_FALSE       84

 16          78 POP_TOP
             80 LOAD_CONST               4 (True)
             82 RETURN_VALUE

 19     >>   84 LOAD_FAST                1 (nums)
             86 LOAD_FAST                3 (i)
             88 BINARY_SUBSCR
             90 LOAD_FAST                3 (i)
             92 BINARY_ADD
             94 LOAD_FAST                2 (maximum_dis)
             96 COMPARE_OP               4 (>)
             98 POP_JUMP_IF_FALSE       44

 20         100 LOAD_FAST                1 (nums)
            102 LOAD_FAST                3 (i)
            104 BINARY_SUBSCR
            106 LOAD_FAST                3 (i)
            108 BINARY_ADD
            110 STORE_FAST               2 (maximum_dis)
            112 JUMP_ABSOLUTE           44
        >>  114 LOAD_CONST               0 (None)
            116 RETURN_VALUE
None
"
canJump,"class Solution:
                    
    def canJump(self, nums:List[int])->bool:
        max_reach = nums[0]
        i = 0
        while i <= max_reach and i < len(nums):
            v = nums[i]
            max_reach = max(max_reach, i + v)
            i += 1
        return max_reach >= len(nums) - 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff89c9252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff89c9252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7ff89c925240, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7ff89c925240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 STORE_FAST               2 (max_reach)

  5           8 LOAD_CONST               1 (0)
             10 STORE_FAST               3 (i)

  6     >>   12 LOAD_FAST                3 (i)
             14 LOAD_FAST                2 (max_reach)
             16 COMPARE_OP               1 (<=)
             18 POP_JUMP_IF_FALSE       64
             20 LOAD_FAST                3 (i)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_FALSE       64

  7          32 LOAD_FAST                1 (nums)
             34 LOAD_FAST                3 (i)
             36 BINARY_SUBSCR
             38 STORE_FAST               4 (v)

  8          40 LOAD_GLOBAL              1 (max)
             42 LOAD_FAST                2 (max_reach)
             44 LOAD_FAST                3 (i)
             46 LOAD_FAST                4 (v)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 STORE_FAST               2 (max_reach)

  9          54 LOAD_FAST                3 (i)
             56 LOAD_CONST               2 (1)
             58 INPLACE_ADD
             60 STORE_FAST               3 (i)
             62 JUMP_ABSOLUTE           12

 10     >>   64 LOAD_FAST                2 (max_reach)
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                1 (nums)
             70 CALL_FUNCTION            1
             72 LOAD_CONST               2 (1)
             74 BINARY_SUBTRACT
             76 COMPARE_OP               5 (>=)
             78 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        # cover simple cases
        if len(nums) == 1:
            return True
        elif nums[0] == 0:
            return False
        # process from right to left and keep track of
        # how many steps are need to get to the end
        min_steps_needed = 0
        for num in reversed(nums[:-1]):
			# we need at least one step to get from one index to the next one
            min_steps_needed += 1
			# if we have least that number at the current index, we can reset the step counter
            if num >= min_steps_needed:
                min_steps_needed = 0
		# if we do not need extra steps, return True (`min_steps_needed = 0`) and 
		# otherwise False (`min_steps_needed > 0`)
        return min_steps_needed == 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4c431952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4c431952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f4c43195240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f4c43195240, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  5          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

  6     >>   16 LOAD_FAST                1 (nums)
             18 LOAD_CONST               3 (0)
             20 BINARY_SUBSCR
             22 LOAD_CONST               3 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

  7          28 LOAD_CONST               4 (False)
             30 RETURN_VALUE

 10     >>   32 LOAD_CONST               3 (0)
             34 STORE_FAST               2 (min_steps_needed)

 11          36 LOAD_GLOBAL              1 (reversed)
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               5 (-1)
             44 BUILD_SLICE              2
             46 BINARY_SUBSCR
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                24 (to 78)
             54 STORE_FAST               3 (num)

 13          56 LOAD_FAST                2 (min_steps_needed)
             58 LOAD_CONST               1 (1)
             60 INPLACE_ADD
             62 STORE_FAST               2 (min_steps_needed)

 15          64 LOAD_FAST                3 (num)
             66 LOAD_FAST                2 (min_steps_needed)
             68 COMPARE_OP               5 (>=)
             70 POP_JUMP_IF_FALSE       52

 16          72 LOAD_CONST               3 (0)
             74 STORE_FAST               2 (min_steps_needed)
             76 JUMP_ABSOLUTE           52

 19     >>   78 LOAD_FAST                2 (min_steps_needed)
             80 LOAD_CONST               3 (0)
             82 COMPARE_OP               2 (==)
             84 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums:List[int])->bool:
        required_length = 1

        for i in range(len(nums) - 2, -1, -1):
            if nums[i] > 0 and nums[i] >= required_length:
                required_length = 1
            else:
                required_length += 1


        if required_length == 1:
            return True

        return False","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f361c8c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f361c8c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f361c8c5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f361c8c5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (required_length)

  5           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               2 (2)
             14 BINARY_SUBTRACT
             16 LOAD_CONST               3 (-1)
             18 LOAD_CONST               3 (-1)
             20 CALL_FUNCTION            3
             22 GET_ITER
        >>   24 FOR_ITER                42 (to 68)
             26 STORE_FAST               3 (i)

  6          28 LOAD_FAST                1 (nums)
             30 LOAD_FAST                3 (i)
             32 BINARY_SUBSCR
             34 LOAD_CONST               4 (0)
             36 COMPARE_OP               4 (>)
             38 POP_JUMP_IF_FALSE       58
             40 LOAD_FAST                1 (nums)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                2 (required_length)
             48 COMPARE_OP               5 (>=)
             50 POP_JUMP_IF_FALSE       58

  7          52 LOAD_CONST               1 (1)
             54 STORE_FAST               2 (required_length)
             56 JUMP_ABSOLUTE           24

  9     >>   58 LOAD_FAST                2 (required_length)
             60 LOAD_CONST               1 (1)
             62 INPLACE_ADD
             64 STORE_FAST               2 (required_length)
             66 JUMP_ABSOLUTE           24

 12     >>   68 LOAD_FAST                2 (required_length)
             70 LOAD_CONST               1 (1)
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       80

 13          76 LOAD_CONST               5 (True)
             78 RETURN_VALUE

 15     >>   80 LOAD_CONST               6 (False)
             82 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
# greedy -- reach means last num's maximum reach position, if current index > reach, then means can't reach current position from last number
        reach = 0
        for i, num in enumerate(nums):
            if i > reach:
                return False
            reach = max(reach, i + num)
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc5529152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc5529152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7fc552915240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7fc552915240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (reach)

  5           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (nums)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                36 (to 50)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (i)
             18 STORE_FAST               4 (num)

  6          20 LOAD_FAST                3 (i)
             22 LOAD_FAST                2 (reach)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       34

  7          28 POP_TOP
             30 LOAD_CONST               2 (False)
             32 RETURN_VALUE

  8     >>   34 LOAD_GLOBAL              1 (max)
             36 LOAD_FAST                2 (reach)
             38 LOAD_FAST                3 (i)
             40 LOAD_FAST                4 (num)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 STORE_FAST               2 (reach)
             48 JUMP_ABSOLUTE           12

  9     >>   50 LOAD_CONST               3 (True)
             52 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        max_span = 0
        for i, num in enumerate(nums):
            if i + num >= len(nums) - 1:
                return True
            max_span = max(max_span - 1, num)
            if max_span == 0:
                return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1caadc52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1caadc52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f1caadc5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f1caadc5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (max_span)

  4           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (nums)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                62 (to 76)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (i)
             18 STORE_FAST               4 (num)

  5          20 LOAD_FAST                3 (i)
             22 LOAD_FAST                4 (num)
             24 BINARY_ADD
             26 LOAD_GLOBAL              1 (len)
             28 LOAD_FAST                1 (nums)
             30 CALL_FUNCTION            1
             32 LOAD_CONST               2 (1)
             34 BINARY_SUBTRACT
             36 COMPARE_OP               5 (>=)
             38 POP_JUMP_IF_FALSE       46

  6          40 POP_TOP
             42 LOAD_CONST               3 (True)
             44 RETURN_VALUE

  7     >>   46 LOAD_GLOBAL              2 (max)
             48 LOAD_FAST                2 (max_span)
             50 LOAD_CONST               2 (1)
             52 BINARY_SUBTRACT
             54 LOAD_FAST                4 (num)
             56 CALL_FUNCTION            2
             58 STORE_FAST               2 (max_span)

  8          60 LOAD_FAST                2 (max_span)
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       12

  9          68 POP_TOP
             70 LOAD_CONST               4 (False)
             72 RETURN_VALUE
             74 JUMP_ABSOLUTE           12
        >>   76 LOAD_CONST               0 (None)
             78 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        maxdis = 0  # max distance can be reached after i iteration
        for i in range(len(nums)):
            if i > maxdis: return False #if position i can not be reached, False
            maxdis = max(nums[i]+i, maxdis) # max distance may or may not be updated
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fce1e5452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fce1e5452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7fce1e545240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7fce1e545240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (maxdis)

  4           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                36 (to 54)
             18 STORE_FAST               3 (i)

  5          20 LOAD_FAST                3 (i)
             22 LOAD_FAST                2 (maxdis)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       34
             28 POP_TOP
             30 LOAD_CONST               2 (False)
             32 RETURN_VALUE

  6     >>   34 LOAD_GLOBAL              2 (max)
             36 LOAD_FAST                1 (nums)
             38 LOAD_FAST                3 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                3 (i)
             44 BINARY_ADD
             46 LOAD_FAST                2 (maxdis)
             48 CALL_FUNCTION            2
             50 STORE_FAST               2 (maxdis)
             52 JUMP_ABSOLUTE           16

  7     >>   54 LOAD_CONST               3 (True)
             56 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        p=nums[0] #index of farthest potion can reach for now
        for i in range(1,len(nums)):
            if p>=i:
                p = max(p, nums[i]+i)
        return p>=len(nums)-1
            
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fba409f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fba409f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7fba409f5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7fba409f5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 STORE_FAST               2 (p)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               2 (1)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_FAST                1 (nums)
             16 CALL_FUNCTION            1
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                30 (to 54)
             24 STORE_FAST               3 (i)

  5          26 LOAD_FAST                2 (p)
             28 LOAD_FAST                3 (i)
             30 COMPARE_OP               5 (>=)
             32 POP_JUMP_IF_FALSE       22

  6          34 LOAD_GLOBAL              2 (max)
             36 LOAD_FAST                2 (p)
             38 LOAD_FAST                1 (nums)
             40 LOAD_FAST                3 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                3 (i)
             46 BINARY_ADD
             48 CALL_FUNCTION            2
             50 STORE_FAST               2 (p)
             52 JUMP_ABSOLUTE           22

  7     >>   54 LOAD_FAST                2 (p)
             56 LOAD_GLOBAL              1 (len)
             58 LOAD_FAST                1 (nums)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               2 (1)
             64 BINARY_SUBTRACT
             66 COMPARE_OP               5 (>=)
             68 RETURN_VALUE
None
"
canJump,"## LOGIC : At each index we check maximum reacheable distance found till now and more forward, if we go to index where it is not in range of recheable distance we return False ##
class Solution:
    def canJump(self, nums: List[int]) -> bool:        
        maxDistReacheable = nums[0]
        for i in range(1,len(nums)):
            if(i > maxDistReacheable):
                return False
            maxDistReacheable = max( maxDistReacheable, i + nums[i] )
        return True
","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3044b052f0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3044b052f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f3044b05240, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f3044b05240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 STORE_FAST               2 (maxDistReacheable)

  5           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               2 (1)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_FAST                1 (nums)
             16 CALL_FUNCTION            1
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                36 (to 60)
             24 STORE_FAST               3 (i)

  6          26 LOAD_FAST                3 (i)
             28 LOAD_FAST                2 (maxDistReacheable)
             30 COMPARE_OP               4 (>)
             32 POP_JUMP_IF_FALSE       40

  7          34 POP_TOP
             36 LOAD_CONST               3 (False)
             38 RETURN_VALUE

  8     >>   40 LOAD_GLOBAL              2 (max)
             42 LOAD_FAST                2 (maxDistReacheable)
             44 LOAD_FAST                3 (i)
             46 LOAD_FAST                1 (nums)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 STORE_FAST               2 (maxDistReacheable)
             58 JUMP_ABSOLUTE           22

  9     >>   60 LOAD_CONST               4 (True)
             62 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
            
        max_ind = 0     
        
        for i, num in enumerate(nums):
            if max_ind >= len(nums)-1:
                return True
            
            if num==0:
                if max_ind<=i:
                    return False
            
            max_ind = max(i+num, max_ind)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f75750552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f75750552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f7575055240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f7575055240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (max_ind)

  6           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (nums)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                66 (to 80)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (i)
             18 STORE_FAST               4 (num)

  7          20 LOAD_FAST                2 (max_ind)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               2 (1)
             30 BINARY_SUBTRACT
             32 COMPARE_OP               5 (>=)
             34 POP_JUMP_IF_FALSE       42

  8          36 POP_TOP
             38 LOAD_CONST               3 (True)
             40 RETURN_VALUE

 10     >>   42 LOAD_FAST                4 (num)
             44 LOAD_CONST               1 (0)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       64

 11          50 LOAD_FAST                2 (max_ind)
             52 LOAD_FAST                3 (i)
             54 COMPARE_OP               1 (<=)
             56 POP_JUMP_IF_FALSE       64

 12          58 POP_TOP
             60 LOAD_CONST               4 (False)
             62 RETURN_VALUE

 14     >>   64 LOAD_GLOBAL              2 (max)
             66 LOAD_FAST                3 (i)
             68 LOAD_FAST                4 (num)
             70 BINARY_ADD
             72 LOAD_FAST                2 (max_ind)
             74 CALL_FUNCTION            2
             76 STORE_FAST               2 (max_ind)
             78 JUMP_ABSOLUTE           12
        >>   80 LOAD_CONST               0 (None)
             82 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        x = 1
        for y in nums[:-1]:
            x = max(x-1, y)
            if x == 0:
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f83f06052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f83f06052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f83f0605240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f83f0605240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (x)

  4           4 LOAD_FAST                1 (nums)
              6 LOAD_CONST               0 (None)
              8 LOAD_CONST               2 (-1)
             10 BUILD_SLICE              2
             12 BINARY_SUBSCR
             14 GET_ITER
        >>   16 FOR_ITER                32 (to 50)
             18 STORE_FAST               3 (y)

  5          20 LOAD_GLOBAL              0 (max)
             22 LOAD_FAST                2 (x)
             24 LOAD_CONST               1 (1)
             26 BINARY_SUBTRACT
             28 LOAD_FAST                3 (y)
             30 CALL_FUNCTION            2
             32 STORE_FAST               2 (x)

  6          34 LOAD_FAST                2 (x)
             36 LOAD_CONST               3 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       16

  7          42 POP_TOP
             44 LOAD_CONST               4 (False)
             46 RETURN_VALUE
             48 JUMP_ABSOLUTE           16

  8     >>   50 LOAD_CONST               5 (True)
             52 RETURN_VALUE
None
"
canJump,"from typing import List
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        interval = [0, 0]
        if n <= 1:
            return True
        
        while True:
            can_reach = -1
            
            for i in range(interval[0], interval[1] + 1):
                can_reach = max(can_reach, i + nums[i])
            
            if can_reach >= n - 1:
                return True
            
            interval = [interval[1] + 1, can_reach]
            
            if interval[0] > interval[1]:
                return False
        
        assert(False)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7faed49252f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7faed49252f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7faed4925240, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7faed4925240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (n)

  5           8 LOAD_CONST               1 (0)
             10 LOAD_CONST               1 (0)
             12 BUILD_LIST               2
             14 STORE_FAST               3 (interval)

  6          16 LOAD_FAST                2 (n)
             18 LOAD_CONST               2 (1)
             20 COMPARE_OP               1 (<=)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               3 (True)
             26 RETURN_VALUE

 10     >>   28 LOAD_CONST               4 (-1)
             30 STORE_FAST               4 (can_reach)

 12          32 LOAD_GLOBAL              1 (range)
             34 LOAD_FAST                3 (interval)
             36 LOAD_CONST               1 (0)
             38 BINARY_SUBSCR
             40 LOAD_FAST                3 (interval)
             42 LOAD_CONST               2 (1)
             44 BINARY_SUBSCR
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                22 (to 78)
             56 STORE_FAST               5 (i)

 13          58 LOAD_GLOBAL              2 (max)
             60 LOAD_FAST                4 (can_reach)
             62 LOAD_FAST                5 (i)
             64 LOAD_FAST                1 (nums)
             66 LOAD_FAST                5 (i)
             68 BINARY_SUBSCR
             70 BINARY_ADD
             72 CALL_FUNCTION            2
             74 STORE_FAST               4 (can_reach)
             76 JUMP_ABSOLUTE           54

 15     >>   78 LOAD_FAST                4 (can_reach)
             80 LOAD_FAST                2 (n)
             82 LOAD_CONST               2 (1)
             84 BINARY_SUBTRACT
             86 COMPARE_OP               5 (>=)
             88 POP_JUMP_IF_FALSE       94

 16          90 LOAD_CONST               3 (True)
             92 RETURN_VALUE

 18     >>   94 LOAD_FAST                3 (interval)
             96 LOAD_CONST               2 (1)
             98 BINARY_SUBSCR
            100 LOAD_CONST               2 (1)
            102 BINARY_ADD
            104 LOAD_FAST                4 (can_reach)
            106 BUILD_LIST               2
            108 STORE_FAST               3 (interval)

 20         110 LOAD_FAST                3 (interval)
            112 LOAD_CONST               1 (0)
            114 BINARY_SUBSCR
            116 LOAD_FAST                3 (interval)
            118 LOAD_CONST               2 (1)
            120 BINARY_SUBSCR
            122 COMPARE_OP               4 (>)
            124 POP_JUMP_IF_FALSE       28

 21         126 LOAD_CONST               5 (False)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE           28

 23         132 LOAD_CONST               5 (False)
            134 POP_JUMP_IF_TRUE       140
            136 LOAD_GLOBAL              3 (AssertionError)
            138 RAISE_VARARGS            1
        >>  140 LOAD_CONST               0 (None)
            142 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        ln = len(nums)
        can_reach = 0
        for idx, num in enumerate(nums):
            # i can't reach idx, then I can't move forward
            if idx > can_reach:
                return False
            
            can_reach = max(can_reach, idx + num) 
            #I just passed my destiny
            if can_reach >= ln - 1:
                return True
                    
        
        return False","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7288a352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7288a352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f7288a35240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f7288a35240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (ln)

  4           8 LOAD_CONST               1 (0)
             10 STORE_FAST               3 (can_reach)

  5          12 LOAD_GLOBAL              1 (enumerate)
             14 LOAD_FAST                1 (nums)
             16 CALL_FUNCTION            1
             18 GET_ITER
        >>   20 FOR_ITER                54 (to 76)
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               4 (idx)
             26 STORE_FAST               5 (num)

  7          28 LOAD_FAST                4 (idx)
             30 LOAD_FAST                3 (can_reach)
             32 COMPARE_OP               4 (>)
             34 POP_JUMP_IF_FALSE       42

  8          36 POP_TOP
             38 LOAD_CONST               2 (False)
             40 RETURN_VALUE

 10     >>   42 LOAD_GLOBAL              2 (max)
             44 LOAD_FAST                3 (can_reach)
             46 LOAD_FAST                4 (idx)
             48 LOAD_FAST                5 (num)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 STORE_FAST               3 (can_reach)

 12          56 LOAD_FAST                3 (can_reach)
             58 LOAD_FAST                2 (ln)
             60 LOAD_CONST               3 (1)
             62 BINARY_SUBTRACT
             64 COMPARE_OP               5 (>=)
             66 POP_JUMP_IF_FALSE       20

 13          68 POP_TOP
             70 LOAD_CONST               4 (True)
             72 RETURN_VALUE
             74 JUMP_ABSOLUTE           20

 16     >>   76 LOAD_CONST               2 (False)
             78 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        N = len(nums)
        if N <= 1:
            return True
        j = N - 1  # smallest OK index
        for i in range(N-2, -1, -1):
            if i + nums[i] >= j:
                j = i
        return j == 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbbeebf52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbbeebf52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7fbbeebf5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7fbbeebf5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (N)

  4           8 LOAD_FAST                2 (N)
             10 LOAD_CONST               1 (1)
             12 COMPARE_OP               1 (<=)
             14 POP_JUMP_IF_FALSE       20

  5          16 LOAD_CONST               2 (True)
             18 RETURN_VALUE

  6     >>   20 LOAD_FAST                2 (N)
             22 LOAD_CONST               1 (1)
             24 BINARY_SUBTRACT
             26 STORE_FAST               3 (j)

  7          28 LOAD_GLOBAL              1 (range)
             30 LOAD_FAST                2 (N)
             32 LOAD_CONST               3 (2)
             34 BINARY_SUBTRACT
             36 LOAD_CONST               4 (-1)
             38 LOAD_CONST               4 (-1)
             40 CALL_FUNCTION            3
             42 GET_ITER
        >>   44 FOR_ITER                24 (to 70)
             46 STORE_FAST               4 (i)

  8          48 LOAD_FAST                4 (i)
             50 LOAD_FAST                1 (nums)
             52 LOAD_FAST                4 (i)
             54 BINARY_SUBSCR
             56 BINARY_ADD
             58 LOAD_FAST                3 (j)
             60 COMPARE_OP               5 (>=)
             62 POP_JUMP_IF_FALSE       44

  9          64 LOAD_FAST                4 (i)
             66 STORE_FAST               3 (j)
             68 JUMP_ABSOLUTE           44

 10     >>   70 LOAD_FAST                3 (j)
             72 LOAD_CONST               5 (0)
             74 COMPARE_OP               2 (==)
             76 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        prev = 0
        for i in range(0,len(nums)):
            x = i + nums[i]
            if i <= prev and x > prev:
                prev = x
            if prev >= len(nums)-1:
                return True
        return False
                
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f627e0b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f627e0b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f627e0b5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f627e0b5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (prev)

  4           4 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (0)
              8 LOAD_GLOBAL              1 (len)
             10 LOAD_FAST                1 (nums)
             12 CALL_FUNCTION            1
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                58 (to 78)
             20 STORE_FAST               3 (i)

  5          22 LOAD_FAST                3 (i)
             24 LOAD_FAST                1 (nums)
             26 LOAD_FAST                3 (i)
             28 BINARY_SUBSCR
             30 BINARY_ADD
             32 STORE_FAST               4 (x)

  6          34 LOAD_FAST                3 (i)
             36 LOAD_FAST                2 (prev)
             38 COMPARE_OP               1 (<=)
             40 POP_JUMP_IF_FALSE       54
             42 LOAD_FAST                4 (x)
             44 LOAD_FAST                2 (prev)
             46 COMPARE_OP               4 (>)
             48 POP_JUMP_IF_FALSE       54

  7          50 LOAD_FAST                4 (x)
             52 STORE_FAST               2 (prev)

  8     >>   54 LOAD_FAST                2 (prev)
             56 LOAD_GLOBAL              1 (len)
             58 LOAD_FAST                1 (nums)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               2 (1)
             64 BINARY_SUBTRACT
             66 COMPARE_OP               5 (>=)
             68 POP_JUMP_IF_FALSE       18

  9          70 POP_TOP
             72 LOAD_CONST               3 (True)
             74 RETURN_VALUE
             76 JUMP_ABSOLUTE           18

 10     >>   78 LOAD_CONST               4 (False)
             80 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        reachableIndex = 0
        for curr in range(len(nums)):
            if curr + nums[curr] >= reachableIndex:
                reachableIndex = curr + nums[curr]
            if curr == reachableIndex:
                break
                
        return reachableIndex >= len(nums) - 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f41d2ae52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f41d2ae52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f41d2ae5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f41d2ae5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (reachableIndex)

  4           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                44 (to 62)
             18 STORE_FAST               3 (curr)

  5          20 LOAD_FAST                3 (curr)
             22 LOAD_FAST                1 (nums)
             24 LOAD_FAST                3 (curr)
             26 BINARY_SUBSCR
             28 BINARY_ADD
             30 LOAD_FAST                2 (reachableIndex)
             32 COMPARE_OP               5 (>=)
             34 POP_JUMP_IF_FALSE       48

  6          36 LOAD_FAST                3 (curr)
             38 LOAD_FAST                1 (nums)
             40 LOAD_FAST                3 (curr)
             42 BINARY_SUBSCR
             44 BINARY_ADD
             46 STORE_FAST               2 (reachableIndex)

  7     >>   48 LOAD_FAST                3 (curr)
             50 LOAD_FAST                2 (reachableIndex)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       16

  8          56 POP_TOP
             58 JUMP_ABSOLUTE           62
             60 JUMP_ABSOLUTE           16

 10     >>   62 LOAD_FAST                2 (reachableIndex)
             64 LOAD_GLOBAL              1 (len)
             66 LOAD_FAST                1 (nums)
             68 CALL_FUNCTION            1
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 COMPARE_OP               5 (>=)
             76 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, A:List[int])->bool:
        last = len(A)-1
        if not last:
            return True
        i   = 0
        Lim = i + A[i]
        while i < Lim:
            i += 1
            Lim = max(Lim, i+A[i])
            if Lim>=last:
                return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa3bef152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa3bef152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('A', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7fa3bef15240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7fa3bef15240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (A)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 STORE_FAST               2 (last)

  4          12 LOAD_FAST                2 (last)
             14 POP_JUMP_IF_TRUE        20

  5          16 LOAD_CONST               2 (True)
             18 RETURN_VALUE

  6     >>   20 LOAD_CONST               3 (0)
             22 STORE_FAST               3 (i)

  7          24 LOAD_FAST                3 (i)
             26 LOAD_FAST                1 (A)
             28 LOAD_FAST                3 (i)
             30 BINARY_SUBSCR
             32 BINARY_ADD
             34 STORE_FAST               4 (Lim)

  8     >>   36 LOAD_FAST                3 (i)
             38 LOAD_FAST                4 (Lim)
             40 COMPARE_OP               0 (<)
             42 POP_JUMP_IF_FALSE       84

  9          44 LOAD_FAST                3 (i)
             46 LOAD_CONST               1 (1)
             48 INPLACE_ADD
             50 STORE_FAST               3 (i)

 10          52 LOAD_GLOBAL              1 (max)
             54 LOAD_FAST                4 (Lim)
             56 LOAD_FAST                3 (i)
             58 LOAD_FAST                1 (A)
             60 LOAD_FAST                3 (i)
             62 BINARY_SUBSCR
             64 BINARY_ADD
             66 CALL_FUNCTION            2
             68 STORE_FAST               4 (Lim)

 11          70 LOAD_FAST                4 (Lim)
             72 LOAD_FAST                2 (last)
             74 COMPARE_OP               5 (>=)
             76 POP_JUMP_IF_FALSE       36

 12          78 LOAD_CONST               2 (True)
             80 RETURN_VALUE
             82 JUMP_ABSOLUTE           36

 13     >>   84 LOAD_CONST               4 (False)
             86 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums:List[int])->bool:
        bestJumper,i = nums[0],0
        while i<len(nums) and i<= bestJumper: 
            bestJumper,i = max(bestJumper,i+nums[i]), i+1
        return bestJumper>=len(nums)-1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5b73c352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5b73c352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f5b73c35240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f5b73c35240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 LOAD_CONST               1 (0)
              8 ROT_TWO
             10 STORE_FAST               2 (bestJumper)
             12 STORE_FAST               3 (i)

  4     >>   14 LOAD_FAST                3 (i)
             16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                1 (nums)
             20 CALL_FUNCTION            1
             22 COMPARE_OP               0 (<)
             24 POP_JUMP_IF_FALSE       64
             26 LOAD_FAST                3 (i)
             28 LOAD_FAST                2 (bestJumper)
             30 COMPARE_OP               1 (<=)
             32 POP_JUMP_IF_FALSE       64

  5          34 LOAD_GLOBAL              1 (max)
             36 LOAD_FAST                2 (bestJumper)
             38 LOAD_FAST                3 (i)
             40 LOAD_FAST                1 (nums)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 BINARY_ADD
             48 CALL_FUNCTION            2
             50 LOAD_FAST                3 (i)
             52 LOAD_CONST               2 (1)
             54 BINARY_ADD
             56 ROT_TWO
             58 STORE_FAST               2 (bestJumper)
             60 STORE_FAST               3 (i)
             62 JUMP_ABSOLUTE           14

  6     >>   64 LOAD_FAST                2 (bestJumper)
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                1 (nums)
             70 CALL_FUNCTION            1
             72 LOAD_CONST               2 (1)
             74 BINARY_SUBTRACT
             76 COMPARE_OP               5 (>=)
             78 RETURN_VALUE
None
"
canJump,"from typing import List
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        if 0 not in nums:
            return True
        ladder=0
        n=len(nums)-1
        i=0
        while(i!=n):
            ladder=max(ladder,i+nums[i])   # ladder means the maximum index that can be reached from current index
            if i>=ladder:     # this means we cant go any further (because we can only move further if ladder >current index)
                return False
            i+=1
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f15199d52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f15199d52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f15199d5240, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f15199d5240, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_FAST                1 (nums)
              4 COMPARE_OP               7 (not in)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               1 (0)
             14 STORE_FAST               2 (ladder)

  7          16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                1 (nums)
             20 CALL_FUNCTION            1
             22 LOAD_CONST               3 (1)
             24 BINARY_SUBTRACT
             26 STORE_FAST               3 (n)

  8          28 LOAD_CONST               1 (0)
             30 STORE_FAST               4 (i)

  9     >>   32 LOAD_FAST                4 (i)
             34 LOAD_FAST                3 (n)
             36 COMPARE_OP               3 (!=)
             38 POP_JUMP_IF_FALSE       80

 10          40 LOAD_GLOBAL              1 (max)
             42 LOAD_FAST                2 (ladder)
             44 LOAD_FAST                4 (i)
             46 LOAD_FAST                1 (nums)
             48 LOAD_FAST                4 (i)
             50 BINARY_SUBSCR
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 STORE_FAST               2 (ladder)

 11          58 LOAD_FAST                4 (i)
             60 LOAD_FAST                2 (ladder)
             62 COMPARE_OP               5 (>=)
             64 POP_JUMP_IF_FALSE       70

 12          66 LOAD_CONST               4 (False)
             68 RETURN_VALUE

 13     >>   70 LOAD_FAST                4 (i)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               4 (i)
             78 JUMP_ABSOLUTE           32

 14     >>   80 LOAD_CONST               2 (True)
             82 RETURN_VALUE
None
"
canJump,"class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        ## RC ##
        ## APPROACH : DP ##
        ## LOGIC : At each index we calculate maximum reacheable distance found till now and more forward, if we go to index where it is not in range of recheable distance we return False ##
        
        # dp = [True] + [False] * (len(nums) - 1)                     # dp not required actually
        
        maxDistReacheable = nums[0]
        for i in range(1,len(nums)):
            if(i > maxDistReacheable):
                return False
            # dp[i] = True
            maxDistReacheable = max( maxDistReacheable, i + nums[i] )
        # return dp[-1]
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f272c3552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f272c3552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                5 (bool)
             16 LOAD_CONST               1 (('nums', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object canJump at 0x7f272c355240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.canJump')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (canJump)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object canJump at 0x7f272c355240, file ""<ast>"", line 2>:
 10           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (0)
              4 BINARY_SUBSCR
              6 STORE_FAST               2 (maxDistReacheable)

 11           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               2 (1)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_FAST                1 (nums)
             16 CALL_FUNCTION            1
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                36 (to 60)
             24 STORE_FAST               3 (i)

 12          26 LOAD_FAST                3 (i)
             28 LOAD_FAST                2 (maxDistReacheable)
             30 COMPARE_OP               4 (>)
             32 POP_JUMP_IF_FALSE       40

 13          34 POP_TOP
             36 LOAD_CONST               3 (False)
             38 RETURN_VALUE

 15     >>   40 LOAD_GLOBAL              2 (max)
             42 LOAD_FAST                2 (maxDistReacheable)
             44 LOAD_FAST                3 (i)
             46 LOAD_FAST                1 (nums)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 STORE_FAST               2 (maxDistReacheable)
             58 JUMP_ABSOLUTE           22

 17     >>   60 LOAD_CONST               4 (True)
             62 RETURN_VALUE
None
"
coinChange,"from typing import List
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if not coins or amount <= 0:
            return 0
        
        f = [float('inf')] * (amount + 1)
        f[0] = 0
        for i in range(1, amount + 1):
            for c in coins:
                if i >= c:
                    f[i] = min(f[i], f[i - c] + 1)
        return f[amount] if f[amount] != float('inf') else -1
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f5696055240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5696055240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f56960553a0, file ""<ast>"", line 3>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f56960553a0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (coins)
              2 POP_JUMP_IF_FALSE       12
              4 LOAD_FAST                2 (amount)
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16

  5     >>   12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  7     >>   16 LOAD_GLOBAL              0 (float)
             18 LOAD_CONST               2 ('inf')
             20 CALL_FUNCTION            1
             22 BUILD_LIST               1
             24 LOAD_FAST                2 (amount)
             26 LOAD_CONST               3 (1)
             28 BINARY_ADD
             30 BINARY_MULTIPLY
             32 STORE_FAST               3 (f)

  8          34 LOAD_CONST               1 (0)
             36 LOAD_FAST                3 (f)
             38 LOAD_CONST               1 (0)
             40 STORE_SUBSCR

  9          42 LOAD_GLOBAL              1 (range)
             44 LOAD_CONST               3 (1)
             46 LOAD_FAST                2 (amount)
             48 LOAD_CONST               3 (1)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 GET_ITER
        >>   56 FOR_ITER                52 (to 110)
             58 STORE_FAST               4 (i)

 10          60 LOAD_FAST                1 (coins)
             62 GET_ITER
        >>   64 FOR_ITER                42 (to 108)
             66 STORE_FAST               5 (c)

 11          68 LOAD_FAST                4 (i)
             70 LOAD_FAST                5 (c)
             72 COMPARE_OP               5 (>=)
             74 POP_JUMP_IF_FALSE       64

 12          76 LOAD_GLOBAL              2 (min)
             78 LOAD_FAST                3 (f)
             80 LOAD_FAST                4 (i)
             82 BINARY_SUBSCR
             84 LOAD_FAST                3 (f)
             86 LOAD_FAST                4 (i)
             88 LOAD_FAST                5 (c)
             90 BINARY_SUBTRACT
             92 BINARY_SUBSCR
             94 LOAD_CONST               3 (1)
             96 BINARY_ADD
             98 CALL_FUNCTION            2
            100 LOAD_FAST                3 (f)
            102 LOAD_FAST                4 (i)
            104 STORE_SUBSCR
            106 JUMP_ABSOLUTE           64
        >>  108 JUMP_ABSOLUTE           56

 13     >>  110 LOAD_FAST                3 (f)
            112 LOAD_FAST                2 (amount)
            114 BINARY_SUBSCR
            116 LOAD_GLOBAL              0 (float)
            118 LOAD_CONST               2 ('inf')
            120 CALL_FUNCTION            1
            122 COMPARE_OP               3 (!=)
            124 POP_JUMP_IF_FALSE      134
            126 LOAD_FAST                3 (f)
            128 LOAD_FAST                2 (amount)
            130 BINARY_SUBSCR
            132 RETURN_VALUE
        >>  134 LOAD_CONST               4 (-1)
            136 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float(""inf"")] * (amount + 1)  # DP Array of size (Amount +1) initialized to infinity
        dp[0] = 0                           # Initializing no. of coins for [amount == 0] to o

        for currCoin in coins:
            for currAmount in range(currCoin, amount + 1):
                dp[currAmount] = min(dp[currAmount], dp[currAmount - currCoin] + 1)

        return dp[-1] if dp[-1] != float(""inf"") else -1

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4ae3655240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4ae3655240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f4ae36552f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f4ae36552f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 BUILD_LIST               1
              8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               2 (1)
             12 BINARY_ADD
             14 BINARY_MULTIPLY
             16 STORE_FAST               3 (dp)

  4          18 LOAD_CONST               3 (0)
             20 LOAD_FAST                3 (dp)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  6          26 LOAD_FAST                1 (coins)
             28 GET_ITER
        >>   30 FOR_ITER                54 (to 86)
             32 STORE_FAST               4 (currCoin)

  7          34 LOAD_GLOBAL              1 (range)
             36 LOAD_FAST                4 (currCoin)
             38 LOAD_FAST                2 (amount)
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                34 (to 84)
             50 STORE_FAST               5 (currAmount)

  8          52 LOAD_GLOBAL              2 (min)
             54 LOAD_FAST                3 (dp)
             56 LOAD_FAST                5 (currAmount)
             58 BINARY_SUBSCR
             60 LOAD_FAST                3 (dp)
             62 LOAD_FAST                5 (currAmount)
             64 LOAD_FAST                4 (currCoin)
             66 BINARY_SUBTRACT
             68 BINARY_SUBSCR
             70 LOAD_CONST               2 (1)
             72 BINARY_ADD
             74 CALL_FUNCTION            2
             76 LOAD_FAST                3 (dp)
             78 LOAD_FAST                5 (currAmount)
             80 STORE_SUBSCR
             82 JUMP_ABSOLUTE           48
        >>   84 JUMP_ABSOLUTE           30

 10     >>   86 LOAD_FAST                3 (dp)
             88 LOAD_CONST               4 (-1)
             90 BINARY_SUBSCR
             92 LOAD_GLOBAL              0 (float)
             94 LOAD_CONST               1 ('inf')
             96 CALL_FUNCTION            1
             98 COMPARE_OP               3 (!=)
            100 POP_JUMP_IF_FALSE      110
            102 LOAD_FAST                3 (dp)
            104 LOAD_CONST               4 (-1)
            106 BINARY_SUBSCR
            108 RETURN_VALUE
        >>  110 LOAD_CONST               4 (-1)
            112 RETURN_VALUE
None
"
coinChange,"import sys
class Solution:
    def coinChange(self, coins: List[int], amt: int) -> int:
        dp = [[0 for i in range(amt+1)]for i in range(len(coins)+1)]
        for j in range(amt+1):
            dp[0][j] = sys.maxsize
        for i in range(1,len(coins)+1):
            for j in range(1,amt+1):
                if coins[i-1] > j:
                    dp[i][j] = dp[i-1][j]
                else:
                    dp[i][j] = min(1+dp[i][j-coins[i-1]],dp[i-1][j])
        if dp[-1][-1] != sys.maxsize:
            return dp[-1][-1]
        return -1
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7ff8e21b5450, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff8e21b5450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amt', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7ff8e21b53a0, file ""<ast>"", line 3>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7ff8e21b53a0, file ""<ast>"", line 3>:
  4           0 LOAD_CLOSURE             0 (amt)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object <listcomp> at 0x7ff8e21b52f0, file ""<ast>"", line 4>)
              6 LOAD_CONST               2 ('Solution.coinChange.<locals>.<listcomp>')
              8 MAKE_FUNCTION            8 (closure)
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_FAST                1 (coins)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               3 (1)
             20 BINARY_ADD
             22 CALL_FUNCTION            1
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 STORE_FAST               3 (dp)

  5          30 LOAD_GLOBAL              0 (range)
             32 LOAD_DEREF               0 (amt)
             34 LOAD_CONST               3 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER                18 (to 62)
             44 STORE_FAST               4 (j)

  6          46 LOAD_GLOBAL              2 (sys)
             48 LOAD_ATTR                3 (maxsize)
             50 LOAD_FAST                3 (dp)
             52 LOAD_CONST               4 (0)
             54 BINARY_SUBSCR
             56 LOAD_FAST                4 (j)
             58 STORE_SUBSCR
             60 JUMP_ABSOLUTE           42

  7     >>   62 LOAD_GLOBAL              0 (range)
             64 LOAD_CONST               3 (1)
             66 LOAD_GLOBAL              1 (len)
             68 LOAD_FAST                1 (coins)
             70 CALL_FUNCTION            1
             72 LOAD_CONST               3 (1)
             74 BINARY_ADD
             76 CALL_FUNCTION            2
             78 GET_ITER
        >>   80 FOR_ITER               120 (to 202)
             82 STORE_FAST               5 (i)

  8          84 LOAD_GLOBAL              0 (range)
             86 LOAD_CONST               3 (1)
             88 LOAD_DEREF               0 (amt)
             90 LOAD_CONST               3 (1)
             92 BINARY_ADD
             94 CALL_FUNCTION            2
             96 GET_ITER
        >>   98 FOR_ITER               100 (to 200)
            100 STORE_FAST               4 (j)

  9         102 LOAD_FAST                1 (coins)
            104 LOAD_FAST                5 (i)
            106 LOAD_CONST               3 (1)
            108 BINARY_SUBTRACT
            110 BINARY_SUBSCR
            112 LOAD_FAST                4 (j)
            114 COMPARE_OP               4 (>)
            116 POP_JUMP_IF_FALSE      144

 10         118 LOAD_FAST                3 (dp)
            120 LOAD_FAST                5 (i)
            122 LOAD_CONST               3 (1)
            124 BINARY_SUBTRACT
            126 BINARY_SUBSCR
            128 LOAD_FAST                4 (j)
            130 BINARY_SUBSCR
            132 LOAD_FAST                3 (dp)
            134 LOAD_FAST                5 (i)
            136 BINARY_SUBSCR
            138 LOAD_FAST                4 (j)
            140 STORE_SUBSCR
            142 JUMP_ABSOLUTE           98

 12     >>  144 LOAD_GLOBAL              4 (min)
            146 LOAD_CONST               3 (1)
            148 LOAD_FAST                3 (dp)
            150 LOAD_FAST                5 (i)
            152 BINARY_SUBSCR
            154 LOAD_FAST                4 (j)
            156 LOAD_FAST                1 (coins)
            158 LOAD_FAST                5 (i)
            160 LOAD_CONST               3 (1)
            162 BINARY_SUBTRACT
            164 BINARY_SUBSCR
            166 BINARY_SUBTRACT
            168 BINARY_SUBSCR
            170 BINARY_ADD
            172 LOAD_FAST                3 (dp)
            174 LOAD_FAST                5 (i)
            176 LOAD_CONST               3 (1)
            178 BINARY_SUBTRACT
            180 BINARY_SUBSCR
            182 LOAD_FAST                4 (j)
            184 BINARY_SUBSCR
            186 CALL_FUNCTION            2
            188 LOAD_FAST                3 (dp)
            190 LOAD_FAST                5 (i)
            192 BINARY_SUBSCR
            194 LOAD_FAST                4 (j)
            196 STORE_SUBSCR
            198 JUMP_ABSOLUTE           98
        >>  200 JUMP_ABSOLUTE           80

 13     >>  202 LOAD_FAST                3 (dp)
            204 LOAD_CONST               5 (-1)
            206 BINARY_SUBSCR
            208 LOAD_CONST               5 (-1)
            210 BINARY_SUBSCR
            212 LOAD_GLOBAL              2 (sys)
            214 LOAD_ATTR                3 (maxsize)
            216 COMPARE_OP               3 (!=)
            218 POP_JUMP_IF_FALSE      232

 14         220 LOAD_FAST                3 (dp)
            222 LOAD_CONST               5 (-1)
            224 BINARY_SUBSCR
            226 LOAD_CONST               5 (-1)
            228 BINARY_SUBSCR
            230 RETURN_VALUE

 15     >>  232 LOAD_CONST               5 (-1)
            234 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff8e21b52f0, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                26 (to 32)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7ff8e21b5240, file ""<ast>"", line 4>)
             10 LOAD_CONST               1 ('Solution.coinChange.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (amt)
             18 LOAD_CONST               2 (1)
             20 BINARY_ADD
             22 CALL_FUNCTION            1
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 LIST_APPEND              2
             30 JUMP_ABSOLUTE            4
        >>   32 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff8e21b5240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
coinChange,"class Solution:
	def coinChange(self, coins: List[int], amount: int) -> int:
		
		#1D array
		dp = [float(""inf"")] * (amount + 1)

		dp[0] = 0
		n = len(coins)

		for i in range(1, n + 1):
			for j in range(amount + 1):
				if coins[i - 1] <= j:
					dp[j] = min(dp[j], dp[j - coins[i - 1]] + 1)

		return dp[-1] if dp[-1] != float(""inf"") else -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffdbe6b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffdbe6b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7ffdbe6b5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7ffdbe6b5240, file ""<ast>"", line 2>:
  5           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 BUILD_LIST               1
              8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               2 (1)
             12 BINARY_ADD
             14 BINARY_MULTIPLY
             16 STORE_FAST               3 (dp)

  7          18 LOAD_CONST               3 (0)
             20 LOAD_FAST                3 (dp)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  8          26 LOAD_GLOBAL              1 (len)
             28 LOAD_FAST                1 (coins)
             30 CALL_FUNCTION            1
             32 STORE_FAST               4 (n)

 10          34 LOAD_GLOBAL              2 (range)
             36 LOAD_CONST               2 (1)
             38 LOAD_FAST                4 (n)
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                76 (to 126)
             50 STORE_FAST               5 (i)

 11          52 LOAD_GLOBAL              2 (range)
             54 LOAD_FAST                2 (amount)
             56 LOAD_CONST               2 (1)
             58 BINARY_ADD
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                58 (to 124)
             66 STORE_FAST               6 (j)

 12          68 LOAD_FAST                1 (coins)
             70 LOAD_FAST                5 (i)
             72 LOAD_CONST               2 (1)
             74 BINARY_SUBTRACT
             76 BINARY_SUBSCR
             78 LOAD_FAST                6 (j)
             80 COMPARE_OP               1 (<=)
             82 POP_JUMP_IF_FALSE       64

 13          84 LOAD_GLOBAL              3 (min)
             86 LOAD_FAST                3 (dp)
             88 LOAD_FAST                6 (j)
             90 BINARY_SUBSCR
             92 LOAD_FAST                3 (dp)
             94 LOAD_FAST                6 (j)
             96 LOAD_FAST                1 (coins)
             98 LOAD_FAST                5 (i)
            100 LOAD_CONST               2 (1)
            102 BINARY_SUBTRACT
            104 BINARY_SUBSCR
            106 BINARY_SUBTRACT
            108 BINARY_SUBSCR
            110 LOAD_CONST               2 (1)
            112 BINARY_ADD
            114 CALL_FUNCTION            2
            116 LOAD_FAST                3 (dp)
            118 LOAD_FAST                6 (j)
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           64
        >>  124 JUMP_ABSOLUTE           48

 15     >>  126 LOAD_FAST                3 (dp)
            128 LOAD_CONST               4 (-1)
            130 BINARY_SUBSCR
            132 LOAD_GLOBAL              0 (float)
            134 LOAD_CONST               1 ('inf')
            136 CALL_FUNCTION            1
            138 COMPARE_OP               3 (!=)
            140 POP_JUMP_IF_FALSE      150
            142 LOAD_FAST                3 (dp)
            144 LOAD_CONST               4 (-1)
            146 BINARY_SUBSCR
            148 RETURN_VALUE
        >>  150 LOAD_CONST               4 (-1)
            152 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        ## RC ##
        ## APPROACH : DP ##
        
		## TIME COMPLEXITY : O(N^2) ##
		## SPACE COMPLEXITY : O(N) ##

        dp = [0] + [amount + 1] * amount                                # fill invalid amount i.e amount + 1 for all amounts ranging from 0 to amount.
        for value in range(amount+1):                                   # for each value till amount
            for coin in (coins):                                        # for each coin
                if(coin <= value):                                      # check if this coin can be used make value i.
                    dp[value] = min(dp[value], 1 + dp[value - coin])    # 1 => current coin included, check the min coins required to make remaining value i.e  value - coin                    
        return -1 if(dp[amount] > amount) else dp[amount]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdd91735240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdd91735240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7fdd917352f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7fdd917352f0, file ""<ast>"", line 2>:
  9           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                2 (amount)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BUILD_LIST               1
             12 LOAD_FAST                2 (amount)
             14 BINARY_MULTIPLY
             16 BINARY_ADD
             18 STORE_FAST               3 (dp)

 10          20 LOAD_GLOBAL              0 (range)
             22 LOAD_FAST                2 (amount)
             24 LOAD_CONST               2 (1)
             26 BINARY_ADD
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                52 (to 86)
             34 STORE_FAST               4 (value)

 11          36 LOAD_FAST                1 (coins)
             38 GET_ITER
        >>   40 FOR_ITER                42 (to 84)
             42 STORE_FAST               5 (coin)

 12          44 LOAD_FAST                5 (coin)
             46 LOAD_FAST                4 (value)
             48 COMPARE_OP               1 (<=)
             50 POP_JUMP_IF_FALSE       40

 13          52 LOAD_GLOBAL              1 (min)
             54 LOAD_FAST                3 (dp)
             56 LOAD_FAST                4 (value)
             58 BINARY_SUBSCR
             60 LOAD_CONST               2 (1)
             62 LOAD_FAST                3 (dp)
             64 LOAD_FAST                4 (value)
             66 LOAD_FAST                5 (coin)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 BINARY_ADD
             74 CALL_FUNCTION            2
             76 LOAD_FAST                3 (dp)
             78 LOAD_FAST                4 (value)
             80 STORE_SUBSCR
             82 JUMP_ABSOLUTE           40
        >>   84 JUMP_ABSOLUTE           32

 14     >>   86 LOAD_FAST                3 (dp)
             88 LOAD_FAST                2 (amount)
             90 BINARY_SUBSCR
             92 LOAD_FAST                2 (amount)
             94 COMPARE_OP               4 (>)
             96 POP_JUMP_IF_FALSE      102
             98 LOAD_CONST               3 (-1)
            100 RETURN_VALUE
        >>  102 LOAD_FAST                3 (dp)
            104 LOAD_FAST                2 (amount)
            106 BINARY_SUBSCR
            108 RETURN_VALUE
None
"
coinChange,"from collections import deque

class Solution:
    def __init__(self):
        self.coin_universe = None
 
    def bfs(self, node):
        nodes_to_visit = deque([node])
        nodes_visited = set([node])
        depth = 0
        count = 0
        num_nodes = 1
 
        while len(nodes_to_visit) > 0:
            count += 1
            if count == num_nodes:
                depth += 1
                count = 0
                num_nodes = len(nodes_to_visit)
            node = nodes_to_visit.popleft()
            neighbours = [node - coin for coin in self.coin_universe]
            for neighbour in neighbours:
                if (neighbour not in nodes_visited) and (neighbour >= 0):
                    if neighbour == 0: return depth
                    nodes_visited.add(neighbour)
                    nodes_to_visit.append(neighbour)
        return -1


    def coinChange(self, coin_universe:List[int], amount:int)->int:
        """"""
        @time: O(n)
        @space: O(1)
        """"""
        if amount == 0: return 0
        self.coin_universe = coin_universe
        return self.bfs(amount)   
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f1488575500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1488575500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object __init__ at 0x7f1488575240, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  7          16 LOAD_CONST               3 (<code object bfs at 0x7f14885753a0, file ""<ast>"", line 7>)
             18 LOAD_CONST               4 ('Solution.bfs')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (bfs)

 30          24 LOAD_NAME                5 (List)
             26 LOAD_NAME                6 (int)
             28 BINARY_SUBSCR
             30 LOAD_NAME                6 (int)
             32 LOAD_NAME                6 (int)
             34 LOAD_CONST               5 (('coin_universe', 'amount', 'return'))
             36 BUILD_CONST_KEY_MAP      3
             38 LOAD_CONST               6 (<code object coinChange at 0x7f1488575450, file ""<ast>"", line 30>)
             40 LOAD_CONST               7 ('Solution.coinChange')
             42 MAKE_FUNCTION            4 (annotations)
             44 STORE_NAME               7 (coinChange)
             46 LOAD_CONST               8 (None)
             48 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f1488575240, file ""<ast>"", line 4>:
  5           0 LOAD_CONST               0 (None)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (coin_universe)
              6 LOAD_CONST               0 (None)
              8 RETURN_VALUE

Disassembly of <code object bfs at 0x7f14885753a0, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (deque)
              2 LOAD_DEREF               0 (node)
              4 BUILD_LIST               1
              6 CALL_FUNCTION            1
              8 STORE_FAST               2 (nodes_to_visit)

  9          10 LOAD_GLOBAL              1 (set)
             12 LOAD_DEREF               0 (node)
             14 BUILD_LIST               1
             16 CALL_FUNCTION            1
             18 STORE_FAST               3 (nodes_visited)

 10          20 LOAD_CONST               1 (0)
             22 STORE_FAST               4 (depth)

 11          24 LOAD_CONST               1 (0)
             26 STORE_FAST               5 (count)

 12          28 LOAD_CONST               2 (1)
             30 STORE_FAST               6 (num_nodes)

 14     >>   32 LOAD_GLOBAL              2 (len)
             34 LOAD_FAST                2 (nodes_to_visit)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               1 (0)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE      172

 15          44 LOAD_FAST                5 (count)
             46 LOAD_CONST               2 (1)
             48 INPLACE_ADD
             50 STORE_FAST               5 (count)

 16          52 LOAD_FAST                5 (count)
             54 LOAD_FAST                6 (num_nodes)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       80

 17          60 LOAD_FAST                4 (depth)
             62 LOAD_CONST               2 (1)
             64 INPLACE_ADD
             66 STORE_FAST               4 (depth)

 18          68 LOAD_CONST               1 (0)
             70 STORE_FAST               5 (count)

 19          72 LOAD_GLOBAL              2 (len)
             74 LOAD_FAST                2 (nodes_to_visit)
             76 CALL_FUNCTION            1
             78 STORE_FAST               6 (num_nodes)

 20     >>   80 LOAD_FAST                2 (nodes_to_visit)
             82 LOAD_METHOD              3 (popleft)
             84 CALL_METHOD              0
             86 STORE_DEREF              0 (node)

 21          88 LOAD_CLOSURE             0 (node)
             90 BUILD_TUPLE              1
             92 LOAD_CONST               3 (<code object <listcomp> at 0x7f14885752f0, file ""<ast>"", line 21>)
             94 LOAD_CONST               4 ('Solution.bfs.<locals>.<listcomp>')
             96 MAKE_FUNCTION            8 (closure)
             98 LOAD_FAST                0 (self)
            100 LOAD_ATTR                4 (coin_universe)
            102 GET_ITER
            104 CALL_FUNCTION            1
            106 STORE_FAST               7 (neighbours)

 22         108 LOAD_FAST                7 (neighbours)
            110 GET_ITER
        >>  112 FOR_ITER                56 (to 170)
            114 STORE_FAST               8 (neighbour)

 23         116 LOAD_FAST                8 (neighbour)
            118 LOAD_FAST                3 (nodes_visited)
            120 COMPARE_OP               7 (not in)
            122 POP_JUMP_IF_FALSE      112
            124 LOAD_FAST                8 (neighbour)
            126 LOAD_CONST               1 (0)
            128 COMPARE_OP               5 (>=)
            130 POP_JUMP_IF_FALSE      112

 24         132 LOAD_FAST                8 (neighbour)
            134 LOAD_CONST               1 (0)
            136 COMPARE_OP               2 (==)
            138 POP_JUMP_IF_FALSE      148
            140 LOAD_FAST                4 (depth)
            142 ROT_TWO
            144 POP_TOP
            146 RETURN_VALUE

 25     >>  148 LOAD_FAST                3 (nodes_visited)
            150 LOAD_METHOD              5 (add)
            152 LOAD_FAST                8 (neighbour)
            154 CALL_METHOD              1
            156 POP_TOP

 26         158 LOAD_FAST                2 (nodes_to_visit)
            160 LOAD_METHOD              6 (append)
            162 LOAD_FAST                8 (neighbour)
            164 CALL_METHOD              1
            166 POP_TOP
            168 JUMP_ABSOLUTE          112
        >>  170 JUMP_ABSOLUTE           32

 27     >>  172 LOAD_CONST               5 (-1)
            174 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f14885752f0, file ""<ast>"", line 21>:
 21           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (coin)
              8 LOAD_DEREF               0 (node)
             10 LOAD_FAST                1 (coin)
             12 BINARY_SUBTRACT
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f1488575450, file ""<ast>"", line 30>:
 35           0 LOAD_FAST                2 (amount)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

 36     >>   12 LOAD_FAST                1 (coin_universe)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               0 (coin_universe)

 37          18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              1 (bfs)
             22 LOAD_FAST                2 (amount)
             24 CALL_METHOD              1
             26 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        numCoins = len(coins)
        
        # Values in this array equal the number of coins needed to achieve the cost of the index
        minCoins = [amount + 1] * (amount + 1)
        minCoins[0] = 0
        
        # Loop through every needed amount
        for i in range(amount + 1):
            # Loop through every coin value
            for coin in coins:
                # Check that the coin is not bigger than the current amount
                if coin <= i:
                    # minCoins[i]: number of coins needed to make amount i
                    # minCoins[i-coin]: number of coins needed to make the amount before adding 
                    #                   the current coin to it (+1 to add the current coin)
                    minCoins[i] = min(minCoins[i], minCoins[i-coin] + 1)
        
        # Check if any combination of coins was found to create the amount
        if minCoins[amount] == amount + 1:
            return -1
        
        # Return the optimal number of coins to create the amount
        return minCoins[amount]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f318ab45240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f318ab45240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f318ab453a0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f318ab453a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (coins)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (numCoins)

  6           8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               1 (1)
             12 BINARY_ADD
             14 BUILD_LIST               1
             16 LOAD_FAST                2 (amount)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 BINARY_MULTIPLY
             24 STORE_FAST               4 (minCoins)

  7          26 LOAD_CONST               2 (0)
             28 LOAD_FAST                4 (minCoins)
             30 LOAD_CONST               2 (0)
             32 STORE_SUBSCR

 10          34 LOAD_GLOBAL              1 (range)
             36 LOAD_FAST                2 (amount)
             38 LOAD_CONST               1 (1)
             40 BINARY_ADD
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER                52 (to 100)
             48 STORE_FAST               5 (i)

 12          50 LOAD_FAST                1 (coins)
             52 GET_ITER
        >>   54 FOR_ITER                42 (to 98)
             56 STORE_FAST               6 (coin)

 14          58 LOAD_FAST                6 (coin)
             60 LOAD_FAST                5 (i)
             62 COMPARE_OP               1 (<=)
             64 POP_JUMP_IF_FALSE       54

 18          66 LOAD_GLOBAL              2 (min)
             68 LOAD_FAST                4 (minCoins)
             70 LOAD_FAST                5 (i)
             72 BINARY_SUBSCR
             74 LOAD_FAST                4 (minCoins)
             76 LOAD_FAST                5 (i)
             78 LOAD_FAST                6 (coin)
             80 BINARY_SUBTRACT
             82 BINARY_SUBSCR
             84 LOAD_CONST               1 (1)
             86 BINARY_ADD
             88 CALL_FUNCTION            2
             90 LOAD_FAST                4 (minCoins)
             92 LOAD_FAST                5 (i)
             94 STORE_SUBSCR
             96 JUMP_ABSOLUTE           54
        >>   98 JUMP_ABSOLUTE           46

 21     >>  100 LOAD_FAST                4 (minCoins)
            102 LOAD_FAST                2 (amount)
            104 BINARY_SUBSCR
            106 LOAD_FAST                2 (amount)
            108 LOAD_CONST               1 (1)
            110 BINARY_ADD
            112 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_FALSE      120

 22         116 LOAD_CONST               3 (-1)
            118 RETURN_VALUE

 25     >>  120 LOAD_FAST                4 (minCoins)
            122 LOAD_FAST                2 (amount)
            124 BINARY_SUBSCR
            126 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins:List[int], amount:int)->bool:
        his, coins, queue, step = set(), set(coins), {0}, 1
        
        if amount == 0: return 0
        if amount in coins: return 1
        
        while queue:
            new_queue = set()
            for now in queue:
                for i in coins:
                    this = now+i
                    if this in his or this>amount: 
                        continue
                    else:
                        his.add(this)

                    if amount-this in coins:
                        return step+1
                    else:
                        new_queue.add(this)
                        
            queue = new_queue
            step += 1
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1ef7a152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1ef7a152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                5 (bool)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f1ef7a15240, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               6 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f1ef7a15240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 LOAD_GLOBAL              0 (set)
              6 LOAD_FAST                1 (coins)
              8 CALL_FUNCTION            1
             10 LOAD_CONST               1 (0)
             12 BUILD_SET                1
             14 LOAD_CONST               2 (1)
             16 BUILD_TUPLE              4
             18 UNPACK_SEQUENCE          4
             20 STORE_FAST               3 (his)
             22 STORE_FAST               1 (coins)
             24 STORE_FAST               4 (queue)
             26 STORE_FAST               5 (step)

  5          28 LOAD_FAST                2 (amount)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       40
             36 LOAD_CONST               1 (0)
             38 RETURN_VALUE

  6     >>   40 LOAD_FAST                2 (amount)
             42 LOAD_FAST                1 (coins)
             44 COMPARE_OP               6 (in)
             46 POP_JUMP_IF_FALSE       52
             48 LOAD_CONST               2 (1)
             50 RETURN_VALUE

  8     >>   52 LOAD_FAST                4 (queue)
             54 POP_JUMP_IF_FALSE      172

  9          56 LOAD_GLOBAL              0 (set)
             58 CALL_FUNCTION            0
             60 STORE_FAST               6 (new_queue)

 10          62 LOAD_FAST                4 (queue)
             64 GET_ITER
        >>   66 FOR_ITER                90 (to 158)
             68 STORE_FAST               7 (now)

 11          70 LOAD_FAST                1 (coins)
             72 GET_ITER
        >>   74 FOR_ITER                80 (to 156)
             76 STORE_FAST               8 (i)

 12          78 LOAD_FAST                7 (now)
             80 LOAD_FAST                8 (i)
             82 BINARY_ADD
             84 STORE_FAST               9 (this)

 13          86 LOAD_FAST                9 (this)
             88 LOAD_FAST                3 (his)
             90 COMPARE_OP               6 (in)
             92 POP_JUMP_IF_TRUE        74
             94 LOAD_FAST                9 (this)
             96 LOAD_FAST                2 (amount)
             98 COMPARE_OP               4 (>)
            100 POP_JUMP_IF_FALSE      106

 14         102 JUMP_ABSOLUTE           74
            104 JUMP_FORWARD            10 (to 116)

 16     >>  106 LOAD_FAST                3 (his)
            108 LOAD_METHOD              1 (add)
            110 LOAD_FAST                9 (this)
            112 CALL_METHOD              1
            114 POP_TOP

 18     >>  116 LOAD_FAST                2 (amount)
            118 LOAD_FAST                9 (this)
            120 BINARY_SUBTRACT
            122 LOAD_FAST                1 (coins)
            124 COMPARE_OP               6 (in)
            126 POP_JUMP_IF_FALSE      144

 19         128 LOAD_FAST                5 (step)
            130 LOAD_CONST               2 (1)
            132 BINARY_ADD
            134 ROT_TWO
            136 POP_TOP
            138 ROT_TWO
            140 POP_TOP
            142 RETURN_VALUE

 21     >>  144 LOAD_FAST                6 (new_queue)
            146 LOAD_METHOD              1 (add)
            148 LOAD_FAST                9 (this)
            150 CALL_METHOD              1
            152 POP_TOP
            154 JUMP_ABSOLUTE           74
        >>  156 JUMP_ABSOLUTE           66

 23     >>  158 LOAD_FAST                6 (new_queue)
            160 STORE_FAST               4 (queue)

 24         162 LOAD_FAST                5 (step)
            164 LOAD_CONST               2 (1)
            166 INPLACE_ADD
            168 STORE_FAST               5 (step)
            170 JUMP_ABSOLUTE           52

 25     >>  172 LOAD_CONST               3 (-1)
            174 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if not coins or amount <= 0:
            return 0
        
        f = [float('inf')] * (amount + 1)
        f[0] = 0
        for c in coins:
            for a in range(c, amount + 1):
                f[a] = min(f[a], f[a - c] + 1)
        return f[amount] if f[amount] != float('inf') else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffc63ac5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffc63ac5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7ffc63ac53a0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7ffc63ac53a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (coins)
              2 POP_JUMP_IF_FALSE       12
              4 LOAD_FAST                2 (amount)
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16

  4     >>   12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  6     >>   16 LOAD_GLOBAL              0 (float)
             18 LOAD_CONST               2 ('inf')
             20 CALL_FUNCTION            1
             22 BUILD_LIST               1
             24 LOAD_FAST                2 (amount)
             26 LOAD_CONST               3 (1)
             28 BINARY_ADD
             30 BINARY_MULTIPLY
             32 STORE_FAST               3 (f)

  7          34 LOAD_CONST               1 (0)
             36 LOAD_FAST                3 (f)
             38 LOAD_CONST               1 (0)
             40 STORE_SUBSCR

  8          42 LOAD_FAST                1 (coins)
             44 GET_ITER
        >>   46 FOR_ITER                54 (to 102)
             48 STORE_FAST               4 (c)

  9          50 LOAD_GLOBAL              1 (range)
             52 LOAD_FAST                4 (c)
             54 LOAD_FAST                2 (amount)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 CALL_FUNCTION            2
             62 GET_ITER
        >>   64 FOR_ITER                34 (to 100)
             66 STORE_FAST               5 (a)

 10          68 LOAD_GLOBAL              2 (min)
             70 LOAD_FAST                3 (f)
             72 LOAD_FAST                5 (a)
             74 BINARY_SUBSCR
             76 LOAD_FAST                3 (f)
             78 LOAD_FAST                5 (a)
             80 LOAD_FAST                4 (c)
             82 BINARY_SUBTRACT
             84 BINARY_SUBSCR
             86 LOAD_CONST               3 (1)
             88 BINARY_ADD
             90 CALL_FUNCTION            2
             92 LOAD_FAST                3 (f)
             94 LOAD_FAST                5 (a)
             96 STORE_SUBSCR
             98 JUMP_ABSOLUTE           64
        >>  100 JUMP_ABSOLUTE           46

 11     >>  102 LOAD_FAST                3 (f)
            104 LOAD_FAST                2 (amount)
            106 BINARY_SUBSCR
            108 LOAD_GLOBAL              0 (float)
            110 LOAD_CONST               2 ('inf')
            112 CALL_FUNCTION            1
            114 COMPARE_OP               3 (!=)
            116 POP_JUMP_IF_FALSE      126
            118 LOAD_FAST                3 (f)
            120 LOAD_FAST                2 (amount)
            122 BINARY_SUBSCR
            124 RETURN_VALUE
        >>  126 LOAD_CONST               4 (-1)
            128 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        min_den  = [(amount+1) for i in range(0,amount+1)]
        min_den[0] = 0
        for i in range(1,len(min_den)):
            min_val = min_den[i]
            
            for j in coins:
                if i-j >=0:
                    min_val = min(min_val, min_den[i-j]+1)
                                        
            min_den[i] = min_val

        if min_den[-1]>amount:
            return -1
        else:
            
            return min_den[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f25df6c53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f25df6c53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f25df6c52f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f25df6c52f0, file ""<ast>"", line 2>:
  4           0 LOAD_CLOSURE             0 (amount)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object <listcomp> at 0x7f25df6c5240, file ""<ast>"", line 4>)
              6 LOAD_CONST               2 ('Solution.coinChange.<locals>.<listcomp>')
              8 MAKE_FUNCTION            8 (closure)
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (0)
             14 LOAD_DEREF               0 (amount)
             16 LOAD_CONST               4 (1)
             18 BINARY_ADD
             20 CALL_FUNCTION            2
             22 GET_ITER
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (min_den)

  5          28 LOAD_CONST               3 (0)
             30 LOAD_FAST                3 (min_den)
             32 LOAD_CONST               3 (0)
             34 STORE_SUBSCR

  6          36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               4 (1)
             40 LOAD_GLOBAL              1 (len)
             42 LOAD_FAST                3 (min_den)
             44 CALL_FUNCTION            1
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                64 (to 116)
             52 STORE_FAST               4 (i)

  7          54 LOAD_FAST                3 (min_den)
             56 LOAD_FAST                4 (i)
             58 BINARY_SUBSCR
             60 STORE_FAST               5 (min_val)

  9          62 LOAD_FAST                1 (coins)
             64 GET_ITER
        >>   66 FOR_ITER                38 (to 106)
             68 STORE_FAST               6 (j)

 10          70 LOAD_FAST                4 (i)
             72 LOAD_FAST                6 (j)
             74 BINARY_SUBTRACT
             76 LOAD_CONST               3 (0)
             78 COMPARE_OP               5 (>=)
             80 POP_JUMP_IF_FALSE       66

 11          82 LOAD_GLOBAL              2 (min)
             84 LOAD_FAST                5 (min_val)
             86 LOAD_FAST                3 (min_den)
             88 LOAD_FAST                4 (i)
             90 LOAD_FAST                6 (j)
             92 BINARY_SUBTRACT
             94 BINARY_SUBSCR
             96 LOAD_CONST               4 (1)
             98 BINARY_ADD
            100 CALL_FUNCTION            2
            102 STORE_FAST               5 (min_val)
            104 JUMP_ABSOLUTE           66

 13     >>  106 LOAD_FAST                5 (min_val)
            108 LOAD_FAST                3 (min_den)
            110 LOAD_FAST                4 (i)
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE           50

 15     >>  116 LOAD_FAST                3 (min_den)
            118 LOAD_CONST               5 (-1)
            120 BINARY_SUBSCR
            122 LOAD_DEREF               0 (amount)
            124 COMPARE_OP               4 (>)
            126 POP_JUMP_IF_FALSE      132

 16         128 LOAD_CONST               5 (-1)
            130 RETURN_VALUE

 19     >>  132 LOAD_FAST                3 (min_den)
            134 LOAD_CONST               5 (-1)
            136 BINARY_SUBSCR
            138 RETURN_VALUE
            140 LOAD_CONST               0 (None)
            142 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f25df6c5240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              8 LOAD_DEREF               0 (amount)
             10 LOAD_CONST               0 (1)
             12 BINARY_ADD
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        MAX = float('inf')
        
        dp = [0] * (amount + 1)
            
        for i in range(1, amount + 1):
            dp[i] = min(dp[i - c] if i - c >= 0 else MAX for c in coins) + 1
                
        return -1 if dp[-1] == MAX else dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff03a3552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff03a3552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7ff03a3553a0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7ff03a3553a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 STORE_DEREF              0 (MAX)

  5           8 LOAD_CONST               2 (0)
             10 BUILD_LIST               1
             12 LOAD_FAST                2 (amount)
             14 LOAD_CONST               3 (1)
             16 BINARY_ADD
             18 BINARY_MULTIPLY
             20 STORE_DEREF              1 (dp)

  7          22 LOAD_GLOBAL              1 (range)
             24 LOAD_CONST               3 (1)
             26 LOAD_FAST                2 (amount)
             28 LOAD_CONST               3 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                38 (to 76)
             38 STORE_DEREF              2 (i)

  8          40 LOAD_GLOBAL              2 (min)
             42 LOAD_CLOSURE             0 (MAX)
             44 LOAD_CLOSURE             1 (dp)
             46 LOAD_CLOSURE             2 (i)
             48 BUILD_TUPLE              3
             50 LOAD_CONST               4 (<code object <genexpr> at 0x7ff03a355240, file ""<ast>"", line 8>)
             52 LOAD_CONST               5 ('Solution.coinChange.<locals>.<genexpr>')
             54 MAKE_FUNCTION            8 (closure)
             56 LOAD_FAST                1 (coins)
             58 GET_ITER
             60 CALL_FUNCTION            1
             62 CALL_FUNCTION            1
             64 LOAD_CONST               3 (1)
             66 BINARY_ADD
             68 LOAD_DEREF               1 (dp)
             70 LOAD_DEREF               2 (i)
             72 STORE_SUBSCR
             74 JUMP_ABSOLUTE           36

 10     >>   76 LOAD_DEREF               1 (dp)
             78 LOAD_CONST               6 (-1)
             80 BINARY_SUBSCR
             82 LOAD_DEREF               0 (MAX)
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE       92
             88 LOAD_CONST               6 (-1)
             90 RETURN_VALUE
        >>   92 LOAD_DEREF               1 (dp)
             94 LOAD_CONST               6 (-1)
             96 BINARY_SUBSCR
             98 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7ff03a355240, file ""<ast>"", line 8>:
  8           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                34 (to 38)
              4 STORE_FAST               1 (c)
              6 LOAD_DEREF               2 (i)
              8 LOAD_FAST                1 (c)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               0 (0)
             14 COMPARE_OP               5 (>=)
             16 POP_JUMP_IF_FALSE       30
             18 LOAD_DEREF               1 (dp)
             20 LOAD_DEREF               2 (i)
             22 LOAD_FAST                1 (c)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 JUMP_FORWARD             2 (to 32)
        >>   30 LOAD_DEREF               0 (MAX)
        >>   32 YIELD_VALUE
             34 POP_TOP
             36 JUMP_ABSOLUTE            2
        >>   38 LOAD_CONST               1 (None)
             40 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if not coins or amount <= 0:
            return 0
        
        coins = set(coins)
        level = [amount]
        visited = set([amount])
        count = 0
        while level:
            count += 1
            temp = []
            for a in level:
                if a in coins:
                    return count
                for c in coins:
                    if a - c > 0 and (a - c) not in visited:
                        temp.append(a - c)
                        visited.add(a - c)
            level = temp
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa873cd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa873cd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7fa873cd5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7fa873cd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (coins)
              2 POP_JUMP_IF_FALSE       12
              4 LOAD_FAST                2 (amount)
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16

  4     >>   12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  6     >>   16 LOAD_GLOBAL              0 (set)
             18 LOAD_FAST                1 (coins)
             20 CALL_FUNCTION            1
             22 STORE_FAST               1 (coins)

  7          24 LOAD_FAST                2 (amount)
             26 BUILD_LIST               1
             28 STORE_FAST               3 (level)

  8          30 LOAD_GLOBAL              0 (set)
             32 LOAD_FAST                2 (amount)
             34 BUILD_LIST               1
             36 CALL_FUNCTION            1
             38 STORE_FAST               4 (visited)

  9          40 LOAD_CONST               1 (0)
             42 STORE_FAST               5 (count)

 10     >>   44 LOAD_FAST                3 (level)
             46 POP_JUMP_IF_FALSE      154

 11          48 LOAD_FAST                5 (count)
             50 LOAD_CONST               2 (1)
             52 INPLACE_ADD
             54 STORE_FAST               5 (count)

 12          56 BUILD_LIST               0
             58 STORE_FAST               6 (temp)

 13          60 LOAD_FAST                3 (level)
             62 GET_ITER
        >>   64 FOR_ITER                82 (to 148)
             66 STORE_FAST               7 (a)

 14          68 LOAD_FAST                7 (a)
             70 LOAD_FAST                1 (coins)
             72 COMPARE_OP               6 (in)
             74 POP_JUMP_IF_FALSE       84

 15          76 LOAD_FAST                5 (count)
             78 ROT_TWO
             80 POP_TOP
             82 RETURN_VALUE

 16     >>   84 LOAD_FAST                1 (coins)
             86 GET_ITER
        >>   88 FOR_ITER                56 (to 146)
             90 STORE_FAST               8 (c)

 17          92 LOAD_FAST                7 (a)
             94 LOAD_FAST                8 (c)
             96 BINARY_SUBTRACT
             98 LOAD_CONST               1 (0)
            100 COMPARE_OP               4 (>)
            102 POP_JUMP_IF_FALSE       88
            104 LOAD_FAST                7 (a)
            106 LOAD_FAST                8 (c)
            108 BINARY_SUBTRACT
            110 LOAD_FAST                4 (visited)
            112 COMPARE_OP               7 (not in)
            114 POP_JUMP_IF_FALSE       88

 18         116 LOAD_FAST                6 (temp)
            118 LOAD_METHOD              1 (append)
            120 LOAD_FAST                7 (a)
            122 LOAD_FAST                8 (c)
            124 BINARY_SUBTRACT
            126 CALL_METHOD              1
            128 POP_TOP

 19         130 LOAD_FAST                4 (visited)
            132 LOAD_METHOD              2 (add)
            134 LOAD_FAST                7 (a)
            136 LOAD_FAST                8 (c)
            138 BINARY_SUBTRACT
            140 CALL_METHOD              1
            142 POP_TOP
            144 JUMP_ABSOLUTE           88
        >>  146 JUMP_ABSOLUTE           64

 20     >>  148 LOAD_FAST                6 (temp)
            150 STORE_FAST               3 (level)
            152 JUMP_ABSOLUTE           44

 21     >>  154 LOAD_CONST               3 (-1)
            156 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        dp = [float('inf') for _ in range(amount+1)]
        dp[0] = 0
        
        for money in range(1, amount+1):
            if money in coins:
                dp[money] = 1
            else:
                minvalue = float('inf')
                for coin in coins:
                    if money-coin > 0:
                        minvalue = min(minvalue, dp[money-coin]+1)
                dp[money] = minvalue

        return dp[amount] if dp[amount] != float('inf') else -1
                    
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f85f44b53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f85f44b53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f85f44b52f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f85f44b52f0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f85f44b5240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.coinChange.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               3 (dp)

  5          22 LOAD_CONST               4 (0)
             24 LOAD_FAST                3 (dp)
             26 LOAD_CONST               4 (0)
             28 STORE_SUBSCR

  7          30 LOAD_GLOBAL              0 (range)
             32 LOAD_CONST               3 (1)
             34 LOAD_FAST                2 (amount)
             36 LOAD_CONST               3 (1)
             38 BINARY_ADD
             40 CALL_FUNCTION            2
             42 GET_ITER
        >>   44 FOR_ITER                82 (to 128)
             46 STORE_FAST               4 (money)

  8          48 LOAD_FAST                4 (money)
             50 LOAD_FAST                1 (coins)
             52 COMPARE_OP               6 (in)
             54 POP_JUMP_IF_FALSE       66

  9          56 LOAD_CONST               3 (1)
             58 LOAD_FAST                3 (dp)
             60 LOAD_FAST                4 (money)
             62 STORE_SUBSCR
             64 JUMP_ABSOLUTE           44

 11     >>   66 LOAD_GLOBAL              1 (float)
             68 LOAD_CONST               5 ('inf')
             70 CALL_FUNCTION            1
             72 STORE_FAST               5 (minvalue)

 12          74 LOAD_FAST                1 (coins)
             76 GET_ITER
        >>   78 FOR_ITER                38 (to 118)
             80 STORE_FAST               6 (coin)

 13          82 LOAD_FAST                4 (money)
             84 LOAD_FAST                6 (coin)
             86 BINARY_SUBTRACT
             88 LOAD_CONST               4 (0)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE       78

 14          94 LOAD_GLOBAL              2 (min)
             96 LOAD_FAST                5 (minvalue)
             98 LOAD_FAST                3 (dp)
            100 LOAD_FAST                4 (money)
            102 LOAD_FAST                6 (coin)
            104 BINARY_SUBTRACT
            106 BINARY_SUBSCR
            108 LOAD_CONST               3 (1)
            110 BINARY_ADD
            112 CALL_FUNCTION            2
            114 STORE_FAST               5 (minvalue)
            116 JUMP_ABSOLUTE           78

 15     >>  118 LOAD_FAST                5 (minvalue)
            120 LOAD_FAST                3 (dp)
            122 LOAD_FAST                4 (money)
            124 STORE_SUBSCR
            126 JUMP_ABSOLUTE           44

 17     >>  128 LOAD_FAST                3 (dp)
            130 LOAD_FAST                2 (amount)
            132 BINARY_SUBSCR
            134 LOAD_GLOBAL              1 (float)
            136 LOAD_CONST               5 ('inf')
            138 CALL_FUNCTION            1
            140 COMPARE_OP               3 (!=)
            142 POP_JUMP_IF_FALSE      152
            144 LOAD_FAST                3 (dp)
            146 LOAD_FAST                2 (amount)
            148 BINARY_SUBSCR
            150 RETURN_VALUE
        >>  152 LOAD_CONST               6 (-1)
            154 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f85f44b5240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (float)
             10 LOAD_CONST               0 ('inf')
             12 CALL_FUNCTION            1
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        coins.sort()
        changes=[amount+1]*(amount+1)
        changes[0]=0
        for i in range(1,amount+1):
            for coin in coins:
                if coin>i:
                    break
                else:
                    changes[i]=min(changes[i],changes[i-coin]+1)
        return changes[-1] if changes[-1]!=(amount+1) else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f938ba55240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f938ba55240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f938ba553a0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f938ba553a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (coins)
              2 LOAD_METHOD              0 (sort)
              4 CALL_METHOD              0
              6 POP_TOP

  4           8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               1 (1)
             12 BINARY_ADD
             14 BUILD_LIST               1
             16 LOAD_FAST                2 (amount)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 BINARY_MULTIPLY
             24 STORE_FAST               3 (changes)

  5          26 LOAD_CONST               2 (0)
             28 LOAD_FAST                3 (changes)
             30 LOAD_CONST               2 (0)
             32 STORE_SUBSCR

  6          34 LOAD_GLOBAL              1 (range)
             36 LOAD_CONST               1 (1)
             38 LOAD_FAST                2 (amount)
             40 LOAD_CONST               1 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                58 (to 108)
             50 STORE_FAST               4 (i)

  7          52 LOAD_FAST                1 (coins)
             54 GET_ITER
        >>   56 FOR_ITER                48 (to 106)
             58 STORE_FAST               5 (coin)

  8          60 LOAD_FAST                5 (coin)
             62 LOAD_FAST                4 (i)
             64 COMPARE_OP               4 (>)
             66 POP_JUMP_IF_FALSE       74

  9          68 POP_TOP
             70 JUMP_ABSOLUTE           48
             72 JUMP_ABSOLUTE           56

 11     >>   74 LOAD_GLOBAL              2 (min)
             76 LOAD_FAST                3 (changes)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                3 (changes)
             84 LOAD_FAST                4 (i)
             86 LOAD_FAST                5 (coin)
             88 BINARY_SUBTRACT
             90 BINARY_SUBSCR
             92 LOAD_CONST               1 (1)
             94 BINARY_ADD
             96 CALL_FUNCTION            2
             98 LOAD_FAST                3 (changes)
            100 LOAD_FAST                4 (i)
            102 STORE_SUBSCR
            104 JUMP_ABSOLUTE           56
        >>  106 JUMP_ABSOLUTE           48

 12     >>  108 LOAD_FAST                3 (changes)
            110 LOAD_CONST               3 (-1)
            112 BINARY_SUBSCR
            114 LOAD_FAST                2 (amount)
            116 LOAD_CONST               1 (1)
            118 BINARY_ADD
            120 COMPARE_OP               3 (!=)
            122 POP_JUMP_IF_FALSE      132
            124 LOAD_FAST                3 (changes)
            126 LOAD_CONST               3 (-1)
            128 BINARY_SUBSCR
            130 RETURN_VALUE
        >>  132 LOAD_CONST               3 (-1)
            134 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        memo = [float(""inf"")]*(amount+1)
        memo[0] = 0
        
        for i in range(1,amount+1):
            for coin in coins:
                
                if i-coin >= 0 and memo[i] > memo[i-coin]+1:
                    memo[i] = memo[i-coin]+1

        if memo[amount] == float(""inf""):
            return -1
        return memo[amount]
		           
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffc6e7f5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffc6e7f5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7ffc6e7f53a0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7ffc6e7f53a0, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 BUILD_LIST               1
              8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               2 (1)
             12 BINARY_ADD
             14 BINARY_MULTIPLY
             16 STORE_FAST               3 (memo)

  5          18 LOAD_CONST               3 (0)
             20 LOAD_FAST                3 (memo)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  7          26 LOAD_GLOBAL              1 (range)
             28 LOAD_CONST               2 (1)
             30 LOAD_FAST                2 (amount)
             32 LOAD_CONST               2 (1)
             34 BINARY_ADD
             36 CALL_FUNCTION            2
             38 GET_ITER
        >>   40 FOR_ITER                70 (to 112)
             42 STORE_FAST               4 (i)

  8          44 LOAD_FAST                1 (coins)
             46 GET_ITER
        >>   48 FOR_ITER                60 (to 110)
             50 STORE_FAST               5 (coin)

 10          52 LOAD_FAST                4 (i)
             54 LOAD_FAST                5 (coin)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               3 (0)
             60 COMPARE_OP               5 (>=)
             62 POP_JUMP_IF_FALSE       48
             64 LOAD_FAST                3 (memo)
             66 LOAD_FAST                4 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                3 (memo)
             72 LOAD_FAST                4 (i)
             74 LOAD_FAST                5 (coin)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 LOAD_CONST               2 (1)
             82 BINARY_ADD
             84 COMPARE_OP               4 (>)
             86 POP_JUMP_IF_FALSE       48

 11          88 LOAD_FAST                3 (memo)
             90 LOAD_FAST                4 (i)
             92 LOAD_FAST                5 (coin)
             94 BINARY_SUBTRACT
             96 BINARY_SUBSCR
             98 LOAD_CONST               2 (1)
            100 BINARY_ADD
            102 LOAD_FAST                3 (memo)
            104 LOAD_FAST                4 (i)
            106 STORE_SUBSCR
            108 JUMP_ABSOLUTE           48
        >>  110 JUMP_ABSOLUTE           40

 13     >>  112 LOAD_FAST                3 (memo)
            114 LOAD_FAST                2 (amount)
            116 BINARY_SUBSCR
            118 LOAD_GLOBAL              0 (float)
            120 LOAD_CONST               1 ('inf')
            122 CALL_FUNCTION            1
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE      132

 14         128 LOAD_CONST               4 (-1)
            130 RETURN_VALUE

 15     >>  132 LOAD_FAST                3 (memo)
            134 LOAD_FAST                2 (amount)
            136 BINARY_SUBSCR
            138 RETURN_VALUE
None
"
coinChange,"class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        maxi = 100001
        dp = [maxi]*(amount+1)
        dp[0] = 0
        for c in coins:
            for i in range(c,amount+1):
                dp[i] = min(dp[i],dp[i-c]+1)
                
        if dp[-1]==maxi: return -1
        else: return dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f39bd475240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f39bd475240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_NAME                4 (int)
             18 LOAD_CONST               1 (('coins', 'amount', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               2 (<code object coinChange at 0x7f39bd4752f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               3 ('Solution.coinChange')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (coinChange)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object coinChange at 0x7f39bd4752f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (100001)
              2 STORE_FAST               3 (maxi)

  4           4 LOAD_FAST                3 (maxi)
              6 BUILD_LIST               1
              8 LOAD_FAST                2 (amount)
             10 LOAD_CONST               2 (1)
             12 BINARY_ADD
             14 BINARY_MULTIPLY
             16 STORE_FAST               4 (dp)

  5          18 LOAD_CONST               3 (0)
             20 LOAD_FAST                4 (dp)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  6          26 LOAD_FAST                1 (coins)
             28 GET_ITER
        >>   30 FOR_ITER                54 (to 86)
             32 STORE_FAST               5 (c)

  7          34 LOAD_GLOBAL              0 (range)
             36 LOAD_FAST                5 (c)
             38 LOAD_FAST                2 (amount)
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                34 (to 84)
             50 STORE_FAST               6 (i)

  8          52 LOAD_GLOBAL              1 (min)
             54 LOAD_FAST                4 (dp)
             56 LOAD_FAST                6 (i)
             58 BINARY_SUBSCR
             60 LOAD_FAST                4 (dp)
             62 LOAD_FAST                6 (i)
             64 LOAD_FAST                5 (c)
             66 BINARY_SUBTRACT
             68 BINARY_SUBSCR
             70 LOAD_CONST               2 (1)
             72 BINARY_ADD
             74 CALL_FUNCTION            2
             76 LOAD_FAST                4 (dp)
             78 LOAD_FAST                6 (i)
             80 STORE_SUBSCR
             82 JUMP_ABSOLUTE           48
        >>   84 JUMP_ABSOLUTE           30

 10     >>   86 LOAD_FAST                4 (dp)
             88 LOAD_CONST               4 (-1)
             90 BINARY_SUBSCR
             92 LOAD_FAST                3 (maxi)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE      102
             98 LOAD_CONST               4 (-1)
            100 RETURN_VALUE

 11     >>  102 LOAD_FAST                4 (dp)
            104 LOAD_CONST               4 (-1)
            106 BINARY_SUBSCR
            108 RETURN_VALUE
            110 LOAD_CONST               0 (None)
            112 RETURN_VALUE
None
"
countPrimes,"class Solution:
	def countPrimes(self, n: int) -> int:
		if n <= 2:
			return 0

		table = [True]*n
		table[0], table[1] = False,False

		i = 2
		while i*i < n:
			if table[i]:
				for j in range(i*i, n, i):
					table[j] = False
			i+=1

		return sum(table)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1f49785240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1f49785240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f1f497852f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f1f497852f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               3 (True)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (table)

  7          22 LOAD_CONST               4 ((False, False))
             24 UNPACK_SEQUENCE          2
             26 LOAD_FAST                2 (table)
             28 LOAD_CONST               2 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (table)
             34 LOAD_CONST               5 (1)
             36 STORE_SUBSCR

  9          38 LOAD_CONST               1 (2)
             40 STORE_FAST               3 (i)

 10     >>   42 LOAD_FAST                3 (i)
             44 LOAD_FAST                3 (i)
             46 BINARY_MULTIPLY
             48 LOAD_FAST                1 (n)
             50 COMPARE_OP               0 (<)
             52 POP_JUMP_IF_FALSE      102

 11          54 LOAD_FAST                2 (table)
             56 LOAD_FAST                3 (i)
             58 BINARY_SUBSCR
             60 POP_JUMP_IF_FALSE       92

 12          62 LOAD_GLOBAL              0 (range)
             64 LOAD_FAST                3 (i)
             66 LOAD_FAST                3 (i)
             68 BINARY_MULTIPLY
             70 LOAD_FAST                1 (n)
             72 LOAD_FAST                3 (i)
             74 CALL_FUNCTION            3
             76 GET_ITER
        >>   78 FOR_ITER                12 (to 92)
             80 STORE_FAST               4 (j)

 13          82 LOAD_CONST               6 (False)
             84 LOAD_FAST                2 (table)
             86 LOAD_FAST                4 (j)
             88 STORE_SUBSCR
             90 JUMP_ABSOLUTE           78

 14     >>   92 LOAD_FAST                3 (i)
             94 LOAD_CONST               5 (1)
             96 INPLACE_ADD
             98 STORE_FAST               3 (i)
            100 JUMP_ABSOLUTE           42

 16     >>  102 LOAD_GLOBAL              1 (sum)
            104 LOAD_FAST                2 (table)
            106 CALL_FUNCTION            1
            108 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
            
        if n<2:
            return 0
        
        s = [1]*n
        
        s[0]=s[1]=0
        
        for i in range(2,int(n**0.5)+1):
            if s[i]:
                for j in range(i*i,n,i):
                    s[j] = 0
        
        return sum(s)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7b2fb25240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7b2fb25240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f7b2fb252f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f7b2fb252f0, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  7     >>   12 LOAD_CONST               3 (1)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (s)

  9          22 LOAD_CONST               2 (0)
             24 DUP_TOP
             26 LOAD_FAST                2 (s)
             28 LOAD_CONST               2 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (s)
             34 LOAD_CONST               3 (1)
             36 STORE_SUBSCR

 11          38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               1 (2)
             42 LOAD_GLOBAL              1 (int)
             44 LOAD_FAST                1 (n)
             46 LOAD_CONST               4 (0.5)
             48 BINARY_POWER
             50 CALL_FUNCTION            1
             52 LOAD_CONST               3 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER                42 (to 104)
             62 STORE_FAST               3 (i)

 12          64 LOAD_FAST                2 (s)
             66 LOAD_FAST                3 (i)
             68 BINARY_SUBSCR
             70 POP_JUMP_IF_FALSE       60

 13          72 LOAD_GLOBAL              0 (range)
             74 LOAD_FAST                3 (i)
             76 LOAD_FAST                3 (i)
             78 BINARY_MULTIPLY
             80 LOAD_FAST                1 (n)
             82 LOAD_FAST                3 (i)
             84 CALL_FUNCTION            3
             86 GET_ITER
        >>   88 FOR_ITER                12 (to 102)
             90 STORE_FAST               4 (j)

 14          92 LOAD_CONST               2 (0)
             94 LOAD_FAST                2 (s)
             96 LOAD_FAST                4 (j)
             98 STORE_SUBSCR
            100 JUMP_ABSOLUTE           88
        >>  102 JUMP_ABSOLUTE           60

 16     >>  104 LOAD_GLOBAL              2 (sum)
            106 LOAD_FAST                2 (s)
            108 CALL_FUNCTION            1
            110 RETURN_VALUE
None
"
countPrimes,"import math
class Solution:
    def countPrimes(self, n: int) -> int:
        if n == 0 or n == 1:
            return 0
        prime = [True]*(n)
        count = 0
        for i in range(2, int(math.sqrt(n))+1):
            if prime[i]:
                j = i*i
                while j < n:
                    prime[j] = False
                    j += i
        for p in range(2, len(prime)):
            if prime[p]:
                count += 1
        return count
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f08447252f0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f08447252f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f0844725240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f0844725240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               2 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  5     >>   16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  6     >>   20 LOAD_CONST               3 (True)
             22 BUILD_LIST               1
             24 LOAD_FAST                1 (n)
             26 BINARY_MULTIPLY
             28 STORE_FAST               2 (prime)

  7          30 LOAD_CONST               1 (0)
             32 STORE_FAST               3 (count)

  8          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               4 (2)
             38 LOAD_GLOBAL              1 (int)
             40 LOAD_GLOBAL              2 (math)
             42 LOAD_METHOD              3 (sqrt)
             44 LOAD_FAST                1 (n)
             46 CALL_METHOD              1
             48 CALL_FUNCTION            1
             50 LOAD_CONST               2 (1)
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 GET_ITER
        >>   58 FOR_ITER                46 (to 106)
             60 STORE_FAST               4 (i)

  9          62 LOAD_FAST                2 (prime)
             64 LOAD_FAST                4 (i)
             66 BINARY_SUBSCR
             68 POP_JUMP_IF_FALSE       58

 10          70 LOAD_FAST                4 (i)
             72 LOAD_FAST                4 (i)
             74 BINARY_MULTIPLY
             76 STORE_FAST               5 (j)

 11     >>   78 LOAD_FAST                5 (j)
             80 LOAD_FAST                1 (n)
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE       58

 12          86 LOAD_CONST               5 (False)
             88 LOAD_FAST                2 (prime)
             90 LOAD_FAST                5 (j)
             92 STORE_SUBSCR

 13          94 LOAD_FAST                5 (j)
             96 LOAD_FAST                4 (i)
             98 INPLACE_ADD
            100 STORE_FAST               5 (j)
            102 JUMP_ABSOLUTE           78
            104 JUMP_ABSOLUTE           58

 14     >>  106 LOAD_GLOBAL              0 (range)
            108 LOAD_CONST               4 (2)
            110 LOAD_GLOBAL              4 (len)
            112 LOAD_FAST                2 (prime)
            114 CALL_FUNCTION            1
            116 CALL_FUNCTION            2
            118 GET_ITER
        >>  120 FOR_ITER                20 (to 142)
            122 STORE_FAST               6 (p)

 15         124 LOAD_FAST                2 (prime)
            126 LOAD_FAST                6 (p)
            128 BINARY_SUBSCR
            130 POP_JUMP_IF_FALSE      120

 16         132 LOAD_FAST                3 (count)
            134 LOAD_CONST               2 (1)
            136 INPLACE_ADD
            138 STORE_FAST               3 (count)
            140 JUMP_ABSOLUTE          120

 17     >>  142 LOAD_FAST                3 (count)
            144 RETURN_VALUE
None
"
countPrimes,"import math

class Solution:

    def countPrimes(self, n: int) -> int:
        if n <= 2:
            return 0
        # the number x is represented by a[x]
        a = [1] * n
        # ignore 0 and 1
        a[0] = a[1] = 0
        nsqrt = math.ceil(math.sqrt(n))
        for i in range(2, nsqrt + 1):
            if not a[i]:
                continue
            j = int(math.pow(i, 2))
            while j < n:
                a[j] = 0
                j += i
        return sum(a)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  3           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f75e7855240, file ""<ast>"", line 3>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f75e7855240, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  5           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f75e78553a0, file ""<ast>"", line 5>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f75e78553a0, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  7           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  9     >>   12 LOAD_CONST               3 (1)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (a)

 11          22 LOAD_CONST               2 (0)
             24 DUP_TOP
             26 LOAD_FAST                2 (a)
             28 LOAD_CONST               2 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (a)
             34 LOAD_CONST               3 (1)
             36 STORE_SUBSCR

 12          38 LOAD_GLOBAL              0 (math)
             40 LOAD_METHOD              1 (ceil)
             42 LOAD_GLOBAL              0 (math)
             44 LOAD_METHOD              2 (sqrt)
             46 LOAD_FAST                1 (n)
             48 CALL_METHOD              1
             50 CALL_METHOD              1
             52 STORE_FAST               3 (nsqrt)

 13          54 LOAD_GLOBAL              3 (range)
             56 LOAD_CONST               1 (2)
             58 LOAD_FAST                3 (nsqrt)
             60 LOAD_CONST               3 (1)
             62 BINARY_ADD
             64 CALL_FUNCTION            2
             66 GET_ITER
        >>   68 FOR_ITER                56 (to 126)
             70 STORE_FAST               4 (i)

 14          72 LOAD_FAST                2 (a)
             74 LOAD_FAST                4 (i)
             76 BINARY_SUBSCR
             78 POP_JUMP_IF_TRUE        82

 15          80 JUMP_ABSOLUTE           68

 16     >>   82 LOAD_GLOBAL              4 (int)
             84 LOAD_GLOBAL              0 (math)
             86 LOAD_METHOD              5 (pow)
             88 LOAD_FAST                4 (i)
             90 LOAD_CONST               1 (2)
             92 CALL_METHOD              2
             94 CALL_FUNCTION            1
             96 STORE_FAST               5 (j)

 17     >>   98 LOAD_FAST                5 (j)
            100 LOAD_FAST                1 (n)
            102 COMPARE_OP               0 (<)
            104 POP_JUMP_IF_FALSE       68

 18         106 LOAD_CONST               2 (0)
            108 LOAD_FAST                2 (a)
            110 LOAD_FAST                5 (j)
            112 STORE_SUBSCR

 19         114 LOAD_FAST                5 (j)
            116 LOAD_FAST                4 (i)
            118 INPLACE_ADD
            120 STORE_FAST               5 (j)
            122 JUMP_ABSOLUTE           98
            124 JUMP_ABSOLUTE           68

 20     >>  126 LOAD_GLOBAL              6 (sum)
            128 LOAD_FAST                2 (a)
            130 CALL_FUNCTION            1
            132 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        if n<3:return 0
        primes = [True]*n
        for i in range(3, n, 2): # skip even
            if primes[i]:
                for j in range(i**2, n, i):
                    primes[j] = False
        primes[0]=primes[1] = False
        for i in range(4,n,2):
            primes[i] = False
        return sum(primes)      
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdee5db5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdee5db5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7fdee5db53a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7fdee5db53a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (3)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               3 (True)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (primes)

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               1 (3)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               4 (2)
             30 CALL_FUNCTION            3
             32 GET_ITER
        >>   34 FOR_ITER                42 (to 78)
             36 STORE_FAST               3 (i)

  6          38 LOAD_FAST                2 (primes)
             40 LOAD_FAST                3 (i)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_FALSE       34

  7          46 LOAD_GLOBAL              0 (range)
             48 LOAD_FAST                3 (i)
             50 LOAD_CONST               4 (2)
             52 BINARY_POWER
             54 LOAD_FAST                1 (n)
             56 LOAD_FAST                3 (i)
             58 CALL_FUNCTION            3
             60 GET_ITER
        >>   62 FOR_ITER                12 (to 76)
             64 STORE_FAST               4 (j)

  8          66 LOAD_CONST               5 (False)
             68 LOAD_FAST                2 (primes)
             70 LOAD_FAST                4 (j)
             72 STORE_SUBSCR
             74 JUMP_ABSOLUTE           62
        >>   76 JUMP_ABSOLUTE           34

  9     >>   78 LOAD_CONST               5 (False)
             80 DUP_TOP
             82 LOAD_FAST                2 (primes)
             84 LOAD_CONST               2 (0)
             86 STORE_SUBSCR
             88 LOAD_FAST                2 (primes)
             90 LOAD_CONST               6 (1)
             92 STORE_SUBSCR

 10          94 LOAD_GLOBAL              0 (range)
             96 LOAD_CONST               7 (4)
             98 LOAD_FAST                1 (n)
            100 LOAD_CONST               4 (2)
            102 CALL_FUNCTION            3
            104 GET_ITER
        >>  106 FOR_ITER                12 (to 120)
            108 STORE_FAST               3 (i)

 11         110 LOAD_CONST               5 (False)
            112 LOAD_FAST                2 (primes)
            114 LOAD_FAST                3 (i)
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE          106

 12     >>  120 LOAD_GLOBAL              1 (sum)
            122 LOAD_FAST                2 (primes)
            124 CALL_FUNCTION            1
            126 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        
        prime = [True for i in range(n)]
        p = 2
        while(p*p <=n-1):
            if prime[p]==True:
                for i in range( p*p , n,p):
                    prime[i]=False
                
            p += 1
        count = 0
        for p in range(2, n): 
            if prime[p]: 
                count = count +1
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f157ca952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f157ca952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f157ca95450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f157ca95450, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f157ca95240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.countPrimes.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               2 (prime)

  5          18 LOAD_CONST               3 (2)
             20 STORE_FAST               3 (p)

  6     >>   22 LOAD_FAST                3 (p)
             24 LOAD_FAST                3 (p)
             26 BINARY_MULTIPLY
             28 LOAD_FAST                1 (n)
             30 LOAD_CONST               4 (1)
             32 BINARY_SUBTRACT
             34 COMPARE_OP               1 (<=)
             36 POP_JUMP_IF_FALSE       90

  7          38 LOAD_FAST                2 (prime)
             40 LOAD_FAST                3 (p)
             42 BINARY_SUBSCR
             44 LOAD_CONST               5 (True)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       80

  8          50 LOAD_GLOBAL              0 (range)
             52 LOAD_FAST                3 (p)
             54 LOAD_FAST                3 (p)
             56 BINARY_MULTIPLY
             58 LOAD_FAST                1 (n)
             60 LOAD_FAST                3 (p)
             62 CALL_FUNCTION            3
             64 GET_ITER
        >>   66 FOR_ITER                12 (to 80)
             68 STORE_FAST               4 (i)

  9          70 LOAD_CONST               6 (False)
             72 LOAD_FAST                2 (prime)
             74 LOAD_FAST                4 (i)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           66

 11     >>   80 LOAD_FAST                3 (p)
             82 LOAD_CONST               4 (1)
             84 INPLACE_ADD
             86 STORE_FAST               3 (p)
             88 JUMP_ABSOLUTE           22

 12     >>   90 LOAD_CONST               7 (0)
             92 STORE_FAST               5 (count)

 13          94 LOAD_GLOBAL              0 (range)
             96 LOAD_CONST               3 (2)
             98 LOAD_FAST                1 (n)
            100 CALL_FUNCTION            2
            102 GET_ITER
        >>  104 FOR_ITER                20 (to 126)
            106 STORE_FAST               3 (p)

 14         108 LOAD_FAST                2 (prime)
            110 LOAD_FAST                3 (p)
            112 BINARY_SUBSCR
            114 POP_JUMP_IF_FALSE      104

 15         116 LOAD_FAST                5 (count)
            118 LOAD_CONST               4 (1)
            120 BINARY_ADD
            122 STORE_FAST               5 (count)
            124 JUMP_ABSOLUTE          104

 16     >>  126 LOAD_FAST                5 (count)
            128 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f157ca95240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (True)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
countPrimes,"from math import sqrt
class Solution:
    def countPrimes(self, n: int) -> int:
        if n==0:
            return 0
        a = [x for x in range(n+1)]
        a[1] = 0
        count = 0
        for i in range(2, int(sqrt(n))+1):
            if a[i] == i:
                for j in range(i+i, n+1, i):
                    a[j] = 0
        for i in range(2, n):
            if a[i] == i:
                count += 1
        return count
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('sqrt',))
              4 IMPORT_NAME              0 (math)
              6 IMPORT_FROM              1 (sqrt)
              8 STORE_NAME               1 (sqrt)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f7781de53a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7781de53a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f7781de52f0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f7781de52f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (<code object <listcomp> at 0x7f7781de5240, file ""<ast>"", line 6>)
             14 LOAD_CONST               3 ('Solution.countPrimes.<locals>.<listcomp>')
             16 MAKE_FUNCTION            0
             18 LOAD_GLOBAL              0 (range)
             20 LOAD_FAST                1 (n)
             22 LOAD_CONST               4 (1)
             24 BINARY_ADD
             26 CALL_FUNCTION            1
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 STORE_FAST               2 (a)

  7          34 LOAD_CONST               1 (0)
             36 LOAD_FAST                2 (a)
             38 LOAD_CONST               4 (1)
             40 STORE_SUBSCR

  8          42 LOAD_CONST               1 (0)
             44 STORE_FAST               3 (count)

  9          46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST               5 (2)
             50 LOAD_GLOBAL              1 (int)
             52 LOAD_GLOBAL              2 (sqrt)
             54 LOAD_FAST                1 (n)
             56 CALL_FUNCTION            1
             58 CALL_FUNCTION            1
             60 LOAD_CONST               4 (1)
             62 BINARY_ADD
             64 CALL_FUNCTION            2
             66 GET_ITER
        >>   68 FOR_ITER                50 (to 120)
             70 STORE_FAST               4 (i)

 10          72 LOAD_FAST                2 (a)
             74 LOAD_FAST                4 (i)
             76 BINARY_SUBSCR
             78 LOAD_FAST                4 (i)
             80 COMPARE_OP               2 (==)
             82 POP_JUMP_IF_FALSE       68

 11          84 LOAD_GLOBAL              0 (range)
             86 LOAD_FAST                4 (i)
             88 LOAD_FAST                4 (i)
             90 BINARY_ADD
             92 LOAD_FAST                1 (n)
             94 LOAD_CONST               4 (1)
             96 BINARY_ADD
             98 LOAD_FAST                4 (i)
            100 CALL_FUNCTION            3
            102 GET_ITER
        >>  104 FOR_ITER                12 (to 118)
            106 STORE_FAST               5 (j)

 12         108 LOAD_CONST               1 (0)
            110 LOAD_FAST                2 (a)
            112 LOAD_FAST                5 (j)
            114 STORE_SUBSCR
            116 JUMP_ABSOLUTE          104
        >>  118 JUMP_ABSOLUTE           68

 13     >>  120 LOAD_GLOBAL              0 (range)
            122 LOAD_CONST               5 (2)
            124 LOAD_FAST                1 (n)
            126 CALL_FUNCTION            2
            128 GET_ITER
        >>  130 FOR_ITER                24 (to 156)
            132 STORE_FAST               4 (i)

 14         134 LOAD_FAST                2 (a)
            136 LOAD_FAST                4 (i)
            138 BINARY_SUBSCR
            140 LOAD_FAST                4 (i)
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_FALSE      130

 15         146 LOAD_FAST                3 (count)
            148 LOAD_CONST               4 (1)
            150 INPLACE_ADD
            152 STORE_FAST               3 (count)
            154 JUMP_ABSOLUTE          130

 16     >>  156 LOAD_FAST                3 (count)
            158 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f7781de5240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (x)
              8 LOAD_FAST                1 (x)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 3:
            return 0
        primes = [0, 0] + [1] * (n - 2)
        for i in range(2, int((n - 1)**.5) + 1):
            if not primes[i]:
                continue
            for j in range(i**2, n, i):
                primes[j] = 0
        return sum(primes)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe1b1bd5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe1b1bd5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7fe1b1bd52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7fe1b1bd52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (3)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               2 (0)
             14 LOAD_CONST               2 (0)
             16 BUILD_LIST               2
             18 LOAD_CONST               3 (1)
             20 BUILD_LIST               1
             22 LOAD_FAST                1 (n)
             24 LOAD_CONST               4 (2)
             26 BINARY_SUBTRACT
             28 BINARY_MULTIPLY
             30 BINARY_ADD
             32 STORE_FAST               2 (primes)

  6          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               4 (2)
             38 LOAD_GLOBAL              1 (int)
             40 LOAD_FAST                1 (n)
             42 LOAD_CONST               3 (1)
             44 BINARY_SUBTRACT
             46 LOAD_CONST               5 (0.5)
             48 BINARY_POWER
             50 CALL_FUNCTION            1
             52 LOAD_CONST               3 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER                44 (to 106)
             62 STORE_FAST               3 (i)

  7          64 LOAD_FAST                2 (primes)
             66 LOAD_FAST                3 (i)
             68 BINARY_SUBSCR
             70 POP_JUMP_IF_TRUE        74

  8          72 JUMP_ABSOLUTE           60

  9     >>   74 LOAD_GLOBAL              0 (range)
             76 LOAD_FAST                3 (i)
             78 LOAD_CONST               4 (2)
             80 BINARY_POWER
             82 LOAD_FAST                1 (n)
             84 LOAD_FAST                3 (i)
             86 CALL_FUNCTION            3
             88 GET_ITER
        >>   90 FOR_ITER                12 (to 104)
             92 STORE_FAST               4 (j)

 10          94 LOAD_CONST               2 (0)
             96 LOAD_FAST                2 (primes)
             98 LOAD_FAST                4 (j)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           90
        >>  104 JUMP_ABSOLUTE           60

 11     >>  106 LOAD_GLOBAL              2 (sum)
            108 LOAD_FAST                2 (primes)
            110 CALL_FUNCTION            1
            112 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        ## RC ##
        ## APPROACH :  Sieve of Eratosthenes ##
        
        #   1. Checking till sqrt(n) is enough for prime numbers i.e i*i < n
        #   2. mark all as prime.
        #   3. as you move along (i to i*i<n) mark every multiple until n as False.
        #   4. you donot need start from i for that we can start from i*i i.e j=i*i
        
		## TIME COMPLEXITY : O(NLogN) ##
		## SPACE COMPLEXITY : O(N) ##

        isPrime = [False,False] + [True] * (n-2)
        i = 2
        while( i*i < n ):               # Loop's ending condition is i * i < n instead of i < sqrt(n) to avoid repeatedly calling an expensive function sqrt().
            if(isPrime[i]):             # if not prime, it is some prime multiple.
                j = i*i                 # ex: we can mark off multiples of 5 starting at 5 × 5 = 25, because 5 × 2 = 10 was already marked off by multiple of 2, similarly 5 × 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is p, we can always mark off multiples of p starting at p2, then in increments of p: p2 + p, p2 + 2p, ...
                while(j < n):
                    isPrime[j] = False
                    j += i
            i += 1
        return sum(isPrime)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff4e1f152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff4e1f152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7ff4e1f15240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7ff4e1f15240, file ""<ast>"", line 2>:
 14           0 LOAD_CONST               1 (False)
              2 LOAD_CONST               1 (False)
              4 BUILD_LIST               2
              6 LOAD_CONST               2 (True)
              8 BUILD_LIST               1
             10 LOAD_FAST                1 (n)
             12 LOAD_CONST               3 (2)
             14 BINARY_SUBTRACT
             16 BINARY_MULTIPLY
             18 BINARY_ADD
             20 STORE_FAST               2 (isPrime)

 15          22 LOAD_CONST               3 (2)
             24 STORE_FAST               3 (i)

 16     >>   26 LOAD_FAST                3 (i)
             28 LOAD_FAST                3 (i)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (n)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       90

 17          38 LOAD_FAST                2 (isPrime)
             40 LOAD_FAST                3 (i)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_FALSE       80

 18          46 LOAD_FAST                3 (i)
             48 LOAD_FAST                3 (i)
             50 BINARY_MULTIPLY
             52 STORE_FAST               4 (j)

 19     >>   54 LOAD_FAST                4 (j)
             56 LOAD_FAST                1 (n)
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE       80

 20          62 LOAD_CONST               1 (False)
             64 LOAD_FAST                2 (isPrime)
             66 LOAD_FAST                4 (j)
             68 STORE_SUBSCR

 21          70 LOAD_FAST                4 (j)
             72 LOAD_FAST                3 (i)
             74 INPLACE_ADD
             76 STORE_FAST               4 (j)
             78 JUMP_ABSOLUTE           54

 22     >>   80 LOAD_FAST                3 (i)
             82 LOAD_CONST               4 (1)
             84 INPLACE_ADD
             86 STORE_FAST               3 (i)
             88 JUMP_ABSOLUTE           26

 23     >>   90 LOAD_GLOBAL              0 (sum)
             92 LOAD_FAST                2 (isPrime)
             94 CALL_FUNCTION            1
             96 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        p = [1]*n
        res = 0
        for i in range(2,n):
            if p[i]: 
                res+=1
                j = 2
                while j*i<n:
                    p[i*j] = 0
                    j+=1
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fef93c452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fef93c452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7fef93c45240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7fef93c45240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (p)

  4          10 LOAD_CONST               2 (0)
             12 STORE_FAST               3 (res)

  5          14 LOAD_GLOBAL              0 (range)
             16 LOAD_CONST               3 (2)
             18 LOAD_FAST                1 (n)
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER                58 (to 84)
             26 STORE_FAST               4 (i)

  6          28 LOAD_FAST                2 (p)
             30 LOAD_FAST                4 (i)
             32 BINARY_SUBSCR
             34 POP_JUMP_IF_FALSE       24

  7          36 LOAD_FAST                3 (res)
             38 LOAD_CONST               1 (1)
             40 INPLACE_ADD
             42 STORE_FAST               3 (res)

  8          44 LOAD_CONST               3 (2)
             46 STORE_FAST               5 (j)

  9     >>   48 LOAD_FAST                5 (j)
             50 LOAD_FAST                4 (i)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (n)
             56 COMPARE_OP               0 (<)
             58 POP_JUMP_IF_FALSE       24

 10          60 LOAD_CONST               2 (0)
             62 LOAD_FAST                2 (p)
             64 LOAD_FAST                4 (i)
             66 LOAD_FAST                5 (j)
             68 BINARY_MULTIPLY
             70 STORE_SUBSCR

 11          72 LOAD_FAST                5 (j)
             74 LOAD_CONST               1 (1)
             76 INPLACE_ADD
             78 STORE_FAST               5 (j)
             80 JUMP_ABSOLUTE           48
             82 JUMP_ABSOLUTE           24

 12     >>   84 LOAD_FAST                3 (res)
             86 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 3: return 0     ###// No prime number less than 2
        lst = [1] * n          ###// create a list for marking numbers less than n
        lst[0] = lst[1] = 0    ###// 0 and 1 are not prime numbers
        m = 2
        while m * m < n:       ###// we only check a number (m) if its square is less than n
            if lst[m] == 1:    ###// if m is already marked by 0, no need to check its multiples.
			
			    ###// If m is marked by 1, we mark all its multiples from m * m to n by 0. 
			    ###// 1 + (n - m * m - 1) // m is equal to the number of multiples of m from m * m to n
                lst[m * m: n: m] = [0] *(1 + (n - m * m - 1) // m)
				
			###// If it is the first iteration (e.g. m = 2), add 1 to m (e.g. m = m + 1; 
			### // which means m will be 3 in the next iteration), 
            ###// otherwise: (m = m + 2); This way we avoid checking even numbers again.	
            m += 1 if m == 2 else 2
        return sum(lst)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7312605240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7312605240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f73126053a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f73126053a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (3)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               3 (1)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (lst)

  5          22 LOAD_CONST               2 (0)
             24 DUP_TOP
             26 LOAD_FAST                2 (lst)
             28 LOAD_CONST               2 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (lst)
             34 LOAD_CONST               3 (1)
             36 STORE_SUBSCR

  6          38 LOAD_CONST               4 (2)
             40 STORE_FAST               3 (m)

  7     >>   42 LOAD_FAST                3 (m)
             44 LOAD_FAST                3 (m)
             46 BINARY_MULTIPLY
             48 LOAD_FAST                1 (n)
             50 COMPARE_OP               0 (<)
             52 POP_JUMP_IF_FALSE      132

  8          54 LOAD_FAST                2 (lst)
             56 LOAD_FAST                3 (m)
             58 BINARY_SUBSCR
             60 LOAD_CONST               3 (1)
             62 COMPARE_OP               2 (==)
             64 POP_JUMP_IF_FALSE      110

 12          66 LOAD_CONST               2 (0)
             68 BUILD_LIST               1
             70 LOAD_CONST               3 (1)
             72 LOAD_FAST                1 (n)
             74 LOAD_FAST                3 (m)
             76 LOAD_FAST                3 (m)
             78 BINARY_MULTIPLY
             80 BINARY_SUBTRACT
             82 LOAD_CONST               3 (1)
             84 BINARY_SUBTRACT
             86 LOAD_FAST                3 (m)
             88 BINARY_FLOOR_DIVIDE
             90 BINARY_ADD
             92 BINARY_MULTIPLY
             94 LOAD_FAST                2 (lst)
             96 LOAD_FAST                3 (m)
             98 LOAD_FAST                3 (m)
            100 BINARY_MULTIPLY
            102 LOAD_FAST                1 (n)
            104 LOAD_FAST                3 (m)
            106 BUILD_SLICE              3
            108 STORE_SUBSCR

 17     >>  110 LOAD_FAST                3 (m)
            112 LOAD_FAST                3 (m)
            114 LOAD_CONST               4 (2)
            116 COMPARE_OP               2 (==)
            118 POP_JUMP_IF_FALSE      124
            120 LOAD_CONST               3 (1)
            122 JUMP_FORWARD             2 (to 126)
        >>  124 LOAD_CONST               4 (2)
        >>  126 INPLACE_ADD
            128 STORE_FAST               3 (m)
            130 JUMP_ABSOLUTE           42

 18     >>  132 LOAD_GLOBAL              0 (sum)
            134 LOAD_FAST                2 (lst)
            136 CALL_FUNCTION            1
            138 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        sieve = [1] * n
        sieve[0:2] = [0,0]
        start = 2
        while start ** 2 < n:
            if sieve[start] == 1:
                for i in range(2 * start, n, start):
                    sieve[i] = 0
            start += 1
        return sum(sieve)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4ed6d85240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4ed6d85240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f4ed6d852f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f4ed6d852f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (sieve)

  4          10 LOAD_CONST               2 (0)
             12 LOAD_CONST               2 (0)
             14 BUILD_LIST               2
             16 LOAD_FAST                2 (sieve)
             18 LOAD_CONST               2 (0)
             20 LOAD_CONST               3 (2)
             22 BUILD_SLICE              2
             24 STORE_SUBSCR

  5          26 LOAD_CONST               3 (2)
             28 STORE_FAST               3 (start)

  6     >>   30 LOAD_FAST                3 (start)
             32 LOAD_CONST               3 (2)
             34 BINARY_POWER
             36 LOAD_FAST                1 (n)
             38 COMPARE_OP               0 (<)
             40 POP_JUMP_IF_FALSE       94

  7          42 LOAD_FAST                2 (sieve)
             44 LOAD_FAST                3 (start)
             46 BINARY_SUBSCR
             48 LOAD_CONST               1 (1)
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_FALSE       84

  8          54 LOAD_GLOBAL              0 (range)
             56 LOAD_CONST               3 (2)
             58 LOAD_FAST                3 (start)
             60 BINARY_MULTIPLY
             62 LOAD_FAST                1 (n)
             64 LOAD_FAST                3 (start)
             66 CALL_FUNCTION            3
             68 GET_ITER
        >>   70 FOR_ITER                12 (to 84)
             72 STORE_FAST               4 (i)

  9          74 LOAD_CONST               2 (0)
             76 LOAD_FAST                2 (sieve)
             78 LOAD_FAST                4 (i)
             80 STORE_SUBSCR
             82 JUMP_ABSOLUTE           70

 10     >>   84 LOAD_FAST                3 (start)
             86 LOAD_CONST               1 (1)
             88 INPLACE_ADD
             90 STORE_FAST               3 (start)
             92 JUMP_ABSOLUTE           30

 11     >>   94 LOAD_GLOBAL              1 (sum)
             96 LOAD_FAST                2 (sieve)
             98 CALL_FUNCTION            1
            100 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        prime = [True]*n #to make all list element values true
        if n<2:
            return 0
        else:
            prime[1] = prime[0] = False
            for i in range(2,n):
                if prime[i] is not False:
                    prime[i] = True
                for j in range(i*i,n,i):
                    prime[j] = False
        return sum(prime)#it will return sum of all True(1) values only
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f95f5b25240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f95f5b25240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f95f5b252f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f95f5b252f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (True)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (prime)

  4          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               2 (2)
             14 COMPARE_OP               0 (<)
             16 POP_JUMP_IF_FALSE       22

  5          18 LOAD_CONST               3 (0)
             20 RETURN_VALUE

  7     >>   22 LOAD_CONST               4 (False)
             24 DUP_TOP
             26 LOAD_FAST                2 (prime)
             28 LOAD_CONST               5 (1)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (prime)
             34 LOAD_CONST               3 (0)
             36 STORE_SUBSCR

  8          38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               2 (2)
             42 LOAD_FAST                1 (n)
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                54 (to 104)
             50 STORE_FAST               3 (i)

  9          52 LOAD_FAST                2 (prime)
             54 LOAD_FAST                3 (i)
             56 BINARY_SUBSCR
             58 LOAD_CONST               4 (False)
             60 COMPARE_OP               9 (is not)
             62 POP_JUMP_IF_FALSE       72

 10          64 LOAD_CONST               1 (True)
             66 LOAD_FAST                2 (prime)
             68 LOAD_FAST                3 (i)
             70 STORE_SUBSCR

 11     >>   72 LOAD_GLOBAL              0 (range)
             74 LOAD_FAST                3 (i)
             76 LOAD_FAST                3 (i)
             78 BINARY_MULTIPLY
             80 LOAD_FAST                1 (n)
             82 LOAD_FAST                3 (i)
             84 CALL_FUNCTION            3
             86 GET_ITER
        >>   88 FOR_ITER                12 (to 102)
             90 STORE_FAST               4 (j)

 12          92 LOAD_CONST               4 (False)
             94 LOAD_FAST                2 (prime)
             96 LOAD_FAST                4 (j)
             98 STORE_SUBSCR
            100 JUMP_ABSOLUTE           88
        >>  102 JUMP_ABSOLUTE           48

 13     >>  104 LOAD_GLOBAL              1 (sum)
            106 LOAD_FAST                2 (prime)
            108 CALL_FUNCTION            1
            110 RETURN_VALUE
None
"
countPrimes,"import math
class Solution:
    def countPrimes(self, n: int) -> int:
        prime = [True] * n
        if n < 2:
            return 0
        else:
            prime[0] = prime[1] = False
            for i in range(2, int(math.sqrt(n)) + 1):
                if prime[i]:
                    for j in range(i * i, n, i):
                        prime[j] = False
            return sum(prime)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f58e1155240, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f58e1155240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f58e11552f0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f58e11552f0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (True)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (prime)

  5          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               2 (2)
             14 COMPARE_OP               0 (<)
             16 POP_JUMP_IF_FALSE       22

  6          18 LOAD_CONST               3 (0)
             20 RETURN_VALUE

  8     >>   22 LOAD_CONST               4 (False)
             24 DUP_TOP
             26 LOAD_FAST                2 (prime)
             28 LOAD_CONST               3 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (prime)
             34 LOAD_CONST               5 (1)
             36 STORE_SUBSCR

  9          38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               2 (2)
             42 LOAD_GLOBAL              1 (int)
             44 LOAD_GLOBAL              2 (math)
             46 LOAD_METHOD              3 (sqrt)
             48 LOAD_FAST                1 (n)
             50 CALL_METHOD              1
             52 CALL_FUNCTION            1
             54 LOAD_CONST               5 (1)
             56 BINARY_ADD
             58 CALL_FUNCTION            2
             60 GET_ITER
        >>   62 FOR_ITER                42 (to 106)
             64 STORE_FAST               3 (i)

 10          66 LOAD_FAST                2 (prime)
             68 LOAD_FAST                3 (i)
             70 BINARY_SUBSCR
             72 POP_JUMP_IF_FALSE       62

 11          74 LOAD_GLOBAL              0 (range)
             76 LOAD_FAST                3 (i)
             78 LOAD_FAST                3 (i)
             80 BINARY_MULTIPLY
             82 LOAD_FAST                1 (n)
             84 LOAD_FAST                3 (i)
             86 CALL_FUNCTION            3
             88 GET_ITER
        >>   90 FOR_ITER                12 (to 104)
             92 STORE_FAST               4 (j)

 12          94 LOAD_CONST               4 (False)
             96 LOAD_FAST                2 (prime)
             98 LOAD_FAST                4 (j)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           90
        >>  104 JUMP_ABSOLUTE           62

 13     >>  106 LOAD_GLOBAL              4 (sum)
            108 LOAD_FAST                2 (prime)
            110 CALL_FUNCTION            1
            112 RETURN_VALUE
            114 LOAD_CONST               0 (None)
            116 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        if n<3: return 0
        def count_primes(n):
            
            # Generate [0,1,0,1,0,1,...]. 
            primes=[0,1]*(n//2) # Note: with this generation, 1 is prime and 2 is not prime. But I return sum of 1s, so it does not matter much
            if n%2!=0: primes+=[0] # add another one if n is odd

            for i in range(3,int(n**0.5)+1,2): # I don't need to check for even numbers
                if primes[i]==1: 
                    primes[i*i:n:i]=[0]*int((n-i*i-1)/i + 1)
            return sum(primes)
        s=count_primes(n)
        return s
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1f6c925450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1f6c925450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f1f6c925240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f1f6c925240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (3)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               3 (<code object count_primes at 0x7f1f6c9253a0, file ""<ast>"", line 4>)
             14 LOAD_CONST               4 ('Solution.countPrimes.<locals>.count_primes')
             16 MAKE_FUNCTION            0
             18 STORE_FAST               2 (count_primes)

 14          20 LOAD_FAST                2 (count_primes)
             22 LOAD_FAST                1 (n)
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (s)

 15          28 LOAD_FAST                3 (s)
             30 RETURN_VALUE

Disassembly of <code object count_primes at 0x7f1f6c9253a0, file ""<ast>"", line 4>:
  7           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 LOAD_FAST                0 (n)
              8 LOAD_CONST               3 (2)
             10 BINARY_FLOOR_DIVIDE
             12 BINARY_MULTIPLY
             14 STORE_FAST               1 (primes)

  8          16 LOAD_FAST                0 (n)
             18 LOAD_CONST               3 (2)
             20 BINARY_MODULO
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               3 (!=)
             26 POP_JUMP_IF_FALSE       38
             28 LOAD_FAST                1 (primes)
             30 LOAD_CONST               1 (0)
             32 BUILD_LIST               1
             34 INPLACE_ADD
             36 STORE_FAST               1 (primes)

 10     >>   38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               4 (3)
             42 LOAD_GLOBAL              1 (int)
             44 LOAD_FAST                0 (n)
             46 LOAD_CONST               5 (0.5)
             48 BINARY_POWER
             50 CALL_FUNCTION            1
             52 LOAD_CONST               2 (1)
             54 BINARY_ADD
             56 LOAD_CONST               3 (2)
             58 CALL_FUNCTION            3
             60 GET_ITER
        >>   62 FOR_ITER                64 (to 128)
             64 STORE_FAST               2 (i)

 11          66 LOAD_FAST                1 (primes)
             68 LOAD_FAST                2 (i)
             70 BINARY_SUBSCR
             72 LOAD_CONST               2 (1)
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE       62

 12          78 LOAD_CONST               1 (0)
             80 BUILD_LIST               1
             82 LOAD_GLOBAL              1 (int)
             84 LOAD_FAST                0 (n)
             86 LOAD_FAST                2 (i)
             88 LOAD_FAST                2 (i)
             90 BINARY_MULTIPLY
             92 BINARY_SUBTRACT
             94 LOAD_CONST               2 (1)
             96 BINARY_SUBTRACT
             98 LOAD_FAST                2 (i)
            100 BINARY_TRUE_DIVIDE
            102 LOAD_CONST               2 (1)
            104 BINARY_ADD
            106 CALL_FUNCTION            1
            108 BINARY_MULTIPLY
            110 LOAD_FAST                1 (primes)
            112 LOAD_FAST                2 (i)
            114 LOAD_FAST                2 (i)
            116 BINARY_MULTIPLY
            118 LOAD_FAST                0 (n)
            120 LOAD_FAST                2 (i)
            122 BUILD_SLICE              3
            124 STORE_SUBSCR
            126 JUMP_ABSOLUTE           62

 13     >>  128 LOAD_GLOBAL              2 (sum)
            130 LOAD_FAST                1 (primes)
            132 CALL_FUNCTION            1
            134 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        if n <= 1:
            return 0
        else:
            a = [True]*(n)
            a[0] = a[1] = False
            for i in range(2,n):
                if a[i] == True:
                    for  j in range(i,(n-1)//i + 1):
                        a[i*j]  = False
            return a.count(True)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6e74325240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6e74325240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f6e743252f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f6e743252f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               3 (True)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (a)

  7          22 LOAD_CONST               4 (False)
             24 DUP_TOP
             26 LOAD_FAST                2 (a)
             28 LOAD_CONST               2 (0)
             30 STORE_SUBSCR
             32 LOAD_FAST                2 (a)
             34 LOAD_CONST               1 (1)
             36 STORE_SUBSCR

  8          38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               5 (2)
             42 LOAD_FAST                1 (n)
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                56 (to 106)
             50 STORE_FAST               3 (i)

  9          52 LOAD_FAST                2 (a)
             54 LOAD_FAST                3 (i)
             56 BINARY_SUBSCR
             58 LOAD_CONST               3 (True)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       48

 10          64 LOAD_GLOBAL              0 (range)
             66 LOAD_FAST                3 (i)
             68 LOAD_FAST                1 (n)
             70 LOAD_CONST               1 (1)
             72 BINARY_SUBTRACT
             74 LOAD_FAST                3 (i)
             76 BINARY_FLOOR_DIVIDE
             78 LOAD_CONST               1 (1)
             80 BINARY_ADD
             82 CALL_FUNCTION            2
             84 GET_ITER
        >>   86 FOR_ITER                16 (to 104)
             88 STORE_FAST               4 (j)

 11          90 LOAD_CONST               4 (False)
             92 LOAD_FAST                2 (a)
             94 LOAD_FAST                3 (i)
             96 LOAD_FAST                4 (j)
             98 BINARY_MULTIPLY
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           86
        >>  104 JUMP_ABSOLUTE           48

 12     >>  106 LOAD_FAST                2 (a)
            108 LOAD_METHOD              1 (count)
            110 LOAD_CONST               3 (True)
            112 CALL_METHOD              1
            114 RETURN_VALUE
            116 LOAD_CONST               0 (None)
            118 RETURN_VALUE
None
"
countPrimes,"
class Solution(object):
    def countPrimes(self, n:int)->int:
	
        if n < 2:
            return 0
			
        k = [1] * n
        k[0] = 0
        k[1] = 0
        for i in range(2, int(n**0.5)+1):
            if  k[i] != 0:
                k[i*i:n:i] = [0] * ((n-1-i*i)//i + 1)

        return sum(k)

","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbc2e1d5240, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbc2e1d5240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7fbc2e1d53a0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7fbc2e1d53a0, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  6           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  8     >>   12 LOAD_CONST               3 (1)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 BINARY_MULTIPLY
             20 STORE_FAST               2 (k)

  9          22 LOAD_CONST               2 (0)
             24 LOAD_FAST                2 (k)
             26 LOAD_CONST               2 (0)
             28 STORE_SUBSCR

 10          30 LOAD_CONST               2 (0)
             32 LOAD_FAST                2 (k)
             34 LOAD_CONST               3 (1)
             36 STORE_SUBSCR

 11          38 LOAD_GLOBAL              0 (range)
             40 LOAD_CONST               1 (2)
             42 LOAD_GLOBAL              1 (int)
             44 LOAD_FAST                1 (n)
             46 LOAD_CONST               4 (0.5)
             48 BINARY_POWER
             50 CALL_FUNCTION            1
             52 LOAD_CONST               3 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER                60 (to 122)
             62 STORE_FAST               3 (i)

 12          64 LOAD_FAST                2 (k)
             66 LOAD_FAST                3 (i)
             68 BINARY_SUBSCR
             70 LOAD_CONST               2 (0)
             72 COMPARE_OP               3 (!=)
             74 POP_JUMP_IF_FALSE       60

 13          76 LOAD_CONST               2 (0)
             78 BUILD_LIST               1
             80 LOAD_FAST                1 (n)
             82 LOAD_CONST               3 (1)
             84 BINARY_SUBTRACT
             86 LOAD_FAST                3 (i)
             88 LOAD_FAST                3 (i)
             90 BINARY_MULTIPLY
             92 BINARY_SUBTRACT
             94 LOAD_FAST                3 (i)
             96 BINARY_FLOOR_DIVIDE
             98 LOAD_CONST               3 (1)
            100 BINARY_ADD
            102 BINARY_MULTIPLY
            104 LOAD_FAST                2 (k)
            106 LOAD_FAST                3 (i)
            108 LOAD_FAST                3 (i)
            110 BINARY_MULTIPLY
            112 LOAD_FAST                1 (n)
            114 LOAD_FAST                3 (i)
            116 BUILD_SLICE              3
            118 STORE_SUBSCR
            120 JUMP_ABSOLUTE           60

 15     >>  122 LOAD_GLOBAL              2 (sum)
            124 LOAD_FAST                2 (k)
            126 CALL_FUNCTION            1
            128 RETURN_VALUE
None
"
countPrimes,"class Solution:
    
    def sieve_algorithm(self, n: int)-> bool:
        
        if n <= 2:
			# Corner case handle
            return 0
        
        
        is_prime = [ True for _ in range(n) ]
        
        # Base case initialization
        is_prime[0] = False
        is_prime[1] = False
        
        upper_bound = int(n ** 0.5)
        for i in range( 2, upper_bound+1 ):
            
            if not is_prime[i]:
                # only run on prime number
                continue
            
            
            for j in range( i*i, n, i):
                # mark all multiples of i as ""not prime""
                is_prime[j] = False
                
        return sum(is_prime)
    
    
    
    def countPrimes(self, n: int) -> int:
        
        return self.sieve_algorithm(n)
            
            
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff0e2945450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff0e2945450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object sieve_algorithm at 0x7ff0e29453a0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.sieve_algorithm')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (sieve_algorithm)

 32          24 LOAD_NAME                3 (int)
             26 LOAD_NAME                3 (int)
             28 LOAD_CONST               1 (('n', 'return'))
             30 BUILD_CONST_KEY_MAP      2
             32 LOAD_CONST               4 (<code object countPrimes at 0x7ff0e29452f0, file ""<ast>"", line 32>)
             34 LOAD_CONST               5 ('Solution.countPrimes')
             36 MAKE_FUNCTION            4 (annotations)
             38 STORE_NAME               6 (countPrimes)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object sieve_algorithm at 0x7ff0e29453a0, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  7           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

 10     >>   12 LOAD_CONST               3 (<code object <listcomp> at 0x7ff0e2945240, file ""<ast>"", line 10>)
             14 LOAD_CONST               4 ('Solution.sieve_algorithm.<locals>.<listcomp>')
             16 MAKE_FUNCTION            0
             18 LOAD_GLOBAL              0 (range)
             20 LOAD_FAST                1 (n)
             22 CALL_FUNCTION            1
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 STORE_FAST               2 (is_prime)

 13          30 LOAD_CONST               5 (False)
             32 LOAD_FAST                2 (is_prime)
             34 LOAD_CONST               2 (0)
             36 STORE_SUBSCR

 14          38 LOAD_CONST               5 (False)
             40 LOAD_FAST                2 (is_prime)
             42 LOAD_CONST               6 (1)
             44 STORE_SUBSCR

 16          46 LOAD_GLOBAL              1 (int)
             48 LOAD_FAST                1 (n)
             50 LOAD_CONST               7 (0.5)
             52 BINARY_POWER
             54 CALL_FUNCTION            1
             56 STORE_FAST               3 (upper_bound)

 17          58 LOAD_GLOBAL              0 (range)
             60 LOAD_CONST               1 (2)
             62 LOAD_FAST                3 (upper_bound)
             64 LOAD_CONST               6 (1)
             66 BINARY_ADD
             68 CALL_FUNCTION            2
             70 GET_ITER
        >>   72 FOR_ITER                44 (to 118)
             74 STORE_FAST               4 (i)

 19          76 LOAD_FAST                2 (is_prime)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 POP_JUMP_IF_TRUE        86

 21          84 JUMP_ABSOLUTE           72

 24     >>   86 LOAD_GLOBAL              0 (range)
             88 LOAD_FAST                4 (i)
             90 LOAD_FAST                4 (i)
             92 BINARY_MULTIPLY
             94 LOAD_FAST                1 (n)
             96 LOAD_FAST                4 (i)
             98 CALL_FUNCTION            3
            100 GET_ITER
        >>  102 FOR_ITER                12 (to 116)
            104 STORE_FAST               5 (j)

 26         106 LOAD_CONST               5 (False)
            108 LOAD_FAST                2 (is_prime)
            110 LOAD_FAST                5 (j)
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE          102
        >>  116 JUMP_ABSOLUTE           72

 28     >>  118 LOAD_GLOBAL              2 (sum)
            120 LOAD_FAST                2 (is_prime)
            122 CALL_FUNCTION            1
            124 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff0e2945240, file ""<ast>"", line 10>:
 10           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (True)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7ff0e29452f0, file ""<ast>"", line 32>:
 34           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (sieve_algorithm)
              4 LOAD_FAST                1 (n)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n:int)->int:
        prime = [1 for i in range(n+1)] 
        p = 2
        while p * p <= n: 
            if prime[p]:
                for i in range(p * p, n+1, p): 
                    prime[i] = 0

            p += 1
    
        res = 0
        for k in range(2, n): 
            if prime[k]: 
                res += 1

        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff114c552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff114c552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7ff114c55450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7ff114c55450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7ff114c55240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.countPrimes.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (prime)

  4          22 LOAD_CONST               4 (2)
             24 STORE_FAST               3 (p)

  5     >>   26 LOAD_FAST                3 (p)
             28 LOAD_FAST                3 (p)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (n)
             34 COMPARE_OP               1 (<=)
             36 POP_JUMP_IF_FALSE       90

  6          38 LOAD_FAST                2 (prime)
             40 LOAD_FAST                3 (p)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_FALSE       80

  7          46 LOAD_GLOBAL              0 (range)
             48 LOAD_FAST                3 (p)
             50 LOAD_FAST                3 (p)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (n)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 LOAD_FAST                3 (p)
             62 CALL_FUNCTION            3
             64 GET_ITER
        >>   66 FOR_ITER                12 (to 80)
             68 STORE_FAST               4 (i)

  8          70 LOAD_CONST               5 (0)
             72 LOAD_FAST                2 (prime)
             74 LOAD_FAST                4 (i)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           66

 10     >>   80 LOAD_FAST                3 (p)
             82 LOAD_CONST               3 (1)
             84 INPLACE_ADD
             86 STORE_FAST               3 (p)
             88 JUMP_ABSOLUTE           26

 12     >>   90 LOAD_CONST               5 (0)
             92 STORE_FAST               5 (res)

 13          94 LOAD_GLOBAL              0 (range)
             96 LOAD_CONST               4 (2)
             98 LOAD_FAST                1 (n)
            100 CALL_FUNCTION            2
            102 GET_ITER
        >>  104 FOR_ITER                20 (to 126)
            106 STORE_FAST               6 (k)

 14         108 LOAD_FAST                2 (prime)
            110 LOAD_FAST                6 (k)
            112 BINARY_SUBSCR
            114 POP_JUMP_IF_FALSE      104

 15         116 LOAD_FAST                5 (res)
            118 LOAD_CONST               3 (1)
            120 INPLACE_ADD
            122 STORE_FAST               5 (res)
            124 JUMP_ABSOLUTE          104

 17     >>  126 LOAD_FAST                5 (res)
            128 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7ff114c55240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (1)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        prime = [True for i in range(n+1)]
        p = 2
        while p*p<=n:
            if prime[p]:
                for i in range(p*p,n+1,p):
                    prime[i]=False
            p+=1
        res = []
        for p in range(2,n):
            if prime[p]:
                res.append(p)
        return len(res)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f837bb452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f837bb452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f837bb45450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f837bb45450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f837bb45240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.countPrimes.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (prime)

  4          22 LOAD_CONST               4 (2)
             24 STORE_FAST               3 (p)

  5     >>   26 LOAD_FAST                3 (p)
             28 LOAD_FAST                3 (p)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (n)
             34 COMPARE_OP               1 (<=)
             36 POP_JUMP_IF_FALSE       90

  6          38 LOAD_FAST                2 (prime)
             40 LOAD_FAST                3 (p)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_FALSE       80

  7          46 LOAD_GLOBAL              0 (range)
             48 LOAD_FAST                3 (p)
             50 LOAD_FAST                3 (p)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (n)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 LOAD_FAST                3 (p)
             62 CALL_FUNCTION            3
             64 GET_ITER
        >>   66 FOR_ITER                12 (to 80)
             68 STORE_FAST               4 (i)

  8          70 LOAD_CONST               5 (False)
             72 LOAD_FAST                2 (prime)
             74 LOAD_FAST                4 (i)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           66

  9     >>   80 LOAD_FAST                3 (p)
             82 LOAD_CONST               3 (1)
             84 INPLACE_ADD
             86 STORE_FAST               3 (p)
             88 JUMP_ABSOLUTE           26

 10     >>   90 BUILD_LIST               0
             92 STORE_FAST               5 (res)

 11          94 LOAD_GLOBAL              0 (range)
             96 LOAD_CONST               4 (2)
             98 LOAD_FAST                1 (n)
            100 CALL_FUNCTION            2
            102 GET_ITER
        >>  104 FOR_ITER                22 (to 128)
            106 STORE_FAST               3 (p)

 12         108 LOAD_FAST                2 (prime)
            110 LOAD_FAST                3 (p)
            112 BINARY_SUBSCR
            114 POP_JUMP_IF_FALSE      104

 13         116 LOAD_FAST                5 (res)
            118 LOAD_METHOD              1 (append)
            120 LOAD_FAST                3 (p)
            122 CALL_METHOD              1
            124 POP_TOP
            126 JUMP_ABSOLUTE          104

 14     >>  128 LOAD_GLOBAL              2 (len)
            130 LOAD_FAST                5 (res)
            132 CALL_FUNCTION            1
            134 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f837bb45240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (True)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
countPrimes,"class Solution(object):
    def countPrimes(self, n:int)->int:
        cnt, prime = n - 2, [True]*n
        for i in range(2, int(n**0.5) + 1):
            if prime[i]:
                for j in range(i*i, n, i):
                    if prime[j]: prime[j], cnt = False, cnt - 1
        return max(0, cnt)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa2e1895240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa2e1895240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7fa2e18952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7fa2e18952f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               2 (True)
              8 BUILD_LIST               1
             10 LOAD_FAST                1 (n)
             12 BINARY_MULTIPLY
             14 ROT_TWO
             16 STORE_FAST               2 (cnt)
             18 STORE_FAST               3 (prime)

  4          20 LOAD_GLOBAL              0 (range)
             22 LOAD_CONST               1 (2)
             24 LOAD_GLOBAL              1 (int)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               3 (0.5)
             30 BINARY_POWER
             32 CALL_FUNCTION            1
             34 LOAD_CONST               4 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 GET_ITER
        >>   42 FOR_ITER                60 (to 104)
             44 STORE_FAST               4 (i)

  5          46 LOAD_FAST                3 (prime)
             48 LOAD_FAST                4 (i)
             50 BINARY_SUBSCR
             52 POP_JUMP_IF_FALSE       42

  6          54 LOAD_GLOBAL              0 (range)
             56 LOAD_FAST                4 (i)
             58 LOAD_FAST                4 (i)
             60 BINARY_MULTIPLY
             62 LOAD_FAST                1 (n)
             64 LOAD_FAST                4 (i)
             66 CALL_FUNCTION            3
             68 GET_ITER
        >>   70 FOR_ITER                30 (to 102)
             72 STORE_FAST               5 (j)

  7          74 LOAD_FAST                3 (prime)
             76 LOAD_FAST                5 (j)
             78 BINARY_SUBSCR
             80 POP_JUMP_IF_FALSE       70
             82 LOAD_CONST               5 (False)
             84 LOAD_FAST                2 (cnt)
             86 LOAD_CONST               4 (1)
             88 BINARY_SUBTRACT
             90 ROT_TWO
             92 LOAD_FAST                3 (prime)
             94 LOAD_FAST                5 (j)
             96 STORE_SUBSCR
             98 STORE_FAST               2 (cnt)
            100 JUMP_ABSOLUTE           70
        >>  102 JUMP_ABSOLUTE           42

  8     >>  104 LOAD_GLOBAL              2 (max)
            106 LOAD_CONST               6 (0)
            108 LOAD_FAST                2 (cnt)
            110 CALL_FUNCTION            2
            112 RETURN_VALUE
None
"
countPrimes,"class Solution:
    def countPrimes(self, n: int) -> int:
        """"""
		1. Creating a list of consecutive integers
		2. Initializing p = 2 (First prime number)
		3. starting from p^2 and counting in increments of 2 while marking each number
		4. Finding an unmarked number greater than p and setting it as the new value of p
		"""""" 
        number_list = [False for i in range(n+1)]
        p = 2
        while p*p < n:
            if not number_list[p]:
                for i in range(p*p, n+1, p):
                    number_list[i] = True
            p += 1
        
        count= 0
        for p in range(2,n):
            if not number_list[p]:
                count += 1
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4907cb52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4907cb52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object countPrimes at 0x7f4907cb5450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.countPrimes')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (countPrimes)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object countPrimes at 0x7f4907cb5450, file ""<ast>"", line 2>:
  9           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f4907cb5240, file ""<ast>"", line 9>)
              2 LOAD_CONST               2 ('Solution.countPrimes.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (number_list)

 10          22 LOAD_CONST               4 (2)
             24 STORE_FAST               3 (p)

 11     >>   26 LOAD_FAST                3 (p)
             28 LOAD_FAST                3 (p)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (n)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       90

 12          38 LOAD_FAST                2 (number_list)
             40 LOAD_FAST                3 (p)
             42 BINARY_SUBSCR
             44 POP_JUMP_IF_TRUE        80

 13          46 LOAD_GLOBAL              0 (range)
             48 LOAD_FAST                3 (p)
             50 LOAD_FAST                3 (p)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (n)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 LOAD_FAST                3 (p)
             62 CALL_FUNCTION            3
             64 GET_ITER
        >>   66 FOR_ITER                12 (to 80)
             68 STORE_FAST               4 (i)

 14          70 LOAD_CONST               5 (True)
             72 LOAD_FAST                2 (number_list)
             74 LOAD_FAST                4 (i)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           66

 15     >>   80 LOAD_FAST                3 (p)
             82 LOAD_CONST               3 (1)
             84 INPLACE_ADD
             86 STORE_FAST               3 (p)
             88 JUMP_ABSOLUTE           26

 17     >>   90 LOAD_CONST               6 (0)
             92 STORE_FAST               5 (count)

 18          94 LOAD_GLOBAL              0 (range)
             96 LOAD_CONST               4 (2)
             98 LOAD_FAST                1 (n)
            100 CALL_FUNCTION            2
            102 GET_ITER
        >>  104 FOR_ITER                20 (to 126)
            106 STORE_FAST               3 (p)

 19         108 LOAD_FAST                2 (number_list)
            110 LOAD_FAST                3 (p)
            112 BINARY_SUBSCR
            114 POP_JUMP_IF_TRUE       104

 20         116 LOAD_FAST                5 (count)
            118 LOAD_CONST               3 (1)
            120 INPLACE_ADD
            122 STORE_FAST               5 (count)
            124 JUMP_ABSOLUTE          104

 21     >>  126 LOAD_FAST                5 (count)
            128 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f4907cb5240, file ""<ast>"", line 9>:
  9           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (False)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
fib,"from scipy import constants as c

class Solution:
    def fib(self, N: int) -> int:
        return int((c.golden ** N + 1) / 5 ** 0.5)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('constants',))
              4 IMPORT_NAME              0 (scipy)
              6 IMPORT_FROM              1 (constants)
              8 STORE_NAME               2 (c)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f40e05e53a0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               3 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f40e05e53a0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f40e05e52f0, file ""<ast>"", line 4>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f40e05e52f0, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (c)
              4 LOAD_ATTR                2 (golden)
              6 LOAD_FAST                1 (N)
              8 BINARY_POWER
             10 LOAD_CONST               1 (1)
             12 BINARY_ADD
             14 LOAD_CONST               2 (2.23606797749979)
             16 BINARY_TRUE_DIVIDE
             18 CALL_FUNCTION            1
             20 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        dp_0,dp_1 = 0,1
        for i in range(N):
            dp_0,dp_1 = dp_1,dp_1+dp_0
        return dp_0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc4aecb52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc4aecb52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fc4aecb5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fc4aecb5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               2 (dp_0)
              6 STORE_FAST               3 (dp_1)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_FAST                1 (N)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                18 (to 36)
             18 STORE_FAST               4 (i)

  5          20 LOAD_FAST                3 (dp_1)
             22 LOAD_FAST                3 (dp_1)
             24 LOAD_FAST                2 (dp_0)
             26 BINARY_ADD
             28 ROT_TWO
             30 STORE_FAST               2 (dp_0)
             32 STORE_FAST               3 (dp_1)
             34 JUMP_ABSOLUTE           16

  6     >>   36 LOAD_FAST                2 (dp_0)
             38 RETURN_VALUE
None
"
fib,"class Solution:
    # @functools.lru_cache(maxsize=10 ** 6)
    def fib(self, N: int) -> int:  
        if N < 2:
            return N

        return self.fib(N - 1) + self.fib(N - 2)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffccd4052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffccd4052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7ffccd405240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7ffccd405240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              0 (fib)
             16 LOAD_FAST                1 (N)
             18 LOAD_CONST               2 (1)
             20 BINARY_SUBTRACT
             22 CALL_METHOD              1
             24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              0 (fib)
             28 LOAD_FAST                1 (N)
             30 LOAD_CONST               1 (2)
             32 BINARY_SUBTRACT
             34 CALL_METHOD              1
             36 BINARY_ADD
             38 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		def dfs(n):
			if n not in memo: memo[n] = dfs(n-1)+dfs(n-2)            
			return memo[n]
			
		memo = {0:0, 1:1}
		return dfs(N)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe04c995450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe04c995450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fe04c9953a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fe04c9953a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (dfs)
              2 LOAD_CLOSURE             1 (memo)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object dfs at 0x7fe04c9952f0, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.fib.<locals>.dfs')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (dfs)

  7          14 LOAD_CONST               3 (0)
             16 LOAD_CONST               4 (1)
             18 LOAD_CONST               5 ((0, 1))
             20 BUILD_CONST_KEY_MAP      2
             22 STORE_DEREF              1 (memo)

  8          24 LOAD_DEREF               0 (dfs)
             26 LOAD_FAST                1 (N)
             28 CALL_FUNCTION            1
             30 RETURN_VALUE

Disassembly of <code object dfs at 0x7fe04c9952f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (n)
              2 LOAD_DEREF               1 (memo)
              4 COMPARE_OP               7 (not in)
              6 POP_JUMP_IF_FALSE       36
              8 LOAD_DEREF               0 (dfs)
             10 LOAD_FAST                0 (n)
             12 LOAD_CONST               1 (1)
             14 BINARY_SUBTRACT
             16 CALL_FUNCTION            1
             18 LOAD_DEREF               0 (dfs)
             20 LOAD_FAST                0 (n)
             22 LOAD_CONST               2 (2)
             24 BINARY_SUBTRACT
             26 CALL_FUNCTION            1
             28 BINARY_ADD
             30 LOAD_DEREF               1 (memo)
             32 LOAD_FAST                0 (n)
             34 STORE_SUBSCR

  5     >>   36 LOAD_DEREF               1 (memo)
             38 LOAD_FAST                0 (n)
             40 BINARY_SUBSCR
             42 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:        
		dp = [0, 1]+[0]*(N-1)
		for i in range(2, N+1):
			dp[i] = dp[i-1]+dp[i-2]
		return dp[N]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa9524552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa9524552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fa952455240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fa952455240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 LOAD_CONST               1 (0)
              8 BUILD_LIST               1
             10 LOAD_FAST                1 (N)
             12 LOAD_CONST               2 (1)
             14 BINARY_SUBTRACT
             16 BINARY_MULTIPLY
             18 BINARY_ADD
             20 STORE_FAST               2 (dp)

  4          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               3 (2)
             26 LOAD_FAST                1 (N)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                32 (to 70)
             38 STORE_FAST               3 (i)

  5          40 LOAD_FAST                2 (dp)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               2 (1)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (dp)
             52 LOAD_FAST                3 (i)
             54 LOAD_CONST               3 (2)
             56 BINARY_SUBTRACT
             58 BINARY_SUBSCR
             60 BINARY_ADD
             62 LOAD_FAST                2 (dp)
             64 LOAD_FAST                3 (i)
             66 STORE_SUBSCR
             68 JUMP_ABSOLUTE           36

  6     >>   70 LOAD_FAST                2 (dp)
             72 LOAD_FAST                1 (N)
             74 BINARY_SUBSCR
             76 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		if N < 2: return N
		a, b = 0, 1
		for _ in range(N-1):
			c = a+b
			a, b = b, c
		return c
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbe509252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbe509252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fbe50925240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fbe50925240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               2 ((0, 1))
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               2 (a)
             18 STORE_FAST               3 (b)

  5          20 LOAD_GLOBAL              0 (range)
             22 LOAD_FAST                1 (N)
             24 LOAD_CONST               3 (1)
             26 BINARY_SUBTRACT
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                22 (to 56)
             34 STORE_FAST               4 (_)

  6          36 LOAD_FAST                2 (a)
             38 LOAD_FAST                3 (b)
             40 BINARY_ADD
             42 STORE_FAST               5 (c)

  7          44 LOAD_FAST                3 (b)
             46 LOAD_FAST                5 (c)
             48 ROT_TWO
             50 STORE_FAST               2 (a)
             52 STORE_FAST               3 (b)
             54 JUMP_ABSOLUTE           32

  8     >>   56 LOAD_FAST                5 (c)
             58 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, n: int) -> int:
		# initializing table with hard-coded base values
        table = [0,1,1]

        if n > 2:  # series until 2 is already in table, we needn't calculate again
			# we iterate until the nth term is reached (added an offset of 2 since first two are already in table)
            for i in range(n-2): 
                table.append(table[-1] + table[-2])
        
		# return required nth term,
		# table[-1] would have worked except for n < 2, since our table is initialized until 2nd term.
        return table[n] 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa6258652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa6258652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fa625865240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fa625865240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 LOAD_CONST               2 (1)
              6 BUILD_LIST               3
              8 STORE_FAST               2 (table)

  6          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               3 (2)
             14 COMPARE_OP               4 (>)
             16 POP_JUMP_IF_FALSE       58

  8          18 LOAD_GLOBAL              0 (range)
             20 LOAD_FAST                1 (n)
             22 LOAD_CONST               3 (2)
             24 BINARY_SUBTRACT
             26 CALL_FUNCTION            1
             28 GET_ITER
        >>   30 FOR_ITER                26 (to 58)
             32 STORE_FAST               3 (i)

  9          34 LOAD_FAST                2 (table)
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                2 (table)
             40 LOAD_CONST               4 (-1)
             42 BINARY_SUBSCR
             44 LOAD_FAST                2 (table)
             46 LOAD_CONST               5 (-2)
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           30

 13     >>   58 LOAD_FAST                2 (table)
             60 LOAD_FAST                1 (n)
             62 BINARY_SUBSCR
             64 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        curr = 1
        prev = 0

        if N == 0:
            return prev
        elif N==1:
            return curr
        else:
            for i in range(N-1):
                prev, curr = curr, curr+prev

        return curr
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f59e4a652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f59e4a652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f59e4a65240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f59e4a65240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (curr)

  4           4 LOAD_CONST               2 (0)
              6 STORE_FAST               3 (prev)

  6           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  7          16 LOAD_FAST                3 (prev)
             18 RETURN_VALUE

  8     >>   20 LOAD_FAST                1 (N)
             22 LOAD_CONST               1 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

  9          28 LOAD_FAST                2 (curr)
             30 RETURN_VALUE

 11     >>   32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (N)
             36 LOAD_CONST               1 (1)
             38 BINARY_SUBTRACT
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                18 (to 64)
             46 STORE_FAST               4 (i)

 12          48 LOAD_FAST                2 (curr)
             50 LOAD_FAST                2 (curr)
             52 LOAD_FAST                3 (prev)
             54 BINARY_ADD
             56 ROT_TWO
             58 STORE_FAST               3 (prev)
             60 STORE_FAST               2 (curr)
             62 JUMP_ABSOLUTE           44

 14     >>   64 LOAD_FAST                2 (curr)
             66 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N < 2:
            return N
        
        p1 = 1
        p2 = 1
        
        for i in range(2, N):
            temp = p1
            p1 += p2
            p2 = temp
            
        return p1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff9c7b452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff9c7b452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7ff9c7b45240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7ff9c7b45240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_FAST                1 (N)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (1)
             14 STORE_FAST               2 (p1)

  7          16 LOAD_CONST               2 (1)
             18 STORE_FAST               3 (p2)

  9          20 LOAD_GLOBAL              0 (range)
             22 LOAD_CONST               1 (2)
             24 LOAD_FAST                1 (N)
             26 CALL_FUNCTION            2
             28 GET_ITER
        >>   30 FOR_ITER                20 (to 52)
             32 STORE_FAST               4 (i)

 10          34 LOAD_FAST                2 (p1)
             36 STORE_FAST               5 (temp)

 11          38 LOAD_FAST                2 (p1)
             40 LOAD_FAST                3 (p2)
             42 INPLACE_ADD
             44 STORE_FAST               2 (p1)

 12          46 LOAD_FAST                5 (temp)
             48 STORE_FAST               3 (p2)
             50 JUMP_ABSOLUTE           30

 14     >>   52 LOAD_FAST                2 (p1)
             54 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:      
        def dp(n):
            if memo[n] != None:
                return memo[n]
            memo[n] = 0 if n==0 else 1 if n == 1 else dp(n-1) + dp(n-2)
            return memo[n]  
        
        memo = [None] * (N+1)
        return dp(N)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff6d6b953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff6d6b953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7ff6d6b952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7ff6d6b952f0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (dp)
              2 LOAD_CLOSURE             1 (memo)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object dp at 0x7ff6d6b95240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.fib.<locals>.dp')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (dp)

  9          14 LOAD_CONST               0 (None)
             16 BUILD_LIST               1
             18 LOAD_FAST                1 (N)
             20 LOAD_CONST               3 (1)
             22 BINARY_ADD
             24 BINARY_MULTIPLY
             26 STORE_DEREF              1 (memo)

 10          28 LOAD_DEREF               0 (dp)
             30 LOAD_FAST                1 (N)
             32 CALL_FUNCTION            1
             34 RETURN_VALUE

Disassembly of <code object dp at 0x7ff6d6b95240, file ""<ast>"", line 3>:
  4           0 LOAD_DEREF               1 (memo)
              2 LOAD_FAST                0 (n)
              4 BINARY_SUBSCR
              6 LOAD_CONST               0 (None)
              8 COMPARE_OP               3 (!=)
             10 POP_JUMP_IF_FALSE       20

  5          12 LOAD_DEREF               1 (memo)
             14 LOAD_FAST                0 (n)
             16 BINARY_SUBSCR
             18 RETURN_VALUE

  6     >>   20 LOAD_FAST                0 (n)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               1 (0)
             30 JUMP_FORWARD            34 (to 66)
        >>   32 LOAD_FAST                0 (n)
             34 LOAD_CONST               2 (1)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       44
             40 LOAD_CONST               2 (1)
             42 JUMP_FORWARD            22 (to 66)
        >>   44 LOAD_DEREF               0 (dp)
             46 LOAD_FAST                0 (n)
             48 LOAD_CONST               2 (1)
             50 BINARY_SUBTRACT
             52 CALL_FUNCTION            1
             54 LOAD_DEREF               0 (dp)
             56 LOAD_FAST                0 (n)
             58 LOAD_CONST               3 (2)
             60 BINARY_SUBTRACT
             62 CALL_FUNCTION            1
             64 BINARY_ADD
        >>   66 LOAD_DEREF               1 (memo)
             68 LOAD_FAST                0 (n)
             70 STORE_SUBSCR

  7          72 LOAD_DEREF               1 (memo)
             74 LOAD_FAST                0 (n)
             76 BINARY_SUBSCR
             78 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        a,b = 0 ,1
        n = 2
#special case is when N is 0 or 1:
        if N ==0:
            return 0
        if N ==1:
            return 1
#run while loop to do the math
        while n<=N:
            rst = a + b
            a,b = b , a+b
            n +=1
        return(rst)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f18dc5352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f18dc5352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f18dc535240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f18dc535240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               2 (a)
              6 STORE_FAST               3 (b)

  4           8 LOAD_CONST               2 (2)
             10 STORE_FAST               4 (n)

  6          12 LOAD_FAST                1 (N)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  7          20 LOAD_CONST               3 (0)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               4 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  9          32 LOAD_CONST               4 (1)
             34 RETURN_VALUE

 11     >>   36 LOAD_FAST                4 (n)
             38 LOAD_FAST                1 (N)
             40 COMPARE_OP               1 (<=)
             42 POP_JUMP_IF_FALSE       76

 12          44 LOAD_FAST                2 (a)
             46 LOAD_FAST                3 (b)
             48 BINARY_ADD
             50 STORE_FAST               5 (rst)

 13          52 LOAD_FAST                3 (b)
             54 LOAD_FAST                2 (a)
             56 LOAD_FAST                3 (b)
             58 BINARY_ADD
             60 ROT_TWO
             62 STORE_FAST               2 (a)
             64 STORE_FAST               3 (b)

 14          66 LOAD_FAST                4 (n)
             68 LOAD_CONST               4 (1)
             70 INPLACE_ADD
             72 STORE_FAST               4 (n)
             74 JUMP_ABSOLUTE           36

 15     >>   76 LOAD_FAST                5 (rst)
             78 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        res = [0,1]
        if N == 0:
            return res[0]
        elif N==1:
            return res[1]
        for i in range(2,N+1):
            res.append(res[-1] + res[-2])            
        return res[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa60f6b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa60f6b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fa60f6b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fa60f6b5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (res)

  4           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       24

  5          16 LOAD_FAST                2 (res)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

  6     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       40

  7          32 LOAD_FAST                2 (res)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBSCR
             38 RETURN_VALUE

  8     >>   40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               3 (2)
             44 LOAD_FAST                1 (N)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                26 (to 82)
             56 STORE_FAST               3 (i)

  9          58 LOAD_FAST                2 (res)
             60 LOAD_METHOD              1 (append)
             62 LOAD_FAST                2 (res)
             64 LOAD_CONST               4 (-1)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (res)
             70 LOAD_CONST               5 (-2)
             72 BINARY_SUBSCR
             74 BINARY_ADD
             76 CALL_METHOD              1
             78 POP_TOP
             80 JUMP_ABSOLUTE           54

 10     >>   82 LOAD_FAST                2 (res)
             84 LOAD_CONST               4 (-1)
             86 BINARY_SUBSCR
             88 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N == 0:
            return 0
        elif N == 1:
            return 1
        else:
            fibs = [0, 1]
            for number in range(N-1):
                fibs.append(fibs[-1] + fibs[-2])
            return fibs[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe5202b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe5202b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7fe5202b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7fe5202b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               2 (1)
             22 RETURN_VALUE

  8     >>   24 LOAD_CONST               1 (0)
             26 LOAD_CONST               2 (1)
             28 BUILD_LIST               2
             30 STORE_FAST               2 (fibs)

  9          32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (N)
             36 LOAD_CONST               2 (1)
             38 BINARY_SUBTRACT
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                26 (to 72)
             46 STORE_FAST               3 (number)

 10          48 LOAD_FAST                2 (fibs)
             50 LOAD_METHOD              1 (append)
             52 LOAD_FAST                2 (fibs)
             54 LOAD_CONST               3 (-1)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (fibs)
             60 LOAD_CONST               4 (-2)
             62 BINARY_SUBSCR
             64 BINARY_ADD
             66 CALL_METHOD              1
             68 POP_TOP
             70 JUMP_ABSOLUTE           44

 11     >>   72 LOAD_FAST                2 (fibs)
             74 LOAD_CONST               3 (-1)
             76 BINARY_SUBSCR
             78 RETURN_VALUE
             80 LOAD_CONST               0 (None)
             82 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        if N == 0:
            return 0
        if N == 1:
            return 1

        if N > 1:
            return self.fib(N - 1) + self.fib(N - 2)

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4772e252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4772e252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f4772e25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f4772e25240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               2 (1)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       60

  9          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              0 (fib)
             36 LOAD_FAST                1 (N)
             38 LOAD_CONST               2 (1)
             40 BINARY_SUBTRACT
             42 CALL_METHOD              1
             44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              0 (fib)
             48 LOAD_FAST                1 (N)
             50 LOAD_CONST               3 (2)
             52 BINARY_SUBTRACT
             54 CALL_METHOD              1
             56 BINARY_ADD
             58 RETURN_VALUE
        >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        f = [0, 1]
        if N == 0:
            return f[0]
        elif N == 1:
            return f[1]
        else:
            for i in range(2, N + 1):
                f.append(f[i-2] + f[i-1])

        return f[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f590e115240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f590e115240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f590e1152f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f590e1152f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (f)

  4           8 LOAD_FAST                1 (N)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       24

  5          16 LOAD_FAST                2 (f)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

  6     >>   24 LOAD_FAST                1 (N)
             26 LOAD_CONST               2 (1)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       40

  7          32 LOAD_FAST                2 (f)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBSCR
             38 RETURN_VALUE

  9     >>   40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               3 (2)
             44 LOAD_FAST                1 (N)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                34 (to 90)
             56 STORE_FAST               3 (i)

 10          58 LOAD_FAST                2 (f)
             60 LOAD_METHOD              1 (append)
             62 LOAD_FAST                2 (f)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               3 (2)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (f)
             74 LOAD_FAST                3 (i)
             76 LOAD_CONST               2 (1)
             78 BINARY_SUBTRACT
             80 BINARY_SUBSCR
             82 BINARY_ADD
             84 CALL_METHOD              1
             86 POP_TOP
             88 JUMP_ABSOLUTE           54

 12     >>   90 LOAD_FAST                2 (f)
             92 LOAD_CONST               4 (-1)
             94 BINARY_SUBSCR
             96 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        f = (0, 1)
        if N == 0:
            return f[0]
        elif N == 1:
            return f[1]
        else:
            for _ in range(2, N + 1):
                f += (f[-2] + f[-1],)

        return f[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f93f75b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f93f75b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f93f75b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f93f75b5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((0, 1))
              2 STORE_FAST               2 (f)

  4           4 LOAD_FAST                1 (N)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       20

  5          12 LOAD_FAST                2 (f)
             14 LOAD_CONST               2 (0)
             16 BINARY_SUBSCR
             18 RETURN_VALUE

  6     >>   20 LOAD_FAST                1 (N)
             22 LOAD_CONST               3 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       36

  7          28 LOAD_FAST                2 (f)
             30 LOAD_CONST               3 (1)
             32 BINARY_SUBSCR
             34 RETURN_VALUE

  9     >>   36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               4 (2)
             40 LOAD_FAST                1 (N)
             42 LOAD_CONST               3 (1)
             44 BINARY_ADD
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                26 (to 78)
             52 STORE_FAST               3 (_)

 10          54 LOAD_FAST                2 (f)
             56 LOAD_FAST                2 (f)
             58 LOAD_CONST               5 (-2)
             60 BINARY_SUBSCR
             62 LOAD_FAST                2 (f)
             64 LOAD_CONST               6 (-1)
             66 BINARY_SUBSCR
             68 BINARY_ADD
             70 BUILD_TUPLE              1
             72 INPLACE_ADD
             74 STORE_FAST               2 (f)
             76 JUMP_ABSOLUTE           50

 12     >>   78 LOAD_FAST                2 (f)
             80 LOAD_CONST               6 (-1)
             82 BINARY_SUBSCR
             84 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, n: int) -> int:
        
        def get_mat_mult(mat, other_mat):
            res = [[0 for _ in range(len(mat[0]))] for _ in range(len(mat))]
            for i in range(len(mat)):
                for j in range(len(mat[i])):
                    for k in range(len(other_mat[i])):
                        res[i][j] += mat[i][k] * other_mat[k][j]
            return res
        
        if n == 0 or n == 1:
            return n
        
        final_mat = [[1,0],[0,1]]
        start_mat = [[1,1], [1,0]]
        n -= 1
        while(n):
            if (n & 1):
                final_mat = get_mat_mult(start_mat, final_mat)
            start_mat = get_mat_mult(start_mat, start_mat) 
            n >>= 1
        return final_mat[0][0]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f38a27853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f38a27853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f38a27855b0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f38a27855b0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object get_mat_mult at 0x7f38a2785500, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.fib.<locals>.get_mat_mult')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (get_mat_mult)

 12           8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_TRUE        24
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               4 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

 13     >>   24 LOAD_FAST                1 (n)
             26 RETURN_VALUE

 15     >>   28 LOAD_CONST               4 (1)
             30 LOAD_CONST               3 (0)
             32 BUILD_LIST               2
             34 LOAD_CONST               3 (0)
             36 LOAD_CONST               4 (1)
             38 BUILD_LIST               2
             40 BUILD_LIST               2
             42 STORE_FAST               3 (final_mat)

 16          44 LOAD_CONST               4 (1)
             46 LOAD_CONST               4 (1)
             48 BUILD_LIST               2
             50 LOAD_CONST               4 (1)
             52 LOAD_CONST               3 (0)
             54 BUILD_LIST               2
             56 BUILD_LIST               2
             58 STORE_FAST               4 (start_mat)

 17          60 LOAD_FAST                1 (n)
             62 LOAD_CONST               4 (1)
             64 INPLACE_SUBTRACT
             66 STORE_FAST               1 (n)

 18     >>   68 LOAD_FAST                1 (n)
             70 POP_JUMP_IF_FALSE      110

 19          72 LOAD_FAST                1 (n)
             74 LOAD_CONST               4 (1)
             76 BINARY_AND
             78 POP_JUMP_IF_FALSE       90

 20          80 LOAD_FAST                2 (get_mat_mult)
             82 LOAD_FAST                4 (start_mat)
             84 LOAD_FAST                3 (final_mat)
             86 CALL_FUNCTION            2
             88 STORE_FAST               3 (final_mat)

 21     >>   90 LOAD_FAST                2 (get_mat_mult)
             92 LOAD_FAST                4 (start_mat)
             94 LOAD_FAST                4 (start_mat)
             96 CALL_FUNCTION            2
             98 STORE_FAST               4 (start_mat)

 22         100 LOAD_FAST                1 (n)
            102 LOAD_CONST               4 (1)
            104 INPLACE_RSHIFT
            106 STORE_FAST               1 (n)
            108 JUMP_ABSOLUTE           68

 23     >>  110 LOAD_FAST                3 (final_mat)
            112 LOAD_CONST               3 (0)
            114 BINARY_SUBSCR
            116 LOAD_CONST               3 (0)
            118 BINARY_SUBSCR
            120 RETURN_VALUE

Disassembly of <code object get_mat_mult at 0x7f38a2785500, file ""<ast>"", line 4>:
  5           0 LOAD_CLOSURE             0 (mat)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object <listcomp> at 0x7f38a27852f0, file ""<ast>"", line 5>)
              6 LOAD_CONST               2 ('Solution.fib.<locals>.get_mat_mult.<locals>.<listcomp>')
              8 MAKE_FUNCTION            8 (closure)
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_GLOBAL              1 (len)
             14 LOAD_DEREF               0 (mat)
             16 CALL_FUNCTION            1
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (res)

  6          26 LOAD_GLOBAL              0 (range)
             28 LOAD_GLOBAL              1 (len)
             30 LOAD_DEREF               0 (mat)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            1
             36 GET_ITER
        >>   38 FOR_ITER                88 (to 128)
             40 STORE_FAST               3 (i)

  7          42 LOAD_GLOBAL              0 (range)
             44 LOAD_GLOBAL              1 (len)
             46 LOAD_DEREF               0 (mat)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                66 (to 126)
             60 STORE_FAST               4 (j)

  8          62 LOAD_GLOBAL              0 (range)
             64 LOAD_GLOBAL              1 (len)
             66 LOAD_FAST                1 (other_mat)
             68 LOAD_FAST                3 (i)
             70 BINARY_SUBSCR
             72 CALL_FUNCTION            1
             74 CALL_FUNCTION            1
             76 GET_ITER
        >>   78 FOR_ITER                44 (to 124)
             80 STORE_FAST               5 (k)

  9          82 LOAD_FAST                2 (res)
             84 LOAD_FAST                3 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (j)
             90 DUP_TOP_TWO
             92 BINARY_SUBSCR
             94 LOAD_DEREF               0 (mat)
             96 LOAD_FAST                3 (i)
             98 BINARY_SUBSCR
            100 LOAD_FAST                5 (k)
            102 BINARY_SUBSCR
            104 LOAD_FAST                1 (other_mat)
            106 LOAD_FAST                5 (k)
            108 BINARY_SUBSCR
            110 LOAD_FAST                4 (j)
            112 BINARY_SUBSCR
            114 BINARY_MULTIPLY
            116 INPLACE_ADD
            118 ROT_THREE
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           78
        >>  124 JUMP_ABSOLUTE           58
        >>  126 JUMP_ABSOLUTE           38

 10     >>  128 LOAD_FAST                2 (res)
            130 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f38a27852f0, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                30 (to 36)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f38a2785240, file ""<ast>"", line 5>)
             10 LOAD_CONST               1 ('Solution.fib.<locals>.get_mat_mult.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_GLOBAL              1 (len)
             18 LOAD_DEREF               0 (mat)
             20 LOAD_CONST               2 (0)
             22 BINARY_SUBSCR
             24 CALL_FUNCTION            1
             26 CALL_FUNCTION            1
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 LIST_APPEND              2
             34 JUMP_ABSOLUTE            4
        >>   36 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f38a2785240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        memo = [0, 1]
        for i in range(2, N+1):
            memo.append(memo[i-1]+memo[i-2])
        return memo[N]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f074e4052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f074e4052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f074e405240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f074e405240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (memo)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               3 (2)
             12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                34 (to 58)
             24 STORE_FAST               3 (i)

  5          26 LOAD_FAST                2 (memo)
             28 LOAD_METHOD              1 (append)
             30 LOAD_FAST                2 (memo)
             32 LOAD_FAST                3 (i)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 BINARY_SUBSCR
             40 LOAD_FAST                2 (memo)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (2)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           22

  6     >>   58 LOAD_FAST                2 (memo)
             60 LOAD_FAST                1 (N)
             62 BINARY_SUBSCR
             64 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        
        res = [0,1]
        c = 0
        
        if N == 0:
            return res[0]
        elif N==1:
            return res[1]
        
        for i in range(2,N+1):
            
            c = res[0] + res[1]
            
            res[0] = res[1]
            res[1] = c
            
        return res[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9a6a545240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9a6a545240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f9a6a5452f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f9a6a5452f0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (res)

  5           8 LOAD_CONST               1 (0)
             10 STORE_FAST               3 (c)

  7          12 LOAD_FAST                1 (N)
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28

  8          20 LOAD_FAST                2 (res)
             22 LOAD_CONST               1 (0)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  9     >>   28 LOAD_FAST                1 (N)
             30 LOAD_CONST               2 (1)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       44

 10          36 LOAD_FAST                2 (res)
             38 LOAD_CONST               2 (1)
             40 BINARY_SUBSCR
             42 RETURN_VALUE

 12     >>   44 LOAD_GLOBAL              0 (range)
             46 LOAD_CONST               3 (2)
             48 LOAD_FAST                1 (N)
             50 LOAD_CONST               2 (1)
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 GET_ITER
        >>   58 FOR_ITER                40 (to 100)
             60 STORE_FAST               4 (i)

 14          62 LOAD_FAST                2 (res)
             64 LOAD_CONST               1 (0)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (res)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBSCR
             74 BINARY_ADD
             76 STORE_FAST               3 (c)

 16          78 LOAD_FAST                2 (res)
             80 LOAD_CONST               2 (1)
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (res)
             86 LOAD_CONST               1 (0)
             88 STORE_SUBSCR

 17          90 LOAD_FAST                3 (c)
             92 LOAD_FAST                2 (res)
             94 LOAD_CONST               2 (1)
             96 STORE_SUBSCR
             98 JUMP_ABSOLUTE           58

 19     >>  100 LOAD_FAST                2 (res)
            102 LOAD_CONST               4 (-1)
            104 BINARY_SUBSCR
            106 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        ## RC ##
        if(N == 0): return 0
        dp = [0,1] + [0] * (N-1)
        for i in range(2,N+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f115e1352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f115e1352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f115e135240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f115e135240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (N)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               1 (0)
             14 LOAD_CONST               2 (1)
             16 BUILD_LIST               2
             18 LOAD_CONST               1 (0)
             20 BUILD_LIST               1
             22 LOAD_FAST                1 (N)
             24 LOAD_CONST               2 (1)
             26 BINARY_SUBTRACT
             28 BINARY_MULTIPLY
             30 BINARY_ADD
             32 STORE_FAST               2 (dp)

  6          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               3 (2)
             38 LOAD_FAST                1 (N)
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                32 (to 82)
             50 STORE_FAST               3 (i)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 LOAD_CONST               2 (1)
             58 BINARY_SUBTRACT
             60 BINARY_SUBSCR
             62 LOAD_FAST                2 (dp)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               3 (2)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 BINARY_ADD
             74 LOAD_FAST                2 (dp)
             76 LOAD_FAST                3 (i)
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           48

  8     >>   82 LOAD_FAST                2 (dp)
             84 LOAD_CONST               4 (-1)
             86 BINARY_SUBSCR
             88 RETURN_VALUE
None
"
fib,"class Solution:
    def fib(self, N: int) -> int:
        s = [0, 1]
        for i in range(2, N + 1):
            s.append(s[i - 1] + s[i - 2])
        return s[-1] if N > 0 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7cf86152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7cf86152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f7cf8615240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f7cf8615240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (s)

  4           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               3 (2)
             12 LOAD_FAST                1 (N)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                34 (to 58)
             24 STORE_FAST               3 (i)

  5          26 LOAD_FAST                2 (s)
             28 LOAD_METHOD              1 (append)
             30 LOAD_FAST                2 (s)
             32 LOAD_FAST                3 (i)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 BINARY_SUBSCR
             40 LOAD_FAST                2 (s)
             42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (2)
             46 BINARY_SUBTRACT
             48 BINARY_SUBSCR
             50 BINARY_ADD
             52 CALL_METHOD              1
             54 POP_TOP
             56 JUMP_ABSOLUTE           22

  6     >>   58 LOAD_FAST                1 (N)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               4 (>)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_FAST                2 (s)
             68 LOAD_CONST               4 (-1)
             70 BINARY_SUBSCR
             72 RETURN_VALUE
        >>   74 LOAD_CONST               1 (0)
             76 RETURN_VALUE
None
"
fib,"class Solution:
	def fib(self, N: int) -> int:
		dic = {}
		dic[0], dic[1] = 0, 1
		for i in range(2, N+1):
			dic[i] = dic[i-1] + dic[i-2]
		return dic[N]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f39af9252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f39af9252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('N', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object fib at 0x7f39af925240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.fib')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (fib)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object fib at 0x7f39af925240, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (dic)

  4           4 LOAD_CONST               1 ((0, 1))
              6 UNPACK_SEQUENCE          2
              8 LOAD_FAST                2 (dic)
             10 LOAD_CONST               2 (0)
             12 STORE_SUBSCR
             14 LOAD_FAST                2 (dic)
             16 LOAD_CONST               3 (1)
             18 STORE_SUBSCR

  5          20 LOAD_GLOBAL              0 (range)
             22 LOAD_CONST               4 (2)
             24 LOAD_FAST                1 (N)
             26 LOAD_CONST               3 (1)
             28 BINARY_ADD
             30 CALL_FUNCTION            2
             32 GET_ITER
        >>   34 FOR_ITER                32 (to 68)
             36 STORE_FAST               3 (i)

  6          38 LOAD_FAST                2 (dic)
             40 LOAD_FAST                3 (i)
             42 LOAD_CONST               3 (1)
             44 BINARY_SUBTRACT
             46 BINARY_SUBSCR
             48 LOAD_FAST                2 (dic)
             50 LOAD_FAST                3 (i)
             52 LOAD_CONST               4 (2)
             54 BINARY_SUBTRACT
             56 BINARY_SUBSCR
             58 BINARY_ADD
             60 LOAD_FAST                2 (dic)
             62 LOAD_FAST                3 (i)
             64 STORE_SUBSCR
             66 JUMP_ABSOLUTE           34

  7     >>   68 LOAD_FAST                2 (dic)
             70 LOAD_FAST                1 (N)
             72 BINARY_SUBSCR
             74 RETURN_VALUE
None
"
hasCycle,"# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def hasCycle(self, head: ListNode)->bool:
        if head == None or head.next == None:
            return False
        p = head
        q = head.next
        while q and q.next:
            if p == q:
                break
            p = p.next
            q = q.next.next
        if p != q:
            return False
        return True
","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object ListNode at 0x7f9cfc9052f0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('ListNode')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('ListNode')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (ListNode)

  7          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f9cfc905500, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object ListNode at 0x7f9cfc9052f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('ListNode')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object __init__ at 0x7f9cfc905240, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('ListNode.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f9cfc905240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  5           6 LOAD_CONST               0 (None)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (next)
             12 LOAD_CONST               0 (None)
             14 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9cfc905500, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f9cfc905450, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f9cfc905450, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               2 (==)
             16 POP_JUMP_IF_FALSE       22

 10     >>   18 LOAD_CONST               1 (False)
             20 RETURN_VALUE

 11     >>   22 LOAD_FAST                1 (head)
             24 STORE_FAST               2 (p)

 12          26 LOAD_FAST                1 (head)
             28 LOAD_ATTR                0 (next)
             30 STORE_FAST               3 (q)

 13     >>   32 LOAD_FAST                3 (q)
             34 POP_JUMP_IF_FALSE       68
             36 LOAD_FAST                3 (q)
             38 LOAD_ATTR                0 (next)
             40 POP_JUMP_IF_FALSE       68

 14          42 LOAD_FAST                2 (p)
             44 LOAD_FAST                3 (q)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       52

 15          50 JUMP_ABSOLUTE           68

 16     >>   52 LOAD_FAST                2 (p)
             54 LOAD_ATTR                0 (next)
             56 STORE_FAST               2 (p)

 17          58 LOAD_FAST                3 (q)
             60 LOAD_ATTR                0 (next)
             62 LOAD_ATTR                0 (next)
             64 STORE_FAST               3 (q)
             66 JUMP_ABSOLUTE           32

 18     >>   68 LOAD_FAST                2 (p)
             70 LOAD_FAST                3 (q)
             72 COMPARE_OP               3 (!=)
             74 POP_JUMP_IF_FALSE       80

 19          76 LOAD_CONST               1 (False)
             78 RETURN_VALUE

 20     >>   80 LOAD_CONST               2 (True)
             82 RETURN_VALUE
None
"
hasCycle,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

import collections

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        """"""
        O(n) time O(1) space
        slow = head
        fast = head
        while(fast != None and fast.next != None):
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                return True
            
        return False
        """"""
        
        # O(n) time and O(n) space
        dictionary = collections.defaultdict(ListNode)
        while(head):
            if head in dictionary:
                return True
            dictionary[head] = True
            head = head.next
        return False
        
","  7           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)

  9           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f72dd6f52f0, file ""<ast>"", line 9>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f72dd6f52f0, file ""<ast>"", line 9>:
  9           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 10           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f72dd6f5240, file ""<ast>"", line 10>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f72dd6f5240, file ""<ast>"", line 10>:
 26           0 LOAD_GLOBAL              0 (collections)
              2 LOAD_METHOD              1 (defaultdict)
              4 LOAD_GLOBAL              2 (ListNode)
              6 CALL_METHOD              1
              8 STORE_FAST               2 (dictionary)

 27     >>   10 LOAD_FAST                1 (head)
             12 POP_JUMP_IF_FALSE       42

 28          14 LOAD_FAST                1 (head)
             16 LOAD_FAST                2 (dictionary)
             18 COMPARE_OP               6 (in)
             20 POP_JUMP_IF_FALSE       26

 29          22 LOAD_CONST               1 (True)
             24 RETURN_VALUE

 30     >>   26 LOAD_CONST               1 (True)
             28 LOAD_FAST                2 (dictionary)
             30 LOAD_FAST                1 (head)
             32 STORE_SUBSCR

 31          34 LOAD_FAST                1 (head)
             36 LOAD_ATTR                3 (next)
             38 STORE_FAST               1 (head)
             40 JUMP_ABSOLUTE           10

 32     >>   42 LOAD_CONST               2 (False)
             44 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        node_set = set()
        while head and head.next:
            slow, fast = head.next, head.next.next
            if (head, slow, fast) in node_set:
                return True
            else:
                node_set.add((head, slow, fast))
                head = slow
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc0e6a252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc0e6a252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7fc0e6a25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7fc0e6a25240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 STORE_FAST               2 (node_set)

  4     >>    6 LOAD_FAST                1 (head)
              8 POP_JUMP_IF_FALSE       72
             10 LOAD_FAST                1 (head)
             12 LOAD_ATTR                1 (next)
             14 POP_JUMP_IF_FALSE       72

  5          16 LOAD_FAST                1 (head)
             18 LOAD_ATTR                1 (next)
             20 LOAD_FAST                1 (head)
             22 LOAD_ATTR                1 (next)
             24 LOAD_ATTR                1 (next)
             26 ROT_TWO
             28 STORE_FAST               3 (slow)
             30 STORE_FAST               4 (fast)

  6          32 LOAD_FAST                1 (head)
             34 LOAD_FAST                3 (slow)
             36 LOAD_FAST                4 (fast)
             38 BUILD_TUPLE              3
             40 LOAD_FAST                2 (node_set)
             42 COMPARE_OP               6 (in)
             44 POP_JUMP_IF_FALSE       50

  7          46 LOAD_CONST               1 (True)
             48 RETURN_VALUE

  9     >>   50 LOAD_FAST                2 (node_set)
             52 LOAD_METHOD              2 (add)
             54 LOAD_FAST                1 (head)
             56 LOAD_FAST                3 (slow)
             58 LOAD_FAST                4 (fast)
             60 BUILD_TUPLE              3
             62 CALL_METHOD              1
             64 POP_TOP

 10          66 LOAD_FAST                3 (slow)
             68 STORE_FAST               1 (head)
             70 JUMP_ABSOLUTE            6

 11     >>   72 LOAD_CONST               2 (False)
             74 RETURN_VALUE
None
"
hasCycle,"class Solution:
	def hasCycle(self, head:ListNode)->bool:
		if not head:
			return False 
		while head.next:
			if head.val is None:
				return True 
			head.val = None 
			head = head.next 

		return False 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f42a39252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f42a39252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f42a3925240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f42a3925240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (False)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 POP_JUMP_IF_FALSE       42

  6          14 LOAD_FAST                1 (head)
             16 LOAD_ATTR                1 (val)
             18 LOAD_CONST               0 (None)
             20 COMPARE_OP               8 (is)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               2 (True)
             26 RETURN_VALUE

  8     >>   28 LOAD_CONST               0 (None)
             30 LOAD_FAST                1 (head)
             32 STORE_ATTR               1 (val)

  9          34 LOAD_FAST                1 (head)
             36 LOAD_ATTR                0 (next)
             38 STORE_FAST               1 (head)
             40 JUMP_ABSOLUTE            8

 11     >>   42 LOAD_CONST               1 (False)
             44 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        while head:
            if head.val == 'LeetCode':
                return True
            head.val = 'LeetCode'
            head = head.next
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f847f5452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f847f5452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f847f545240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f847f545240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_FALSE       32

  4           4 LOAD_FAST                1 (head)
              6 LOAD_ATTR                0 (val)
              8 LOAD_CONST               1 ('LeetCode')
             10 COMPARE_OP               2 (==)
             12 POP_JUMP_IF_FALSE       18

  5          14 LOAD_CONST               2 (True)
             16 RETURN_VALUE

  6     >>   18 LOAD_CONST               1 ('LeetCode')
             20 LOAD_FAST                1 (head)
             22 STORE_ATTR               0 (val)

  7          24 LOAD_FAST                1 (head)
             26 LOAD_ATTR                1 (next)
             28 STORE_FAST               1 (head)
             30 JUMP_ABSOLUTE            0

  8     >>   32 LOAD_CONST               3 (False)
             34 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head:ListNode)->bool:
        fast = head
        slow = head
        
        while(fast and fast.next):
            if fast.next == slow: return True 
            fast = fast.next.next                
            slow = slow.next
        
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f83739452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f83739452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f8373945240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f8373945240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (fast)

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (slow)

  6     >>    8 LOAD_FAST                2 (fast)
             10 POP_JUMP_IF_FALSE       48
             12 LOAD_FAST                2 (fast)
             14 LOAD_ATTR                0 (next)
             16 POP_JUMP_IF_FALSE       48

  7          18 LOAD_FAST                2 (fast)
             20 LOAD_ATTR                0 (next)
             22 LOAD_FAST                3 (slow)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               1 (True)
             30 RETURN_VALUE

  8     >>   32 LOAD_FAST                2 (fast)
             34 LOAD_ATTR                0 (next)
             36 LOAD_ATTR                0 (next)
             38 STORE_FAST               2 (fast)

  9          40 LOAD_FAST                3 (slow)
             42 LOAD_ATTR                0 (next)
             44 STORE_FAST               3 (slow)
             46 JUMP_ABSOLUTE            8

 11     >>   48 LOAD_CONST               2 (False)
             50 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        ## RC ##
        ## APPROACH : 2 POINTER ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(1) ##
        
        slow = fast = head
        while(fast and fast.next):
            slow = slow.next
            fast = fast.next.next
            if(slow == fast):
                return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0a184052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0a184052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f0a18405240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f0a18405240, file ""<ast>"", line 2>:
  9           0 LOAD_FAST                1 (head)
              2 DUP_TOP
              4 STORE_FAST               2 (slow)
              6 STORE_FAST               3 (fast)

 10     >>    8 LOAD_FAST                3 (fast)
             10 POP_JUMP_IF_FALSE       46
             12 LOAD_FAST                3 (fast)
             14 LOAD_ATTR                0 (next)
             16 POP_JUMP_IF_FALSE       46

 11          18 LOAD_FAST                2 (slow)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               2 (slow)

 12          24 LOAD_FAST                3 (fast)
             26 LOAD_ATTR                0 (next)
             28 LOAD_ATTR                0 (next)
             30 STORE_FAST               3 (fast)

 13          32 LOAD_FAST                2 (slow)
             34 LOAD_FAST                3 (fast)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE        8

 14          40 LOAD_CONST               1 (True)
             42 RETURN_VALUE
             44 JUMP_ABSOLUTE            8

 15     >>   46 LOAD_CONST               2 (False)
             48 RETURN_VALUE
None
"
hasCycle,"class Solution:
	def hasCycle(self, head: ListNode) -> bool:
		while head:
			if not head.val:
				return True
			head.val = None
			head = head.next
		return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fed2f9652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fed2f9652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7fed2f965240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7fed2f965240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_FALSE       28

  4           4 LOAD_FAST                1 (head)
              6 LOAD_ATTR                0 (val)
              8 POP_JUMP_IF_TRUE        14

  5          10 LOAD_CONST               1 (True)
             12 RETURN_VALUE

  6     >>   14 LOAD_CONST               0 (None)
             16 LOAD_FAST                1 (head)
             18 STORE_ATTR               0 (val)

  7          20 LOAD_FAST                1 (head)
             22 LOAD_ATTR                1 (next)
             24 STORE_FAST               1 (head)
             26 JUMP_ABSOLUTE            0

  8     >>   28 LOAD_CONST               2 (False)
             30 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, H: ListNode) -> bool:
        S = set([id(H)])
        while H != None:
            if id(H.next) in S: return True
            H, _ = H.next, S.add(id(H.next))
        return False","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa4ba4b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa4ba4b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('H', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7fa4ba4b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7fa4ba4b5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (set)
              2 LOAD_GLOBAL              1 (id)
              4 LOAD_FAST                1 (H)
              6 CALL_FUNCTION            1
              8 BUILD_LIST               1
             10 CALL_FUNCTION            1
             12 STORE_FAST               2 (S)

  4     >>   14 LOAD_FAST                1 (H)
             16 LOAD_CONST               0 (None)
             18 COMPARE_OP               3 (!=)
             20 POP_JUMP_IF_FALSE       66

  5          22 LOAD_GLOBAL              1 (id)
             24 LOAD_FAST                1 (H)
             26 LOAD_ATTR                2 (next)
             28 CALL_FUNCTION            1
             30 LOAD_FAST                2 (S)
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_FALSE       40
             36 LOAD_CONST               1 (True)
             38 RETURN_VALUE

  6     >>   40 LOAD_FAST                1 (H)
             42 LOAD_ATTR                2 (next)
             44 LOAD_FAST                2 (S)
             46 LOAD_METHOD              3 (add)
             48 LOAD_GLOBAL              1 (id)
             50 LOAD_FAST                1 (H)
             52 LOAD_ATTR                2 (next)
             54 CALL_FUNCTION            1
             56 CALL_METHOD              1
             58 ROT_TWO
             60 STORE_FAST               1 (H)
             62 STORE_FAST               3 (_)
             64 JUMP_ABSOLUTE           14

  7     >>   66 LOAD_CONST               2 (False)
             68 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        slow=head
        fast=head
        
        while fast!=None and fast.next!=None:
            
            slow=slow.next
            fast=fast.next.next
            
            if(slow==fast):
                return True

        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f013d1b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f013d1b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f013d1b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f013d1b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (slow)

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (fast)

  6     >>    8 LOAD_FAST                3 (fast)
             10 LOAD_CONST               0 (None)
             12 COMPARE_OP               3 (!=)
             14 POP_JUMP_IF_FALSE       54
             16 LOAD_FAST                3 (fast)
             18 LOAD_ATTR                0 (next)
             20 LOAD_CONST               0 (None)
             22 COMPARE_OP               3 (!=)
             24 POP_JUMP_IF_FALSE       54

  8          26 LOAD_FAST                2 (slow)
             28 LOAD_ATTR                0 (next)
             30 STORE_FAST               2 (slow)

  9          32 LOAD_FAST                3 (fast)
             34 LOAD_ATTR                0 (next)
             36 LOAD_ATTR                0 (next)
             38 STORE_FAST               3 (fast)

 11          40 LOAD_FAST                2 (slow)
             42 LOAD_FAST                3 (fast)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE        8

 12          48 LOAD_CONST               1 (True)
             50 RETURN_VALUE
             52 JUMP_ABSOLUTE            8

 14     >>   54 LOAD_CONST               2 (False)
             56 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head==None:
            return False
        if head.next==None:
            return False
        slow=head
        fast=head
        while fast!=None and fast.next!=None:
            fast=fast.next.next
            slow=slow.next
            if slow==fast:
                return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f231b0952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f231b0952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f231b095240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f231b095240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (head)
             14 LOAD_ATTR                0 (next)
             16 LOAD_CONST               0 (None)
             18 COMPARE_OP               2 (==)
             20 POP_JUMP_IF_FALSE       26

  6          22 LOAD_CONST               1 (False)
             24 RETURN_VALUE

  7     >>   26 LOAD_FAST                1 (head)
             28 STORE_FAST               2 (slow)

  8          30 LOAD_FAST                1 (head)
             32 STORE_FAST               3 (fast)

  9     >>   34 LOAD_FAST                3 (fast)
             36 LOAD_CONST               0 (None)
             38 COMPARE_OP               3 (!=)
             40 POP_JUMP_IF_FALSE       80
             42 LOAD_FAST                3 (fast)
             44 LOAD_ATTR                0 (next)
             46 LOAD_CONST               0 (None)
             48 COMPARE_OP               3 (!=)
             50 POP_JUMP_IF_FALSE       80

 10          52 LOAD_FAST                3 (fast)
             54 LOAD_ATTR                0 (next)
             56 LOAD_ATTR                0 (next)
             58 STORE_FAST               3 (fast)

 11          60 LOAD_FAST                2 (slow)
             62 LOAD_ATTR                0 (next)
             64 STORE_FAST               2 (slow)

 12          66 LOAD_FAST                2 (slow)
             68 LOAD_FAST                3 (fast)
             70 COMPARE_OP               2 (==)
             72 POP_JUMP_IF_FALSE       34

 13          74 LOAD_CONST               2 (True)
             76 RETURN_VALUE
             78 JUMP_ABSOLUTE           34

 14     >>   80 LOAD_CONST               1 (False)
             82 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        
        slow=head
        fast=head.next
        
        while slow!=fast:
            if not fast or not fast.next:
                return False
            slow=slow.next
            fast=fast.next.next
        return True 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5900c952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5900c952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f5900c95240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f5900c95240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_FALSE       10
              4 LOAD_FAST                1 (head)
              6 LOAD_ATTR                0 (next)
              8 POP_JUMP_IF_TRUE        14

  4     >>   10 LOAD_CONST               1 (False)
             12 RETURN_VALUE

  6     >>   14 LOAD_FAST                1 (head)
             16 STORE_FAST               2 (slow)

  7          18 LOAD_FAST                1 (head)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               3 (fast)

  9     >>   24 LOAD_FAST                2 (slow)
             26 LOAD_FAST                3 (fast)
             28 COMPARE_OP               3 (!=)
             30 POP_JUMP_IF_FALSE       62

 10          32 LOAD_FAST                3 (fast)
             34 POP_JUMP_IF_FALSE       42
             36 LOAD_FAST                3 (fast)
             38 LOAD_ATTR                0 (next)
             40 POP_JUMP_IF_TRUE        46

 11     >>   42 LOAD_CONST               1 (False)
             44 RETURN_VALUE

 12     >>   46 LOAD_FAST                2 (slow)
             48 LOAD_ATTR                0 (next)
             50 STORE_FAST               2 (slow)

 13          52 LOAD_FAST                3 (fast)
             54 LOAD_ATTR                0 (next)
             56 LOAD_ATTR                0 (next)
             58 STORE_FAST               3 (fast)
             60 JUMP_ABSOLUTE           24

 14     >>   62 LOAD_CONST               2 (True)
             64 RETURN_VALUE
None
"
hasCycle,"from nodes import ListNode
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        l={}
        while head:
            if(head in l):
                return True
            else:
                l[head]=True
            head=head.next
        return False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('ListNode',))
              4 IMPORT_NAME              0 (nodes)
              6 IMPORT_FROM              1 (ListNode)
              8 STORE_NAME               1 (ListNode)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f45c22b52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f45c22b52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f45c22b5240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f45c22b5240, file ""<ast>"", line 3>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               2 (l)

  5     >>    4 LOAD_FAST                1 (head)
              6 POP_JUMP_IF_FALSE       36

  6           8 LOAD_FAST                1 (head)
             10 LOAD_FAST                2 (l)
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_FALSE       20

  7          16 LOAD_CONST               1 (True)
             18 RETURN_VALUE

  9     >>   20 LOAD_CONST               1 (True)
             22 LOAD_FAST                2 (l)
             24 LOAD_FAST                1 (head)
             26 STORE_SUBSCR

 10          28 LOAD_FAST                1 (head)
             30 LOAD_ATTR                0 (next)
             32 STORE_FAST               1 (head)
             34 JUMP_ABSOLUTE            4

 11     >>   36 LOAD_CONST               2 (False)
             38 RETURN_VALUE
None
"
hasCycle,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

def hcHelper(head, rdict):
    
    if head in rdict:
        return True
    rdict[head] = True
    if head.next:
        return hcHelper(head.next, rdict)
    return False
        

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head is None:
            return False
        return hcHelper(head, {})","  7           0 LOAD_CONST               0 (<code object hcHelper at 0x7fab82875240, file ""<ast>"", line 7>)
              2 LOAD_CONST               1 ('hcHelper')
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (hcHelper)

 17           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7fab828753a0, file ""<ast>"", line 17>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object hcHelper at 0x7fab82875240, file ""<ast>"", line 7>:
  9           0 LOAD_FAST                0 (head)
              2 LOAD_FAST                1 (rdict)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       12

 10           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 11     >>   12 LOAD_CONST               1 (True)
             14 LOAD_FAST                1 (rdict)
             16 LOAD_FAST                0 (head)
             18 STORE_SUBSCR

 12          20 LOAD_FAST                0 (head)
             22 LOAD_ATTR                0 (next)
             24 POP_JUMP_IF_FALSE       38

 13          26 LOAD_GLOBAL              1 (hcHelper)
             28 LOAD_FAST                0 (head)
             30 LOAD_ATTR                0 (next)
             32 LOAD_FAST                1 (rdict)
             34 CALL_FUNCTION            2
             36 RETURN_VALUE

 14     >>   38 LOAD_CONST               2 (False)
             40 RETURN_VALUE

Disassembly of <code object Solution at 0x7fab828753a0, file ""<ast>"", line 17>:
 17           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 18           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7fab828752f0, file ""<ast>"", line 18>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7fab828752f0, file ""<ast>"", line 18>:
 19           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

 20           8 LOAD_CONST               1 (False)
             10 RETURN_VALUE

 21     >>   12 LOAD_GLOBAL              0 (hcHelper)
             14 LOAD_FAST                1 (head)
             16 BUILD_MAP                0
             18 CALL_FUNCTION            2
             20 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        seen=set()
        curr=head
        while curr:
            if curr in seen:
                return True
            seen.add(curr)
            curr=curr.next
        return False
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9a9c4b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9a9c4b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f9a9c4b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f9a9c4b5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 STORE_FAST               2 (seen)

  4           6 LOAD_FAST                1 (head)
              8 STORE_FAST               3 (curr)

  5     >>   10 LOAD_FAST                3 (curr)
             12 POP_JUMP_IF_FALSE       44

  6          14 LOAD_FAST                3 (curr)
             16 LOAD_FAST                2 (seen)
             18 COMPARE_OP               6 (in)
             20 POP_JUMP_IF_FALSE       26

  7          22 LOAD_CONST               1 (True)
             24 RETURN_VALUE

  8     >>   26 LOAD_FAST                2 (seen)
             28 LOAD_METHOD              1 (add)
             30 LOAD_FAST                3 (curr)
             32 CALL_METHOD              1
             34 POP_TOP

  9          36 LOAD_FAST                3 (curr)
             38 LOAD_ATTR                2 (next)
             40 STORE_FAST               3 (curr)
             42 JUMP_ABSOLUTE           10

 10     >>   44 LOAD_CONST               2 (False)
             46 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        while head != None:
            if(head.val == 'a'):
                return True
            else:
                head.val = 'a'
            head = head.next
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f76ea3a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f76ea3a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f76ea3a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f76ea3a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_FALSE       10
              4 LOAD_FAST                1 (head)
              6 LOAD_ATTR                0 (next)
              8 POP_JUMP_IF_TRUE        14

  4     >>   10 LOAD_CONST               1 (False)
             12 RETURN_VALUE

  5     >>   14 LOAD_FAST                1 (head)
             16 LOAD_CONST               0 (None)
             18 COMPARE_OP               3 (!=)
             20 POP_JUMP_IF_FALSE       50

  6          22 LOAD_FAST                1 (head)
             24 LOAD_ATTR                1 (val)
             26 LOAD_CONST               2 ('a')
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  7          32 LOAD_CONST               3 (True)
             34 RETURN_VALUE

  9     >>   36 LOAD_CONST               2 ('a')
             38 LOAD_FAST                1 (head)
             40 STORE_ATTR               1 (val)

 10          42 LOAD_FAST                1 (head)
             44 LOAD_ATTR                0 (next)
             46 STORE_FAST               1 (head)
             48 JUMP_ABSOLUTE           14

 11     >>   50 LOAD_CONST               1 (False)
             52 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        # corner case
        if not head: return False
        
        i = 0
        while i <= 10000:
            head = head.next
            if head == None:
                return False
            i += 1
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbecc0f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbecc0f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7fbecc0f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7fbecc0f5240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (False)
              6 RETURN_VALUE

  6     >>    8 LOAD_CONST               2 (0)
             10 STORE_FAST               2 (i)

  7     >>   12 LOAD_FAST                2 (i)
             14 LOAD_CONST               3 (10000)
             16 COMPARE_OP               1 (<=)
             18 POP_JUMP_IF_FALSE       48

  8          20 LOAD_FAST                1 (head)
             22 LOAD_ATTR                0 (next)
             24 STORE_FAST               1 (head)

  9          26 LOAD_FAST                1 (head)
             28 LOAD_CONST               0 (None)
             30 COMPARE_OP               2 (==)
             32 POP_JUMP_IF_FALSE       38

 10          34 LOAD_CONST               1 (False)
             36 RETURN_VALUE

 11     >>   38 LOAD_FAST                2 (i)
             40 LOAD_CONST               4 (1)
             42 INPLACE_ADD
             44 STORE_FAST               2 (i)
             46 JUMP_ABSOLUTE           12

 12     >>   48 LOAD_CONST               5 (True)
             50 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        dictionary = {}
        while head:
            if head in dictionary: 
                return True
            else: 
                dictionary[head]= True
            head = head.next
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3301f352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3301f352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f3301f35240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f3301f35240, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (dictionary)

  4     >>    4 LOAD_FAST                1 (head)
              6 POP_JUMP_IF_FALSE       36

  5           8 LOAD_FAST                1 (head)
             10 LOAD_FAST                2 (dictionary)
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_FALSE       20

  6          16 LOAD_CONST               1 (True)
             18 RETURN_VALUE

  8     >>   20 LOAD_CONST               1 (True)
             22 LOAD_FAST                2 (dictionary)
             24 LOAD_FAST                1 (head)
             26 STORE_SUBSCR

  9          28 LOAD_FAST                1 (head)
             30 LOAD_ATTR                0 (next)
             32 STORE_FAST               1 (head)
             34 JUMP_ABSOLUTE            4

 10     >>   36 LOAD_CONST               2 (False)
             38 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head:
            return False
        slow = head
        fast = head.next
        while slow != fast:
            if not fast or not fast.next:
                return False
            slow = slow.next
            fast = fast.next.next
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7f683752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7f683752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f7f68375240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f7f68375240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (False)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (head)
             10 STORE_FAST               2 (slow)

  6          12 LOAD_FAST                1 (head)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               3 (fast)

  7     >>   18 LOAD_FAST                2 (slow)
             20 LOAD_FAST                3 (fast)
             22 COMPARE_OP               3 (!=)
             24 POP_JUMP_IF_FALSE       56

  8          26 LOAD_FAST                3 (fast)
             28 POP_JUMP_IF_FALSE       36
             30 LOAD_FAST                3 (fast)
             32 LOAD_ATTR                0 (next)
             34 POP_JUMP_IF_TRUE        40

  9     >>   36 LOAD_CONST               1 (False)
             38 RETURN_VALUE

 10     >>   40 LOAD_FAST                2 (slow)
             42 LOAD_ATTR                0 (next)
             44 STORE_FAST               2 (slow)

 11          46 LOAD_FAST                3 (fast)
             48 LOAD_ATTR                0 (next)
             50 LOAD_ATTR                0 (next)
             52 STORE_FAST               3 (fast)
             54 JUMP_ABSOLUTE           18

 12     >>   56 LOAD_CONST               2 (True)
             58 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        clone = head
        while clone:
            if clone.val == float('inf'):
                return True
            clone.val = float('inf')
            clone= head.next
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f029ef252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f029ef252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7f029ef25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7f029ef25240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (clone)

  4     >>    4 LOAD_FAST                2 (clone)
              6 POP_JUMP_IF_FALSE       44

  5           8 LOAD_FAST                2 (clone)
             10 LOAD_ATTR                0 (val)
             12 LOAD_GLOBAL              1 (float)
             14 LOAD_CONST               1 ('inf')
             16 CALL_FUNCTION            1
             18 COMPARE_OP               2 (==)
             20 POP_JUMP_IF_FALSE       26

  6          22 LOAD_CONST               2 (True)
             24 RETURN_VALUE

  7     >>   26 LOAD_GLOBAL              1 (float)
             28 LOAD_CONST               1 ('inf')
             30 CALL_FUNCTION            1
             32 LOAD_FAST                2 (clone)
             34 STORE_ATTR               0 (val)

  8          36 LOAD_FAST                1 (head)
             38 LOAD_ATTR                2 (next)
             40 STORE_FAST               2 (clone)
             42 JUMP_ABSOLUTE            4

  9     >>   44 LOAD_CONST               3 (False)
             46 RETURN_VALUE
None
"
hasCycle,"class Solution:
    def hasCycle(self, head: ListNode) -> bool:

        if head == None or head.next == None:
            return False
        fast = head.next
        slow = head
        while fast!= None and fast.next!=None:

            if slow == fast:
                return True
            
            slow = slow.next
            fast = fast.next.next
            
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff7046352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff7046352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object hasCycle at 0x7ff704635240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.hasCycle')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (hasCycle)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object hasCycle at 0x7ff704635240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               2 (==)
             16 POP_JUMP_IF_FALSE       22

  5     >>   18 LOAD_CONST               1 (False)
             20 RETURN_VALUE

  6     >>   22 LOAD_FAST                1 (head)
             24 LOAD_ATTR                0 (next)
             26 STORE_FAST               2 (fast)

  7          28 LOAD_FAST                1 (head)
             30 STORE_FAST               3 (slow)

  8     >>   32 LOAD_FAST                2 (fast)
             34 LOAD_CONST               0 (None)
             36 COMPARE_OP               3 (!=)
             38 POP_JUMP_IF_FALSE       78
             40 LOAD_FAST                2 (fast)
             42 LOAD_ATTR                0 (next)
             44 LOAD_CONST               0 (None)
             46 COMPARE_OP               3 (!=)
             48 POP_JUMP_IF_FALSE       78

 10          50 LOAD_FAST                3 (slow)
             52 LOAD_FAST                2 (fast)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       62

 11          58 LOAD_CONST               2 (True)
             60 RETURN_VALUE

 13     >>   62 LOAD_FAST                3 (slow)
             64 LOAD_ATTR                0 (next)
             66 STORE_FAST               3 (slow)

 14          68 LOAD_FAST                2 (fast)
             70 LOAD_ATTR                0 (next)
             72 LOAD_ATTR                0 (next)
             74 STORE_FAST               2 (fast)
             76 JUMP_ABSOLUTE           32

 16     >>   78 LOAD_CONST               1 (False)
             80 RETURN_VALUE
None
"
inorderTraversal,"from typing import List
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        from collections import deque
        ans = deque([])
        q= deque([])
        current = root
        
        # In-order traversal: Left->Root->Right
        while True:
            if current:  # append all the left nodes into the stack
                q.append(current)
                current = current.left
            elif q: #when reached to the far left, pop from the stack
                current = q.pop()
                ans.append(current.val) # print the left -> middle
                current = current.right  # then print the right
            else:
                break

        return list(ans)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object TreeNode at 0x7f4d946952f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('TreeNode')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('TreeNode')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (TreeNode)

  7          26 LOAD_BUILD_CLASS
             28 LOAD_CONST               4 (<code object Solution at 0x7f4d94695450, file ""<ast>"", line 7>)
             30 LOAD_CONST               5 ('Solution')
             32 MAKE_FUNCTION            0
             34 LOAD_CONST               5 ('Solution')
             36 CALL_FUNCTION            2
             38 STORE_NAME               3 (Solution)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object TreeNode at 0x7f4d946952f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('TreeNode')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               5 ((0, None, None))
             10 LOAD_CONST               3 (<code object __init__ at 0x7f4d94695240, file ""<ast>"", line 3>)
             12 LOAD_CONST               4 ('TreeNode.__init__')
             14 MAKE_FUNCTION            1 (defaults)
             16 STORE_NAME               3 (__init__)
             18 LOAD_CONST               2 (None)
             20 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f4d94695240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (val)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  5           6 LOAD_FAST                2 (left)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (left)

  6          12 LOAD_FAST                3 (right)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (right)
             18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4d94695450, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f4d946953a0, file ""<ast>"", line 8>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f4d946953a0, file ""<ast>"", line 8>:
  9           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               2 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_FAST               2 (deque)
             10 POP_TOP

 10          12 LOAD_FAST                2 (deque)
             14 BUILD_LIST               0
             16 CALL_FUNCTION            1
             18 STORE_FAST               3 (ans)

 11          20 LOAD_FAST                2 (deque)
             22 BUILD_LIST               0
             24 CALL_FUNCTION            1
             26 STORE_FAST               4 (q)

 12          28 LOAD_FAST                1 (root)
             30 STORE_FAST               5 (current)

 16     >>   32 LOAD_FAST                5 (current)
             34 POP_JUMP_IF_FALSE       54

 17          36 LOAD_FAST                4 (q)
             38 LOAD_METHOD              2 (append)
             40 LOAD_FAST                5 (current)
             42 CALL_METHOD              1
             44 POP_TOP

 18          46 LOAD_FAST                5 (current)
             48 LOAD_ATTR                3 (left)
             50 STORE_FAST               5 (current)
             52 JUMP_ABSOLUTE           32

 19     >>   54 LOAD_FAST                4 (q)
             56 POP_JUMP_IF_FALSE       90

 20          58 LOAD_FAST                4 (q)
             60 LOAD_METHOD              4 (pop)
             62 CALL_METHOD              0
             64 STORE_FAST               5 (current)

 21          66 LOAD_FAST                3 (ans)
             68 LOAD_METHOD              2 (append)
             70 LOAD_FAST                5 (current)
             72 LOAD_ATTR                5 (val)
             74 CALL_METHOD              1
             76 POP_TOP

 22          78 LOAD_FAST                5 (current)
             80 LOAD_ATTR                6 (right)
             82 STORE_FAST               5 (current)
             84 JUMP_ABSOLUTE           32

 24          86 JUMP_ABSOLUTE           90
             88 JUMP_ABSOLUTE           32

 26     >>   90 LOAD_GLOBAL              7 (list)
             92 LOAD_FAST                3 (ans)
             94 CALL_FUNCTION            1
             96 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        ans = []
        def rec(root):
            if not root:
                return
            rec(root.left)
            ans.append(root.val)
            rec(root.right)
        rec(root)
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffd64785500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffd64785500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7ffd64785450, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7ffd64785450, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_DEREF              0 (ans)

  4           4 LOAD_CLOSURE             0 (ans)
              6 LOAD_CLOSURE             1 (rec)
              8 BUILD_TUPLE              2
             10 LOAD_CONST               1 (<code object rec at 0x7ffd647853a0, file ""<ast>"", line 4>)
             12 LOAD_CONST               2 ('Solution.inorderTraversal.<locals>.rec')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              1 (rec)

 10          18 LOAD_DEREF               1 (rec)
             20 LOAD_FAST                1 (root)
             22 CALL_FUNCTION            1
             24 POP_TOP

 11          26 LOAD_DEREF               0 (ans)
             28 RETURN_VALUE

Disassembly of <code object rec at 0x7ffd647853a0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

  6           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  7     >>    8 LOAD_DEREF               1 (rec)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 POP_TOP

  8          18 LOAD_DEREF               0 (ans)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                0 (root)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

  9          30 LOAD_DEREF               1 (rec)
             32 LOAD_FAST                0 (root)
             34 LOAD_ATTR                3 (right)
             36 CALL_FUNCTION            1
             38 POP_TOP
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
	def inorderTraversal(self, root: TreeNode) -> List[int]:
		if not root:
			return []
		
		# inorder: L-V-R
		result:List[int] = []
		stack:List[int] = []
			
		while True:
			if root:
				stack.append(root)
				root = root.left
			else:
				if len(stack)==0:
					break
				else:
					root = stack.pop()
					result.append(root.val)
					root = root.right
				
		return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7febe40e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7febe40e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7febe40e5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7febe40e5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 BUILD_LIST               0
              6 RETURN_VALUE

  7     >>    8 BUILD_LIST               0
             10 STORE_FAST               2 (result)

  8          12 BUILD_LIST               0
             14 STORE_FAST               3 (stack)

 11     >>   16 LOAD_FAST                1 (root)
             18 POP_JUMP_IF_FALSE       38

 12          20 LOAD_FAST                3 (stack)
             22 LOAD_METHOD              0 (append)
             24 LOAD_FAST                1 (root)
             26 CALL_METHOD              1
             28 POP_TOP

 13          30 LOAD_FAST                1 (root)
             32 LOAD_ATTR                1 (left)
             34 STORE_FAST               1 (root)
             36 JUMP_ABSOLUTE           16

 15     >>   38 LOAD_GLOBAL              2 (len)
             40 LOAD_FAST                3 (stack)
             42 CALL_FUNCTION            1
             44 LOAD_CONST               1 (0)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       54

 16          50 JUMP_ABSOLUTE           82
             52 JUMP_ABSOLUTE           16

 18     >>   54 LOAD_FAST                3 (stack)
             56 LOAD_METHOD              3 (pop)
             58 CALL_METHOD              0
             60 STORE_FAST               1 (root)

 19          62 LOAD_FAST                2 (result)
             64 LOAD_METHOD              0 (append)
             66 LOAD_FAST                1 (root)
             68 LOAD_ATTR                4 (val)
             70 CALL_METHOD              1
             72 POP_TOP

 20          74 LOAD_FAST                1 (root)
             76 LOAD_ATTR                5 (right)
             78 STORE_FAST               1 (root)
             80 JUMP_ABSOLUTE           16

 22     >>   82 LOAD_FAST                2 (result)
             84 RETURN_VALUE
None
"
inorderTraversal,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
        def recursive(node, li):
            if node:
                recursive(node.left, li)
                li.append(node.val)
                recursive(node.right, li)
                
            return li
        
        return recursive(root, res)
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f98dbf555b0, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f98dbf555b0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f98dbf55500, file ""<ast>"", line 8>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f98dbf55500, file ""<ast>"", line 8>:
  9           0 BUILD_LIST               0
              2 STORE_FAST               2 (res)

 10           4 LOAD_CLOSURE             0 (recursive)
              6 BUILD_TUPLE              1
              8 LOAD_CONST               1 (<code object recursive at 0x7f98dbf55450, file ""<ast>"", line 10>)
             10 LOAD_CONST               2 ('Solution.inorderTraversal.<locals>.recursive')
             12 MAKE_FUNCTION            8 (closure)
             14 STORE_DEREF              0 (recursive)

 18          16 LOAD_DEREF               0 (recursive)
             18 LOAD_FAST                1 (root)
             20 LOAD_FAST                2 (res)
             22 CALL_FUNCTION            2
             24 RETURN_VALUE

Disassembly of <code object recursive at 0x7f98dbf55450, file ""<ast>"", line 10>:
 11           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_FALSE       40

 12           4 LOAD_DEREF               0 (recursive)
              6 LOAD_FAST                0 (node)
              8 LOAD_ATTR                0 (left)
             10 LOAD_FAST                1 (li)
             12 CALL_FUNCTION            2
             14 POP_TOP

 13          16 LOAD_FAST                1 (li)
             18 LOAD_METHOD              1 (append)
             20 LOAD_FAST                0 (node)
             22 LOAD_ATTR                2 (val)
             24 CALL_METHOD              1
             26 POP_TOP

 14          28 LOAD_DEREF               0 (recursive)
             30 LOAD_FAST                0 (node)
             32 LOAD_ATTR                3 (right)
             34 LOAD_FAST                1 (li)
             36 CALL_FUNCTION            2
             38 POP_TOP

 16     >>   40 LOAD_FAST                1 (li)
             42 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root:TreeNode)->List[int]:
        
        stack= []
        
        res = []
        
       
        while True:
            
            if root:
                stack.append(root)
                root = root.left
            
            elif stack:
                root = stack.pop()
                res.append(root.val)
                root = root.right
                
            else:
                break
        
        return res","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa96af952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa96af952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7fa96af95240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7fa96af95240, file ""<ast>"", line 2>:
  4           0 BUILD_LIST               0
              2 STORE_FAST               2 (stack)

  6           4 BUILD_LIST               0
              6 STORE_FAST               3 (res)

 11     >>    8 LOAD_FAST                1 (root)
             10 POP_JUMP_IF_FALSE       30

 12          12 LOAD_FAST                2 (stack)
             14 LOAD_METHOD              0 (append)
             16 LOAD_FAST                1 (root)
             18 CALL_METHOD              1
             20 POP_TOP

 13          22 LOAD_FAST                1 (root)
             24 LOAD_ATTR                1 (left)
             26 STORE_FAST               1 (root)
             28 JUMP_ABSOLUTE            8

 15     >>   30 LOAD_FAST                2 (stack)
             32 POP_JUMP_IF_FALSE       66

 16          34 LOAD_FAST                2 (stack)
             36 LOAD_METHOD              2 (pop)
             38 CALL_METHOD              0
             40 STORE_FAST               1 (root)

 17          42 LOAD_FAST                3 (res)
             44 LOAD_METHOD              0 (append)
             46 LOAD_FAST                1 (root)
             48 LOAD_ATTR                3 (val)
             50 CALL_METHOD              1
             52 POP_TOP

 18          54 LOAD_FAST                1 (root)
             56 LOAD_ATTR                4 (right)
             58 STORE_FAST               1 (root)
             60 JUMP_ABSOLUTE            8

 21          62 JUMP_ABSOLUTE           66
             64 JUMP_ABSOLUTE            8

 23     >>   66 LOAD_FAST                3 (res)
             68 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root:TreeNode)-> List[int]:
        res, stack = [], []
        n          = root
        #
        while n or stack:
            if not n: 
                # n.right was empty, backtrack one node (but avoid visiting the left branch again)
                n = stack.pop() 
            else:
                # n.right existed, reach its left-most node
                while n.left:
                    stack.append(n) 
                    n = n.left
            res.append(n.val)
            # Attempt to move right
            n = n.right
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7f162652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7f162652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f7f16265240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f7f16265240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 BUILD_LIST               0
              4 ROT_TWO
              6 STORE_FAST               2 (res)
              8 STORE_FAST               3 (stack)

  4          10 LOAD_FAST                1 (root)
             12 STORE_FAST               4 (n)

  6     >>   14 LOAD_FAST                4 (n)
             16 POP_JUMP_IF_TRUE        22
             18 LOAD_FAST                3 (stack)
             20 POP_JUMP_IF_FALSE       80

  7     >>   22 LOAD_FAST                4 (n)
             24 POP_JUMP_IF_TRUE        36

  9          26 LOAD_FAST                3 (stack)
             28 LOAD_METHOD              0 (pop)
             30 CALL_METHOD              0
             32 STORE_FAST               4 (n)
             34 JUMP_FORWARD            24 (to 60)

 12     >>   36 LOAD_FAST                4 (n)
             38 LOAD_ATTR                1 (left)
             40 POP_JUMP_IF_FALSE       60

 13          42 LOAD_FAST                3 (stack)
             44 LOAD_METHOD              2 (append)
             46 LOAD_FAST                4 (n)
             48 CALL_METHOD              1
             50 POP_TOP

 14          52 LOAD_FAST                4 (n)
             54 LOAD_ATTR                1 (left)
             56 STORE_FAST               4 (n)
             58 JUMP_ABSOLUTE           36

 15     >>   60 LOAD_FAST                2 (res)
             62 LOAD_METHOD              2 (append)
             64 LOAD_FAST                4 (n)
             66 LOAD_ATTR                3 (val)
             68 CALL_METHOD              1
             70 POP_TOP

 17          72 LOAD_FAST                4 (n)
             74 LOAD_ATTR                4 (right)
             76 STORE_FAST               4 (n)
             78 JUMP_ABSOLUTE           14

 18     >>   80 LOAD_FAST                2 (res)
             82 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res, stack = [], [(root, False)]
        while stack:
            node, visited = stack.pop()  # the last element
            if node:
                if visited:
                    res.append(node.val)
                else:  # inorder: left -> root -> right
                    stack.append((node.right, False))
                    stack.append((node, True))
                    stack.append((node.left, False))
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9468815240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9468815240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f94688152f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f94688152f0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                1 (root)
              4 LOAD_CONST               1 (False)
              6 BUILD_TUPLE              2
              8 BUILD_LIST               1
             10 ROT_TWO
             12 STORE_FAST               2 (res)
             14 STORE_FAST               3 (stack)

  4     >>   16 LOAD_FAST                3 (stack)
             18 POP_JUMP_IF_FALSE      102

  5          20 LOAD_FAST                3 (stack)
             22 LOAD_METHOD              0 (pop)
             24 CALL_METHOD              0
             26 UNPACK_SEQUENCE          2
             28 STORE_FAST               4 (node)
             30 STORE_FAST               5 (visited)

  6          32 LOAD_FAST                4 (node)
             34 POP_JUMP_IF_FALSE       16

  7          36 LOAD_FAST                5 (visited)
             38 POP_JUMP_IF_FALSE       54

  8          40 LOAD_FAST                2 (res)
             42 LOAD_METHOD              1 (append)
             44 LOAD_FAST                4 (node)
             46 LOAD_ATTR                2 (val)
             48 CALL_METHOD              1
             50 POP_TOP
             52 JUMP_ABSOLUTE           16

 10     >>   54 LOAD_FAST                3 (stack)
             56 LOAD_METHOD              1 (append)
             58 LOAD_FAST                4 (node)
             60 LOAD_ATTR                3 (right)
             62 LOAD_CONST               1 (False)
             64 BUILD_TUPLE              2
             66 CALL_METHOD              1
             68 POP_TOP

 11          70 LOAD_FAST                3 (stack)
             72 LOAD_METHOD              1 (append)
             74 LOAD_FAST                4 (node)
             76 LOAD_CONST               2 (True)
             78 BUILD_TUPLE              2
             80 CALL_METHOD              1
             82 POP_TOP

 12          84 LOAD_FAST                3 (stack)
             86 LOAD_METHOD              1 (append)
             88 LOAD_FAST                4 (node)
             90 LOAD_ATTR                4 (left)
             92 LOAD_CONST               1 (False)
             94 BUILD_TUPLE              2
             96 CALL_METHOD              1
             98 POP_TOP
            100 JUMP_ABSOLUTE           16

 13     >>  102 LOAD_FAST                2 (res)
            104 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        curr = root
        res = []
        while curr:
            if curr.left:
                pre = curr.left
                while pre.right and pre.right!=curr:
                    pre = pre.right
                if pre.right == curr:
                    pre.right = None
                    res.append(curr.val)
                    curr = curr.right
                else:
                    pre.right = curr
                    curr = curr.left
            else:
                res.append(curr.val)
                curr = curr.right
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0ac4cd5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0ac4cd5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f0ac4cd52f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f0ac4cd52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 STORE_FAST               2 (curr)

  4           4 BUILD_LIST               0
              6 STORE_FAST               3 (res)

  5     >>    8 LOAD_FAST                2 (curr)
             10 POP_JUMP_IF_FALSE      118

  6          12 LOAD_FAST                2 (curr)
             14 LOAD_ATTR                0 (left)
             16 POP_JUMP_IF_FALSE       98

  7          18 LOAD_FAST                2 (curr)
             20 LOAD_ATTR                0 (left)
             22 STORE_FAST               4 (pre)

  8     >>   24 LOAD_FAST                4 (pre)
             26 LOAD_ATTR                1 (right)
             28 POP_JUMP_IF_FALSE       48
             30 LOAD_FAST                4 (pre)
             32 LOAD_ATTR                1 (right)
             34 LOAD_FAST                2 (curr)
             36 COMPARE_OP               3 (!=)
             38 POP_JUMP_IF_FALSE       48

  9          40 LOAD_FAST                4 (pre)
             42 LOAD_ATTR                1 (right)
             44 STORE_FAST               4 (pre)
             46 JUMP_ABSOLUTE           24

 10     >>   48 LOAD_FAST                4 (pre)
             50 LOAD_ATTR                1 (right)
             52 LOAD_FAST                2 (curr)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       84

 11          58 LOAD_CONST               0 (None)
             60 LOAD_FAST                4 (pre)
             62 STORE_ATTR               1 (right)

 12          64 LOAD_FAST                3 (res)
             66 LOAD_METHOD              2 (append)
             68 LOAD_FAST                2 (curr)
             70 LOAD_ATTR                3 (val)
             72 CALL_METHOD              1
             74 POP_TOP

 13          76 LOAD_FAST                2 (curr)
             78 LOAD_ATTR                1 (right)
             80 STORE_FAST               2 (curr)
             82 JUMP_ABSOLUTE          116

 15     >>   84 LOAD_FAST                2 (curr)
             86 LOAD_FAST                4 (pre)
             88 STORE_ATTR               1 (right)

 16          90 LOAD_FAST                2 (curr)
             92 LOAD_ATTR                0 (left)
             94 STORE_FAST               2 (curr)
             96 JUMP_ABSOLUTE            8

 18     >>   98 LOAD_FAST                3 (res)
            100 LOAD_METHOD              2 (append)
            102 LOAD_FAST                2 (curr)
            104 LOAD_ATTR                3 (val)
            106 CALL_METHOD              1
            108 POP_TOP

 19         110 LOAD_FAST                2 (curr)
            112 LOAD_ATTR                1 (right)
            114 STORE_FAST               2 (curr)
        >>  116 JUMP_ABSOLUTE            8

 20     >>  118 LOAD_FAST                3 (res)
            120 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        output, stack =[],[]
        while(stack or root):
            if root:
                # Go to the left most and push the parent into the stack
                # We need this parent node once we are done with left child and need to go to the right child
                stack.append(root)
                root = root.left
            elif stack and root == None:
                #We are done with left , so pop out the parent
                root = stack.pop()
                output.append(root.val)
                # Go to the right child
                root = root.right
        return output
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f86700f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f86700f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f86700f5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f86700f5240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 BUILD_LIST               0
              4 ROT_TWO
              6 STORE_FAST               2 (output)
              8 STORE_FAST               3 (stack)

  4     >>   10 LOAD_FAST                3 (stack)
             12 POP_JUMP_IF_TRUE        18
             14 LOAD_FAST                1 (root)
             16 POP_JUMP_IF_FALSE       80

  5     >>   18 LOAD_FAST                1 (root)
             20 POP_JUMP_IF_FALSE       40

  8          22 LOAD_FAST                3 (stack)
             24 LOAD_METHOD              0 (append)
             26 LOAD_FAST                1 (root)
             28 CALL_METHOD              1
             30 POP_TOP

  9          32 LOAD_FAST                1 (root)
             34 LOAD_ATTR                1 (left)
             36 STORE_FAST               1 (root)
             38 JUMP_ABSOLUTE           10

 10     >>   40 LOAD_FAST                3 (stack)
             42 POP_JUMP_IF_FALSE       10
             44 LOAD_FAST                1 (root)
             46 LOAD_CONST               0 (None)
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       10

 12          52 LOAD_FAST                3 (stack)
             54 LOAD_METHOD              2 (pop)
             56 CALL_METHOD              0
             58 STORE_FAST               1 (root)

 13          60 LOAD_FAST                2 (output)
             62 LOAD_METHOD              0 (append)
             64 LOAD_FAST                1 (root)
             66 LOAD_ATTR                3 (val)
             68 CALL_METHOD              1
             70 POP_TOP

 15          72 LOAD_FAST                1 (root)
             74 LOAD_ATTR                4 (right)
             76 STORE_FAST               1 (root)
             78 JUMP_ABSOLUTE           10

 16     >>   80 LOAD_FAST                2 (output)
             82 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if root is None:
            return []
        
        if root.left is None:
            l = []
        else:
            l = self.inorderTraversal(root.left)
            
        if root.right is None:
            r = []
        else:
            r = self.inorderTraversal(root.right)
            
        return l + [root.val] + r
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa2dd2552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa2dd2552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7fa2dd255240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7fa2dd255240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  4           8 BUILD_LIST               0
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                0 (left)
             16 LOAD_CONST               0 (None)
             18 COMPARE_OP               8 (is)
             20 POP_JUMP_IF_FALSE       28

  7          22 BUILD_LIST               0
             24 STORE_FAST               2 (l)
             26 JUMP_FORWARD            12 (to 40)

  9     >>   28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              1 (inorderTraversal)
             32 LOAD_FAST                1 (root)
             34 LOAD_ATTR                0 (left)
             36 CALL_METHOD              1
             38 STORE_FAST               2 (l)

 11     >>   40 LOAD_FAST                1 (root)
             42 LOAD_ATTR                2 (right)
             44 LOAD_CONST               0 (None)
             46 COMPARE_OP               8 (is)
             48 POP_JUMP_IF_FALSE       56

 12          50 BUILD_LIST               0
             52 STORE_FAST               3 (r)
             54 JUMP_FORWARD            12 (to 68)

 14     >>   56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (inorderTraversal)
             60 LOAD_FAST                1 (root)
             62 LOAD_ATTR                2 (right)
             64 CALL_METHOD              1
             66 STORE_FAST               3 (r)

 16     >>   68 LOAD_FAST                2 (l)
             70 LOAD_FAST                1 (root)
             72 LOAD_ATTR                3 (val)
             74 BUILD_LIST               1
             76 BINARY_ADD
             78 LOAD_FAST                3 (r)
             80 BINARY_ADD
             82 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        output =[]
        def inorderTraversalHelper(root):
            if not root:
                return None
            inorderTraversalHelper(root.left)
            output.append(root.val)
            inorderTraversalHelper(root.right)
        inorderTraversalHelper(root)
        return output
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f964cc15450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f964cc15450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f964cc153a0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f964cc153a0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_DEREF              1 (output)

  4           4 LOAD_CLOSURE             0 (inorderTraversalHelper)
              6 LOAD_CLOSURE             1 (output)
              8 BUILD_TUPLE              2
             10 LOAD_CONST               1 (<code object inorderTraversalHelper at 0x7f964cc152f0, file ""<ast>"", line 4>)
             12 LOAD_CONST               2 ('Solution.inorderTraversal.<locals>.inorderTraversalHelper')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              0 (inorderTraversalHelper)

 10          18 LOAD_DEREF               0 (inorderTraversalHelper)
             20 LOAD_FAST                1 (root)
             22 CALL_FUNCTION            1
             24 POP_TOP

 11          26 LOAD_DEREF               1 (output)
             28 RETURN_VALUE

Disassembly of <code object inorderTraversalHelper at 0x7f964cc152f0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

  6           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  7     >>    8 LOAD_DEREF               0 (inorderTraversalHelper)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 POP_TOP

  8          18 LOAD_DEREF               1 (output)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                0 (root)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

  9          30 LOAD_DEREF               0 (inorderTraversalHelper)
             32 LOAD_FAST                0 (root)
             34 LOAD_ATTR                3 (right)
             36 CALL_FUNCTION            1
             38 POP_TOP
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        # Morris Traversal
        curr = root
        output =[]
        while(curr):
            #if no left child, we can directly go the right child
            if not curr.left:
                output.append(curr.val)
                curr = curr.right
            else:
            # find the inorder predecessor of the current node
                predecessor = curr.left
                # predecessor.right = curr will occur when we have already explored the left subtree of current 
                # and reached the curr via its predecessor link and now again checking this else condition.
                # We have to break out of this loop.
                while predecessor.right !=None and predecessor.right != curr:
                    predecessor = predecessor.right # go as right as possible

                # Now check which out of 2 above condition it reached
                if predecessor.right == None:
                    # No link created till now, so create one and go to the left child of current.
                    predecessor.right = curr
                    curr = curr.left
                else:
                    # left subtree is already visited , so delete the link and then go to right subtree
                    predecessor.right = None
                    output.append(curr.val)
                    curr = curr.right
        return output 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8a3ca85240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8a3ca85240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f8a3ca852f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f8a3ca852f0, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (root)
              2 STORE_FAST               2 (curr)

  5           4 BUILD_LIST               0
              6 STORE_FAST               3 (output)

  6     >>    8 LOAD_FAST                2 (curr)
             10 POP_JUMP_IF_FALSE      122

  8          12 LOAD_FAST                2 (curr)
             14 LOAD_ATTR                0 (left)
             16 POP_JUMP_IF_TRUE        38

  9          18 LOAD_FAST                3 (output)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                2 (curr)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

 10          30 LOAD_FAST                2 (curr)
             32 LOAD_ATTR                3 (right)
             34 STORE_FAST               2 (curr)
             36 JUMP_ABSOLUTE            8

 13     >>   38 LOAD_FAST                2 (curr)
             40 LOAD_ATTR                0 (left)
             42 STORE_FAST               4 (predecessor)

 17     >>   44 LOAD_FAST                4 (predecessor)
             46 LOAD_ATTR                3 (right)
             48 LOAD_CONST               0 (None)
             50 COMPARE_OP               3 (!=)
             52 POP_JUMP_IF_FALSE       72
             54 LOAD_FAST                4 (predecessor)
             56 LOAD_ATTR                3 (right)
             58 LOAD_FAST                2 (curr)
             60 COMPARE_OP               3 (!=)
             62 POP_JUMP_IF_FALSE       72

 18          64 LOAD_FAST                4 (predecessor)
             66 LOAD_ATTR                3 (right)
             68 STORE_FAST               4 (predecessor)
             70 JUMP_ABSOLUTE           44

 21     >>   72 LOAD_FAST                4 (predecessor)
             74 LOAD_ATTR                3 (right)
             76 LOAD_CONST               0 (None)
             78 COMPARE_OP               2 (==)
             80 POP_JUMP_IF_FALSE       96

 23          82 LOAD_FAST                2 (curr)
             84 LOAD_FAST                4 (predecessor)
             86 STORE_ATTR               3 (right)

 24          88 LOAD_FAST                2 (curr)
             90 LOAD_ATTR                0 (left)
             92 STORE_FAST               2 (curr)
             94 JUMP_ABSOLUTE            8

 27     >>   96 LOAD_CONST               0 (None)
             98 LOAD_FAST                4 (predecessor)
            100 STORE_ATTR               3 (right)

 28         102 LOAD_FAST                3 (output)
            104 LOAD_METHOD              1 (append)
            106 LOAD_FAST                2 (curr)
            108 LOAD_ATTR                2 (val)
            110 CALL_METHOD              1
            112 POP_TOP

 29         114 LOAD_FAST                2 (curr)
            116 LOAD_ATTR                3 (right)
            118 STORE_FAST               2 (curr)
            120 JUMP_ABSOLUTE            8

 30     >>  122 LOAD_FAST                3 (output)
            124 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        
        ## RC ##
        ## APPROACH : STACK ##
        ## (question demands iterative solution)
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##
        
        res = []
        stack = []
        currNode = root
        
        while(currNode or stack):              # attention to condition.
            while(currNode):
                stack.append(currNode)
                currNode = currNode.left        # traverse all to the left
            
            currNode = stack.pop()
            res.append(currNode.val)            # print
            currNode = currNode.right           # traverse right
        
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4005f552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4005f552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f4005f55240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f4005f55240, file ""<ast>"", line 2>:
 11           0 BUILD_LIST               0
              2 STORE_FAST               2 (res)

 12           4 BUILD_LIST               0
              6 STORE_FAST               3 (stack)

 13           8 LOAD_FAST                1 (root)
             10 STORE_FAST               4 (currNode)

 15     >>   12 LOAD_FAST                4 (currNode)
             14 POP_JUMP_IF_TRUE        20
             16 LOAD_FAST                3 (stack)
             18 POP_JUMP_IF_FALSE       70

 16     >>   20 LOAD_FAST                4 (currNode)
             22 POP_JUMP_IF_FALSE       42

 17          24 LOAD_FAST                3 (stack)
             26 LOAD_METHOD              0 (append)
             28 LOAD_FAST                4 (currNode)
             30 CALL_METHOD              1
             32 POP_TOP

 18          34 LOAD_FAST                4 (currNode)
             36 LOAD_ATTR                1 (left)
             38 STORE_FAST               4 (currNode)
             40 JUMP_ABSOLUTE           20

 20     >>   42 LOAD_FAST                3 (stack)
             44 LOAD_METHOD              2 (pop)
             46 CALL_METHOD              0
             48 STORE_FAST               4 (currNode)

 21          50 LOAD_FAST                2 (res)
             52 LOAD_METHOD              0 (append)
             54 LOAD_FAST                4 (currNode)
             56 LOAD_ATTR                3 (val)
             58 CALL_METHOD              1
             60 POP_TOP

 22          62 LOAD_FAST                4 (currNode)
             64 LOAD_ATTR                4 (right)
             66 STORE_FAST               4 (currNode)
             68 JUMP_ABSOLUTE           12

 24     >>   70 LOAD_FAST                2 (res)
             72 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []

        while root:
            if not root.left: # if we don't have a left, this is our best in-order value at the moment. add it to the list and move right.
                res.append(root.val)
                root = root.right
            else:
                pred = self.findPredecessor(root) # find the predecessor for the given node. This is the farthest right of the first left we see.

				# if we have a right we have move on to explore this sub tree. The pred.right != root check is to ensure that we're not ex
                if pred.right != root:
                    pred.right = root
                    root = root.left
                else: 
				# otherwise, we have found a pointer back to the current root and we need to rewrite the tree structure. This is basically a form of ""have we seen this before?"".
                    root.left = None

        return res

    def findPredecessor(self, root: TreeNode) -> TreeNode:
        curr = root.left

        while curr.right and curr.right != root:
            curr = curr.right

        return curr

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f05ecb253a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f05ecb253a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f05ecb25240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)

 22          28 LOAD_NAME                3 (TreeNode)
             30 LOAD_NAME                3 (TreeNode)
             32 LOAD_CONST               1 (('root', 'return'))
             34 BUILD_CONST_KEY_MAP      2
             36 LOAD_CONST               4 (<code object findPredecessor at 0x7f05ecb252f0, file ""<ast>"", line 22>)
             38 LOAD_CONST               5 ('Solution.findPredecessor')
             40 MAKE_FUNCTION            4 (annotations)
             42 STORE_NAME               7 (findPredecessor)
             44 LOAD_CONST               6 (None)
             46 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f05ecb25240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (res)

  5     >>    4 LOAD_FAST                1 (root)
              6 POP_JUMP_IF_FALSE       76

  6           8 LOAD_FAST                1 (root)
             10 LOAD_ATTR                0 (left)
             12 POP_JUMP_IF_TRUE        34

  7          14 LOAD_FAST                2 (res)
             16 LOAD_METHOD              1 (append)
             18 LOAD_FAST                1 (root)
             20 LOAD_ATTR                2 (val)
             22 CALL_METHOD              1
             24 POP_TOP

  8          26 LOAD_FAST                1 (root)
             28 LOAD_ATTR                3 (right)
             30 STORE_FAST               1 (root)
             32 JUMP_ABSOLUTE            4

 10     >>   34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              4 (findPredecessor)
             38 LOAD_FAST                1 (root)
             40 CALL_METHOD              1
             42 STORE_FAST               3 (pred)

 13          44 LOAD_FAST                3 (pred)
             46 LOAD_ATTR                3 (right)
             48 LOAD_FAST                1 (root)
             50 COMPARE_OP               3 (!=)
             52 POP_JUMP_IF_FALSE       68

 14          54 LOAD_FAST                1 (root)
             56 LOAD_FAST                3 (pred)
             58 STORE_ATTR               3 (right)

 15          60 LOAD_FAST                1 (root)
             62 LOAD_ATTR                0 (left)
             64 STORE_FAST               1 (root)
             66 JUMP_ABSOLUTE            4

 18     >>   68 LOAD_CONST               0 (None)
             70 LOAD_FAST                1 (root)
             72 STORE_ATTR               0 (left)
             74 JUMP_ABSOLUTE            4

 20     >>   76 LOAD_FAST                2 (res)
             78 RETURN_VALUE

Disassembly of <code object findPredecessor at 0x7f05ecb252f0, file ""<ast>"", line 22>:
 23           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (left)
              4 STORE_FAST               2 (curr)

 25     >>    6 LOAD_FAST                2 (curr)
              8 LOAD_ATTR                1 (right)
             10 POP_JUMP_IF_FALSE       30
             12 LOAD_FAST                2 (curr)
             14 LOAD_ATTR                1 (right)
             16 LOAD_FAST                1 (root)
             18 COMPARE_OP               3 (!=)
             20 POP_JUMP_IF_FALSE       30

 26          22 LOAD_FAST                2 (curr)
             24 LOAD_ATTR                1 (right)
             26 STORE_FAST               2 (curr)
             28 JUMP_ABSOLUTE            6

 28     >>   30 LOAD_FAST                2 (curr)
             32 RETURN_VALUE
None
"
inorderTraversal,"#ITERATIVE
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:        
        return_list = []
        stack = []
        node = root
        
        while True:
            
            if node is not None:
                stack.append(node)
                node = node.left
                
            elif(stack):
                node = stack.pop()
                return_list.append(node.val)
                node = node.right
            else:
                break
        return return_list","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbc29e752f0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbc29e752f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7fbc29e75240, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7fbc29e75240, file ""<ast>"", line 3>:
  4           0 BUILD_LIST               0
              2 STORE_FAST               2 (return_list)

  5           4 BUILD_LIST               0
              6 STORE_FAST               3 (stack)

  6           8 LOAD_FAST                1 (root)
             10 STORE_FAST               4 (node)

 10     >>   12 LOAD_FAST                4 (node)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               9 (is not)
             18 POP_JUMP_IF_FALSE       38

 11          20 LOAD_FAST                3 (stack)
             22 LOAD_METHOD              0 (append)
             24 LOAD_FAST                4 (node)
             26 CALL_METHOD              1
             28 POP_TOP

 12          30 LOAD_FAST                4 (node)
             32 LOAD_ATTR                1 (left)
             34 STORE_FAST               4 (node)
             36 JUMP_ABSOLUTE           12

 14     >>   38 LOAD_FAST                3 (stack)
             40 POP_JUMP_IF_FALSE       74

 15          42 LOAD_FAST                3 (stack)
             44 LOAD_METHOD              2 (pop)
             46 CALL_METHOD              0
             48 STORE_FAST               4 (node)

 16          50 LOAD_FAST                2 (return_list)
             52 LOAD_METHOD              0 (append)
             54 LOAD_FAST                4 (node)
             56 LOAD_ATTR                3 (val)
             58 CALL_METHOD              1
             60 POP_TOP

 17          62 LOAD_FAST                4 (node)
             64 LOAD_ATTR                4 (right)
             66 STORE_FAST               4 (node)
             68 JUMP_ABSOLUTE           12

 19          70 JUMP_ABSOLUTE           74
             72 JUMP_ABSOLUTE           12

 20     >>   74 LOAD_FAST                2 (return_list)
             76 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        visited = set()
        result = []
        stack = []
        if root: stack.append(root)
        
        while(len(stack) > 0):
            curr = stack.pop()
            
            if curr.left and curr.left not in visited:
                stack.append(curr)
                stack.append(curr.left)
                continue
            
            visited.add(curr)
            result.append(curr.val)
        
            if curr.right and curr.right not in visited:
                stack.append(curr.right)
        
        return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb4cffb52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb4cffb52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7fb4cffb5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7fb4cffb5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 STORE_FAST               2 (visited)

  4           6 BUILD_LIST               0
              8 STORE_FAST               3 (result)

  5          10 BUILD_LIST               0
             12 STORE_FAST               4 (stack)

  6          14 LOAD_FAST                1 (root)
             16 POP_JUMP_IF_FALSE       28
             18 LOAD_FAST                4 (stack)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                1 (root)
             24 CALL_METHOD              1
             26 POP_TOP

  8     >>   28 LOAD_GLOBAL              2 (len)
             30 LOAD_FAST                4 (stack)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               1 (0)
             36 COMPARE_OP               4 (>)
             38 POP_JUMP_IF_FALSE      140

  9          40 LOAD_FAST                4 (stack)
             42 LOAD_METHOD              3 (pop)
             44 CALL_METHOD              0
             46 STORE_FAST               5 (curr)

 11          48 LOAD_FAST                5 (curr)
             50 LOAD_ATTR                4 (left)
             52 POP_JUMP_IF_FALSE       88
             54 LOAD_FAST                5 (curr)
             56 LOAD_ATTR                4 (left)
             58 LOAD_FAST                2 (visited)
             60 COMPARE_OP               7 (not in)
             62 POP_JUMP_IF_FALSE       88

 12          64 LOAD_FAST                4 (stack)
             66 LOAD_METHOD              1 (append)
             68 LOAD_FAST                5 (curr)
             70 CALL_METHOD              1
             72 POP_TOP

 13          74 LOAD_FAST                4 (stack)
             76 LOAD_METHOD              1 (append)
             78 LOAD_FAST                5 (curr)
             80 LOAD_ATTR                4 (left)
             82 CALL_METHOD              1
             84 POP_TOP

 14          86 JUMP_ABSOLUTE           28

 16     >>   88 LOAD_FAST                2 (visited)
             90 LOAD_METHOD              5 (add)
             92 LOAD_FAST                5 (curr)
             94 CALL_METHOD              1
             96 POP_TOP

 17          98 LOAD_FAST                3 (result)
            100 LOAD_METHOD              1 (append)
            102 LOAD_FAST                5 (curr)
            104 LOAD_ATTR                6 (val)
            106 CALL_METHOD              1
            108 POP_TOP

 19         110 LOAD_FAST                5 (curr)
            112 LOAD_ATTR                7 (right)
            114 POP_JUMP_IF_FALSE       28
            116 LOAD_FAST                5 (curr)
            118 LOAD_ATTR                7 (right)
            120 LOAD_FAST                2 (visited)
            122 COMPARE_OP               7 (not in)
            124 POP_JUMP_IF_FALSE       28

 20         126 LOAD_FAST                4 (stack)
            128 LOAD_METHOD              1 (append)
            130 LOAD_FAST                5 (curr)
            132 LOAD_ATTR                7 (right)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE           28

 22     >>  140 LOAD_FAST                3 (result)
            142 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        return self.helper(root, [])
        
    
    def helper(self, node, acc):
        if not node: return acc
        if node.left:
            self.helper(node.left, acc)
        
        acc.append(node.val)
        
        if node.right:
            self.helper(node.right, acc)
        
        return acc
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8581b853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8581b853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f8581b85240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)

  6          28 LOAD_CONST               4 (<code object helper at 0x7f8581b852f0, file ""<ast>"", line 6>)
             30 LOAD_CONST               5 ('Solution.helper')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               7 (helper)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f8581b85240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (helper)
              4 LOAD_FAST                1 (root)
              6 BUILD_LIST               0
              8 CALL_METHOD              2
             10 RETURN_VALUE

Disassembly of <code object helper at 0x7f8581b852f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_FAST                2 (acc)
              6 RETURN_VALUE

  8     >>    8 LOAD_FAST                1 (node)
             10 LOAD_ATTR                0 (left)
             12 POP_JUMP_IF_FALSE       28

  9          14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (helper)
             18 LOAD_FAST                1 (node)
             20 LOAD_ATTR                0 (left)
             22 LOAD_FAST                2 (acc)
             24 CALL_METHOD              2
             26 POP_TOP

 11     >>   28 LOAD_FAST                2 (acc)
             30 LOAD_METHOD              2 (append)
             32 LOAD_FAST                1 (node)
             34 LOAD_ATTR                3 (val)
             36 CALL_METHOD              1
             38 POP_TOP

 13          40 LOAD_FAST                1 (node)
             42 LOAD_ATTR                4 (right)
             44 POP_JUMP_IF_FALSE       60

 14          46 LOAD_FAST                0 (self)
             48 LOAD_METHOD              1 (helper)
             50 LOAD_FAST                1 (node)
             52 LOAD_ATTR                4 (right)
             54 LOAD_FAST                2 (acc)
             56 CALL_METHOD              2
             58 POP_TOP

 16     >>   60 LOAD_FAST                2 (acc)
             62 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, node: TreeNode) -> List[int]:
        if node is None:
            return []

        left_children = self.inorderTraversal(node.left)
        right_children = self.inorderTraversal(node.right)

        return [*left_children, node.val, *right_children]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa4730b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa4730b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('node', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7fa4730b5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7fa4730b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (node)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  4           8 BUILD_LIST               0
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              0 (inorderTraversal)
             16 LOAD_FAST                1 (node)
             18 LOAD_ATTR                1 (left)
             20 CALL_METHOD              1
             22 STORE_FAST               2 (left_children)

  7          24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              0 (inorderTraversal)
             28 LOAD_FAST                1 (node)
             30 LOAD_ATTR                2 (right)
             32 CALL_METHOD              1
             34 STORE_FAST               3 (right_children)

  9          36 LOAD_FAST                2 (left_children)
             38 LOAD_FAST                1 (node)
             40 LOAD_ATTR                3 (val)
             42 BUILD_TUPLE              1
             44 LOAD_FAST                3 (right_children)
             46 BUILD_LIST_UNPACK        3
             48 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root:TreeNode)->List[int]:
        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right) if root else []
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f30322352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f30322352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f3032235240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f3032235240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       36
              4 LOAD_FAST                0 (self)
              6 LOAD_METHOD              0 (inorderTraversal)
              8 LOAD_FAST                1 (root)
             10 LOAD_ATTR                1 (left)
             12 CALL_METHOD              1
             14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                2 (val)
             18 BUILD_LIST               1
             20 BINARY_ADD
             22 LOAD_FAST                0 (self)
             24 LOAD_METHOD              0 (inorderTraversal)
             26 LOAD_FAST                1 (root)
             28 LOAD_ATTR                3 (right)
             30 CALL_METHOD              1
             32 BINARY_ADD
             34 RETURN_VALUE
        >>   36 BUILD_LIST               0
             38 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        
        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0b997c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0b997c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f0b997c5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f0b997c5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 BUILD_LIST               0
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (inorderTraversal)
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 LOAD_FAST                1 (root)
             20 LOAD_ATTR                2 (val)
             22 BUILD_LIST               1
             24 BINARY_ADD
             26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              0 (inorderTraversal)
             30 LOAD_FAST                1 (root)
             32 LOAD_ATTR                3 (right)
             34 CALL_METHOD              1
             36 BINARY_ADD
             38 RETURN_VALUE
None
"
inorderTraversal,"class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        ans = []
        
        # In-order traversal: left->root->right
        
        def dfs(node):
            if not node: return
            dfs(node.left)
            ans.append(node.val)
            dfs(node.right)
            
        dfs(root)
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3a0b185500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3a0b185500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                5 (int)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('root', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object inorderTraversal at 0x7f3a0b185450, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.inorderTraversal')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               6 (inorderTraversal)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object inorderTraversal at 0x7f3a0b185450, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_DEREF              0 (ans)

  7           4 LOAD_CLOSURE             0 (ans)
              6 LOAD_CLOSURE             1 (dfs)
              8 BUILD_TUPLE              2
             10 LOAD_CONST               1 (<code object dfs at 0x7f3a0b1853a0, file ""<ast>"", line 7>)
             12 LOAD_CONST               2 ('Solution.inorderTraversal.<locals>.dfs')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              1 (dfs)

 13          18 LOAD_DEREF               1 (dfs)
             20 LOAD_FAST                1 (root)
             22 CALL_FUNCTION            1
             24 POP_TOP

 14          26 LOAD_DEREF               0 (ans)
             28 RETURN_VALUE

Disassembly of <code object dfs at 0x7f3a0b1853a0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  9     >>    8 LOAD_DEREF               1 (dfs)
             10 LOAD_FAST                0 (node)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 POP_TOP

 10          18 LOAD_DEREF               0 (ans)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                0 (node)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

 11          30 LOAD_DEREF               1 (dfs)
             32 LOAD_FAST                0 (node)
             34 LOAD_ATTR                3 (right)
             36 CALL_FUNCTION            1
             38 POP_TOP
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fa702195500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa702195500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fa702195450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fa702195450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        count ={}
		# +1 for s and -1 for t. If the char from s not in count then assign 1 and if the char from t not in count , then assign -1. 
        for i in range(len(s)):
            if s[i] in count:
                count[s[i]] +=1
            else:
                count[s[i]] =1
            if t[i] in count:
                count[t[i]] -=1
            else:
                count[t[i]] = -1
        
        for key,value in count.items():
            if value !=0:
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2fb11a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2fb11a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f2fb11a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f2fb11a5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               3 (!=)
             14 POP_JUMP_IF_FALSE       20

  4          16 LOAD_CONST               1 (False)
             18 RETURN_VALUE

  5     >>   20 BUILD_MAP                0
             22 STORE_FAST               3 (count)

  7          24 LOAD_GLOBAL              1 (range)
             26 LOAD_GLOBAL              0 (len)
             28 LOAD_FAST                1 (s)
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                96 (to 134)
             38 STORE_FAST               4 (i)

  8          40 LOAD_FAST                1 (s)
             42 LOAD_FAST                4 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                3 (count)
             48 COMPARE_OP               6 (in)
             50 POP_JUMP_IF_FALSE       74

  9          52 LOAD_FAST                3 (count)
             54 LOAD_FAST                1 (s)
             56 LOAD_FAST                4 (i)
             58 BINARY_SUBSCR
             60 DUP_TOP_TWO
             62 BINARY_SUBSCR
             64 LOAD_CONST               2 (1)
             66 INPLACE_ADD
             68 ROT_THREE
             70 STORE_SUBSCR
             72 JUMP_FORWARD            12 (to 86)

 11     >>   74 LOAD_CONST               2 (1)
             76 LOAD_FAST                3 (count)
             78 LOAD_FAST                1 (s)
             80 LOAD_FAST                4 (i)
             82 BINARY_SUBSCR
             84 STORE_SUBSCR

 12     >>   86 LOAD_FAST                2 (t)
             88 LOAD_FAST                4 (i)
             90 BINARY_SUBSCR
             92 LOAD_FAST                3 (count)
             94 COMPARE_OP               6 (in)
             96 POP_JUMP_IF_FALSE      120

 13          98 LOAD_FAST                3 (count)
            100 LOAD_FAST                2 (t)
            102 LOAD_FAST                4 (i)
            104 BINARY_SUBSCR
            106 DUP_TOP_TWO
            108 BINARY_SUBSCR
            110 LOAD_CONST               2 (1)
            112 INPLACE_SUBTRACT
            114 ROT_THREE
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE           36

 15     >>  120 LOAD_CONST               3 (-1)
            122 LOAD_FAST                3 (count)
            124 LOAD_FAST                2 (t)
            126 LOAD_FAST                4 (i)
            128 BINARY_SUBSCR
            130 STORE_SUBSCR
            132 JUMP_ABSOLUTE           36

 17     >>  134 LOAD_FAST                3 (count)
            136 LOAD_METHOD              2 (items)
            138 CALL_METHOD              0
            140 GET_ITER
        >>  142 FOR_ITER                22 (to 166)
            144 UNPACK_SEQUENCE          2
            146 STORE_FAST               5 (key)
            148 STORE_FAST               6 (value)

 18         150 LOAD_FAST                6 (value)
            152 LOAD_CONST               4 (0)
            154 COMPARE_OP               3 (!=)
            156 POP_JUMP_IF_FALSE      142

 19         158 POP_TOP
            160 LOAD_CONST               1 (False)
            162 RETURN_VALUE
            164 JUMP_ABSOLUTE          142

 20     >>  166 LOAD_CONST               5 (True)
            168 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s, t):
		    return Counter(s)==Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f285f3655b0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f285f3655b0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object isAnagram at 0x7f285f365500, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f285f365500, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
        def isAnagram(self, s: str, t: str) -> bool:
                return Counter(t)==Counter(s)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f0f3ea05500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0f3ea05500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f0f3ea05450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f0f3ea05450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                2 (t)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                1 (s)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s)==Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7ffc78395500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffc78395500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7ffc78395450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7ffc78395450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fc0095f5500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc0095f5500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fc0095f5450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fc0095f5450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s, t):
        dictionary = {}
        
        for i in s:
            if i in dictionary:
                dictionary[i] += 1
            else:
                dictionary[i] = 1

        for i in t:
            if i in dictionary:
                dictionary[i] -= 1
            else:
                return False

        for val in dictionary.values():
            if val != 0:
                return False
        
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0b31245240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0b31245240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isAnagram at 0x7f0b312452f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f0b312452f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (dictionary)

  5           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  6          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (dictionary)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  7          20 LOAD_FAST                3 (dictionary)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

  9     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (dictionary)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

 11     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 STORE_FAST               4 (i)

 12          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (dictionary)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 13          64 LOAD_FAST                3 (dictionary)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 15     >>   82 POP_TOP
             84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           52

 17     >>   90 LOAD_FAST                3 (dictionary)
             92 LOAD_METHOD              0 (values)
             94 CALL_METHOD              0
             96 GET_ITER
        >>   98 FOR_ITER                18 (to 118)
            100 STORE_FAST               5 (val)

 18         102 LOAD_FAST                5 (val)
            104 LOAD_CONST               3 (0)
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       98

 19         110 POP_TOP
            112 LOAD_CONST               2 (False)
            114 RETURN_VALUE
            116 JUMP_ABSOLUTE           98

 21     >>  118 LOAD_CONST               4 (True)
            120 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        dicts = {}
        
        for i in s:
            if i in dicts:
                dicts[i] += 1
            else:
                dicts[i] = 1
        
        for i in t:
            if i in dicts:
                dicts[i] -= 1
            else:
                return False
        
        for value in dicts.values():
            if value != 0:
                return False
        
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7feb60235240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7feb60235240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7feb602352f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7feb602352f0, file ""<ast>"", line 2>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               3 (dicts)

  6           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  7          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (dicts)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  8          20 LOAD_FAST                3 (dicts)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

 10     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (dicts)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

 12     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 STORE_FAST               4 (i)

 13          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (dicts)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 14          64 LOAD_FAST                3 (dicts)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 16     >>   82 POP_TOP
             84 LOAD_CONST               2 (False)
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           52

 18     >>   90 LOAD_FAST                3 (dicts)
             92 LOAD_METHOD              0 (values)
             94 CALL_METHOD              0
             96 GET_ITER
        >>   98 FOR_ITER                18 (to 118)
            100 STORE_FAST               5 (value)

 19         102 LOAD_FAST                5 (value)
            104 LOAD_CONST               3 (0)
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       98

 20         110 POP_TOP
            112 LOAD_CONST               2 (False)
            114 RETURN_VALUE
            116 JUMP_ABSOLUTE           98

 22     >>  118 LOAD_CONST               4 (True)
            120 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        dic_s, dic_t = {}, {}
        for letter in s:
            if letter not in dic_s:
                dic_s[letter] = 1
            else:
                dic_s[letter] += 1
        for letter in t:
            if letter not in dic_t:
                dic_t[letter] = 1
            else:
                dic_t[letter] += 1
        return dic_t == dic_s
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4682885240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4682885240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f46828852f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f46828852f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 BUILD_MAP                0
              4 ROT_TWO
              6 STORE_FAST               3 (dic_s)
              8 STORE_FAST               4 (dic_t)

  4          10 LOAD_FAST                1 (s)
             12 GET_ITER
        >>   14 FOR_ITER                38 (to 54)
             16 STORE_FAST               5 (letter)

  5          18 LOAD_FAST                5 (letter)
             20 LOAD_FAST                3 (dic_s)
             22 COMPARE_OP               7 (not in)
             24 POP_JUMP_IF_FALSE       36

  6          26 LOAD_CONST               1 (1)
             28 LOAD_FAST                3 (dic_s)
             30 LOAD_FAST                5 (letter)
             32 STORE_SUBSCR
             34 JUMP_ABSOLUTE           14

  8     >>   36 LOAD_FAST                3 (dic_s)
             38 LOAD_FAST                5 (letter)
             40 DUP_TOP_TWO
             42 BINARY_SUBSCR
             44 LOAD_CONST               1 (1)
             46 INPLACE_ADD
             48 ROT_THREE
             50 STORE_SUBSCR
             52 JUMP_ABSOLUTE           14

  9     >>   54 LOAD_FAST                2 (t)
             56 GET_ITER
        >>   58 FOR_ITER                38 (to 98)
             60 STORE_FAST               5 (letter)

 10          62 LOAD_FAST                5 (letter)
             64 LOAD_FAST                4 (dic_t)
             66 COMPARE_OP               7 (not in)
             68 POP_JUMP_IF_FALSE       80

 11          70 LOAD_CONST               1 (1)
             72 LOAD_FAST                4 (dic_t)
             74 LOAD_FAST                5 (letter)
             76 STORE_SUBSCR
             78 JUMP_ABSOLUTE           58

 13     >>   80 LOAD_FAST                4 (dic_t)
             82 LOAD_FAST                5 (letter)
             84 DUP_TOP_TWO
             86 BINARY_SUBSCR
             88 LOAD_CONST               1 (1)
             90 INPLACE_ADD
             92 ROT_THREE
             94 STORE_SUBSCR
             96 JUMP_ABSOLUTE           58

 14     >>   98 LOAD_FAST                4 (dic_t)
            100 LOAD_FAST                3 (dic_s)
            102 COMPARE_OP               2 (==)
            104 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        # convert strings to lists
        s_list = []
        t_list = []
        
        for item in s:
            s_list.append(item)
            
        for item in t:
            t_list.append(item)
            
        # loop through items in list
        for item in s_list:
            
            # if it is in the other list, remove that item
            if item in t_list:
                
                t_list.remove(item)

            # if it is not in the other list, then return false
            else:
                return False
            
        # if the other list is empty
        if not t_list:

            return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f28683a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f28683a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f28683a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f28683a5240, file ""<ast>"", line 2>:
  5           0 BUILD_LIST               0
              2 STORE_FAST               3 (s_list)

  6           4 BUILD_LIST               0
              6 STORE_FAST               4 (t_list)

  8           8 LOAD_FAST                1 (s)
             10 GET_ITER
        >>   12 FOR_ITER                14 (to 28)
             14 STORE_FAST               5 (item)

  9          16 LOAD_FAST                3 (s_list)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                5 (item)
             22 CALL_METHOD              1
             24 POP_TOP
             26 JUMP_ABSOLUTE           12

 11     >>   28 LOAD_FAST                2 (t)
             30 GET_ITER
        >>   32 FOR_ITER                14 (to 48)
             34 STORE_FAST               5 (item)

 12          36 LOAD_FAST                4 (t_list)
             38 LOAD_METHOD              0 (append)
             40 LOAD_FAST                5 (item)
             42 CALL_METHOD              1
             44 POP_TOP
             46 JUMP_ABSOLUTE           32

 15     >>   48 LOAD_FAST                3 (s_list)
             50 GET_ITER
        >>   52 FOR_ITER                30 (to 84)
             54 STORE_FAST               5 (item)

 18          56 LOAD_FAST                5 (item)
             58 LOAD_FAST                4 (t_list)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       76

 20          64 LOAD_FAST                4 (t_list)
             66 LOAD_METHOD              1 (remove)
             68 LOAD_FAST                5 (item)
             70 CALL_METHOD              1
             72 POP_TOP
             74 JUMP_ABSOLUTE           52

 24     >>   76 POP_TOP
             78 LOAD_CONST               1 (False)
             80 RETURN_VALUE
             82 JUMP_ABSOLUTE           52

 27     >>   84 LOAD_FAST                4 (t_list)
             86 POP_JUMP_IF_TRUE        92

 29          88 LOAD_CONST               2 (True)
             90 RETURN_VALUE
        >>   92 LOAD_CONST               0 (None)
             94 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s, t):
        return Counter(s) == Counter(t)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f810cf955b0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f810cf955b0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object isAnagram at 0x7f810cf95500, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f810cf95500, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
      char_count = {}
      for char in s: char_count[char] = char_count.get(char, 0) + 1
      for char in t: char_count[char] = char_count.get(char, 0) - 1
      return False not in [char_count[char] == 0 for char in char_count]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa1f45753a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa1f45753a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fa1f45752f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fa1f45752f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_DEREF              0 (char_count)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                24 (to 34)
             10 STORE_FAST               3 (char)
             12 LOAD_DEREF               0 (char_count)
             14 LOAD_METHOD              0 (get)
             16 LOAD_FAST                3 (char)
             18 LOAD_CONST               1 (0)
             20 CALL_METHOD              2
             22 LOAD_CONST               2 (1)
             24 BINARY_ADD
             26 LOAD_DEREF               0 (char_count)
             28 LOAD_FAST                3 (char)
             30 STORE_SUBSCR
             32 JUMP_ABSOLUTE            8

  5     >>   34 LOAD_FAST                2 (t)
             36 GET_ITER
        >>   38 FOR_ITER                24 (to 64)
             40 STORE_FAST               3 (char)
             42 LOAD_DEREF               0 (char_count)
             44 LOAD_METHOD              0 (get)
             46 LOAD_FAST                3 (char)
             48 LOAD_CONST               1 (0)
             50 CALL_METHOD              2
             52 LOAD_CONST               2 (1)
             54 BINARY_SUBTRACT
             56 LOAD_DEREF               0 (char_count)
             58 LOAD_FAST                3 (char)
             60 STORE_SUBSCR
             62 JUMP_ABSOLUTE           38

  6     >>   64 LOAD_CONST               3 (False)
             66 LOAD_CLOSURE             0 (char_count)
             68 BUILD_TUPLE              1
             70 LOAD_CONST               4 (<code object <listcomp> at 0x7fa1f4575240, file ""<ast>"", line 6>)
             72 LOAD_CONST               5 ('Solution.isAnagram.<locals>.<listcomp>')
             74 MAKE_FUNCTION            8 (closure)
             76 LOAD_DEREF               0 (char_count)
             78 GET_ITER
             80 CALL_FUNCTION            1
             82 COMPARE_OP               7 (not in)
             84 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fa1f4575240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (char)
              8 LOAD_DEREF               0 (char_count)
             10 LOAD_FAST                1 (char)
             12 BINARY_SUBSCR
             14 LOAD_CONST               0 (0)
             16 COMPARE_OP               2 (==)
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        >>   22 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        count={}
        for i in s:
            if i in count:
                count[i] +=1
            else:
                count[i]=1
        for i in t:
            if i in count:
                count[i] -=1
            else:
                count[i]=1
        for k in count:
            if count[k]!=0:
                return False
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f24f1c05240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24f1c05240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f24f1c052f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f24f1c052f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (count)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                38 (to 48)
             10 STORE_FAST               4 (i)

  5          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (count)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       38

  6          20 LOAD_FAST                3 (count)
             22 LOAD_FAST                4 (i)
             24 DUP_TOP_TWO
             26 BINARY_SUBSCR
             28 LOAD_CONST               1 (1)
             30 INPLACE_ADD
             32 ROT_THREE
             34 STORE_SUBSCR
             36 JUMP_ABSOLUTE            8

  8     >>   38 LOAD_CONST               1 (1)
             40 LOAD_FAST                3 (count)
             42 LOAD_FAST                4 (i)
             44 STORE_SUBSCR
             46 JUMP_ABSOLUTE            8

  9     >>   48 LOAD_FAST                2 (t)
             50 GET_ITER
        >>   52 FOR_ITER                38 (to 92)
             54 STORE_FAST               4 (i)

 10          56 LOAD_FAST                4 (i)
             58 LOAD_FAST                3 (count)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 11          64 LOAD_FAST                3 (count)
             66 LOAD_FAST                4 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_CONST               1 (1)
             74 INPLACE_SUBTRACT
             76 ROT_THREE
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           52

 13     >>   82 LOAD_CONST               1 (1)
             84 LOAD_FAST                3 (count)
             86 LOAD_FAST                4 (i)
             88 STORE_SUBSCR
             90 JUMP_ABSOLUTE           52

 14     >>   92 LOAD_FAST                3 (count)
             94 GET_ITER
        >>   96 FOR_ITER                22 (to 120)
             98 STORE_FAST               5 (k)

 15         100 LOAD_FAST                3 (count)
            102 LOAD_FAST                5 (k)
            104 BINARY_SUBSCR
            106 LOAD_CONST               2 (0)
            108 COMPARE_OP               3 (!=)
            110 POP_JUMP_IF_FALSE       96

 16         112 POP_TOP
            114 LOAD_CONST               3 (False)
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           96

 17     >>  120 LOAD_CONST               4 (True)
            122 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        obj1 = {}
        obj2 = {}
        
        for i in s:
            if i not in obj1:
                obj1[i] = 1
            else:
                obj1[i] += 1
        
        for i in t:
            if i not in obj2:
                obj2[i] = 1
            else:
                obj2[i] += 1
                
        return obj1 == obj2    # In python you can compare dictionaries
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f48fc005240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f48fc005240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f48fc0052f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f48fc0052f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (obj1)

  4           4 BUILD_MAP                0
              6 STORE_FAST               4 (obj2)

  6           8 LOAD_FAST                1 (s)
             10 GET_ITER
        >>   12 FOR_ITER                38 (to 52)
             14 STORE_FAST               5 (i)

  7          16 LOAD_FAST                5 (i)
             18 LOAD_FAST                3 (obj1)
             20 COMPARE_OP               7 (not in)
             22 POP_JUMP_IF_FALSE       34

  8          24 LOAD_CONST               1 (1)
             26 LOAD_FAST                3 (obj1)
             28 LOAD_FAST                5 (i)
             30 STORE_SUBSCR
             32 JUMP_ABSOLUTE           12

 10     >>   34 LOAD_FAST                3 (obj1)
             36 LOAD_FAST                5 (i)
             38 DUP_TOP_TWO
             40 BINARY_SUBSCR
             42 LOAD_CONST               1 (1)
             44 INPLACE_ADD
             46 ROT_THREE
             48 STORE_SUBSCR
             50 JUMP_ABSOLUTE           12

 12     >>   52 LOAD_FAST                2 (t)
             54 GET_ITER
        >>   56 FOR_ITER                38 (to 96)
             58 STORE_FAST               5 (i)

 13          60 LOAD_FAST                5 (i)
             62 LOAD_FAST                4 (obj2)
             64 COMPARE_OP               7 (not in)
             66 POP_JUMP_IF_FALSE       78

 14          68 LOAD_CONST               1 (1)
             70 LOAD_FAST                4 (obj2)
             72 LOAD_FAST                5 (i)
             74 STORE_SUBSCR
             76 JUMP_ABSOLUTE           56

 16     >>   78 LOAD_FAST                4 (obj2)
             80 LOAD_FAST                5 (i)
             82 DUP_TOP_TWO
             84 BINARY_SUBSCR
             86 LOAD_CONST               1 (1)
             88 INPLACE_ADD
             90 ROT_THREE
             92 STORE_SUBSCR
             94 JUMP_ABSOLUTE           56

 18     >>   96 LOAD_FAST                3 (obj1)
             98 LOAD_FAST                4 (obj2)
            100 COMPARE_OP               2 (==)
            102 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s, t):
        h = {}
        for i in s:
            if i not in h:
                h[i] = 0
            h[i] += 1
                
        for j in t:
            if j not in h:
                h[j] = 0
            h[j] -= 1
        
        for key in h.keys():
            if h[key] != 0:
                return False
            
        return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f844acf5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f844acf5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isAnagram at 0x7f844acf52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isAnagram')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isAnagram)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f844acf52f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               3 (h)

  4           4 LOAD_FAST                1 (s)
              6 GET_ITER
        >>    8 FOR_ITER                36 (to 46)
             10 STORE_FAST               4 (i)

  5          12 LOAD_FAST                4 (i)
             14 LOAD_FAST                3 (h)
             16 COMPARE_OP               7 (not in)
             18 POP_JUMP_IF_FALSE       28

  6          20 LOAD_CONST               1 (0)
             22 LOAD_FAST                3 (h)
             24 LOAD_FAST                4 (i)
             26 STORE_SUBSCR

  7     >>   28 LOAD_FAST                3 (h)
             30 LOAD_FAST                4 (i)
             32 DUP_TOP_TWO
             34 BINARY_SUBSCR
             36 LOAD_CONST               2 (1)
             38 INPLACE_ADD
             40 ROT_THREE
             42 STORE_SUBSCR
             44 JUMP_ABSOLUTE            8

  9     >>   46 LOAD_FAST                2 (t)
             48 GET_ITER
        >>   50 FOR_ITER                36 (to 88)
             52 STORE_FAST               5 (j)

 10          54 LOAD_FAST                5 (j)
             56 LOAD_FAST                3 (h)
             58 COMPARE_OP               7 (not in)
             60 POP_JUMP_IF_FALSE       70

 11          62 LOAD_CONST               1 (0)
             64 LOAD_FAST                3 (h)
             66 LOAD_FAST                5 (j)
             68 STORE_SUBSCR

 12     >>   70 LOAD_FAST                3 (h)
             72 LOAD_FAST                5 (j)
             74 DUP_TOP_TWO
             76 BINARY_SUBSCR
             78 LOAD_CONST               2 (1)
             80 INPLACE_SUBTRACT
             82 ROT_THREE
             84 STORE_SUBSCR
             86 JUMP_ABSOLUTE           50

 14     >>   88 LOAD_FAST                3 (h)
             90 LOAD_METHOD              0 (keys)
             92 CALL_METHOD              0
             94 GET_ITER
        >>   96 FOR_ITER                22 (to 120)
             98 STORE_FAST               6 (key)

 15         100 LOAD_FAST                3 (h)
            102 LOAD_FAST                6 (key)
            104 BINARY_SUBSCR
            106 LOAD_CONST               1 (0)
            108 COMPARE_OP               3 (!=)
            110 POP_JUMP_IF_FALSE       96

 16         112 POP_TOP
            114 LOAD_CONST               3 (False)
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           96

 18     >>  120 LOAD_CONST               4 (True)
            122 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return(Counter(s) == Counter(t))
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f354bb55500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f354bb55500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f354bb55450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f354bb55450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return(sorted(s) == sorted(t))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb33fe25500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb33fe25500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7fb33fe25450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7fb33fe25450, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (sorted)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (sorted)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(t) == Counter(s)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f881a5e5500, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f881a5e5500, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f881a5e5450, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f881a5e5450, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                2 (t)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                1 (s)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        return Counter(s) == Counter(t)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f6fd0dc5500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6fd0dc5500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f6fd0dc5450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f6fd0dc5450, file ""<ast>"", line 3>:
  5           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f16d3985500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f16d3985500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f16d3985450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f16d3985450, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isAnagram,"from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        ## RC ##
        ## APPROACH : Counter ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(1) ##
        return Counter(s) == Counter(t)

","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f0e90755500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0e90755500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (bool)
             14 LOAD_CONST               1 (('s', 't', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object isAnagram at 0x7f0e90755450, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.isAnagram')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (isAnagram)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object isAnagram at 0x7f0e90755450, file ""<ast>"", line 3>:
  8           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (Counter)
              8 LOAD_FAST                2 (t)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               2 (==)
             14 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe206fa52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe206fa52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fe206fa5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fe206fa5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x) -> bool:
        if x<0:
            return False 
        else:
            x = str(x)
            x = [item for item in x]
            if len(x)%2 ==0:
                part1 = x[0:int(len(x)/2)]
                part2 = x[int(len(x)/2):]
                if part1 == part2[::-1]:
                    return True 
                else:
                    return False 
            else:
                part1 = x[0:int(len(x)/2)]
                part2 = x[int(len(x)/2)+1:]
                if part1 == part2[::-1]:
                    return True 
                else:
                    return False 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6a528453a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6a528453a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (bool)
             10 LOAD_CONST               1 (('return',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object isPalindrome at 0x7f6a528452f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.isPalindrome')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (isPalindrome)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f6a528452f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               1 (x)

  7          20 LOAD_CONST               3 (<code object <listcomp> at 0x7f6a52845240, file ""<ast>"", line 7>)
             22 LOAD_CONST               4 ('Solution.isPalindrome.<locals>.<listcomp>')
             24 MAKE_FUNCTION            0
             26 LOAD_FAST                1 (x)
             28 GET_ITER
             30 CALL_FUNCTION            1
             32 STORE_FAST               1 (x)

  8          34 LOAD_GLOBAL              1 (len)
             36 LOAD_FAST                1 (x)
             38 CALL_FUNCTION            1
             40 LOAD_CONST               5 (2)
             42 BINARY_MODULO
             44 LOAD_CONST               1 (0)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE      126

  9          50 LOAD_FAST                1 (x)
             52 LOAD_CONST               1 (0)
             54 LOAD_GLOBAL              2 (int)
             56 LOAD_GLOBAL              1 (len)
             58 LOAD_FAST                1 (x)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               5 (2)
             64 BINARY_TRUE_DIVIDE
             66 CALL_FUNCTION            1
             68 BUILD_SLICE              2
             70 BINARY_SUBSCR
             72 STORE_FAST               2 (part1)

 10          74 LOAD_FAST                1 (x)
             76 LOAD_GLOBAL              2 (int)
             78 LOAD_GLOBAL              1 (len)
             80 LOAD_FAST                1 (x)
             82 CALL_FUNCTION            1
             84 LOAD_CONST               5 (2)
             86 BINARY_TRUE_DIVIDE
             88 CALL_FUNCTION            1
             90 LOAD_CONST               0 (None)
             92 BUILD_SLICE              2
             94 BINARY_SUBSCR
             96 STORE_FAST               3 (part2)

 11          98 LOAD_FAST                2 (part1)
            100 LOAD_FAST                3 (part2)
            102 LOAD_CONST               0 (None)
            104 LOAD_CONST               0 (None)
            106 LOAD_CONST               6 (-1)
            108 BUILD_SLICE              3
            110 BINARY_SUBSCR
            112 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_FALSE      120

 12         116 LOAD_CONST               7 (True)
            118 RETURN_VALUE

 14     >>  120 LOAD_CONST               2 (False)
            122 RETURN_VALUE
            124 JUMP_FORWARD            78 (to 204)

 16     >>  126 LOAD_FAST                1 (x)
            128 LOAD_CONST               1 (0)
            130 LOAD_GLOBAL              2 (int)
            132 LOAD_GLOBAL              1 (len)
            134 LOAD_FAST                1 (x)
            136 CALL_FUNCTION            1
            138 LOAD_CONST               5 (2)
            140 BINARY_TRUE_DIVIDE
            142 CALL_FUNCTION            1
            144 BUILD_SLICE              2
            146 BINARY_SUBSCR
            148 STORE_FAST               2 (part1)

 17         150 LOAD_FAST                1 (x)
            152 LOAD_GLOBAL              2 (int)
            154 LOAD_GLOBAL              1 (len)
            156 LOAD_FAST                1 (x)
            158 CALL_FUNCTION            1
            160 LOAD_CONST               5 (2)
            162 BINARY_TRUE_DIVIDE
            164 CALL_FUNCTION            1
            166 LOAD_CONST               8 (1)
            168 BINARY_ADD
            170 LOAD_CONST               0 (None)
            172 BUILD_SLICE              2
            174 BINARY_SUBSCR
            176 STORE_FAST               3 (part2)

 18         178 LOAD_FAST                2 (part1)
            180 LOAD_FAST                3 (part2)
            182 LOAD_CONST               0 (None)
            184 LOAD_CONST               0 (None)
            186 LOAD_CONST               6 (-1)
            188 BUILD_SLICE              3
            190 BINARY_SUBSCR
            192 COMPARE_OP               2 (==)
            194 POP_JUMP_IF_FALSE      200

 19         196 LOAD_CONST               7 (True)
            198 RETURN_VALUE

 21     >>  200 LOAD_CONST               2 (False)
            202 RETURN_VALUE
        >>  204 LOAD_CONST               0 (None)
            206 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f6a52845240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (item)
              8 LOAD_FAST                1 (item)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
isPalindrome,"class Solution(object):
    def isPalindrome(self, x):
        """"""
        :type x: int
        :rtype: bool
        """"""
		# always false if negative
        if x < 0:
            return False
        arr = []
        while x != 0:
            x, r = divmod(x, 10) # Divide by 10, see the remainder
            arr.append(r)
        return arr==arr[::-1]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcb6b2452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcb6b2452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7fcb6b245240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fcb6b245240, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  9           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

 10     >>   12 BUILD_LIST               0
             14 STORE_FAST               2 (arr)

 11     >>   16 LOAD_FAST                1 (x)
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               3 (!=)
             22 POP_JUMP_IF_FALSE       50

 12          24 LOAD_GLOBAL              0 (divmod)
             26 LOAD_FAST                1 (x)
             28 LOAD_CONST               3 (10)
             30 CALL_FUNCTION            2
             32 UNPACK_SEQUENCE          2
             34 STORE_FAST               1 (x)
             36 STORE_FAST               3 (r)

 13          38 LOAD_FAST                2 (arr)
             40 LOAD_METHOD              1 (append)
             42 LOAD_FAST                3 (r)
             44 CALL_METHOD              1
             46 POP_TOP
             48 JUMP_ABSOLUTE           16

 14     >>   50 LOAD_FAST                2 (arr)
             52 LOAD_FAST                2 (arr)
             54 LOAD_CONST               4 (None)
             56 LOAD_CONST               4 (None)
             58 LOAD_CONST               5 (-1)
             60 BUILD_SLICE              3
             62 BINARY_SUBSCR
             64 COMPARE_OP               2 (==)
             66 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return True if str(x) == str(x)[::-1] else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffe4f0052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffe4f0052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7ffe4f005240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7ffe4f005240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               2 (True)
             28 RETURN_VALUE
        >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"class Solution(object):
    def isPalindrome(self, x):
        """"""
        :type x: int
        :rtype: bool
        """"""
        s=str(x)
        d=s[::-1]
        return s==d
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3ae64c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3ae64c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7f3ae64c5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f3ae64c5240, file ""<ast>"", line 2>:
  7           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (s)

  8           8 LOAD_FAST                2 (s)
             10 LOAD_CONST               1 (None)
             12 LOAD_CONST               1 (None)
             14 LOAD_CONST               2 (-1)
             16 BUILD_SLICE              3
             18 BINARY_SUBSCR
             20 STORE_FAST               3 (d)

  9          22 LOAD_FAST                2 (s)
             24 LOAD_FAST                3 (d)
             26 COMPARE_OP               2 (==)
             28 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if(x<0):
            return False
        else:
            x1=x
            count=0
            rev=0
            while(x1>0):
                count+=1
                x1//=10
            if(count==1):
                return True
            length=count
            count//=2
            if(length%2==0):
                s=x//(10**count)
                s1=x%(10**count)
                while(s>0):
                    rev=rev*10+(s%10)
                    s=s//10
                if(s1==rev):
                    return True
            else:
                s=x//(10**(count+1))
                s1=x%(10**count)
                while(s>0):
                    rev=rev*10+(s%10)
                    s=s//10
                print(rev)
                
                if(s1==rev):
                    return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3eaab452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3eaab452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f3eaab45240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f3eaab45240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (x)
             14 STORE_FAST               2 (x1)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (count)

  8          20 LOAD_CONST               1 (0)
             22 STORE_FAST               4 (rev)

  9     >>   24 LOAD_FAST                2 (x1)
             26 LOAD_CONST               1 (0)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       50

 10          32 LOAD_FAST                3 (count)
             34 LOAD_CONST               3 (1)
             36 INPLACE_ADD
             38 STORE_FAST               3 (count)

 11          40 LOAD_FAST                2 (x1)
             42 LOAD_CONST               4 (10)
             44 INPLACE_FLOOR_DIVIDE
             46 STORE_FAST               2 (x1)
             48 JUMP_ABSOLUTE           24

 12     >>   50 LOAD_FAST                3 (count)
             52 LOAD_CONST               3 (1)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       62

 13          58 LOAD_CONST               5 (True)
             60 RETURN_VALUE

 14     >>   62 LOAD_FAST                3 (count)
             64 STORE_FAST               5 (length)

 15          66 LOAD_FAST                3 (count)
             68 LOAD_CONST               6 (2)
             70 INPLACE_FLOOR_DIVIDE
             72 STORE_FAST               3 (count)

 16          74 LOAD_FAST                5 (length)
             76 LOAD_CONST               6 (2)
             78 BINARY_MODULO
             80 LOAD_CONST               1 (0)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE      158

 17          86 LOAD_FAST                1 (x)
             88 LOAD_CONST               4 (10)
             90 LOAD_FAST                3 (count)
             92 BINARY_POWER
             94 BINARY_FLOOR_DIVIDE
             96 STORE_FAST               6 (s)

 18          98 LOAD_FAST                1 (x)
            100 LOAD_CONST               4 (10)
            102 LOAD_FAST                3 (count)
            104 BINARY_POWER
            106 BINARY_MODULO
            108 STORE_FAST               7 (s1)

 19     >>  110 LOAD_FAST                6 (s)
            112 LOAD_CONST               1 (0)
            114 COMPARE_OP               4 (>)
            116 POP_JUMP_IF_FALSE      144

 20         118 LOAD_FAST                4 (rev)
            120 LOAD_CONST               4 (10)
            122 BINARY_MULTIPLY
            124 LOAD_FAST                6 (s)
            126 LOAD_CONST               4 (10)
            128 BINARY_MODULO
            130 BINARY_ADD
            132 STORE_FAST               4 (rev)

 21         134 LOAD_FAST                6 (s)
            136 LOAD_CONST               4 (10)
            138 BINARY_FLOOR_DIVIDE
            140 STORE_FAST               6 (s)
            142 JUMP_ABSOLUTE          110

 22     >>  144 LOAD_FAST                7 (s1)
            146 LOAD_FAST                4 (rev)
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      240

 23         152 LOAD_CONST               5 (True)
            154 RETURN_VALUE
            156 JUMP_FORWARD            82 (to 240)

 25     >>  158 LOAD_FAST                1 (x)
            160 LOAD_CONST               4 (10)
            162 LOAD_FAST                3 (count)
            164 LOAD_CONST               3 (1)
            166 BINARY_ADD
            168 BINARY_POWER
            170 BINARY_FLOOR_DIVIDE
            172 STORE_FAST               6 (s)

 26         174 LOAD_FAST                1 (x)
            176 LOAD_CONST               4 (10)
            178 LOAD_FAST                3 (count)
            180 BINARY_POWER
            182 BINARY_MODULO
            184 STORE_FAST               7 (s1)

 27     >>  186 LOAD_FAST                6 (s)
            188 LOAD_CONST               1 (0)
            190 COMPARE_OP               4 (>)
            192 POP_JUMP_IF_FALSE      220

 28         194 LOAD_FAST                4 (rev)
            196 LOAD_CONST               4 (10)
            198 BINARY_MULTIPLY
            200 LOAD_FAST                6 (s)
            202 LOAD_CONST               4 (10)
            204 BINARY_MODULO
            206 BINARY_ADD
            208 STORE_FAST               4 (rev)

 29         210 LOAD_FAST                6 (s)
            212 LOAD_CONST               4 (10)
            214 BINARY_FLOOR_DIVIDE
            216 STORE_FAST               6 (s)
            218 JUMP_ABSOLUTE          186

 30     >>  220 LOAD_GLOBAL              0 (print)
            222 LOAD_FAST                4 (rev)
            224 CALL_FUNCTION            1
            226 POP_TOP

 32         228 LOAD_FAST                7 (s1)
            230 LOAD_FAST                4 (rev)
            232 COMPARE_OP               2 (==)
            234 POP_JUMP_IF_FALSE      240

 33         236 LOAD_CONST               5 (True)
            238 RETURN_VALUE
        >>  240 LOAD_CONST               0 (None)
            242 RETURN_VALUE
None
"
isPalindrome,"class Solution:
        def isPalindrome(self, x):
                return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f637c0952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f637c0952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isPalindrome at 0x7f637c095240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isPalindrome')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isPalindrome)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f637c095240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        
        ## RC ##
        ## APPROACH : covert the second half of the integer and compare with first half ##
        
        # Special cases:
        # when x < 0, x is not a palindrome.
        # Also if the last digit of the number is 0, in order to be a palindrome,
        # the first digit of the number also needs to be 0.
        # Only 0 satisfy this property.
        if(x < 0 or (x % 10 == 0 and x != 0)) : return False

        revertedNumber = 0
        while(x > revertedNumber):                      # indicates half completed.
            revertedNumber = revertedNumber * 10 + x % 10
            x = x // 10

        # When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
        # For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
        # since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.
        return x == revertedNumber or x == revertedNumber//10;
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe47ce052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe47ce052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fe47ce05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fe47ce05240, file ""<ast>"", line 2>:
 12           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (10)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       32
             20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               3 (!=)
             26 POP_JUMP_IF_FALSE       32
        >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

 14     >>   32 LOAD_CONST               1 (0)
             34 STORE_FAST               2 (revertedNumber)

 15     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                2 (revertedNumber)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       70

 16          44 LOAD_FAST                2 (revertedNumber)
             46 LOAD_CONST               2 (10)
             48 BINARY_MULTIPLY
             50 LOAD_FAST                1 (x)
             52 LOAD_CONST               2 (10)
             54 BINARY_MODULO
             56 BINARY_ADD
             58 STORE_FAST               2 (revertedNumber)

 17          60 LOAD_FAST                1 (x)
             62 LOAD_CONST               2 (10)
             64 BINARY_FLOOR_DIVIDE
             66 STORE_FAST               1 (x)
             68 JUMP_ABSOLUTE           36

 22     >>   70 LOAD_FAST                1 (x)
             72 LOAD_FAST                2 (revertedNumber)
             74 COMPARE_OP               2 (==)
             76 JUMP_IF_TRUE_OR_POP     88
             78 LOAD_FAST                1 (x)
             80 LOAD_FAST                2 (revertedNumber)
             82 LOAD_CONST               2 (10)
             84 BINARY_FLOOR_DIVIDE
             86 COMPARE_OP               2 (==)
        >>   88 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if not x:
            return True
        elif x < 0:
            return False
        
        old_x = x
        new_x = 0
        
        while old_x:
            (t, r) = divmod(old_x, 10)
            new_x = new_x * 10 + r
            old_x = t

        return new_x == x
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdb1b9f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdb1b9f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fdb1b9f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fdb1b9f5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

  6          16 LOAD_CONST               3 (False)
             18 RETURN_VALUE

  8     >>   20 LOAD_FAST                1 (x)
             22 STORE_FAST               2 (old_x)

  9          24 LOAD_CONST               2 (0)
             26 STORE_FAST               3 (new_x)

 11     >>   28 LOAD_FAST                2 (old_x)
             30 POP_JUMP_IF_FALSE       64

 12          32 LOAD_GLOBAL              0 (divmod)
             34 LOAD_FAST                2 (old_x)
             36 LOAD_CONST               4 (10)
             38 CALL_FUNCTION            2
             40 UNPACK_SEQUENCE          2
             42 STORE_FAST               4 (t)
             44 STORE_FAST               5 (r)

 13          46 LOAD_FAST                3 (new_x)
             48 LOAD_CONST               4 (10)
             50 BINARY_MULTIPLY
             52 LOAD_FAST                5 (r)
             54 BINARY_ADD
             56 STORE_FAST               3 (new_x)

 14          58 LOAD_FAST                4 (t)
             60 STORE_FAST               2 (old_x)
             62 JUMP_ABSOLUTE           28

 16     >>   64 LOAD_FAST                3 (new_x)
             66 LOAD_FAST                1 (x)
             68 COMPARE_OP               2 (==)
             70 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        n=str(x)
        i,j=0,len(n)-1
        while j>=i:
            if n[i]==n[j]:
                i+=1
                j-=1
            else:
                return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f12df6752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f12df6752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f12df675240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f12df675240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (n)

  6          20 LOAD_CONST               1 (0)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                2 (n)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               3 (1)
             30 BINARY_SUBTRACT
             32 ROT_TWO
             34 STORE_FAST               3 (i)
             36 STORE_FAST               4 (j)

  7     >>   38 LOAD_FAST                4 (j)
             40 LOAD_FAST                3 (i)
             42 COMPARE_OP               5 (>=)
             44 POP_JUMP_IF_FALSE       86

  8          46 LOAD_FAST                2 (n)
             48 LOAD_FAST                3 (i)
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (n)
             54 LOAD_FAST                4 (j)
             56 BINARY_SUBSCR
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       80

  9          62 LOAD_FAST                3 (i)
             64 LOAD_CONST               3 (1)
             66 INPLACE_ADD
             68 STORE_FAST               3 (i)

 10          70 LOAD_FAST                4 (j)
             72 LOAD_CONST               3 (1)
             74 INPLACE_SUBTRACT
             76 STORE_FAST               4 (j)
             78 JUMP_ABSOLUTE           38

 12     >>   80 LOAD_CONST               2 (False)
             82 RETURN_VALUE
             84 JUMP_ABSOLUTE           38

 13     >>   86 LOAD_CONST               4 (True)
             88 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        half = len(str(x))//2
        string = str(x)
        for i in range(0,half):
            if string[i] == string[-i-1]:
                continue
            else:
                return False
                break
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f049cac52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f049cac52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f049cac5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f049cac5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1
              8 CALL_FUNCTION            1
             10 LOAD_CONST               1 (2)
             12 BINARY_FLOOR_DIVIDE
             14 STORE_FAST               2 (half)

  4          16 LOAD_GLOBAL              1 (str)
             18 LOAD_FAST                1 (x)
             20 CALL_FUNCTION            1
             22 STORE_FAST               3 (string)

  5          24 LOAD_GLOBAL              2 (range)
             26 LOAD_CONST               2 (0)
             28 LOAD_FAST                2 (half)
             30 CALL_FUNCTION            2
             32 GET_ITER
        >>   34 FOR_ITER                36 (to 72)
             36 STORE_FAST               4 (i)

  6          38 LOAD_FAST                3 (string)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                3 (string)
             46 LOAD_FAST                4 (i)
             48 UNARY_NEGATIVE
             50 LOAD_CONST               3 (1)
             52 BINARY_SUBTRACT
             54 BINARY_SUBSCR
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

  7          60 JUMP_ABSOLUTE           34
             62 JUMP_ABSOLUTE           34

  9     >>   64 POP_TOP
             66 LOAD_CONST               4 (False)
             68 RETURN_VALUE

 10          70 JUMP_ABSOLUTE           34

 11     >>   72 LOAD_CONST               5 (True)
             74 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        x_s = str(x)
        return x_s == x_s[::-1] 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f57b90852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f57b90852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f57b9085240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f57b9085240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (x_s)

  6          20 LOAD_FAST                2 (x_s)
             22 LOAD_FAST                2 (x_s)
             24 LOAD_CONST               0 (None)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               3 (-1)
             30 BUILD_SLICE              3
             32 BINARY_SUBSCR
             34 COMPARE_OP               2 (==)
             36 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return x >= 0 and x == int(f""{x}""[::-1])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0c9a7652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0c9a7652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f0c9a765240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f0c9a765240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               5 (>=)
              6 JUMP_IF_FALSE_OR_POP    30
              8 LOAD_FAST                1 (x)
             10 LOAD_GLOBAL              0 (int)
             12 LOAD_FAST                1 (x)
             14 FORMAT_VALUE             0
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               0 (None)
             20 LOAD_CONST               2 (-1)
             22 BUILD_SLICE              3
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if str(x)==str(x)[::-1]:
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7faae7dd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7faae7dd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7faae7dd5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7faae7dd5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30

  4          26 LOAD_CONST               2 (True)
             28 RETURN_VALUE

  5     >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        return True if str(x) == str(x)[::-1] else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa023a052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa023a052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fa023a05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fa023a05240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 LOAD_FAST                1 (x)
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               2 (True)
             28 RETURN_VALUE
        >>   30 LOAD_CONST               3 (False)
             32 RETURN_VALUE
None
"
isPalindrome,"from collections import deque
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x<0:
            return False
        d=deque(str(x))
        while d:
            l=d.popleft()
            if d: #For odd cases like 121,422 
                r=d.pop()
                if int(l)!=int(r):
                    return False
        return True
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fb4085352f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb4085352f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fb408535240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fb408535240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (deque)
             14 LOAD_GLOBAL              1 (str)
             16 LOAD_FAST                1 (x)
             18 CALL_FUNCTION            1
             20 CALL_FUNCTION            1
             22 STORE_FAST               2 (d)

  7     >>   24 LOAD_FAST                2 (d)
             26 POP_JUMP_IF_FALSE       70

  8          28 LOAD_FAST                2 (d)
             30 LOAD_METHOD              2 (popleft)
             32 CALL_METHOD              0
             34 STORE_FAST               3 (l)

  9          36 LOAD_FAST                2 (d)
             38 POP_JUMP_IF_FALSE       24

 10          40 LOAD_FAST                2 (d)
             42 LOAD_METHOD              3 (pop)
             44 CALL_METHOD              0
             46 STORE_FAST               4 (r)

 11          48 LOAD_GLOBAL              4 (int)
             50 LOAD_FAST                3 (l)
             52 CALL_FUNCTION            1
             54 LOAD_GLOBAL              4 (int)
             56 LOAD_FAST                4 (r)
             58 CALL_FUNCTION            1
             60 COMPARE_OP               3 (!=)
             62 POP_JUMP_IF_FALSE       24

 12          64 LOAD_CONST               2 (False)
             66 RETURN_VALUE
             68 JUMP_ABSOLUTE           24

 13     >>   70 LOAD_CONST               3 (True)
             72 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x < 0:
			return False
		
		return str(x) == str(x)[::-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f23a27a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f23a27a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7f23a27a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7f23a27a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (str)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 LOAD_GLOBAL              0 (str)
             20 LOAD_FAST                1 (x)
             22 CALL_FUNCTION            1
             24 LOAD_CONST               0 (None)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               3 (-1)
             30 BUILD_SLICE              3
             32 BINARY_SUBSCR
             34 COMPARE_OP               2 (==)
             36 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x<0:
			return False

		inputNum = x
		newNum = 0
		while x>0:
			newNum = newNum * 10 + x%10
			x = x//10
		return newNum == inputNum
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fea809852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fea809852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fea80985240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fea80985240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (x)
             14 STORE_FAST               2 (inputNum)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (newNum)

  8     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       54

  9          28 LOAD_FAST                3 (newNum)
             30 LOAD_CONST               3 (10)
             32 BINARY_MULTIPLY
             34 LOAD_FAST                1 (x)
             36 LOAD_CONST               3 (10)
             38 BINARY_MODULO
             40 BINARY_ADD
             42 STORE_FAST               3 (newNum)

 10          44 LOAD_FAST                1 (x)
             46 LOAD_CONST               3 (10)
             48 BINARY_FLOOR_DIVIDE
             50 STORE_FAST               1 (x)
             52 JUMP_ABSOLUTE           20

 11     >>   54 LOAD_FAST                3 (newNum)
             56 LOAD_FAST                2 (inputNum)
             58 COMPARE_OP               2 (==)
             60 RETURN_VALUE
None
"
isPalindrome,"class Solution:
	def isPalindrome(self, x: int) -> bool:
		if x < 0 or (x > 0 and x%10 == 0):   # if x is negative, return False. if x is positive and last digit is 0, that also cannot form a palindrome, return False.
			return False
		
		result = 0
		while x > result:
			result = result * 10 + x % 10
			x = x // 10
			
		return True if (x == result or x == result // 10) else False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbc8f6652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbc8f6652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fbc8f665240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fbc8f665240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               4 (>)
             14 POP_JUMP_IF_FALSE       32
             16 LOAD_FAST                1 (x)
             18 LOAD_CONST               2 (10)
             20 BINARY_MODULO
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32

  4     >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

  6     >>   32 LOAD_CONST               1 (0)
             34 STORE_FAST               2 (result)

  7     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                2 (result)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       70

  8          44 LOAD_FAST                2 (result)
             46 LOAD_CONST               2 (10)
             48 BINARY_MULTIPLY
             50 LOAD_FAST                1 (x)
             52 LOAD_CONST               2 (10)
             54 BINARY_MODULO
             56 BINARY_ADD
             58 STORE_FAST               2 (result)

  9          60 LOAD_FAST                1 (x)
             62 LOAD_CONST               2 (10)
             64 BINARY_FLOOR_DIVIDE
             66 STORE_FAST               1 (x)
             68 JUMP_ABSOLUTE           36

 11     >>   70 LOAD_FAST                1 (x)
             72 LOAD_FAST                2 (result)
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_TRUE        90
             78 LOAD_FAST                1 (x)
             80 LOAD_FAST                2 (result)
             82 LOAD_CONST               2 (10)
             84 BINARY_FLOOR_DIVIDE
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       94
        >>   90 LOAD_CONST               4 (True)
             92 RETURN_VALUE
        >>   94 LOAD_CONST               3 (False)
             96 RETURN_VALUE
None
"
isPalindrome,"class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0 or (x % 10 == 0 and x != 0): 
            return False
        else:
            rev = str(x)[::-1]
            if rev == str(x):
                return True
            else: 
                return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdec14152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdec14152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isPalindrome at 0x7fdec1415240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isPalindrome')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isPalindrome)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isPalindrome at 0x7fdec1415240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        28
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (10)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       32
             20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               3 (!=)
             26 POP_JUMP_IF_FALSE       32

  4     >>   28 LOAD_CONST               3 (False)
             30 RETURN_VALUE

  6     >>   32 LOAD_GLOBAL              0 (str)
             34 LOAD_FAST                1 (x)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               0 (None)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               4 (-1)
             44 BUILD_SLICE              3
             46 BINARY_SUBSCR
             48 STORE_FAST               2 (rev)

  7          50 LOAD_FAST                2 (rev)
             52 LOAD_GLOBAL              0 (str)
             54 LOAD_FAST                1 (x)
             56 CALL_FUNCTION            1
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

  8          62 LOAD_CONST               5 (True)
             64 RETURN_VALUE

 10     >>   66 LOAD_CONST               3 (False)
             68 RETURN_VALUE
             70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, n: int) -> bool:
        if n == 0:
            return False
        
        while n%2 == 0:
            n = n/2
        
        while n%3 == 0:
            n = n/3
        
        while n%5 == 0:
            n = n/5

        if n == 1:
            return True
			
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe72c6b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe72c6b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7fe72c6b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7fe72c6b5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  7          24 LOAD_FAST                1 (n)
             26 LOAD_CONST               3 (2)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               1 (n)
             32 JUMP_ABSOLUTE           12

  9     >>   34 LOAD_FAST                1 (n)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                1 (n)
             48 LOAD_CONST               4 (3)
             50 BINARY_TRUE_DIVIDE
             52 STORE_FAST               1 (n)
             54 JUMP_ABSOLUTE           34

 12     >>   56 LOAD_FAST                1 (n)
             58 LOAD_CONST               5 (5)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 13          68 LOAD_FAST                1 (n)
             70 LOAD_CONST               5 (5)
             72 BINARY_TRUE_DIVIDE
             74 STORE_FAST               1 (n)
             76 JUMP_ABSOLUTE           56

 15     >>   78 LOAD_FAST                1 (n)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE       90

 16          86 LOAD_CONST               7 (True)
             88 RETURN_VALUE

 18     >>   90 LOAD_CONST               2 (False)
             92 RETURN_VALUE
None
"
isUgly,"import sys
class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [30, 15, 10, 8, 6, 5, 4, 3, 2]
        for mult in multipliers:
            for _ in range(sys.maxsize):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f6157965240, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6157965240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f61579652f0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f61579652f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  7          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  8     >>   24 LOAD_CONST               4 (30)
             26 LOAD_CONST               5 (15)
             28 LOAD_CONST               6 (10)
             30 LOAD_CONST               7 (8)
             32 LOAD_CONST               8 (6)
             34 LOAD_CONST               9 (5)
             36 LOAD_CONST              10 (4)
             38 LOAD_CONST              11 (3)
             40 LOAD_CONST              12 (2)
             42 BUILD_LIST               9
             44 STORE_FAST               2 (multipliers)

  9          46 LOAD_FAST                2 (multipliers)
             48 GET_ITER
        >>   50 FOR_ITER                70 (to 122)
             52 STORE_FAST               3 (mult)

 10          54 LOAD_GLOBAL              0 (range)
             56 LOAD_GLOBAL              1 (sys)
             58 LOAD_ATTR                2 (maxsize)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                54 (to 120)
             66 STORE_FAST               4 (_)

 11          68 LOAD_FAST                1 (n)
             70 LOAD_METHOD              3 (__mod__)
             72 LOAD_FAST                3 (mult)
             74 CALL_METHOD              1
             76 LOAD_CONST              13 (0)
             78 COMPARE_OP               2 (==)
             80 POP_JUMP_IF_FALSE      114

 12          82 LOAD_GLOBAL              4 (divmod)
             84 LOAD_FAST                1 (n)
             86 LOAD_FAST                3 (mult)
             88 CALL_FUNCTION            2
             90 LOAD_CONST              13 (0)
             92 BINARY_SUBSCR
             94 STORE_FAST               1 (n)

 13          96 LOAD_FAST                1 (n)
             98 LOAD_CONST               1 (1)
            100 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_FALSE      118

 14         104 POP_TOP
            106 POP_TOP
            108 LOAD_CONST               3 (True)
            110 RETURN_VALUE
            112 JUMP_ABSOLUTE           64

 16     >>  114 POP_TOP
            116 JUMP_ABSOLUTE           50
        >>  118 JUMP_ABSOLUTE           64
        >>  120 JUMP_ABSOLUTE           50

 18     >>  122 LOAD_CONST               2 (False)
            124 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num == 0: return False
        while num % 5 == 0: num /= 5
        while num % 3 == 0: num /= 3
        while num % 2 == 0: num /= 2
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3aa36352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3aa36352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f3aa3635240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f3aa3635240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  4     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (5)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34
             24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (5)
             28 INPLACE_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  5     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56
             46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 INPLACE_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

  6     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (2)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78
             68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (2)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

  7     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        while num>0 :
            if num%2==0: num=num//2
            elif num%3==0: num=num//3
            elif num%5==0: num=num//5
            elif num==1: return True
            else: return False
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f95dd2952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f95dd2952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f95dd295240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f95dd295240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       92

  4           8 LOAD_FAST                1 (num)
             10 LOAD_CONST               2 (2)
             12 BINARY_MODULO
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       30
             20 LOAD_FAST                1 (num)
             22 LOAD_CONST               2 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               1 (num)
             28 JUMP_ABSOLUTE            0

  5     >>   30 LOAD_FAST                1 (num)
             32 LOAD_CONST               3 (3)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       52
             42 LOAD_FAST                1 (num)
             44 LOAD_CONST               3 (3)
             46 BINARY_FLOOR_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE            0

  6     >>   52 LOAD_FAST                1 (num)
             54 LOAD_CONST               4 (5)
             56 BINARY_MODULO
             58 LOAD_CONST               1 (0)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       74
             64 LOAD_FAST                1 (num)
             66 LOAD_CONST               4 (5)
             68 BINARY_FLOOR_DIVIDE
             70 STORE_FAST               1 (num)
             72 JUMP_ABSOLUTE            0

  7     >>   74 LOAD_FAST                1 (num)
             76 LOAD_CONST               5 (1)
             78 COMPARE_OP               2 (==)
             80 POP_JUMP_IF_FALSE       86
             82 LOAD_CONST               6 (True)
             84 RETURN_VALUE

  8     >>   86 LOAD_CONST               7 (False)
             88 RETURN_VALUE
             90 JUMP_ABSOLUTE            0

  9     >>   92 LOAD_CONST               7 (False)
             94 RETURN_VALUE
None
"
isUgly,"from functools import reduce
class Solution:
    def isUgly(self, num):
            def f(n, p):
                while not n % p:
                    n = n // p           
                return n
            
            P = [num, 2, 3, 5]
            return reduce(f, P) == 1 if num > 0 else False
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('reduce',))
              4 IMPORT_NAME              0 (functools)
              6 IMPORT_FROM              1 (reduce)
              8 STORE_NAME               1 (reduce)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f940dcc53a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f940dcc53a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object isUgly at 0x7f940dcc52f0, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f940dcc52f0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (<code object f at 0x7f940dcc5240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.isUgly.<locals>.f')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (f)

  9           8 LOAD_FAST                1 (num)
             10 LOAD_CONST               3 (2)
             12 LOAD_CONST               4 (3)
             14 LOAD_CONST               5 (5)
             16 BUILD_LIST               4
             18 STORE_FAST               3 (P)

 10          20 LOAD_FAST                1 (num)
             22 LOAD_CONST               6 (0)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       42
             28 LOAD_GLOBAL              0 (reduce)
             30 LOAD_FAST                2 (f)
             32 LOAD_FAST                3 (P)
             34 CALL_FUNCTION            2
             36 LOAD_CONST               7 (1)
             38 COMPARE_OP               2 (==)
             40 RETURN_VALUE
        >>   42 LOAD_CONST               8 (False)
             44 RETURN_VALUE

Disassembly of <code object f at 0x7f940dcc5240, file ""<ast>"", line 4>:
  5     >>    0 LOAD_FAST                0 (n)
              2 LOAD_FAST                1 (p)
              4 BINARY_MODULO
              6 POP_JUMP_IF_TRUE        18

  6           8 LOAD_FAST                0 (n)
             10 LOAD_FAST                1 (p)
             12 BINARY_FLOOR_DIVIDE
             14 STORE_FAST               0 (n)
             16 JUMP_ABSOLUTE            0

  7     >>   18 LOAD_FAST                0 (n)
             20 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        
        if num == 0:
            # Corner case handle for input 0
            return False
        
        
        given_prime = [2, 3, 5]
        
        for p in given_prime:
        
            while num % p == 0:
                num //= p


        if num == 1:
            return True
        else:
            return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0374b752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0374b752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f0374b75240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f0374b75240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  6           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  9     >>   12 LOAD_CONST               3 (2)
             14 LOAD_CONST               4 (3)
             16 LOAD_CONST               5 (5)
             18 BUILD_LIST               3
             20 STORE_FAST               2 (given_prime)

 11          22 LOAD_FAST                2 (given_prime)
             24 GET_ITER
        >>   26 FOR_ITER                26 (to 54)
             28 STORE_FAST               3 (p)

 13     >>   30 LOAD_FAST                1 (num)
             32 LOAD_FAST                3 (p)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       26

 14          42 LOAD_FAST                1 (num)
             44 LOAD_FAST                3 (p)
             46 INPLACE_FLOOR_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE           30
             52 JUMP_ABSOLUTE           26

 17     >>   54 LOAD_FAST                1 (num)
             56 LOAD_CONST               6 (1)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

 18          62 LOAD_CONST               7 (True)
             64 RETURN_VALUE

 20     >>   66 LOAD_CONST               2 (False)
             68 RETURN_VALUE
             70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num <= 0:
            return False

        primes = [2, 3, 5]
        for prime in primes:
            while num % prime == 0:
                num /= prime
            if num == 1: 
                return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f507a6852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f507a6852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f507a685240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f507a685240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

 10     >>   12 LOAD_CONST               3 (2)
             14 LOAD_CONST               4 (3)
             16 LOAD_CONST               5 (5)
             18 BUILD_LIST               3
             20 STORE_FAST               2 (primes)

 11          22 LOAD_FAST                2 (primes)
             24 GET_ITER
        >>   26 FOR_ITER                40 (to 68)
             28 STORE_FAST               3 (prime)

 12     >>   30 LOAD_FAST                1 (num)
             32 LOAD_FAST                3 (prime)
             34 BINARY_MODULO
             36 LOAD_CONST               1 (0)
             38 COMPARE_OP               2 (==)
             40 POP_JUMP_IF_FALSE       52

 13          42 LOAD_FAST                1 (num)
             44 LOAD_FAST                3 (prime)
             46 INPLACE_TRUE_DIVIDE
             48 STORE_FAST               1 (num)
             50 JUMP_ABSOLUTE           30

 14     >>   52 LOAD_FAST                1 (num)
             54 LOAD_CONST               6 (1)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       26

 15          60 POP_TOP
             62 LOAD_CONST               7 (True)
             64 RETURN_VALUE
             66 JUMP_ABSOLUTE           26

 16     >>   68 LOAD_CONST               2 (False)
             70 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L
        return False if num < 1 or (4570198050078720000000000000)%num != 0 else True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f56dc5052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f56dc5052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f56dc505240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f56dc505240, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_CONST               2 (4570198050078720000000000000)
             10 LOAD_FAST                1 (num)
             12 BINARY_MODULO
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE       24
        >>   20 LOAD_CONST               4 (False)
             22 RETURN_VALUE
        >>   24 LOAD_CONST               5 (True)
             26 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        if num == 1:
            return True
        elif num == 0:
            return False
        
        while num % 2 == 0:
            num = num / 2
        while num % 3 == 0:
            num = num / 3
        while num % 5 == 0:
            num = num / 5
            
        if num == 1:
            return True
        return False","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f330ed55240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f330ed55240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f330ed552f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f330ed552f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               4 (False)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                1 (num)
             26 LOAD_CONST               5 (2)
             28 BINARY_MODULO
             30 LOAD_CONST               3 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       46

  9          36 LOAD_FAST                1 (num)
             38 LOAD_CONST               5 (2)
             40 BINARY_TRUE_DIVIDE
             42 STORE_FAST               1 (num)
             44 JUMP_ABSOLUTE           24

 10     >>   46 LOAD_FAST                1 (num)
             48 LOAD_CONST               6 (3)
             50 BINARY_MODULO
             52 LOAD_CONST               3 (0)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       68

 11          58 LOAD_FAST                1 (num)
             60 LOAD_CONST               6 (3)
             62 BINARY_TRUE_DIVIDE
             64 STORE_FAST               1 (num)
             66 JUMP_ABSOLUTE           46

 12     >>   68 LOAD_FAST                1 (num)
             70 LOAD_CONST               7 (5)
             72 BINARY_MODULO
             74 LOAD_CONST               3 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       90

 13          80 LOAD_FAST                1 (num)
             82 LOAD_CONST               7 (5)
             84 BINARY_TRUE_DIVIDE
             86 STORE_FAST               1 (num)
             88 JUMP_ABSOLUTE           68

 15     >>   90 LOAD_FAST                1 (num)
             92 LOAD_CONST               1 (1)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE      102

 16          98 LOAD_CONST               2 (True)
            100 RETURN_VALUE

 17     >>  102 LOAD_CONST               4 (False)
            104 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num==1:
            return True
        if num<1:
            return False
        while num>1:
            change=False
            for i in [2,3,5]:
                if not num%i:
                    num/=i
                    change=True
            if not change:
                return False
        return num==1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f23acf552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f23acf552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f23acf55240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f23acf55240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       24

 10          20 LOAD_CONST               3 (False)
             22 RETURN_VALUE

 11     >>   24 LOAD_FAST                1 (num)
             26 LOAD_CONST               1 (1)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       76

 12          32 LOAD_CONST               3 (False)
             34 STORE_FAST               2 (change)

 13          36 LOAD_CONST               4 ((2, 3, 5))
             38 GET_ITER
        >>   40 FOR_ITER                24 (to 66)
             42 STORE_FAST               3 (i)

 14          44 LOAD_FAST                1 (num)
             46 LOAD_FAST                3 (i)
             48 BINARY_MODULO
             50 POP_JUMP_IF_TRUE        40

 15          52 LOAD_FAST                1 (num)
             54 LOAD_FAST                3 (i)
             56 INPLACE_TRUE_DIVIDE
             58 STORE_FAST               1 (num)

 16          60 LOAD_CONST               2 (True)
             62 STORE_FAST               2 (change)
             64 JUMP_ABSOLUTE           40

 17     >>   66 LOAD_FAST                2 (change)
             68 POP_JUMP_IF_TRUE        24

 18          70 LOAD_CONST               3 (False)
             72 RETURN_VALUE
             74 JUMP_ABSOLUTE           24

 19     >>   76 LOAD_FAST                1 (num)
             78 LOAD_CONST               1 (1)
             80 COMPARE_OP               2 (==)
             82 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):

        if num <= 0:
            return False

        while num % 5 == 0:
            num /= 5
        while num % 3 == 0:
            num /= 3
        while num % 2 == 0:
            num /= 2

        return num == 1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7feca6e352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7feca6e352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7feca6e35240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7feca6e35240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (5)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  8          24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (5)
             28 INPLACE_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  9     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 INPLACE_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

 11     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (2)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 12          68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (2)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

 14     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num==0:
            return False
        while num%2==0:
            num=num/2
        while num%3==0:
            num=num/3
        while num%5==0:
            num=num/5
        if num==1:
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f577b8552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f577b8552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f577b855240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f577b855240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       34

  6          24 LOAD_FAST                1 (num)
             26 LOAD_CONST               3 (2)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               1 (num)
             32 JUMP_ABSOLUTE           12

  7     >>   34 LOAD_FAST                1 (num)
             36 LOAD_CONST               4 (3)
             38 BINARY_MODULO
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       56

  8          46 LOAD_FAST                1 (num)
             48 LOAD_CONST               4 (3)
             50 BINARY_TRUE_DIVIDE
             52 STORE_FAST               1 (num)
             54 JUMP_ABSOLUTE           34

  9     >>   56 LOAD_FAST                1 (num)
             58 LOAD_CONST               5 (5)
             60 BINARY_MODULO
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       78

 10          68 LOAD_FAST                1 (num)
             70 LOAD_CONST               5 (5)
             72 BINARY_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           56

 11     >>   78 LOAD_FAST                1 (num)
             80 LOAD_CONST               6 (1)
             82 COMPARE_OP               2 (==)
             84 POP_JUMP_IF_FALSE       90

 12          86 LOAD_CONST               7 (True)
             88 RETURN_VALUE

 13     >>   90 LOAD_CONST               2 (False)
             92 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num):
        for p in 2, 3, 5:
            while num % p == 0 < num:
                num /= p
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f36527e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f36527e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f36527e5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f36527e5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ((2, 3, 5))
              2 GET_ITER
        >>    4 FOR_ITER                42 (to 48)
              6 STORE_FAST               2 (p)

  4     >>    8 LOAD_FAST                1 (num)
             10 LOAD_FAST                2 (p)
             12 BINARY_MODULO
             14 LOAD_CONST               2 (0)
             16 DUP_TOP
             18 ROT_THREE
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       32
             24 LOAD_FAST                1 (num)
             26 COMPARE_OP               0 (<)
             28 POP_JUMP_IF_FALSE        4
             30 JUMP_FORWARD             4 (to 36)
        >>   32 POP_TOP
             34 JUMP_ABSOLUTE            4

  5     >>   36 LOAD_FAST                1 (num)
             38 LOAD_FAST                2 (p)
             40 INPLACE_TRUE_DIVIDE
             42 STORE_FAST               1 (num)
             44 JUMP_ABSOLUTE            8
             46 JUMP_ABSOLUTE            4

  6     >>   48 LOAD_FAST                1 (num)
             50 LOAD_CONST               3 (1)
             52 COMPARE_OP               2 (==)
             54 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num < 1: return False
        for factor in [2,3,5]:
            while num % factor == 0:
                num //= factor
        return num == 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f90e06952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f90e06952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f90e0695240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f90e0695240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               3 ((2, 3, 5))
             14 GET_ITER
        >>   16 FOR_ITER                26 (to 44)
             18 STORE_FAST               2 (factor)

  5     >>   20 LOAD_FAST                1 (num)
             22 LOAD_FAST                2 (factor)
             24 BINARY_MODULO
             26 LOAD_CONST               4 (0)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       16

  6          32 LOAD_FAST                1 (num)
             34 LOAD_FAST                2 (factor)
             36 INPLACE_FLOOR_DIVIDE
             38 STORE_FAST               1 (num)
             40 JUMP_ABSOLUTE           20
             42 JUMP_ABSOLUTE           16

  7     >>   44 LOAD_FAST                1 (num)
             46 LOAD_CONST               1 (1)
             48 COMPARE_OP               2 (==)
             50 RETURN_VALUE
None
"
isUgly,"class Solution:
	def isUgly(self, num: int) -> bool:
		if num < 1:
			return False
		while num > 1:
			if num % 2 == 0:
				num //= 2
			elif num % 3 == 0:
				num //= 3
			elif num % 5 == 0:
				num //= 5
			else:
				return False
		return True","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9828ba52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9828ba52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f9828ba5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f9828ba5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       92

  6          20 LOAD_FAST                1 (num)
             22 LOAD_CONST               3 (2)
             24 BINARY_MODULO
             26 LOAD_CONST               4 (0)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       42

  7          32 LOAD_FAST                1 (num)
             34 LOAD_CONST               3 (2)
             36 INPLACE_FLOOR_DIVIDE
             38 STORE_FAST               1 (num)
             40 JUMP_ABSOLUTE           12

  8     >>   42 LOAD_FAST                1 (num)
             44 LOAD_CONST               5 (3)
             46 BINARY_MODULO
             48 LOAD_CONST               4 (0)
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_FALSE       64

  9          54 LOAD_FAST                1 (num)
             56 LOAD_CONST               5 (3)
             58 INPLACE_FLOOR_DIVIDE
             60 STORE_FAST               1 (num)
             62 JUMP_ABSOLUTE           12

 10     >>   64 LOAD_FAST                1 (num)
             66 LOAD_CONST               6 (5)
             68 BINARY_MODULO
             70 LOAD_CONST               4 (0)
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       86

 11          76 LOAD_FAST                1 (num)
             78 LOAD_CONST               6 (5)
             80 INPLACE_FLOOR_DIVIDE
             82 STORE_FAST               1 (num)
             84 JUMP_ABSOLUTE           12

 13     >>   86 LOAD_CONST               2 (False)
             88 RETURN_VALUE
             90 JUMP_ABSOLUTE           12

 14     >>   92 LOAD_CONST               7 (True)
             94 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        if num < 1:
            return False
        while num % 2 == 0 or num % 3 == 0 or num % 5 == 0:
            for i in [2,3,5]:
                if num % i == 0:
                    num /= i
        
        return num == 1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7bc9e152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7bc9e152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f7bc9e15240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f7bc9e15240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               4 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_TRUE        48
             24 LOAD_FAST                1 (num)
             26 LOAD_CONST               5 (3)
             28 BINARY_MODULO
             30 LOAD_CONST               4 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_TRUE        48
             36 LOAD_FAST                1 (num)
             38 LOAD_CONST               6 (5)
             40 BINARY_MODULO
             42 LOAD_CONST               4 (0)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       80

  6     >>   48 LOAD_CONST               7 ((2, 3, 5))
             50 GET_ITER
        >>   52 FOR_ITER                24 (to 78)
             54 STORE_FAST               2 (i)

  7          56 LOAD_FAST                1 (num)
             58 LOAD_FAST                2 (i)
             60 BINARY_MODULO
             62 LOAD_CONST               4 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       52

  8          68 LOAD_FAST                1 (num)
             70 LOAD_FAST                2 (i)
             72 INPLACE_TRUE_DIVIDE
             74 STORE_FAST               1 (num)
             76 JUMP_ABSOLUTE           52
        >>   78 JUMP_ABSOLUTE           12

 10     >>   80 LOAD_FAST                1 (num)
             82 LOAD_CONST               1 (1)
             84 COMPARE_OP               2 (==)
             86 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, num: int) -> bool:
        return num > 0 == 30**30 % num
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffc77fc53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffc77fc53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('num', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7ffc77fc52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7ffc77fc52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (0)
              4 DUP_TOP
              6 ROT_THREE
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    26
             12 LOAD_CONST               2 (30)
             14 LOAD_CONST               2 (30)
             16 BINARY_POWER
             18 LOAD_FAST                1 (num)
             20 BINARY_MODULO
             22 COMPARE_OP               2 (==)
             24 RETURN_VALUE
        >>   26 ROT_TWO
             28 POP_TOP
             30 RETURN_VALUE
None
"
isUgly,"class Solution(object):
    def isUgly(self, num):
        """"""
        :type num: int
        :rtype: bool
        """"""
        if num == 1:
            return True
        if(num<1):
            return False
        n2 = num/self.maxd(num,2)
        if(n2 == 1):
            return True
        n3 = n2/self.maxd(num,3)
        if(n3 == 1):
            return True
        n5 = n3/self.maxd(num,5)
        if(n5 == 1):
            return True
        return False
        
        
        
    def maxd(self,num,n):
        count = 0
        while(num%n == 0):
            num = num/n
            count += 1
        return n**count
               
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0ebd1753a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0ebd1753a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object isUgly at 0x7f0ebd1752f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.isUgly')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (isUgly)

 24          16 LOAD_CONST               3 (<code object maxd at 0x7f0ebd175240, file ""<ast>"", line 24>)
             18 LOAD_CONST               4 ('Solution.maxd')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (maxd)
             24 LOAD_CONST               5 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f0ebd1752f0, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (num)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (num)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       24

 10          20 LOAD_CONST               3 (False)
             22 RETURN_VALUE

 11     >>   24 LOAD_FAST                1 (num)
             26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              0 (maxd)
             30 LOAD_FAST                1 (num)
             32 LOAD_CONST               4 (2)
             34 CALL_METHOD              2
             36 BINARY_TRUE_DIVIDE
             38 STORE_FAST               2 (n2)

 12          40 LOAD_FAST                2 (n2)
             42 LOAD_CONST               1 (1)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       52

 13          48 LOAD_CONST               2 (True)
             50 RETURN_VALUE

 14     >>   52 LOAD_FAST                2 (n2)
             54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              0 (maxd)
             58 LOAD_FAST                1 (num)
             60 LOAD_CONST               5 (3)
             62 CALL_METHOD              2
             64 BINARY_TRUE_DIVIDE
             66 STORE_FAST               3 (n3)

 15          68 LOAD_FAST                3 (n3)
             70 LOAD_CONST               1 (1)
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       80

 16          76 LOAD_CONST               2 (True)
             78 RETURN_VALUE

 17     >>   80 LOAD_FAST                3 (n3)
             82 LOAD_FAST                0 (self)
             84 LOAD_METHOD              0 (maxd)
             86 LOAD_FAST                1 (num)
             88 LOAD_CONST               6 (5)
             90 CALL_METHOD              2
             92 BINARY_TRUE_DIVIDE
             94 STORE_FAST               4 (n5)

 18          96 LOAD_FAST                4 (n5)
             98 LOAD_CONST               1 (1)
            100 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_FALSE      108

 19         104 LOAD_CONST               2 (True)
            106 RETURN_VALUE

 20     >>  108 LOAD_CONST               3 (False)
            110 RETURN_VALUE

Disassembly of <code object maxd at 0x7f0ebd175240, file ""<ast>"", line 24>:
 25           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (count)

 26     >>    4 LOAD_FAST                1 (num)
              6 LOAD_FAST                2 (n)
              8 BINARY_MODULO
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       34

 27          16 LOAD_FAST                1 (num)
             18 LOAD_FAST                2 (n)
             20 BINARY_TRUE_DIVIDE
             22 STORE_FAST               1 (num)

 28          24 LOAD_FAST                3 (count)
             26 LOAD_CONST               2 (1)
             28 INPLACE_ADD
             30 STORE_FAST               3 (count)
             32 JUMP_ABSOLUTE            4

 29     >>   34 LOAD_FAST                2 (n)
             36 LOAD_FAST                3 (count)
             38 BINARY_POWER
             40 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [2, 3, 5]
        for mult in multipliers:
            for _ in range(1000):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2758635240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2758635240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f27586352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f27586352f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               4 (2)
             26 LOAD_CONST               5 (3)
             28 LOAD_CONST               6 (5)
             30 BUILD_LIST               3
             32 STORE_FAST               2 (multipliers)

  8          34 LOAD_FAST                2 (multipliers)
             36 GET_ITER
        >>   38 FOR_ITER                68 (to 108)
             40 STORE_FAST               3 (mult)

  9          42 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               7 (1000)
             46 CALL_FUNCTION            1
             48 GET_ITER
        >>   50 FOR_ITER                54 (to 106)
             52 STORE_FAST               4 (_)

 10          54 LOAD_FAST                1 (n)
             56 LOAD_METHOD              1 (__mod__)
             58 LOAD_FAST                3 (mult)
             60 CALL_METHOD              1
             62 LOAD_CONST               8 (0)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE      100

 11          68 LOAD_GLOBAL              2 (divmod)
             70 LOAD_FAST                1 (n)
             72 LOAD_FAST                3 (mult)
             74 CALL_FUNCTION            2
             76 LOAD_CONST               8 (0)
             78 BINARY_SUBSCR
             80 STORE_FAST               1 (n)

 12          82 LOAD_FAST                1 (n)
             84 LOAD_CONST               1 (1)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE      104

 13          90 POP_TOP
             92 POP_TOP
             94 LOAD_CONST               3 (True)
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           50

 15     >>  100 POP_TOP
            102 JUMP_ABSOLUTE           38
        >>  104 JUMP_ABSOLUTE           50
        >>  106 JUMP_ABSOLUTE           38

 17     >>  108 LOAD_CONST               2 (False)
            110 RETURN_VALUE
None
"
isUgly,"class Solution:
    def isUgly(self, n: int) -> bool:
        if n < 1:
            return False
        if n == 1:
            return True
        multipliers = [30, 15, 10, 8, 6, 5, 4, 3, 2]
        for mult in multipliers:
            for _ in range(1000):
                if n.__mod__(mult) == 0:
                    n = divmod(n, mult)[0]
                    if n == 1:
                        return True
                else:
                    break

        return False

        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f30bdaa5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f30bdaa5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isUgly at 0x7f30bdaa52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isUgly')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isUgly)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isUgly at 0x7f30bdaa52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (False)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               3 (True)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               4 (30)
             26 LOAD_CONST               5 (15)
             28 LOAD_CONST               6 (10)
             30 LOAD_CONST               7 (8)
             32 LOAD_CONST               8 (6)
             34 LOAD_CONST               9 (5)
             36 LOAD_CONST              10 (4)
             38 LOAD_CONST              11 (3)
             40 LOAD_CONST              12 (2)
             42 BUILD_LIST               9
             44 STORE_FAST               2 (multipliers)

  8          46 LOAD_FAST                2 (multipliers)
             48 GET_ITER
        >>   50 FOR_ITER                68 (to 120)
             52 STORE_FAST               3 (mult)

  9          54 LOAD_GLOBAL              0 (range)
             56 LOAD_CONST              13 (1000)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER                54 (to 118)
             64 STORE_FAST               4 (_)

 10          66 LOAD_FAST                1 (n)
             68 LOAD_METHOD              1 (__mod__)
             70 LOAD_FAST                3 (mult)
             72 CALL_METHOD              1
             74 LOAD_CONST              14 (0)
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE      112

 11          80 LOAD_GLOBAL              2 (divmod)
             82 LOAD_FAST                1 (n)
             84 LOAD_FAST                3 (mult)
             86 CALL_FUNCTION            2
             88 LOAD_CONST              14 (0)
             90 BINARY_SUBSCR
             92 STORE_FAST               1 (n)

 12          94 LOAD_FAST                1 (n)
             96 LOAD_CONST               1 (1)
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE      116

 13         102 POP_TOP
            104 POP_TOP
            106 LOAD_CONST               3 (True)
            108 RETURN_VALUE
            110 JUMP_ABSOLUTE           62

 15     >>  112 POP_TOP
            114 JUMP_ABSOLUTE           50
        >>  116 JUMP_ABSOLUTE           62
        >>  118 JUMP_ABSOLUTE           50

 17     >>  120 LOAD_CONST               2 (False)
            122 RETURN_VALUE
None
"
isValidBST,"class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        curr = root
        stack = []
        while(curr):
            stack.append(curr)
            curr = curr.left
        prev = None
        while(stack):
            top_ele = stack.pop()
            if prev is not None and top_ele.val <= prev:
                return False
            prev = top_ele.val
            next_right = top_ele.right
            while(next_right):
                stack.append(next_right)
                next_right = next_right.left
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object TreeNode at 0x7f6c422652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('TreeNode')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('TreeNode')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (TreeNode)

  7          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f6c422653a0, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object TreeNode at 0x7f6c422652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('TreeNode')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               5 ((0, None, None))
             10 LOAD_CONST               3 (<code object __init__ at 0x7f6c42265240, file ""<ast>"", line 2>)
             12 LOAD_CONST               4 ('TreeNode.__init__')
             14 MAKE_FUNCTION            1 (defaults)
             16 STORE_NAME               3 (__init__)
             18 LOAD_CONST               2 (None)
             20 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f6c42265240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (val)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  4           6 LOAD_FAST                2 (left)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (left)

  5          12 LOAD_FAST                3 (right)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (right)
             18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6c422653a0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f6c42265450, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f6c42265450, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                1 (root)
              2 STORE_FAST               2 (curr)

 10           4 BUILD_LIST               0
              6 STORE_FAST               3 (stack)

 11     >>    8 LOAD_FAST                2 (curr)
             10 POP_JUMP_IF_FALSE       30

 12          12 LOAD_FAST                3 (stack)
             14 LOAD_METHOD              0 (append)
             16 LOAD_FAST                2 (curr)
             18 CALL_METHOD              1
             20 POP_TOP

 13          22 LOAD_FAST                2 (curr)
             24 LOAD_ATTR                1 (left)
             26 STORE_FAST               2 (curr)
             28 JUMP_ABSOLUTE            8

 14     >>   30 LOAD_CONST               0 (None)
             32 STORE_FAST               4 (prev)

 15     >>   34 LOAD_FAST                3 (stack)
             36 POP_JUMP_IF_FALSE      104

 16          38 LOAD_FAST                3 (stack)
             40 LOAD_METHOD              2 (pop)
             42 CALL_METHOD              0
             44 STORE_FAST               5 (top_ele)

 17          46 LOAD_FAST                4 (prev)
             48 LOAD_CONST               0 (None)
             50 COMPARE_OP               9 (is not)
             52 POP_JUMP_IF_FALSE       68
             54 LOAD_FAST                5 (top_ele)
             56 LOAD_ATTR                3 (val)
             58 LOAD_FAST                4 (prev)
             60 COMPARE_OP               1 (<=)
             62 POP_JUMP_IF_FALSE       68

 18          64 LOAD_CONST               1 (False)
             66 RETURN_VALUE

 19     >>   68 LOAD_FAST                5 (top_ele)
             70 LOAD_ATTR                3 (val)
             72 STORE_FAST               4 (prev)

 20          74 LOAD_FAST                5 (top_ele)
             76 LOAD_ATTR                4 (right)
             78 STORE_FAST               6 (next_right)

 21     >>   80 LOAD_FAST                6 (next_right)
             82 POP_JUMP_IF_FALSE       34

 22          84 LOAD_FAST                3 (stack)
             86 LOAD_METHOD              0 (append)
             88 LOAD_FAST                6 (next_right)
             90 CALL_METHOD              1
             92 POP_TOP

 23          94 LOAD_FAST                6 (next_right)
             96 LOAD_ATTR                1 (left)
             98 STORE_FAST               6 (next_right)
            100 JUMP_ABSOLUTE           80
            102 JUMP_ABSOLUTE           34

 24     >>  104 LOAD_CONST               2 (True)
            106 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if not root :
            return True
        def inorder(root) :
            if root.left :
                inorder(root.left)
            ans.append(root.val)
            if root.right :
                inorder(root.right)
        ans=[]
        inorder(root)
        if sorted(ans)==ans and len(set(ans))==len(ans) :
            return True
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb7e9ef53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb7e9ef53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7fb7e9ef52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fb7e9ef52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  5     >>    8 LOAD_CLOSURE             0 (ans)
             10 LOAD_CLOSURE             1 (inorder)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               2 (<code object inorder at 0x7fb7e9ef5240, file ""<ast>"", line 5>)
             16 LOAD_CONST               3 ('Solution.isValidBST.<locals>.inorder')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              1 (inorder)

 11          22 BUILD_LIST               0
             24 STORE_DEREF              0 (ans)

 12          26 LOAD_DEREF               1 (inorder)
             28 LOAD_FAST                1 (root)
             30 CALL_FUNCTION            1
             32 POP_TOP

 13          34 LOAD_GLOBAL              0 (sorted)
             36 LOAD_DEREF               0 (ans)
             38 CALL_FUNCTION            1
             40 LOAD_DEREF               0 (ans)
             42 COMPARE_OP               2 (==)
             44 POP_JUMP_IF_FALSE       70
             46 LOAD_GLOBAL              1 (len)
             48 LOAD_GLOBAL              2 (set)
             50 LOAD_DEREF               0 (ans)
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 LOAD_GLOBAL              1 (len)
             58 LOAD_DEREF               0 (ans)
             60 CALL_FUNCTION            1
             62 COMPARE_OP               2 (==)
             64 POP_JUMP_IF_FALSE       70

 14          66 LOAD_CONST               1 (True)
             68 RETURN_VALUE

 15     >>   70 LOAD_CONST               4 (False)
             72 RETURN_VALUE

Disassembly of <code object inorder at 0x7fb7e9ef5240, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (root)
              2 LOAD_ATTR                0 (left)
              4 POP_JUMP_IF_FALSE       16

  7           6 LOAD_DEREF               1 (inorder)
              8 LOAD_FAST                0 (root)
             10 LOAD_ATTR                0 (left)
             12 CALL_FUNCTION            1
             14 POP_TOP

  8     >>   16 LOAD_DEREF               0 (ans)
             18 LOAD_METHOD              1 (append)
             20 LOAD_FAST                0 (root)
             22 LOAD_ATTR                2 (val)
             24 CALL_METHOD              1
             26 POP_TOP

  9          28 LOAD_FAST                0 (root)
             30 LOAD_ATTR                3 (right)
             32 POP_JUMP_IF_FALSE       44

 10          34 LOAD_DEREF               1 (inorder)
             36 LOAD_FAST                0 (root)
             38 LOAD_ATTR                3 (right)
             40 CALL_FUNCTION            1
             42 POP_TOP
        >>   44 LOAD_CONST               0 (None)
             46 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
            if not root:
                return True
            
            def DFSInOrder(node, lista):

                if node.left:
                    DFSInOrder(node.left, lista)

                lista.append(node.val)

                if node.right:
                    DFSInOrder(node.right, lista)

                return lista
            
            a = DFSInOrder(root, [])
            
            for x in range(len(a)-1):
                if a[x] == a[x+1]:
                    return False
                
            return sorted(a) == a
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7ee8a853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7ee8a853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f7ee8a852f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f7ee8a852f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  6     >>    8 LOAD_CLOSURE             0 (DFSInOrder)
             10 BUILD_TUPLE              1
             12 LOAD_CONST               2 (<code object DFSInOrder at 0x7f7ee8a85240, file ""<ast>"", line 6>)
             14 LOAD_CONST               3 ('Solution.isValidBST.<locals>.DFSInOrder')
             16 MAKE_FUNCTION            8 (closure)
             18 STORE_DEREF              0 (DFSInOrder)

 18          20 LOAD_DEREF               0 (DFSInOrder)
             22 LOAD_FAST                1 (root)
             24 BUILD_LIST               0
             26 CALL_FUNCTION            2
             28 STORE_FAST               2 (a)

 20          30 LOAD_GLOBAL              0 (range)
             32 LOAD_GLOBAL              1 (len)
             34 LOAD_FAST                2 (a)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               4 (1)
             40 BINARY_SUBTRACT
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER                30 (to 78)
             48 STORE_FAST               3 (x)

 21          50 LOAD_FAST                2 (a)
             52 LOAD_FAST                3 (x)
             54 BINARY_SUBSCR
             56 LOAD_FAST                2 (a)
             58 LOAD_FAST                3 (x)
             60 LOAD_CONST               4 (1)
             62 BINARY_ADD
             64 BINARY_SUBSCR
             66 COMPARE_OP               2 (==)
             68 POP_JUMP_IF_FALSE       46

 22          70 POP_TOP
             72 LOAD_CONST               5 (False)
             74 RETURN_VALUE
             76 JUMP_ABSOLUTE           46

 24     >>   78 LOAD_GLOBAL              2 (sorted)
             80 LOAD_FAST                2 (a)
             82 CALL_FUNCTION            1
             84 LOAD_FAST                2 (a)
             86 COMPARE_OP               2 (==)
             88 RETURN_VALUE

Disassembly of <code object DFSInOrder at 0x7f7ee8a85240, file ""<ast>"", line 6>:
  8           0 LOAD_FAST                0 (node)
              2 LOAD_ATTR                0 (left)
              4 POP_JUMP_IF_FALSE       18

  9           6 LOAD_DEREF               0 (DFSInOrder)
              8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (left)
             12 LOAD_FAST                1 (lista)
             14 CALL_FUNCTION            2
             16 POP_TOP

 11     >>   18 LOAD_FAST                1 (lista)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                0 (node)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

 13          30 LOAD_FAST                0 (node)
             32 LOAD_ATTR                3 (right)
             34 POP_JUMP_IF_FALSE       48

 14          36 LOAD_DEREF               0 (DFSInOrder)
             38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                3 (right)
             42 LOAD_FAST                1 (lista)
             44 CALL_FUNCTION            2
             46 POP_TOP

 16     >>   48 LOAD_FAST                1 (lista)
             50 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if root is None:
            return True
        stack = [(root,float(""-inf""), float(""inf""))]
        while stack:
            node, mini, maxum = stack.pop()
            
            #if current node is between our min and max it satisfied the BST property
            if node.val > mini and node.val < maxum:
                #everything to the right of our current node must be greater than cur node
                if node.right:
                    stack.append((node.right,node.val, maxum))
                #everything to the left of our current node must be less than cur node
                if node.left:
                    stack.append((node.left,mini,node.val))
            else:
                return False
        return True 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f86fe8e5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f86fe8e5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f86fe8e53a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f86fe8e53a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (root)
             14 LOAD_GLOBAL              0 (float)
             16 LOAD_CONST               2 ('-inf')
             18 CALL_FUNCTION            1
             20 LOAD_GLOBAL              0 (float)
             22 LOAD_CONST               3 ('inf')
             24 CALL_FUNCTION            1
             26 BUILD_TUPLE              3
             28 BUILD_LIST               1
             30 STORE_FAST               2 (stack)

  6     >>   32 LOAD_FAST                2 (stack)
             34 POP_JUMP_IF_FALSE      130

  7          36 LOAD_FAST                2 (stack)
             38 LOAD_METHOD              1 (pop)
             40 CALL_METHOD              0
             42 UNPACK_SEQUENCE          3
             44 STORE_FAST               3 (node)
             46 STORE_FAST               4 (mini)
             48 STORE_FAST               5 (maxum)

 10          50 LOAD_FAST                3 (node)
             52 LOAD_ATTR                2 (val)
             54 LOAD_FAST                4 (mini)
             56 COMPARE_OP               4 (>)
             58 POP_JUMP_IF_FALSE      124
             60 LOAD_FAST                3 (node)
             62 LOAD_ATTR                2 (val)
             64 LOAD_FAST                5 (maxum)
             66 COMPARE_OP               0 (<)
             68 POP_JUMP_IF_FALSE      124

 12          70 LOAD_FAST                3 (node)
             72 LOAD_ATTR                3 (right)
             74 POP_JUMP_IF_FALSE       96

 13          76 LOAD_FAST                2 (stack)
             78 LOAD_METHOD              4 (append)
             80 LOAD_FAST                3 (node)
             82 LOAD_ATTR                3 (right)
             84 LOAD_FAST                3 (node)
             86 LOAD_ATTR                2 (val)
             88 LOAD_FAST                5 (maxum)
             90 BUILD_TUPLE              3
             92 CALL_METHOD              1
             94 POP_TOP

 15     >>   96 LOAD_FAST                3 (node)
             98 LOAD_ATTR                5 (left)
            100 POP_JUMP_IF_FALSE      128

 16         102 LOAD_FAST                2 (stack)
            104 LOAD_METHOD              4 (append)
            106 LOAD_FAST                3 (node)
            108 LOAD_ATTR                5 (left)
            110 LOAD_FAST                4 (mini)
            112 LOAD_FAST                3 (node)
            114 LOAD_ATTR                2 (val)
            116 BUILD_TUPLE              3
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           32

 18     >>  124 LOAD_CONST               4 (False)
            126 RETURN_VALUE
        >>  128 JUMP_ABSOLUTE           32

 19     >>  130 LOAD_CONST               1 (True)
            132 RETURN_VALUE
None
"
isValidBST,"
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:                        
        return self.Traverse(root,None,None)    

    #Function to intake a node, it's max allowed node value and it's min allowed node value
    def Traverse(self,root,min,max):
        if(root is None): 
          return True
        if((min!=None and root.val<=min.val) or (max!=None and root.val>=max.val)): 
          return False
        return self.Traverse(root.left, min, root) and self.Traverse(root.right, root, max)","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f39d36b53a0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f39d36b53a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f39d36b5240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)

  7          24 LOAD_CONST               4 (<code object Traverse at 0x7f39d36b52f0, file ""<ast>"", line 7>)
             26 LOAD_CONST               5 ('Solution.Traverse')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (Traverse)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f39d36b5240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (Traverse)
              4 LOAD_FAST                1 (root)
              6 LOAD_CONST               0 (None)
              8 LOAD_CONST               0 (None)
             10 CALL_METHOD              3
             12 RETURN_VALUE

Disassembly of <code object Traverse at 0x7f39d36b52f0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  9           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 10     >>   12 LOAD_FAST                2 (min)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE       32
             20 LOAD_FAST                1 (root)
             22 LOAD_ATTR                0 (val)
             24 LOAD_FAST                2 (min)
             26 LOAD_ATTR                0 (val)
             28 COMPARE_OP               1 (<=)
             30 POP_JUMP_IF_TRUE        52
        >>   32 LOAD_FAST                3 (max)
             34 LOAD_CONST               0 (None)
             36 COMPARE_OP               3 (!=)
             38 POP_JUMP_IF_FALSE       56
             40 LOAD_FAST                1 (root)
             42 LOAD_ATTR                0 (val)
             44 LOAD_FAST                3 (max)
             46 LOAD_ATTR                0 (val)
             48 COMPARE_OP               5 (>=)
             50 POP_JUMP_IF_FALSE       56

 11     >>   52 LOAD_CONST               2 (False)
             54 RETURN_VALUE

 12     >>   56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (Traverse)
             60 LOAD_FAST                1 (root)
             62 LOAD_ATTR                2 (left)
             64 LOAD_FAST                2 (min)
             66 LOAD_FAST                1 (root)
             68 CALL_METHOD              3
             70 JUMP_IF_FALSE_OR_POP    86
             72 LOAD_FAST                0 (self)
             74 LOAD_METHOD              1 (Traverse)
             76 LOAD_FAST                1 (root)
             78 LOAD_ATTR                3 (right)
             80 LOAD_FAST                1 (root)
             82 LOAD_FAST                3 (max)
             84 CALL_METHOD              3
        >>   86 RETURN_VALUE
None
"
isValidBST,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        return self.recurse(root, -float('inf'), float('inf'))
        
    
    def recurse(self, node, lo, hi): 
        if not node: 
            return True 
        
        out = True 
        if node.left: 
            new_lo, new_hi = lo, min(node.val, hi)
            out = out and new_lo < node.left.val and node.left.val < new_hi and self.recurse(node.left, new_lo, new_hi)
            
        if node.right: 
            new_lo, new_hi = max(lo, node.val), hi 
            out = out and new_lo < node.right.val and node.right.val < new_hi and self.recurse(node.right, new_lo, new_hi) 
        
        return out 
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f35880653a0, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f35880653a0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f3588065240, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)

 12          24 LOAD_CONST               4 (<code object recurse at 0x7f35880652f0, file ""<ast>"", line 12>)
             26 LOAD_CONST               5 ('Solution.recurse')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (recurse)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f3588065240, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (recurse)
              4 LOAD_FAST                1 (root)
              6 LOAD_GLOBAL              1 (float)
              8 LOAD_CONST               1 ('inf')
             10 CALL_FUNCTION            1
             12 UNARY_NEGATIVE
             14 LOAD_GLOBAL              1 (float)
             16 LOAD_CONST               1 ('inf')
             18 CALL_FUNCTION            1
             20 CALL_METHOD              3
             22 RETURN_VALUE

Disassembly of <code object recurse at 0x7f35880652f0, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_TRUE         8

 14           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 16     >>    8 LOAD_CONST               1 (True)
             10 STORE_FAST               4 (out)

 17          12 LOAD_FAST                1 (node)
             14 LOAD_ATTR                0 (left)
             16 POP_JUMP_IF_FALSE       80

 18          18 LOAD_FAST                2 (lo)
             20 LOAD_GLOBAL              1 (min)
             22 LOAD_FAST                1 (node)
             24 LOAD_ATTR                2 (val)
             26 LOAD_FAST                3 (hi)
             28 CALL_FUNCTION            2
             30 ROT_TWO
             32 STORE_FAST               5 (new_lo)
             34 STORE_FAST               6 (new_hi)

 19          36 LOAD_FAST                4 (out)
             38 JUMP_IF_FALSE_OR_POP    78
             40 LOAD_FAST                5 (new_lo)
             42 LOAD_FAST                1 (node)
             44 LOAD_ATTR                0 (left)
             46 LOAD_ATTR                2 (val)
             48 COMPARE_OP               0 (<)
             50 JUMP_IF_FALSE_OR_POP    78
             52 LOAD_FAST                1 (node)
             54 LOAD_ATTR                0 (left)
             56 LOAD_ATTR                2 (val)
             58 LOAD_FAST                6 (new_hi)
             60 COMPARE_OP               0 (<)
             62 JUMP_IF_FALSE_OR_POP    78
             64 LOAD_FAST                0 (self)
             66 LOAD_METHOD              3 (recurse)
             68 LOAD_FAST                1 (node)
             70 LOAD_ATTR                0 (left)
             72 LOAD_FAST                5 (new_lo)
             74 LOAD_FAST                6 (new_hi)
             76 CALL_METHOD              3
        >>   78 STORE_FAST               4 (out)

 21     >>   80 LOAD_FAST                1 (node)
             82 LOAD_ATTR                4 (right)
             84 POP_JUMP_IF_FALSE      148

 22          86 LOAD_GLOBAL              5 (max)
             88 LOAD_FAST                2 (lo)
             90 LOAD_FAST                1 (node)
             92 LOAD_ATTR                2 (val)
             94 CALL_FUNCTION            2
             96 LOAD_FAST                3 (hi)
             98 ROT_TWO
            100 STORE_FAST               5 (new_lo)
            102 STORE_FAST               6 (new_hi)

 23         104 LOAD_FAST                4 (out)
            106 JUMP_IF_FALSE_OR_POP   146
            108 LOAD_FAST                5 (new_lo)
            110 LOAD_FAST                1 (node)
            112 LOAD_ATTR                4 (right)
            114 LOAD_ATTR                2 (val)
            116 COMPARE_OP               0 (<)
            118 JUMP_IF_FALSE_OR_POP   146
            120 LOAD_FAST                1 (node)
            122 LOAD_ATTR                4 (right)
            124 LOAD_ATTR                2 (val)
            126 LOAD_FAST                6 (new_hi)
            128 COMPARE_OP               0 (<)
            130 JUMP_IF_FALSE_OR_POP   146
            132 LOAD_FAST                0 (self)
            134 LOAD_METHOD              3 (recurse)
            136 LOAD_FAST                1 (node)
            138 LOAD_ATTR                4 (right)
            140 LOAD_FAST                5 (new_lo)
            142 LOAD_FAST                6 (new_hi)
            144 CALL_METHOD              3
        >>  146 STORE_FAST               4 (out)

 25     >>  148 LOAD_FAST                4 (out)
            150 RETURN_VALUE
None
"
isValidBST,"
class Solution:    
    def isValidBST(self, root: TreeNode) -> bool:
        mini = -2147483649
        maxi = 2147483648
        def bst(root,mini,maxi):
            if(not root):
                return True
            if(root.val<=mini or root.val>=maxi):
                return False
            return(bst(root.left,mini,root.val) and (bst(root.right,root.val,maxi)))
        return(bst(root,mini,maxi))

","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f80c9ba5450, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f80c9ba5450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f80c9ba53a0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f80c9ba53a0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (-2147483649)
              2 STORE_FAST               2 (mini)

  5           4 LOAD_CONST               2 (2147483648)
              6 STORE_FAST               3 (maxi)

  6           8 LOAD_CLOSURE             0 (bst)
             10 BUILD_TUPLE              1
             12 LOAD_CONST               3 (<code object bst at 0x7f80c9ba52f0, file ""<ast>"", line 6>)
             14 LOAD_CONST               4 ('Solution.isValidBST.<locals>.bst')
             16 MAKE_FUNCTION            8 (closure)
             18 STORE_DEREF              0 (bst)

 12          20 LOAD_DEREF               0 (bst)
             22 LOAD_FAST                1 (root)
             24 LOAD_FAST                2 (mini)
             26 LOAD_FAST                3 (maxi)
             28 CALL_FUNCTION            3
             30 RETURN_VALUE

Disassembly of <code object bst at 0x7f80c9ba52f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

  8           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  9     >>    8 LOAD_FAST                0 (root)
             10 LOAD_ATTR                0 (val)
             12 LOAD_FAST                1 (mini)
             14 COMPARE_OP               1 (<=)
             16 POP_JUMP_IF_TRUE        28
             18 LOAD_FAST                0 (root)
             20 LOAD_ATTR                0 (val)
             22 LOAD_FAST                2 (maxi)
             24 COMPARE_OP               5 (>=)
             26 POP_JUMP_IF_FALSE       32

 10     >>   28 LOAD_CONST               2 (False)
             30 RETURN_VALUE

 11     >>   32 LOAD_DEREF               0 (bst)
             34 LOAD_FAST                0 (root)
             36 LOAD_ATTR                1 (left)
             38 LOAD_FAST                1 (mini)
             40 LOAD_FAST                0 (root)
             42 LOAD_ATTR                0 (val)
             44 CALL_FUNCTION            3
             46 JUMP_IF_FALSE_OR_POP    62
             48 LOAD_DEREF               0 (bst)
             50 LOAD_FAST                0 (root)
             52 LOAD_ATTR                2 (right)
             54 LOAD_FAST                0 (root)
             56 LOAD_ATTR                0 (val)
             58 LOAD_FAST                2 (maxi)
             60 CALL_FUNCTION            3
        >>   62 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        valid = True
        prev = None
        
        def go(n):
            nonlocal valid, prev
            if not n:
                return
            
            go(n.left)
            if prev != None and n.val <= prev:
                valid = False
            prev = n.val
            go(n.right)
            
        go(root)
            
        return valid
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5269ef5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5269ef5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f5269ef5450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f5269ef5450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (True)
              2 STORE_DEREF              2 (valid)

  4           4 LOAD_CONST               0 (None)
              6 STORE_DEREF              1 (prev)

  6           8 LOAD_CLOSURE             0 (go)
             10 LOAD_CLOSURE             1 (prev)
             12 LOAD_CLOSURE             2 (valid)
             14 BUILD_TUPLE              3
             16 LOAD_CONST               2 (<code object go at 0x7f5269ef53a0, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution.isValidBST.<locals>.go')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (go)

 17          24 LOAD_DEREF               0 (go)
             26 LOAD_FAST                1 (root)
             28 CALL_FUNCTION            1
             30 POP_TOP

 19          32 LOAD_DEREF               2 (valid)
             34 RETURN_VALUE

Disassembly of <code object go at 0x7f5269ef53a0, file ""<ast>"", line 6>:
  8           0 LOAD_FAST                0 (n)
              2 POP_JUMP_IF_TRUE         8

  9           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 11     >>    8 LOAD_DEREF               0 (go)
             10 LOAD_FAST                0 (n)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 POP_TOP

 12          18 LOAD_DEREF               1 (prev)
             20 LOAD_CONST               0 (None)
             22 COMPARE_OP               3 (!=)
             24 POP_JUMP_IF_FALSE       40
             26 LOAD_FAST                0 (n)
             28 LOAD_ATTR                1 (val)
             30 LOAD_DEREF               1 (prev)
             32 COMPARE_OP               1 (<=)
             34 POP_JUMP_IF_FALSE       40

 13          36 LOAD_CONST               1 (False)
             38 STORE_DEREF              2 (valid)

 14     >>   40 LOAD_FAST                0 (n)
             42 LOAD_ATTR                1 (val)
             44 STORE_DEREF              1 (prev)

 15          46 LOAD_DEREF               0 (go)
             48 LOAD_FAST                0 (n)
             50 LOAD_ATTR                2 (right)
             52 CALL_FUNCTION            1
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        _, _, is_valid = self.recur(root)
        return is_valid
    
    def recur(self, root):
        if not root:
            return float('inf'), float('-inf'), True
        min_left, max_left, is_valid_left = self.recur(root.left)
        min_right, max_right, is_valid_right = self.recur(root.right)

        if root.val < min_right and root.val > max_left:
            curr_is_valid = is_valid_left and is_valid_right
            left_min = min(min_left, root.val)
            right_max = max(max_right, root.val)
        else:
            curr_is_valid = False
            left_min = float('inf')
            right_max = float('-inf')
        return left_min, right_max, curr_is_valid
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd588c152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd588c152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7fd588c15240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)

  6          24 LOAD_CONST               4 (<code object recur at 0x7fd588c15450, file ""<ast>"", line 6>)
             26 LOAD_CONST               5 ('Solution.recur')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (recur)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fd588c15240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (recur)
              4 LOAD_FAST                1 (root)
              6 CALL_METHOD              1
              8 UNPACK_SEQUENCE          3
             10 STORE_FAST               2 (_)
             12 STORE_FAST               2 (_)
             14 STORE_FAST               3 (is_valid)

  4          16 LOAD_FAST                3 (is_valid)
             18 RETURN_VALUE

Disassembly of <code object recur at 0x7fd588c15450, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE        22

  8           4 LOAD_GLOBAL              0 (float)
              6 LOAD_CONST               1 ('inf')
              8 CALL_FUNCTION            1
             10 LOAD_GLOBAL              0 (float)
             12 LOAD_CONST               2 ('-inf')
             14 CALL_FUNCTION            1
             16 LOAD_CONST               3 (True)
             18 BUILD_TUPLE              3
             20 RETURN_VALUE

  9     >>   22 LOAD_FAST                0 (self)
             24 LOAD_METHOD              1 (recur)
             26 LOAD_FAST                1 (root)
             28 LOAD_ATTR                2 (left)
             30 CALL_METHOD              1
             32 UNPACK_SEQUENCE          3
             34 STORE_FAST               2 (min_left)
             36 STORE_FAST               3 (max_left)
             38 STORE_FAST               4 (is_valid_left)

 10          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              1 (recur)
             44 LOAD_FAST                1 (root)
             46 LOAD_ATTR                3 (right)
             48 CALL_METHOD              1
             50 UNPACK_SEQUENCE          3
             52 STORE_FAST               5 (min_right)
             54 STORE_FAST               6 (max_right)
             56 STORE_FAST               7 (is_valid_right)

 12          58 LOAD_FAST                1 (root)
             60 LOAD_ATTR                4 (val)
             62 LOAD_FAST                5 (min_right)
             64 COMPARE_OP               0 (<)
             66 POP_JUMP_IF_FALSE      112
             68 LOAD_FAST                1 (root)
             70 LOAD_ATTR                4 (val)
             72 LOAD_FAST                3 (max_left)
             74 COMPARE_OP               4 (>)
             76 POP_JUMP_IF_FALSE      112

 13          78 LOAD_FAST                4 (is_valid_left)
             80 JUMP_IF_FALSE_OR_POP    84
             82 LOAD_FAST                7 (is_valid_right)
        >>   84 STORE_FAST               8 (curr_is_valid)

 14          86 LOAD_GLOBAL              5 (min)
             88 LOAD_FAST                2 (min_left)
             90 LOAD_FAST                1 (root)
             92 LOAD_ATTR                4 (val)
             94 CALL_FUNCTION            2
             96 STORE_FAST               9 (left_min)

 15          98 LOAD_GLOBAL              6 (max)
            100 LOAD_FAST                6 (max_right)
            102 LOAD_FAST                1 (root)
            104 LOAD_ATTR                4 (val)
            106 CALL_FUNCTION            2
            108 STORE_FAST              10 (right_max)
            110 JUMP_FORWARD            20 (to 132)

 17     >>  112 LOAD_CONST               4 (False)
            114 STORE_FAST               8 (curr_is_valid)

 18         116 LOAD_GLOBAL              0 (float)
            118 LOAD_CONST               1 ('inf')
            120 CALL_FUNCTION            1
            122 STORE_FAST               9 (left_min)

 19         124 LOAD_GLOBAL              0 (float)
            126 LOAD_CONST               2 ('-inf')
            128 CALL_FUNCTION            1
            130 STORE_FAST              10 (right_max)

 20     >>  132 LOAD_FAST                9 (left_min)
            134 LOAD_FAST               10 (right_max)
            136 LOAD_FAST                8 (curr_is_valid)
            138 BUILD_TUPLE              3
            140 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        ## RC ##
        ## APPROACH : RECURSION ##
        ## EDGE CASE : [10,5,15,null,null,6,20] ## (i.e all right elements must be stricly greater than root even left childs of right side, vice versa)
        
        ## LOGIC : so we to keep upper and lower limits
        ##  1. For left child, root is the upper limit
        ##  2. For right child, root is the lower limit 
        
		## TIME COMPLEXICITY : O(N) ##
		## SPACE COMPLEXICITY : O(N) ##
        
        def helper(node, lower = float('-inf'), upper = float('inf')):
            if not node:
                return True
            val = node.val
            if val <= lower or val >= upper:
                return False
            if not helper(node.right, val, upper):
                return False
            if not helper(node.left, lower, val):
                return False
            return True
        return helper(root)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1ed4275500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1ed4275500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f1ed4275450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f1ed4275450, file ""<ast>"", line 2>:
 14           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (float)
              8 LOAD_CONST               2 ('inf')
             10 CALL_FUNCTION            1
             12 BUILD_TUPLE              2
             14 LOAD_CLOSURE             0 (helper)
             16 BUILD_TUPLE              1
             18 LOAD_CONST               3 (<code object helper at 0x7f1ed42753a0, file ""<ast>"", line 14>)
             20 LOAD_CONST               4 ('Solution.isValidBST.<locals>.helper')
             22 MAKE_FUNCTION            9 (defaults, closure)
             24 STORE_DEREF              0 (helper)

 25          26 LOAD_DEREF               0 (helper)
             28 LOAD_FAST                1 (root)
             30 CALL_FUNCTION            1
             32 RETURN_VALUE

Disassembly of <code object helper at 0x7f1ed42753a0, file ""<ast>"", line 14>:
 15           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

 16           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 17     >>    8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (val)
             12 STORE_FAST               3 (val)

 18          14 LOAD_FAST                3 (val)
             16 LOAD_FAST                1 (lower)
             18 COMPARE_OP               1 (<=)
             20 POP_JUMP_IF_TRUE        30
             22 LOAD_FAST                3 (val)
             24 LOAD_FAST                2 (upper)
             26 COMPARE_OP               5 (>=)
             28 POP_JUMP_IF_FALSE       34

 19     >>   30 LOAD_CONST               2 (False)
             32 RETURN_VALUE

 20     >>   34 LOAD_DEREF               0 (helper)
             36 LOAD_FAST                0 (node)
             38 LOAD_ATTR                1 (right)
             40 LOAD_FAST                3 (val)
             42 LOAD_FAST                2 (upper)
             44 CALL_FUNCTION            3
             46 POP_JUMP_IF_TRUE        52

 21          48 LOAD_CONST               2 (False)
             50 RETURN_VALUE

 22     >>   52 LOAD_DEREF               0 (helper)
             54 LOAD_FAST                0 (node)
             56 LOAD_ATTR                2 (left)
             58 LOAD_FAST                1 (lower)
             60 LOAD_FAST                3 (val)
             62 CALL_FUNCTION            3
             64 POP_JUMP_IF_TRUE        70

 23          66 LOAD_CONST               2 (False)
             68 RETURN_VALUE

 24     >>   70 LOAD_CONST               1 (True)
             72 RETURN_VALUE
None
"
isValidBST,"class Solution:
	def isValidBST(self, root:TreeNode, left = float('-inf'), right = float('inf'))->bool:
		return not root or left < root.val < right and self.isValidBST(root.left, left, root.val) and self.isValidBST(root.right, root.val, right)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcedd7552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcedd7552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_CONST               1 ('-inf')
             12 CALL_FUNCTION            1
             14 LOAD_NAME                3 (float)
             16 LOAD_CONST               2 ('inf')
             18 CALL_FUNCTION            1
             20 BUILD_TUPLE              2
             22 LOAD_NAME                4 (TreeNode)
             24 LOAD_NAME                5 (bool)
             26 LOAD_CONST               3 (('root', 'return'))
             28 BUILD_CONST_KEY_MAP      2
             30 LOAD_CONST               4 (<code object isValidBST at 0x7fcedd755240, file ""<ast>"", line 2>)
             32 LOAD_CONST               5 ('Solution.isValidBST')
             34 MAKE_FUNCTION            5 (defaults, annotations)
             36 STORE_NAME               6 (isValidBST)
             38 LOAD_CONST               6 (None)
             40 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fcedd755240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 UNARY_NOT
              4 JUMP_IF_TRUE_OR_POP     66
              6 LOAD_FAST                2 (left)
              8 LOAD_FAST                1 (root)
             10 LOAD_ATTR                0 (val)
             12 DUP_TOP
             14 ROT_THREE
             16 COMPARE_OP               0 (<)
             18 JUMP_IF_FALSE_OR_POP    26
             20 LOAD_FAST                3 (right)
             22 COMPARE_OP               0 (<)
             24 JUMP_FORWARD             4 (to 30)
        >>   26 ROT_TWO
             28 POP_TOP
        >>   30 JUMP_IF_FALSE_OR_POP    66
             32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              1 (isValidBST)
             36 LOAD_FAST                1 (root)
             38 LOAD_ATTR                2 (left)
             40 LOAD_FAST                2 (left)
             42 LOAD_FAST                1 (root)
             44 LOAD_ATTR                0 (val)
             46 CALL_METHOD              3
             48 JUMP_IF_FALSE_OR_POP    66
             50 LOAD_FAST                0 (self)
             52 LOAD_METHOD              1 (isValidBST)
             54 LOAD_FAST                1 (root)
             56 LOAD_ATTR                3 (right)
             58 LOAD_FAST                1 (root)
             60 LOAD_ATTR                0 (val)
             62 LOAD_FAST                3 (right)
             64 CALL_METHOD              3
        >>   66 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode, low = -float('inf'), high = float('inf')) -> bool:
        if not root:
            return True
        return (low < root.val < high) & (self.isValidBST(root.left, low, root.val)) & (self.isValidBST(root.right, root.val, high))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc25ab652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc25ab652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_CONST               1 ('inf')
             12 CALL_FUNCTION            1
             14 UNARY_NEGATIVE
             16 LOAD_NAME                3 (float)
             18 LOAD_CONST               1 ('inf')
             20 CALL_FUNCTION            1
             22 BUILD_TUPLE              2
             24 LOAD_NAME                4 (TreeNode)
             26 LOAD_NAME                5 (bool)
             28 LOAD_CONST               2 (('root', 'return'))
             30 BUILD_CONST_KEY_MAP      2
             32 LOAD_CONST               3 (<code object isValidBST at 0x7fc25ab65240, file ""<ast>"", line 2>)
             34 LOAD_CONST               4 ('Solution.isValidBST')
             36 MAKE_FUNCTION            5 (defaults, annotations)
             38 STORE_NAME               6 (isValidBST)
             40 LOAD_CONST               5 (None)
             42 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fc25ab65240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                2 (low)
             10 LOAD_FAST                1 (root)
             12 LOAD_ATTR                0 (val)
             14 DUP_TOP
             16 ROT_THREE
             18 COMPARE_OP               0 (<)
             20 JUMP_IF_FALSE_OR_POP    28
             22 LOAD_FAST                3 (high)
             24 COMPARE_OP               0 (<)
             26 JUMP_FORWARD             4 (to 32)
        >>   28 ROT_TWO
             30 POP_TOP
        >>   32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              1 (isValidBST)
             36 LOAD_FAST                1 (root)
             38 LOAD_ATTR                2 (left)
             40 LOAD_FAST                2 (low)
             42 LOAD_FAST                1 (root)
             44 LOAD_ATTR                0 (val)
             46 CALL_METHOD              3
             48 BINARY_AND
             50 LOAD_FAST                0 (self)
             52 LOAD_METHOD              1 (isValidBST)
             54 LOAD_FAST                1 (root)
             56 LOAD_ATTR                3 (right)
             58 LOAD_FAST                1 (root)
             60 LOAD_ATTR                0 (val)
             62 LOAD_FAST                3 (high)
             64 CALL_METHOD              3
             66 BINARY_AND
             68 RETURN_VALUE
None
"
isValidBST,"def isValidBST(self, root: TreeNode, i=(-float('inf'), float('inf'))) -> bool:
        return not root or i[0] < root.val < i[1] and self.isValidBST(root.right, (max(i[0], root.val), i[1])) and self.isValidBST(root.left, (i[0], min(i[1], root.val)))
","  1           0 LOAD_NAME                0 (float)
              2 LOAD_CONST               0 ('inf')
              4 CALL_FUNCTION            1
              6 UNARY_NEGATIVE
              8 LOAD_NAME                0 (float)
             10 LOAD_CONST               0 ('inf')
             12 CALL_FUNCTION            1
             14 BUILD_TUPLE              2
             16 BUILD_TUPLE              1
             18 LOAD_NAME                1 (TreeNode)
             20 LOAD_NAME                2 (bool)
             22 LOAD_CONST               1 (('root', 'return'))
             24 BUILD_CONST_KEY_MAP      2
             26 LOAD_CONST               2 (<code object isValidBST at 0x7fee412f52f0, file ""<ast>"", line 1>)
             28 LOAD_CONST               3 ('isValidBST')
             30 MAKE_FUNCTION            5 (defaults, annotations)
             32 STORE_NAME               3 (isValidBST)
             34 LOAD_CONST               4 (None)
             36 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fee412f52f0, file ""<ast>"", line 1>:
  2           0 LOAD_FAST                1 (root)
              2 UNARY_NOT
              4 JUMP_IF_TRUE_OR_POP    106
              6 LOAD_FAST                2 (i)
              8 LOAD_CONST               1 (0)
             10 BINARY_SUBSCR
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                0 (val)
             16 DUP_TOP
             18 ROT_THREE
             20 COMPARE_OP               0 (<)
             22 JUMP_IF_FALSE_OR_POP    34
             24 LOAD_FAST                2 (i)
             26 LOAD_CONST               2 (1)
             28 BINARY_SUBSCR
             30 COMPARE_OP               0 (<)
             32 JUMP_FORWARD             4 (to 38)
        >>   34 ROT_TWO
             36 POP_TOP
        >>   38 JUMP_IF_FALSE_OR_POP   106
             40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              1 (isValidBST)
             44 LOAD_FAST                1 (root)
             46 LOAD_ATTR                2 (right)
             48 LOAD_GLOBAL              3 (max)
             50 LOAD_FAST                2 (i)
             52 LOAD_CONST               1 (0)
             54 BINARY_SUBSCR
             56 LOAD_FAST                1 (root)
             58 LOAD_ATTR                0 (val)
             60 CALL_FUNCTION            2
             62 LOAD_FAST                2 (i)
             64 LOAD_CONST               2 (1)
             66 BINARY_SUBSCR
             68 BUILD_TUPLE              2
             70 CALL_METHOD              2
             72 JUMP_IF_FALSE_OR_POP   106
             74 LOAD_FAST                0 (self)
             76 LOAD_METHOD              1 (isValidBST)
             78 LOAD_FAST                1 (root)
             80 LOAD_ATTR                4 (left)
             82 LOAD_FAST                2 (i)
             84 LOAD_CONST               1 (0)
             86 BINARY_SUBSCR
             88 LOAD_GLOBAL              5 (min)
             90 LOAD_FAST                2 (i)
             92 LOAD_CONST               2 (1)
             94 BINARY_SUBSCR
             96 LOAD_FAST                1 (root)
             98 LOAD_ATTR                0 (val)
            100 CALL_FUNCTION            2
            102 BUILD_TUPLE              2
            104 CALL_METHOD              2
        >>  106 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def inOrderTraversal(root):
            if not root:
                return 0
            inOrderTraversal(root.left)
            stack.append(root.val)
            inOrderTraversal(root.right)
        stack = []
        inOrderTraversal(root)
        return stack == sorted(stack) and stack == sorted(list(set(stack)))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe7bd0f53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe7bd0f53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7fe7bd0f52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7fe7bd0f52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (inOrderTraversal)
              2 LOAD_CLOSURE             1 (stack)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object inOrderTraversal at 0x7fe7bd0f5240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.isValidBST.<locals>.inOrderTraversal')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (inOrderTraversal)

  9          14 BUILD_LIST               0
             16 STORE_DEREF              1 (stack)

 10          18 LOAD_DEREF               0 (inOrderTraversal)
             20 LOAD_FAST                1 (root)
             22 CALL_FUNCTION            1
             24 POP_TOP

 11          26 LOAD_DEREF               1 (stack)
             28 LOAD_GLOBAL              0 (sorted)
             30 LOAD_DEREF               1 (stack)
             32 CALL_FUNCTION            1
             34 COMPARE_OP               2 (==)
             36 JUMP_IF_FALSE_OR_POP    56
             38 LOAD_DEREF               1 (stack)
             40 LOAD_GLOBAL              0 (sorted)
             42 LOAD_GLOBAL              1 (list)
             44 LOAD_GLOBAL              2 (set)
             46 LOAD_DEREF               1 (stack)
             48 CALL_FUNCTION            1
             50 CALL_FUNCTION            1
             52 CALL_FUNCTION            1
             54 COMPARE_OP               2 (==)
        >>   56 RETURN_VALUE

Disassembly of <code object inOrderTraversal at 0x7fe7bd0f5240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

  5           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_DEREF               0 (inOrderTraversal)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 POP_TOP

  7          18 LOAD_DEREF               1 (stack)
             20 LOAD_METHOD              1 (append)
             22 LOAD_FAST                0 (root)
             24 LOAD_ATTR                2 (val)
             26 CALL_METHOD              1
             28 POP_TOP

  8          30 LOAD_DEREF               0 (inOrderTraversal)
             32 LOAD_FAST                0 (root)
             34 LOAD_ATTR                3 (right)
             36 CALL_FUNCTION            1
             38 POP_TOP
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE
None
"
isValidBST,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        
        def helper(root, lower=float(""-inf""), upper=float(""inf"")):
        
            if not root:
                return True
            if lower < root.val < upper:
                if helper(root.left, lower, root.val) and helper(root.right, root.val, upper):
                    return True
                else:
                    return False
            else:
                return False

        return helper(root)  
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f55ee9555b0, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f55ee9555b0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f55ee955500, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f55ee955500, file ""<ast>"", line 8>:
 10           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (float)
              8 LOAD_CONST               2 ('inf')
             10 CALL_FUNCTION            1
             12 BUILD_TUPLE              2
             14 LOAD_CLOSURE             0 (helper)
             16 BUILD_TUPLE              1
             18 LOAD_CONST               3 (<code object helper at 0x7f55ee955450, file ""<ast>"", line 10>)
             20 LOAD_CONST               4 ('Solution.isValidBST.<locals>.helper')
             22 MAKE_FUNCTION            9 (defaults, closure)
             24 STORE_DEREF              0 (helper)

 22          26 LOAD_DEREF               0 (helper)
             28 LOAD_FAST                1 (root)
             30 CALL_FUNCTION            1
             32 RETURN_VALUE

Disassembly of <code object helper at 0x7f55ee955450, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

 13           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 14     >>    8 LOAD_FAST                1 (lower)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (val)
             14 DUP_TOP
             16 ROT_THREE
             18 COMPARE_OP               0 (<)
             20 POP_JUMP_IF_FALSE       30
             22 LOAD_FAST                2 (upper)
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       76
             28 JUMP_FORWARD             4 (to 34)
        >>   30 POP_TOP
             32 JUMP_FORWARD            42 (to 76)

 15     >>   34 LOAD_DEREF               0 (helper)
             36 LOAD_FAST                0 (root)
             38 LOAD_ATTR                1 (left)
             40 LOAD_FAST                1 (lower)
             42 LOAD_FAST                0 (root)
             44 LOAD_ATTR                0 (val)
             46 CALL_FUNCTION            3
             48 POP_JUMP_IF_FALSE       70
             50 LOAD_DEREF               0 (helper)
             52 LOAD_FAST                0 (root)
             54 LOAD_ATTR                2 (right)
             56 LOAD_FAST                0 (root)
             58 LOAD_ATTR                0 (val)
             60 LOAD_FAST                2 (upper)
             62 CALL_FUNCTION            3
             64 POP_JUMP_IF_FALSE       70

 16          66 LOAD_CONST               1 (True)
             68 RETURN_VALUE

 18     >>   70 LOAD_CONST               2 (False)
             72 RETURN_VALUE
             74 JUMP_FORWARD             4 (to 80)

 20     >>   76 LOAD_CONST               2 (False)
             78 RETURN_VALUE
        >>   80 LOAD_CONST               0 (None)
             82 RETURN_VALUE
None
"
isValidBST,"class Solution:
    # O(n) time | O(n) space - because of the recursion call stack
    def isValidBST(self, root:TreeNode)->bool:
        """"""
        :type root: TreeNode
        :rtype: bool
        """"""
        return self.validater(root, float('-inf'), float('inf'))

    def validater(self, tree, minimum, maximum):

        # past leaf node/ single node tree
        if tree == None:
            return True

        # validate
        if tree.val >= maximum or tree.val <= minimum:
            return False

        # every node to the left is smaller than the one above it. the one above it is larger.
        left_handler = self.validater(
            tree.left, minimum=minimum, maximum=tree.val)

        # every node to the right is larger. the one above it is smaller.
        right_handler = self.validater(
            tree.right, minimum=tree.val, maximum=maximum)

        return left_handler and right_handler
        # return self.validater(tree.left, minimum=minimum, maximum=tree.val) and self.validater(tree.right, minimum=tree.val, maximum=maximum)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f76331853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f76331853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f7633185240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)

 10          24 LOAD_CONST               4 (<code object validater at 0x7f76331852f0, file ""<ast>"", line 10>)
             26 LOAD_CONST               5 ('Solution.validater')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (validater)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f7633185240, file ""<ast>"", line 3>:
  8           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (validater)
              4 LOAD_FAST                1 (root)
              6 LOAD_GLOBAL              1 (float)
              8 LOAD_CONST               1 ('-inf')
             10 CALL_FUNCTION            1
             12 LOAD_GLOBAL              1 (float)
             14 LOAD_CONST               2 ('inf')
             16 CALL_FUNCTION            1
             18 CALL_METHOD              3
             20 RETURN_VALUE

Disassembly of <code object validater at 0x7f76331852f0, file ""<ast>"", line 10>:
 13           0 LOAD_FAST                1 (tree)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

 14           8 LOAD_CONST               1 (True)
             10 RETURN_VALUE

 17     >>   12 LOAD_FAST                1 (tree)
             14 LOAD_ATTR                0 (val)
             16 LOAD_FAST                3 (maximum)
             18 COMPARE_OP               5 (>=)
             20 POP_JUMP_IF_TRUE        32
             22 LOAD_FAST                1 (tree)
             24 LOAD_ATTR                0 (val)
             26 LOAD_FAST                2 (minimum)
             28 COMPARE_OP               1 (<=)
             30 POP_JUMP_IF_FALSE       36

 18     >>   32 LOAD_CONST               2 (False)
             34 RETURN_VALUE

 21     >>   36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                1 (validater)

 22          40 LOAD_FAST                1 (tree)
             42 LOAD_ATTR                2 (left)
             44 LOAD_FAST                2 (minimum)
             46 LOAD_FAST                1 (tree)
             48 LOAD_ATTR                0 (val)

 21          50 LOAD_CONST               3 (('minimum', 'maximum'))
             52 CALL_FUNCTION_KW         3
             54 STORE_FAST               4 (left_handler)

 25          56 LOAD_FAST                0 (self)
             58 LOAD_ATTR                1 (validater)

 26          60 LOAD_FAST                1 (tree)
             62 LOAD_ATTR                3 (right)
             64 LOAD_FAST                1 (tree)
             66 LOAD_ATTR                0 (val)
             68 LOAD_FAST                3 (maximum)

 25          70 LOAD_CONST               3 (('minimum', 'maximum'))
             72 CALL_FUNCTION_KW         3
             74 STORE_FAST               5 (right_handler)

 28          76 LOAD_FAST                4 (left_handler)
             78 JUMP_IF_FALSE_OR_POP    82
             80 LOAD_FAST                5 (right_handler)
        >>   82 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if not root: return True
        
        prev = float(""-inf"")
        
        for node in self.inOrder(root):
            if node.val <= prev: return False
            prev = node.val
        
        return True
        
    def inOrder(self, node):
        if not node: return

        yield from self.inOrder(node.left)
        yield(node)
        yield from self.inOrder(node.right)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5dc69953a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5dc69953a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f5dc6995240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)

 13          24 LOAD_CONST               4 (<code object inOrder at 0x7f5dc69952f0, file ""<ast>"", line 13>)
             26 LOAD_CONST               5 ('Solution.inOrder')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (inOrder)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f5dc6995240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (float)
             10 LOAD_CONST               2 ('-inf')
             12 CALL_FUNCTION            1
             14 STORE_FAST               2 (prev)

  7          16 LOAD_FAST                0 (self)
             18 LOAD_METHOD              1 (inOrder)
             20 LOAD_FAST                1 (root)
             22 CALL_METHOD              1
             24 GET_ITER
        >>   26 FOR_ITER                26 (to 54)
             28 STORE_FAST               3 (node)

  8          30 LOAD_FAST                3 (node)
             32 LOAD_ATTR                2 (val)
             34 LOAD_FAST                2 (prev)
             36 COMPARE_OP               1 (<=)
             38 POP_JUMP_IF_FALSE       46
             40 POP_TOP
             42 LOAD_CONST               3 (False)
             44 RETURN_VALUE

  9     >>   46 LOAD_FAST                3 (node)
             48 LOAD_ATTR                2 (val)
             50 STORE_FAST               2 (prev)
             52 JUMP_ABSOLUTE           26

 11     >>   54 LOAD_CONST               1 (True)
             56 RETURN_VALUE

Disassembly of <code object inOrder at 0x7f5dc69952f0, file ""<ast>"", line 13>:
 14           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 16     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (inOrder)
             12 LOAD_FAST                1 (node)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 GET_YIELD_FROM_ITER
             20 LOAD_CONST               0 (None)
             22 YIELD_FROM
             24 POP_TOP

 17          26 LOAD_FAST                1 (node)
             28 YIELD_VALUE
             30 POP_TOP

 18          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              0 (inOrder)
             36 LOAD_FAST                1 (node)
             38 LOAD_ATTR                2 (right)
             40 CALL_METHOD              1
             42 GET_YIELD_FROM_ITER
             44 LOAD_CONST               0 (None)
             46 YIELD_FROM
             48 POP_TOP
             50 LOAD_CONST               0 (None)
             52 RETURN_VALUE
None
"
isValidBST,"import itertools
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:

        def inorder(node):
            if node:
                yield from inorder(node.left)
                yield node.val
                yield from inorder(node.right)

        a, b = itertools.tee(inorder(root))  # two inorder generator
        next(b, None)  # b go on step
        return all(c < d for c, d in zip(a, b))   # compare
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (itertools)
              6 STORE_NAME               0 (itertools)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f5398f95710, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5398f95710, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f5398f95660, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f5398f95660, file ""<ast>"", line 3>:
  5           0 LOAD_CLOSURE             0 (inorder)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object inorder at 0x7f5398f95500, file ""<ast>"", line 5>)
              6 LOAD_CONST               2 ('Solution.isValidBST.<locals>.inorder')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (inorder)

 11          12 LOAD_GLOBAL              0 (itertools)
             14 LOAD_METHOD              1 (tee)
             16 LOAD_DEREF               0 (inorder)
             18 LOAD_FAST                1 (root)
             20 CALL_FUNCTION            1
             22 CALL_METHOD              1
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               2 (a)
             28 STORE_FAST               3 (b)

 12          30 LOAD_GLOBAL              2 (next)
             32 LOAD_FAST                3 (b)
             34 LOAD_CONST               0 (None)
             36 CALL_FUNCTION            2
             38 POP_TOP

 13          40 LOAD_GLOBAL              3 (all)
             42 LOAD_CONST               3 (<code object <genexpr> at 0x7f5398f955b0, file ""<ast>"", line 13>)
             44 LOAD_CONST               4 ('Solution.isValidBST.<locals>.<genexpr>')
             46 MAKE_FUNCTION            0
             48 LOAD_GLOBAL              4 (zip)
             50 LOAD_FAST                2 (a)
             52 LOAD_FAST                3 (b)
             54 CALL_FUNCTION            2
             56 GET_ITER
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 RETURN_VALUE

Disassembly of <code object inorder at 0x7f5398f95500, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_FALSE       44

  7           4 LOAD_DEREF               0 (inorder)
              6 LOAD_FAST                0 (node)
              8 LOAD_ATTR                0 (left)
             10 CALL_FUNCTION            1
             12 GET_YIELD_FROM_ITER
             14 LOAD_CONST               0 (None)
             16 YIELD_FROM
             18 POP_TOP

  8          20 LOAD_FAST                0 (node)
             22 LOAD_ATTR                1 (val)
             24 YIELD_VALUE
             26 POP_TOP

  9          28 LOAD_DEREF               0 (inorder)
             30 LOAD_FAST                0 (node)
             32 LOAD_ATTR                2 (right)
             34 CALL_FUNCTION            1
             36 GET_YIELD_FROM_ITER
             38 LOAD_CONST               0 (None)
             40 YIELD_FROM
             42 POP_TOP
        >>   44 LOAD_CONST               0 (None)
             46 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f5398f955b0, file ""<ast>"", line 13>:
 13           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                18 (to 22)
              4 UNPACK_SEQUENCE          2
              6 STORE_FAST               1 (c)
              8 STORE_FAST               2 (d)
             10 LOAD_FAST                1 (c)
             12 LOAD_FAST                2 (d)
             14 COMPARE_OP               0 (<)
             16 YIELD_VALUE
             18 POP_TOP
             20 JUMP_ABSOLUTE            2
        >>   22 LOAD_CONST               0 (None)
             24 RETURN_VALUE
None
"
isValidBST,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
        #Simply using a recursive approach to check the value
        # left child is < above parent & right child is > above parent...
    def isValidBST(self, tree: TreeNode) -> bool:
        def are_keys_in_range(tree, low_range = float('-inf'),high_range = float('inf')):
            if tree and tree.val == high_range:
                return False
            elif not tree:
                return True
            elif not low_range < tree.val < high_range: #doesn't hold
                return False
            
            return (are_keys_in_range(tree.left,low_range,tree.val) and are_keys_in_range(tree.right,tree.val,high_range))
        return (are_keys_in_range(tree))
    
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f016c1155b0, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f016c1155b0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 10           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('tree', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f016c115500, file ""<ast>"", line 10>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f016c115500, file ""<ast>"", line 10>:
 11           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (float)
              8 LOAD_CONST               2 ('inf')
             10 CALL_FUNCTION            1
             12 BUILD_TUPLE              2
             14 LOAD_CLOSURE             0 (are_keys_in_range)
             16 BUILD_TUPLE              1
             18 LOAD_CONST               3 (<code object are_keys_in_range at 0x7f016c115450, file ""<ast>"", line 11>)
             20 LOAD_CONST               4 ('Solution.isValidBST.<locals>.are_keys_in_range')
             22 MAKE_FUNCTION            9 (defaults, closure)
             24 STORE_DEREF              0 (are_keys_in_range)

 20          26 LOAD_DEREF               0 (are_keys_in_range)
             28 LOAD_FAST                1 (tree)
             30 CALL_FUNCTION            1
             32 RETURN_VALUE

Disassembly of <code object are_keys_in_range at 0x7f016c115450, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (tree)
              2 POP_JUMP_IF_FALSE       18
              4 LOAD_FAST                0 (tree)
              6 LOAD_ATTR                0 (val)
              8 LOAD_FAST                2 (high_range)
             10 COMPARE_OP               2 (==)
             12 POP_JUMP_IF_FALSE       18

 13          14 LOAD_CONST               1 (False)
             16 RETURN_VALUE

 14     >>   18 LOAD_FAST                0 (tree)
             20 POP_JUMP_IF_TRUE        26

 15          22 LOAD_CONST               2 (True)
             24 RETURN_VALUE

 16     >>   26 LOAD_FAST                1 (low_range)
             28 LOAD_FAST                0 (tree)
             30 LOAD_ATTR                0 (val)
             32 DUP_TOP
             34 ROT_THREE
             36 COMPARE_OP               0 (<)
             38 POP_JUMP_IF_FALSE       48
             40 LOAD_FAST                2 (high_range)
             42 COMPARE_OP               0 (<)
             44 POP_JUMP_IF_TRUE        54
             46 JUMP_FORWARD             2 (to 50)
        >>   48 POP_TOP

 17     >>   50 LOAD_CONST               1 (False)
             52 RETURN_VALUE

 19     >>   54 LOAD_DEREF               0 (are_keys_in_range)
             56 LOAD_FAST                0 (tree)
             58 LOAD_ATTR                1 (left)
             60 LOAD_FAST                1 (low_range)
             62 LOAD_FAST                0 (tree)
             64 LOAD_ATTR                0 (val)
             66 CALL_FUNCTION            3
             68 JUMP_IF_FALSE_OR_POP    84
             70 LOAD_DEREF               0 (are_keys_in_range)
             72 LOAD_FAST                0 (tree)
             74 LOAD_ATTR                2 (right)
             76 LOAD_FAST                0 (tree)
             78 LOAD_ATTR                0 (val)
             80 LOAD_FAST                2 (high_range)
             82 CALL_FUNCTION            3
        >>   84 RETURN_VALUE
None
"
isValidBST,"class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        self.answer = True
        
        def dfs(root, left, right):
            if root:
                if left >= root.val or root.val >= right:
                    self.answer = False
                    return
                dfs(root.left, left, root.val)
                dfs(root.right, root.val, right)
        dfs(root, float(""-inf""), float('inf'))
        return self.answer
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f23a21d5660, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f23a21d5660, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (bool)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object isValidBST at 0x7f23a21d55b0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.isValidBST')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (isValidBST)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f23a21d55b0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (True)
              2 LOAD_DEREF               1 (self)
              4 STORE_ATTR               0 (answer)

  5           6 LOAD_CLOSURE             0 (dfs)
              8 LOAD_CLOSURE             1 (self)
             10 BUILD_TUPLE              2
             12 LOAD_CONST               2 (<code object dfs at 0x7f23a21d5500, file ""<ast>"", line 5>)
             14 LOAD_CONST               3 ('Solution.isValidBST.<locals>.dfs')
             16 MAKE_FUNCTION            8 (closure)
             18 STORE_DEREF              0 (dfs)

 12          20 LOAD_DEREF               0 (dfs)
             22 LOAD_FAST                1 (root)
             24 LOAD_GLOBAL              1 (float)
             26 LOAD_CONST               4 ('-inf')
             28 CALL_FUNCTION            1
             30 LOAD_GLOBAL              1 (float)
             32 LOAD_CONST               5 ('inf')
             34 CALL_FUNCTION            1
             36 CALL_FUNCTION            3
             38 POP_TOP

 13          40 LOAD_DEREF               1 (self)
             42 LOAD_ATTR                0 (answer)
             44 RETURN_VALUE

Disassembly of <code object dfs at 0x7f23a21d5500, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_FALSE       66

  7           4 LOAD_FAST                1 (left)
              6 LOAD_FAST                0 (root)
              8 LOAD_ATTR                0 (val)
             10 COMPARE_OP               5 (>=)
             12 POP_JUMP_IF_TRUE        24
             14 LOAD_FAST                0 (root)
             16 LOAD_ATTR                0 (val)
             18 LOAD_FAST                2 (right)
             20 COMPARE_OP               5 (>=)
             22 POP_JUMP_IF_FALSE       34

  8     >>   24 LOAD_CONST               1 (False)
             26 LOAD_DEREF               1 (self)
             28 STORE_ATTR               1 (answer)

  9          30 LOAD_CONST               0 (None)
             32 RETURN_VALUE

 10     >>   34 LOAD_DEREF               0 (dfs)
             36 LOAD_FAST                0 (root)
             38 LOAD_ATTR                2 (left)
             40 LOAD_FAST                1 (left)
             42 LOAD_FAST                0 (root)
             44 LOAD_ATTR                0 (val)
             46 CALL_FUNCTION            3
             48 POP_TOP

 11          50 LOAD_DEREF               0 (dfs)
             52 LOAD_FAST                0 (root)
             54 LOAD_ATTR                3 (right)
             56 LOAD_FAST                0 (root)
             58 LOAD_ATTR                0 (val)
             60 LOAD_FAST                2 (right)
             62 CALL_FUNCTION            3
             64 POP_TOP
        >>   66 LOAD_CONST               0 (None)
             68 RETURN_VALUE
None
"
isValidBST,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
import sys
class Solution:
    def isValidBST(self, root: TreeNode,
                   max_root_val: int = sys.maxsize,
                   min_root_val: int = -sys.maxsize) -> bool:
        if root:
            # The current node must not statisfy any of the conditions
            if root.val >= max_root_val or root.val <= min_root_val:
                return False
            else: # Check left-subtree and right-subtree
                return (self.isValidBST(root.left, min(max_root_val, root.val), min_root_val)
                        and self.isValidBST(root.right, max_root_val, max(min_root_val, root.val)))
        else: # By default return true   
            return True
","  7           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  8           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f4d591252f0, file ""<ast>"", line 8>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4d591252f0, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 10           8 LOAD_NAME                3 (sys)
             10 LOAD_ATTR                4 (maxsize)

 11          12 LOAD_NAME                3 (sys)
             14 LOAD_ATTR                4 (maxsize)
             16 UNARY_NEGATIVE

  9          18 BUILD_TUPLE              2
             20 LOAD_NAME                5 (TreeNode)

 10          22 LOAD_NAME                6 (int)

 11          24 LOAD_NAME                6 (int)
             26 LOAD_NAME                7 (bool)

  9          28 LOAD_CONST               1 (('root', 'max_root_val', 'min_root_val', 'return'))
             30 BUILD_CONST_KEY_MAP      4
             32 LOAD_CONST               2 (<code object isValidBST at 0x7f4d59125240, file ""<ast>"", line 9>)
             34 LOAD_CONST               3 ('Solution.isValidBST')
             36 MAKE_FUNCTION            5 (defaults, annotations)
             38 STORE_NAME               8 (isValidBST)
             40 LOAD_CONST               4 (None)
             42 RETURN_VALUE

Disassembly of <code object isValidBST at 0x7f4d59125240, file ""<ast>"", line 9>:
 12           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       78

 14           4 LOAD_FAST                1 (root)
              6 LOAD_ATTR                0 (val)
              8 LOAD_FAST                2 (max_root_val)
             10 COMPARE_OP               5 (>=)
             12 POP_JUMP_IF_TRUE        24
             14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                0 (val)
             18 LOAD_FAST                3 (min_root_val)
             20 COMPARE_OP               1 (<=)
             22 POP_JUMP_IF_FALSE       28

 15     >>   24 LOAD_CONST               1 (False)
             26 RETURN_VALUE

 17     >>   28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              1 (isValidBST)
             32 LOAD_FAST                1 (root)
             34 LOAD_ATTR                2 (left)
             36 LOAD_GLOBAL              3 (min)
             38 LOAD_FAST                2 (max_root_val)
             40 LOAD_FAST                1 (root)
             42 LOAD_ATTR                0 (val)
             44 CALL_FUNCTION            2
             46 LOAD_FAST                3 (min_root_val)
             48 CALL_METHOD              3
             50 JUMP_IF_FALSE_OR_POP    74

 18          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              1 (isValidBST)
             56 LOAD_FAST                1 (root)
             58 LOAD_ATTR                4 (right)
             60 LOAD_FAST                2 (max_root_val)
             62 LOAD_GLOBAL              5 (max)
             64 LOAD_FAST                3 (min_root_val)
             66 LOAD_FAST                1 (root)
             68 LOAD_ATTR                0 (val)
             70 CALL_FUNCTION            2
             72 CALL_METHOD              3

 17     >>   74 RETURN_VALUE
             76 JUMP_FORWARD             4 (to 82)

 20     >>   78 LOAD_CONST               2 (True)
             80 RETURN_VALUE
        >>   82 LOAD_CONST               0 (None)
             84 RETURN_VALUE
None
"
levelOrder,"from typing import List
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        sol = []
        def _solve(node, depth=0):
            if node:
                if depth >= len(sol):
                    sol.append([])
                _solve(node.left, depth+1)
                sol[depth].append(node.val)
                _solve(node.right, depth+1)
        _solve(root)
        return sol
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object TreeNode at 0x7f106b1052f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('TreeNode')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('TreeNode')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (TreeNode)

  8          26 LOAD_BUILD_CLASS
             28 LOAD_CONST               4 (<code object Solution at 0x7f106b1055b0, file ""<ast>"", line 8>)
             30 LOAD_CONST               5 ('Solution')
             32 MAKE_FUNCTION            0
             34 LOAD_CONST               5 ('Solution')
             36 CALL_FUNCTION            2
             38 STORE_NAME               3 (Solution)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object TreeNode at 0x7f106b1052f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('TreeNode')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               5 ((0, None, None))
             10 LOAD_CONST               3 (<code object __init__ at 0x7f106b105240, file ""<ast>"", line 3>)
             12 LOAD_CONST               4 ('TreeNode.__init__')
             14 MAKE_FUNCTION            1 (defaults)
             16 STORE_NAME               3 (__init__)
             18 LOAD_CONST               2 (None)
             20 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f106b105240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (val)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  5           6 LOAD_FAST                2 (left)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (left)

  6          12 LOAD_FAST                3 (right)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (right)
             18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object Solution at 0x7f106b1055b0, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f106b105500, file ""<ast>"", line 9>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f106b105500, file ""<ast>"", line 9>:
 10           0 BUILD_LIST               0
              2 STORE_DEREF              1 (sol)

 11           4 LOAD_CONST               4 ((0,))
              6 LOAD_CLOSURE             0 (_solve)
              8 LOAD_CLOSURE             1 (sol)
             10 BUILD_TUPLE              2
             12 LOAD_CONST               2 (<code object _solve at 0x7f106b105450, file ""<ast>"", line 11>)
             14 LOAD_CONST               3 ('Solution.levelOrder.<locals>._solve')
             16 MAKE_FUNCTION            9 (defaults, closure)
             18 STORE_DEREF              0 (_solve)

 18          20 LOAD_DEREF               0 (_solve)
             22 LOAD_FAST                1 (root)
             24 CALL_FUNCTION            1
             26 POP_TOP

 19          28 LOAD_DEREF               1 (sol)
             30 RETURN_VALUE

Disassembly of <code object _solve at 0x7f106b105450, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_FALSE       74

 13           4 LOAD_FAST                1 (depth)
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_DEREF               1 (sol)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               5 (>=)
             14 POP_JUMP_IF_FALSE       26

 14          16 LOAD_DEREF               1 (sol)
             18 LOAD_METHOD              1 (append)
             20 BUILD_LIST               0
             22 CALL_METHOD              1
             24 POP_TOP

 15     >>   26 LOAD_DEREF               0 (_solve)
             28 LOAD_FAST                0 (node)
             30 LOAD_ATTR                2 (left)
             32 LOAD_FAST                1 (depth)
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 POP_TOP

 16          42 LOAD_DEREF               1 (sol)
             44 LOAD_FAST                1 (depth)
             46 BINARY_SUBSCR
             48 LOAD_METHOD              1 (append)
             50 LOAD_FAST                0 (node)
             52 LOAD_ATTR                3 (val)
             54 CALL_METHOD              1
             56 POP_TOP

 17          58 LOAD_DEREF               0 (_solve)
             60 LOAD_FAST                0 (node)
             62 LOAD_ATTR                4 (right)
             64 LOAD_FAST                1 (depth)
             66 LOAD_CONST               1 (1)
             68 BINARY_ADD
             70 CALL_FUNCTION            2
             72 POP_TOP
        >>   74 LOAD_CONST               0 (None)
             76 RETURN_VALUE
None
"
levelOrder,"import collections
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root: return
        
        q = collections.deque([root, None]) # here, None will let you know the level
        tmp = []
        res = []
        while q:
            node = q.popleft()
            if node is None:
                res.append(tmp)
                tmp = []
                if q: q.append(None)
            
            else:
                tmp.append(node.val)
                if node.left: q.append(node.left)
                if node.right: q.append(node.right)
        
        return res
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)

  8           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f5282db5240, file ""<ast>"", line 8>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5282db5240, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f5282db53a0, file ""<ast>"", line 9>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f5282db53a0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 12     >>    8 LOAD_GLOBAL              0 (collections)
             10 LOAD_METHOD              1 (deque)
             12 LOAD_FAST                1 (root)
             14 LOAD_CONST               0 (None)
             16 BUILD_LIST               2
             18 CALL_METHOD              1
             20 STORE_FAST               2 (q)

 13          22 BUILD_LIST               0
             24 STORE_FAST               3 (tmp)

 14          26 BUILD_LIST               0
             28 STORE_FAST               4 (res)

 15     >>   30 LOAD_FAST                2 (q)
             32 POP_JUMP_IF_FALSE      130

 16          34 LOAD_FAST                2 (q)
             36 LOAD_METHOD              2 (popleft)
             38 CALL_METHOD              0
             40 STORE_FAST               5 (node)

 17          42 LOAD_FAST                5 (node)
             44 LOAD_CONST               0 (None)
             46 COMPARE_OP               8 (is)
             48 POP_JUMP_IF_FALSE       80

 18          50 LOAD_FAST                4 (res)
             52 LOAD_METHOD              3 (append)
             54 LOAD_FAST                3 (tmp)
             56 CALL_METHOD              1
             58 POP_TOP

 19          60 BUILD_LIST               0
             62 STORE_FAST               3 (tmp)

 20          64 LOAD_FAST                2 (q)
             66 POP_JUMP_IF_FALSE      128
             68 LOAD_FAST                2 (q)
             70 LOAD_METHOD              3 (append)
             72 LOAD_CONST               0 (None)
             74 CALL_METHOD              1
             76 POP_TOP
             78 JUMP_ABSOLUTE           30

 23     >>   80 LOAD_FAST                3 (tmp)
             82 LOAD_METHOD              3 (append)
             84 LOAD_FAST                5 (node)
             86 LOAD_ATTR                4 (val)
             88 CALL_METHOD              1
             90 POP_TOP

 24          92 LOAD_FAST                5 (node)
             94 LOAD_ATTR                5 (left)
             96 POP_JUMP_IF_FALSE      110
             98 LOAD_FAST                2 (q)
            100 LOAD_METHOD              3 (append)
            102 LOAD_FAST                5 (node)
            104 LOAD_ATTR                5 (left)
            106 CALL_METHOD              1
            108 POP_TOP

 25     >>  110 LOAD_FAST                5 (node)
            112 LOAD_ATTR                6 (right)
            114 POP_JUMP_IF_FALSE       30
            116 LOAD_FAST                2 (q)
            118 LOAD_METHOD              3 (append)
            120 LOAD_FAST                5 (node)
            122 LOAD_ATTR                6 (right)
            124 CALL_METHOD              1
            126 POP_TOP
        >>  128 JUMP_ABSOLUTE           30

 27     >>  130 LOAD_FAST                4 (res)
            132 RETURN_VALUE
None
"
levelOrder,"class Solution:
	def levelOrder(self, root: TreeNode) -> List[List[int]]:
		if not root:
			return []
		q = [root]
		level = [[root.val]]
		while q:
			size = len(q)
			l = []
			while size:
				front = q.pop(0)
				size-=1

				if front.left:
					q.append(front.left)
					l+=[front.left.val]
				if front.right:
					q.append(front.right)
					l+=[front.right.val]
			if l:
				level.append(l)

		return level             
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fed026e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fed026e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fed026e5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fed026e5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 BUILD_LIST               0
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (root)
             10 BUILD_LIST               1
             12 STORE_FAST               2 (q)

  6          14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                0 (val)
             18 BUILD_LIST               1
             20 BUILD_LIST               1
             22 STORE_FAST               3 (level)

  7     >>   24 LOAD_FAST                2 (q)
             26 POP_JUMP_IF_FALSE      144

  8          28 LOAD_GLOBAL              1 (len)
             30 LOAD_FAST                2 (q)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (size)

  9          36 BUILD_LIST               0
             38 STORE_FAST               5 (l)

 10     >>   40 LOAD_FAST                4 (size)
             42 POP_JUMP_IF_FALSE      128

 11          44 LOAD_FAST                2 (q)
             46 LOAD_METHOD              2 (pop)
             48 LOAD_CONST               1 (0)
             50 CALL_METHOD              1
             52 STORE_FAST               6 (front)

 12          54 LOAD_FAST                4 (size)
             56 LOAD_CONST               2 (1)
             58 INPLACE_SUBTRACT
             60 STORE_FAST               4 (size)

 14          62 LOAD_FAST                6 (front)
             64 LOAD_ATTR                3 (left)
             66 POP_JUMP_IF_FALSE       94

 15          68 LOAD_FAST                2 (q)
             70 LOAD_METHOD              4 (append)
             72 LOAD_FAST                6 (front)
             74 LOAD_ATTR                3 (left)
             76 CALL_METHOD              1
             78 POP_TOP

 16          80 LOAD_FAST                5 (l)
             82 LOAD_FAST                6 (front)
             84 LOAD_ATTR                3 (left)
             86 LOAD_ATTR                0 (val)
             88 BUILD_LIST               1
             90 INPLACE_ADD
             92 STORE_FAST               5 (l)

 17     >>   94 LOAD_FAST                6 (front)
             96 LOAD_ATTR                5 (right)
             98 POP_JUMP_IF_FALSE       40

 18         100 LOAD_FAST                2 (q)
            102 LOAD_METHOD              4 (append)
            104 LOAD_FAST                6 (front)
            106 LOAD_ATTR                5 (right)
            108 CALL_METHOD              1
            110 POP_TOP

 19         112 LOAD_FAST                5 (l)
            114 LOAD_FAST                6 (front)
            116 LOAD_ATTR                5 (right)
            118 LOAD_ATTR                0 (val)
            120 BUILD_LIST               1
            122 INPLACE_ADD
            124 STORE_FAST               5 (l)
            126 JUMP_ABSOLUTE           40

 20     >>  128 LOAD_FAST                5 (l)
            130 POP_JUMP_IF_FALSE       24

 21         132 LOAD_FAST                3 (level)
            134 LOAD_METHOD              4 (append)
            136 LOAD_FAST                5 (l)
            138 CALL_METHOD              1
            140 POP_TOP
            142 JUMP_ABSOLUTE           24

 23     >>  144 LOAD_FAST                3 (level)
            146 RETURN_VALUE
None
"
levelOrder,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        
        
        traversal_queue = [ root ] if root else []
        
        path = []
        
        while traversal_queue:
            
            cur_level_path, next_level_queue = [], []
            
            for node in traversal_queue:
                
                # update current level traversal path
                cur_level_path.append( node.val )
                
                if node.left:
                    next_level_queue.append( node.left )
                
                if node.right:
                    next_level_queue.append( node.right )
            
            # add current level path into path collection
            path.append( cur_level_path )
            
            # update next_level_queue as traversal_queu
            traversal_queue = next_level_queue
            
        return path
","  8           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa1adbb5240, file ""<ast>"", line 8>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa1adbb5240, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fa1adbb52f0, file ""<ast>"", line 9>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fa1adbb52f0, file ""<ast>"", line 9>:
 12           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       10
              4 LOAD_FAST                1 (root)
              6 BUILD_LIST               1
              8 JUMP_FORWARD             2 (to 12)
        >>   10 BUILD_LIST               0
        >>   12 STORE_FAST               2 (traversal_queue)

 14          14 BUILD_LIST               0
             16 STORE_FAST               3 (path)

 16     >>   18 LOAD_FAST                2 (traversal_queue)
             20 POP_JUMP_IF_FALSE      106

 18          22 BUILD_LIST               0
             24 BUILD_LIST               0
             26 ROT_TWO
             28 STORE_FAST               4 (cur_level_path)
             30 STORE_FAST               5 (next_level_queue)

 20          32 LOAD_FAST                2 (traversal_queue)
             34 GET_ITER
        >>   36 FOR_ITER                52 (to 90)
             38 STORE_FAST               6 (node)

 23          40 LOAD_FAST                4 (cur_level_path)
             42 LOAD_METHOD              0 (append)
             44 LOAD_FAST                6 (node)
             46 LOAD_ATTR                1 (val)
             48 CALL_METHOD              1
             50 POP_TOP

 25          52 LOAD_FAST                6 (node)
             54 LOAD_ATTR                2 (left)
             56 POP_JUMP_IF_FALSE       70

 26          58 LOAD_FAST                5 (next_level_queue)
             60 LOAD_METHOD              0 (append)
             62 LOAD_FAST                6 (node)
             64 LOAD_ATTR                2 (left)
             66 CALL_METHOD              1
             68 POP_TOP

 28     >>   70 LOAD_FAST                6 (node)
             72 LOAD_ATTR                3 (right)
             74 POP_JUMP_IF_FALSE       36

 29          76 LOAD_FAST                5 (next_level_queue)
             78 LOAD_METHOD              0 (append)
             80 LOAD_FAST                6 (node)
             82 LOAD_ATTR                3 (right)
             84 CALL_METHOD              1
             86 POP_TOP
             88 JUMP_ABSOLUTE           36

 32     >>   90 LOAD_FAST                3 (path)
             92 LOAD_METHOD              0 (append)
             94 LOAD_FAST                4 (cur_level_path)
             96 CALL_METHOD              1
             98 POP_TOP

 35         100 LOAD_FAST                5 (next_level_queue)
            102 STORE_FAST               2 (traversal_queue)
            104 JUMP_ABSOLUTE           18

 37     >>  106 LOAD_FAST                3 (path)
            108 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def get_nodes(self, root: TreeNode, level: int) -> None:
        if root:
            tmp = self.level_dict.get(level, [])
            tmp.append(root.val)
            self.level_dict[level] = tmp
            self.get_nodes(root.left, level + 1)
            self.get_nodes(root.right, level + 1)

    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        self.level_dict = dict()
        self.get_nodes(root, 0)
        return [nodes for nodes in self.level_dict.values()]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4c61c55450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4c61c55450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (None)
             14 LOAD_CONST               2 (('root', 'level', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               3 (<code object get_nodes at 0x7f4c61c55240, file ""<ast>"", line 2>)
             20 LOAD_CONST               4 ('Solution.get_nodes')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (get_nodes)

 10          26 LOAD_NAME                3 (TreeNode)
             28 LOAD_NAME                6 (List)
             30 LOAD_NAME                6 (List)
             32 LOAD_NAME                4 (int)
             34 BINARY_SUBSCR
             36 BINARY_SUBSCR
             38 LOAD_CONST               5 (('root', 'return'))
             40 BUILD_CONST_KEY_MAP      2
             42 LOAD_CONST               6 (<code object levelOrder at 0x7f4c61c553a0, file ""<ast>"", line 10>)
             44 LOAD_CONST               7 ('Solution.levelOrder')
             46 MAKE_FUNCTION            4 (annotations)
             48 STORE_NAME               7 (levelOrder)
             50 LOAD_CONST               1 (None)
             52 RETURN_VALUE

Disassembly of <code object get_nodes at 0x7f4c61c55240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       76

  4           4 LOAD_FAST                0 (self)
              6 LOAD_ATTR                0 (level_dict)
              8 LOAD_METHOD              1 (get)
             10 LOAD_FAST                2 (level)
             12 BUILD_LIST               0
             14 CALL_METHOD              2
             16 STORE_FAST               3 (tmp)

  5          18 LOAD_FAST                3 (tmp)
             20 LOAD_METHOD              2 (append)
             22 LOAD_FAST                1 (root)
             24 LOAD_ATTR                3 (val)
             26 CALL_METHOD              1
             28 POP_TOP

  6          30 LOAD_FAST                3 (tmp)
             32 LOAD_FAST                0 (self)
             34 LOAD_ATTR                0 (level_dict)
             36 LOAD_FAST                2 (level)
             38 STORE_SUBSCR

  7          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              4 (get_nodes)
             44 LOAD_FAST                1 (root)
             46 LOAD_ATTR                5 (left)
             48 LOAD_FAST                2 (level)
             50 LOAD_CONST               1 (1)
             52 BINARY_ADD
             54 CALL_METHOD              2
             56 POP_TOP

  8          58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              4 (get_nodes)
             62 LOAD_FAST                1 (root)
             64 LOAD_ATTR                6 (right)
             66 LOAD_FAST                2 (level)
             68 LOAD_CONST               1 (1)
             70 BINARY_ADD
             72 CALL_METHOD              2
             74 POP_TOP
        >>   76 LOAD_CONST               0 (None)
             78 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f4c61c553a0, file ""<ast>"", line 10>:
 11           0 LOAD_GLOBAL              0 (dict)
              2 CALL_FUNCTION            0
              4 LOAD_FAST                0 (self)
              6 STORE_ATTR               1 (level_dict)

 12           8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              2 (get_nodes)
             12 LOAD_FAST                1 (root)
             14 LOAD_CONST               1 (0)
             16 CALL_METHOD              2
             18 POP_TOP

 13          20 LOAD_CONST               2 (<code object <listcomp> at 0x7f4c61c552f0, file ""<ast>"", line 13>)
             22 LOAD_CONST               3 ('Solution.levelOrder.<locals>.<listcomp>')
             24 MAKE_FUNCTION            0
             26 LOAD_FAST                0 (self)
             28 LOAD_ATTR                1 (level_dict)
             30 LOAD_METHOD              3 (values)
             32 CALL_METHOD              0
             34 GET_ITER
             36 CALL_FUNCTION            1
             38 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f4c61c552f0, file ""<ast>"", line 13>:
 13           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (nodes)
              8 LOAD_FAST                1 (nodes)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        order = []
        if root is None:
            return order
        
        level = [root]
        while len(level) > 0:
		    # Add the new level to the final results.
            order.append([node.val for node in level])
			
			# Clear our level cache, and get all the children of the current level.
            parent = level
            level = []
            
            for node in parent:
                if node.left:
                    level.append(node.left)
                if node.right:
                    level.append(node.right)
            
        return order
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f10335152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f10335152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f10335153a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f10335153a0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (order)

  4           4 LOAD_FAST                1 (root)
              6 LOAD_CONST               0 (None)
              8 COMPARE_OP               8 (is)
             10 POP_JUMP_IF_FALSE       16

  5          12 LOAD_FAST                2 (order)
             14 RETURN_VALUE

  7     >>   16 LOAD_FAST                1 (root)
             18 BUILD_LIST               1
             20 STORE_FAST               3 (level)

  8     >>   22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                3 (level)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               1 (0)
             30 COMPARE_OP               4 (>)
             32 POP_JUMP_IF_FALSE      110

 10          34 LOAD_FAST                2 (order)
             36 LOAD_METHOD              1 (append)
             38 LOAD_CONST               2 (<code object <listcomp> at 0x7f1033515240, file ""<ast>"", line 10>)
             40 LOAD_CONST               3 ('Solution.levelOrder.<locals>.<listcomp>')
             42 MAKE_FUNCTION            0
             44 LOAD_FAST                3 (level)
             46 GET_ITER
             48 CALL_FUNCTION            1
             50 CALL_METHOD              1
             52 POP_TOP

 13          54 LOAD_FAST                3 (level)
             56 STORE_FAST               4 (parent)

 14          58 BUILD_LIST               0
             60 STORE_FAST               3 (level)

 16          62 LOAD_FAST                4 (parent)
             64 GET_ITER
        >>   66 FOR_ITER                40 (to 108)
             68 STORE_FAST               5 (node)

 17          70 LOAD_FAST                5 (node)
             72 LOAD_ATTR                2 (left)
             74 POP_JUMP_IF_FALSE       88

 18          76 LOAD_FAST                3 (level)
             78 LOAD_METHOD              1 (append)
             80 LOAD_FAST                5 (node)
             82 LOAD_ATTR                2 (left)
             84 CALL_METHOD              1
             86 POP_TOP

 19     >>   88 LOAD_FAST                5 (node)
             90 LOAD_ATTR                3 (right)
             92 POP_JUMP_IF_FALSE       66

 20          94 LOAD_FAST                3 (level)
             96 LOAD_METHOD              1 (append)
             98 LOAD_FAST                5 (node)
            100 LOAD_ATTR                3 (right)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           66
        >>  108 JUMP_ABSOLUTE           22

 22     >>  110 LOAD_FAST                2 (order)
            112 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1033515240, file ""<ast>"", line 10>:
 10           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (node)
              8 LOAD_FAST                1 (node)
             10 LOAD_ATTR                0 (val)
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE
None
"
levelOrder,"from collections import deque
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        queue=deque()
        queue.append(root)
        if not root: return []
        result = [[root.val]]
        n1 = []
        n2 = [1]
        while queue:
            n1=[]
            for _ in range(len(n2)):
                current=queue.popleft()
                if(current.left): 
                    queue.append(current.left)
                    n1.append(current.left.val)
                if(current.right): 
                    queue.append(current.right)
                    n1.append(current.right.val)
            n2=n1
            if(len(n2)): result.append(n2)
        return result
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fd6806352f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd6806352f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fd680635240, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fd680635240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (deque)
              2 CALL_FUNCTION            0
              4 STORE_FAST               2 (queue)

  5           6 LOAD_FAST                2 (queue)
              8 LOAD_METHOD              1 (append)
             10 LOAD_FAST                1 (root)
             12 CALL_METHOD              1
             14 POP_TOP

  6          16 LOAD_FAST                1 (root)
             18 POP_JUMP_IF_TRUE        24
             20 BUILD_LIST               0
             22 RETURN_VALUE

  7     >>   24 LOAD_FAST                1 (root)
             26 LOAD_ATTR                2 (val)
             28 BUILD_LIST               1
             30 BUILD_LIST               1
             32 STORE_FAST               3 (result)

  8          34 BUILD_LIST               0
             36 STORE_FAST               4 (n1)

  9          38 LOAD_CONST               1 (1)
             40 BUILD_LIST               1
             42 STORE_FAST               5 (n2)

 10     >>   44 LOAD_FAST                2 (queue)
             46 POP_JUMP_IF_FALSE      166

 11          48 BUILD_LIST               0
             50 STORE_FAST               4 (n1)

 12          52 LOAD_GLOBAL              3 (range)
             54 LOAD_GLOBAL              4 (len)
             56 LOAD_FAST                5 (n2)
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                76 (to 142)
             66 STORE_FAST               6 (_)

 13          68 LOAD_FAST                2 (queue)
             70 LOAD_METHOD              5 (popleft)
             72 CALL_METHOD              0
             74 STORE_FAST               7 (current)

 14          76 LOAD_FAST                7 (current)
             78 LOAD_ATTR                6 (left)
             80 POP_JUMP_IF_FALSE      108

 15          82 LOAD_FAST                2 (queue)
             84 LOAD_METHOD              1 (append)
             86 LOAD_FAST                7 (current)
             88 LOAD_ATTR                6 (left)
             90 CALL_METHOD              1
             92 POP_TOP

 16          94 LOAD_FAST                4 (n1)
             96 LOAD_METHOD              1 (append)
             98 LOAD_FAST                7 (current)
            100 LOAD_ATTR                6 (left)
            102 LOAD_ATTR                2 (val)
            104 CALL_METHOD              1
            106 POP_TOP

 17     >>  108 LOAD_FAST                7 (current)
            110 LOAD_ATTR                7 (right)
            112 POP_JUMP_IF_FALSE       64

 18         114 LOAD_FAST                2 (queue)
            116 LOAD_METHOD              1 (append)
            118 LOAD_FAST                7 (current)
            120 LOAD_ATTR                7 (right)
            122 CALL_METHOD              1
            124 POP_TOP

 19         126 LOAD_FAST                4 (n1)
            128 LOAD_METHOD              1 (append)
            130 LOAD_FAST                7 (current)
            132 LOAD_ATTR                7 (right)
            134 LOAD_ATTR                2 (val)
            136 CALL_METHOD              1
            138 POP_TOP
            140 JUMP_ABSOLUTE           64

 20     >>  142 LOAD_FAST                4 (n1)
            144 STORE_FAST               5 (n2)

 21         146 LOAD_GLOBAL              4 (len)
            148 LOAD_FAST                5 (n2)
            150 CALL_FUNCTION            1
            152 POP_JUMP_IF_FALSE       44
            154 LOAD_FAST                3 (result)
            156 LOAD_METHOD              1 (append)
            158 LOAD_FAST                5 (n2)
            160 CALL_METHOD              1
            162 POP_TOP
            164 JUMP_ABSOLUTE           44

 22     >>  166 LOAD_FAST                3 (result)
            168 RETURN_VALUE
None
"
levelOrder,"from queue import Queue 

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root is None:
            return []
        
        q = Queue()
        q.put(root)
        res = []
        while (q.qsize()):
            nextLevel = Queue()
            levelArr = []
            
            # For all nodes on the same level, add child nodes from left to right
            while (q.qsize()):
                front = q.get()
                levelArr.append(front.val)
                if front.left != None:
                    nextLevel.put(front.left)
                if front.right != None:
                    nextLevel.put(front.right)
                    
            # By this point, q has exhausted all nodes on that level
            q = nextLevel
            
            # Add the level array to the result array
            res.append(levelArr)
        
        return res
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Queue',))
              4 IMPORT_NAME              0 (queue)
              6 IMPORT_FROM              1 (Queue)
              8 STORE_NAME               1 (Queue)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f32920852f0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f32920852f0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f3292085240, file ""<ast>"", line 4>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f3292085240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  6           8 BUILD_LIST               0
             10 RETURN_VALUE

  8     >>   12 LOAD_GLOBAL              0 (Queue)
             14 CALL_FUNCTION            0
             16 STORE_FAST               2 (q)

  9          18 LOAD_FAST                2 (q)
             20 LOAD_METHOD              1 (put)
             22 LOAD_FAST                1 (root)
             24 CALL_METHOD              1
             26 POP_TOP

 10          28 BUILD_LIST               0
             30 STORE_FAST               3 (res)

 11     >>   32 LOAD_FAST                2 (q)
             34 LOAD_METHOD              2 (qsize)
             36 CALL_METHOD              0
             38 POP_JUMP_IF_FALSE      140

 12          40 LOAD_GLOBAL              0 (Queue)
             42 CALL_FUNCTION            0
             44 STORE_FAST               4 (nextLevel)

 13          46 BUILD_LIST               0
             48 STORE_FAST               5 (levelArr)

 16     >>   50 LOAD_FAST                2 (q)
             52 LOAD_METHOD              2 (qsize)
             54 CALL_METHOD              0
             56 POP_JUMP_IF_FALSE      124

 17          58 LOAD_FAST                2 (q)
             60 LOAD_METHOD              3 (get)
             62 CALL_METHOD              0
             64 STORE_FAST               6 (front)

 18          66 LOAD_FAST                5 (levelArr)
             68 LOAD_METHOD              4 (append)
             70 LOAD_FAST                6 (front)
             72 LOAD_ATTR                5 (val)
             74 CALL_METHOD              1
             76 POP_TOP

 19          78 LOAD_FAST                6 (front)
             80 LOAD_ATTR                6 (left)
             82 LOAD_CONST               0 (None)
             84 COMPARE_OP               3 (!=)
             86 POP_JUMP_IF_FALSE      100

 20          88 LOAD_FAST                4 (nextLevel)
             90 LOAD_METHOD              1 (put)
             92 LOAD_FAST                6 (front)
             94 LOAD_ATTR                6 (left)
             96 CALL_METHOD              1
             98 POP_TOP

 21     >>  100 LOAD_FAST                6 (front)
            102 LOAD_ATTR                7 (right)
            104 LOAD_CONST               0 (None)
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       50

 22         110 LOAD_FAST                4 (nextLevel)
            112 LOAD_METHOD              1 (put)
            114 LOAD_FAST                6 (front)
            116 LOAD_ATTR                7 (right)
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           50

 25     >>  124 LOAD_FAST                4 (nextLevel)
            126 STORE_FAST               2 (q)

 28         128 LOAD_FAST                3 (res)
            130 LOAD_METHOD              4 (append)
            132 LOAD_FAST                5 (levelArr)
            134 CALL_METHOD              1
            136 POP_TOP
            138 JUMP_ABSOLUTE           32

 30     >>  140 LOAD_FAST                3 (res)
            142 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        
        if(root==None):
            return []
           
        minorList = []
        ansList = []
        i = 1
        level = 0
        queue = [(root, level)]
        
        while(queue):
            node, level = queue.pop()
            if(level == i):
                ansList.append(minorList)
                minorList = []
                i += 1
            minorList.append(node.val)
            if(node.left):        
                queue.insert(0, (node.left, level+1))
            if(node.right):
                queue.insert(0, (node.right, level+1))
                
        if(minorList):
            ansList.append(minorList)
            
        return ansList
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7d085c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7d085c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f7d085c5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f7d085c5240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 BUILD_LIST               0
             10 RETURN_VALUE

  7     >>   12 BUILD_LIST               0
             14 STORE_FAST               2 (minorList)

  8          16 BUILD_LIST               0
             18 STORE_FAST               3 (ansList)

  9          20 LOAD_CONST               1 (1)
             22 STORE_FAST               4 (i)

 10          24 LOAD_CONST               2 (0)
             26 STORE_FAST               5 (level)

 11          28 LOAD_FAST                1 (root)
             30 LOAD_FAST                5 (level)
             32 BUILD_TUPLE              2
             34 BUILD_LIST               1
             36 STORE_FAST               6 (queue)

 13     >>   38 LOAD_FAST                6 (queue)
             40 POP_JUMP_IF_FALSE      154

 14          42 LOAD_FAST                6 (queue)
             44 LOAD_METHOD              0 (pop)
             46 CALL_METHOD              0
             48 UNPACK_SEQUENCE          2
             50 STORE_FAST               7 (node)
             52 STORE_FAST               5 (level)

 15          54 LOAD_FAST                5 (level)
             56 LOAD_FAST                4 (i)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       84

 16          62 LOAD_FAST                3 (ansList)
             64 LOAD_METHOD              1 (append)
             66 LOAD_FAST                2 (minorList)
             68 CALL_METHOD              1
             70 POP_TOP

 17          72 BUILD_LIST               0
             74 STORE_FAST               2 (minorList)

 18          76 LOAD_FAST                4 (i)
             78 LOAD_CONST               1 (1)
             80 INPLACE_ADD
             82 STORE_FAST               4 (i)

 19     >>   84 LOAD_FAST                2 (minorList)
             86 LOAD_METHOD              1 (append)
             88 LOAD_FAST                7 (node)
             90 LOAD_ATTR                2 (val)
             92 CALL_METHOD              1
             94 POP_TOP

 20          96 LOAD_FAST                7 (node)
             98 LOAD_ATTR                3 (left)
            100 POP_JUMP_IF_FALSE      124

 21         102 LOAD_FAST                6 (queue)
            104 LOAD_METHOD              4 (insert)
            106 LOAD_CONST               2 (0)
            108 LOAD_FAST                7 (node)
            110 LOAD_ATTR                3 (left)
            112 LOAD_FAST                5 (level)
            114 LOAD_CONST               1 (1)
            116 BINARY_ADD
            118 BUILD_TUPLE              2
            120 CALL_METHOD              2
            122 POP_TOP

 22     >>  124 LOAD_FAST                7 (node)
            126 LOAD_ATTR                5 (right)
            128 POP_JUMP_IF_FALSE       38

 23         130 LOAD_FAST                6 (queue)
            132 LOAD_METHOD              4 (insert)
            134 LOAD_CONST               2 (0)
            136 LOAD_FAST                7 (node)
            138 LOAD_ATTR                5 (right)
            140 LOAD_FAST                5 (level)
            142 LOAD_CONST               1 (1)
            144 BINARY_ADD
            146 BUILD_TUPLE              2
            148 CALL_METHOD              2
            150 POP_TOP
            152 JUMP_ABSOLUTE           38

 25     >>  154 LOAD_FAST                2 (minorList)
            156 POP_JUMP_IF_FALSE      168

 26         158 LOAD_FAST                3 (ansList)
            160 LOAD_METHOD              1 (append)
            162 LOAD_FAST                2 (minorList)
            164 CALL_METHOD              1
            166 POP_TOP

 28     >>  168 LOAD_FAST                3 (ansList)
            170 RETURN_VALUE
None
"
levelOrder,"from collections import defaultdict
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        
        if root == None:
            return []
        
        Q = [(root, 0)]
        level = defaultdict(list)
        
        while Q:
            
            node, l = Q.pop(0)
            level[l].append(node.val)
            
            if node.left:
                Q.append((node.left, l+1))
                
            if node.right:
                Q.append((node.right, l+1))
            
        
        return [*level.values()]
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('defaultdict',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (defaultdict)
              8 STORE_NAME               1 (defaultdict)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fc2731e5240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc2731e5240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fc2731e53a0, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fc2731e53a0, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  6           8 BUILD_LIST               0
             10 RETURN_VALUE

  8     >>   12 LOAD_FAST                1 (root)
             14 LOAD_CONST               1 (0)
             16 BUILD_TUPLE              2
             18 BUILD_LIST               1
             20 STORE_FAST               2 (Q)

  9          22 LOAD_GLOBAL              0 (defaultdict)
             24 LOAD_GLOBAL              1 (list)
             26 CALL_FUNCTION            1
             28 STORE_FAST               3 (level)

 11     >>   30 LOAD_FAST                2 (Q)
             32 POP_JUMP_IF_FALSE      118

 13          34 LOAD_FAST                2 (Q)
             36 LOAD_METHOD              2 (pop)
             38 LOAD_CONST               1 (0)
             40 CALL_METHOD              1
             42 UNPACK_SEQUENCE          2
             44 STORE_FAST               4 (node)
             46 STORE_FAST               5 (l)

 14          48 LOAD_FAST                3 (level)
             50 LOAD_FAST                5 (l)
             52 BINARY_SUBSCR
             54 LOAD_METHOD              3 (append)
             56 LOAD_FAST                4 (node)
             58 LOAD_ATTR                4 (val)
             60 CALL_METHOD              1
             62 POP_TOP

 16          64 LOAD_FAST                4 (node)
             66 LOAD_ATTR                5 (left)
             68 POP_JUMP_IF_FALSE       90

 17          70 LOAD_FAST                2 (Q)
             72 LOAD_METHOD              3 (append)
             74 LOAD_FAST                4 (node)
             76 LOAD_ATTR                5 (left)
             78 LOAD_FAST                5 (l)
             80 LOAD_CONST               2 (1)
             82 BINARY_ADD
             84 BUILD_TUPLE              2
             86 CALL_METHOD              1
             88 POP_TOP

 19     >>   90 LOAD_FAST                4 (node)
             92 LOAD_ATTR                6 (right)
             94 POP_JUMP_IF_FALSE       30

 20          96 LOAD_FAST                2 (Q)
             98 LOAD_METHOD              3 (append)
            100 LOAD_FAST                4 (node)
            102 LOAD_ATTR                6 (right)
            104 LOAD_FAST                5 (l)
            106 LOAD_CONST               2 (1)
            108 BINARY_ADD
            110 BUILD_TUPLE              2
            112 CALL_METHOD              1
            114 POP_TOP
            116 JUMP_ABSOLUTE           30

 23     >>  118 LOAD_FAST                3 (level)
            120 LOAD_METHOD              7 (values)
            122 CALL_METHOD              0
            124 BUILD_LIST_UNPACK        1
            126 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        self._levels = []
        self.get_level(root, 0)
        return self._levels
            
    def get_level(self, root, depth):
        if(not root):
            return
        if(depth == len(self._levels)):
            self._levels.append([])
        self._levels[depth].append(root.val)
        self.get_level(root.left, depth + 1)
        self.get_level(root.right, depth + 1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f55d31c53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f55d31c53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f55d31c5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)

  7          32 LOAD_CONST               4 (<code object get_level at 0x7f55d31c52f0, file ""<ast>"", line 7>)
             34 LOAD_CONST               5 ('Solution.get_level')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (get_level)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f55d31c5240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (_levels)

  4           6 LOAD_FAST                0 (self)
              8 LOAD_METHOD              1 (get_level)
             10 LOAD_FAST                1 (root)
             12 LOAD_CONST               1 (0)
             14 CALL_METHOD              2
             16 POP_TOP

  5          18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (_levels)
             22 RETURN_VALUE

Disassembly of <code object get_level at 0x7f55d31c52f0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  9           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 10     >>    8 LOAD_FAST                2 (depth)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                0 (self)
             14 LOAD_ATTR                1 (_levels)
             16 CALL_FUNCTION            1
             18 COMPARE_OP               2 (==)
             20 POP_JUMP_IF_FALSE       34

 11          22 LOAD_FAST                0 (self)
             24 LOAD_ATTR                1 (_levels)
             26 LOAD_METHOD              2 (append)
             28 BUILD_LIST               0
             30 CALL_METHOD              1
             32 POP_TOP

 12     >>   34 LOAD_FAST                0 (self)
             36 LOAD_ATTR                1 (_levels)
             38 LOAD_FAST                2 (depth)
             40 BINARY_SUBSCR
             42 LOAD_METHOD              2 (append)
             44 LOAD_FAST                1 (root)
             46 LOAD_ATTR                3 (val)
             48 CALL_METHOD              1
             50 POP_TOP

 13          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              4 (get_level)
             56 LOAD_FAST                1 (root)
             58 LOAD_ATTR                5 (left)
             60 LOAD_FAST                2 (depth)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 CALL_METHOD              2
             68 POP_TOP

 14          70 LOAD_FAST                0 (self)
             72 LOAD_METHOD              4 (get_level)
             74 LOAD_FAST                1 (root)
             76 LOAD_ATTR                6 (right)
             78 LOAD_FAST                2 (depth)
             80 LOAD_CONST               1 (1)
             82 BINARY_ADD
             84 CALL_METHOD              2
             86 POP_TOP
             88 LOAD_CONST               0 (None)
             90 RETURN_VALUE
None
"
levelOrder,"# Definition for a binary tree node.
from collections import deque
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        parent=deque() #using deque to use its feature of accesing element from left 
        
        parent.append(root)
        result=list()
        
        while parent:
            
            children=deque()
            current=[]
            temp=None
            
            while parent:#travesing through parrent level and simultaneously appending their right and left child to children deque
                temp=parent.popleft()
                current.append(temp.val)
                if temp.left:
                    children.append(temp.left)
                if temp.right:
                    children.append(temp.right)
            
            result.append(current) # appending value of all node of current level to final result for each level separately 
            parent=children # assigning children deque to parent deque for traversal through next level
                   
        return result
            
        
","  2           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  8          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f34eaba5240, file ""<ast>"", line 8>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f34eaba5240, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f34eaba53a0, file ""<ast>"", line 9>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f34eaba53a0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

 11           4 BUILD_LIST               0
              6 RETURN_VALUE

 13     >>    8 LOAD_GLOBAL              0 (deque)
             10 CALL_FUNCTION            0
             12 STORE_FAST               2 (parent)

 15          14 LOAD_FAST                2 (parent)
             16 LOAD_METHOD              1 (append)
             18 LOAD_FAST                1 (root)
             20 CALL_METHOD              1
             22 POP_TOP

 16          24 LOAD_GLOBAL              2 (list)
             26 CALL_FUNCTION            0
             28 STORE_FAST               3 (result)

 18     >>   30 LOAD_FAST                2 (parent)
             32 POP_JUMP_IF_FALSE      126

 20          34 LOAD_GLOBAL              0 (deque)
             36 CALL_FUNCTION            0
             38 STORE_FAST               4 (children)

 21          40 BUILD_LIST               0
             42 STORE_FAST               5 (current)

 22          44 LOAD_CONST               0 (None)
             46 STORE_FAST               6 (temp)

 24     >>   48 LOAD_FAST                2 (parent)
             50 POP_JUMP_IF_FALSE      110

 25          52 LOAD_FAST                2 (parent)
             54 LOAD_METHOD              3 (popleft)
             56 CALL_METHOD              0
             58 STORE_FAST               6 (temp)

 26          60 LOAD_FAST                5 (current)
             62 LOAD_METHOD              1 (append)
             64 LOAD_FAST                6 (temp)
             66 LOAD_ATTR                4 (val)
             68 CALL_METHOD              1
             70 POP_TOP

 27          72 LOAD_FAST                6 (temp)
             74 LOAD_ATTR                5 (left)
             76 POP_JUMP_IF_FALSE       90

 28          78 LOAD_FAST                4 (children)
             80 LOAD_METHOD              1 (append)
             82 LOAD_FAST                6 (temp)
             84 LOAD_ATTR                5 (left)
             86 CALL_METHOD              1
             88 POP_TOP

 29     >>   90 LOAD_FAST                6 (temp)
             92 LOAD_ATTR                6 (right)
             94 POP_JUMP_IF_FALSE       48

 30          96 LOAD_FAST                4 (children)
             98 LOAD_METHOD              1 (append)
            100 LOAD_FAST                6 (temp)
            102 LOAD_ATTR                6 (right)
            104 CALL_METHOD              1
            106 POP_TOP
            108 JUMP_ABSOLUTE           48

 32     >>  110 LOAD_FAST                3 (result)
            112 LOAD_METHOD              1 (append)
            114 LOAD_FAST                5 (current)
            116 CALL_METHOD              1
            118 POP_TOP

 33         120 LOAD_FAST                4 (children)
            122 STORE_FAST               2 (parent)
            124 JUMP_ABSOLUTE           30

 35     >>  126 LOAD_FAST                3 (result)
            128 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        q, d, res = [(root, 1)], {}, []
        
        while q:
            node, level = q.pop(0)
            if node:
                if level in d: d[level].append(node.val)
                else: d[level] = [node.val] 
                q.append((node.left, level+1))
                q.append((node.right, level+1))
                
        for k in d:
            res.append(d[k])
                
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdeec3a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdeec3a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fdeec3a5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fdeec3a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               1 (1)
              4 BUILD_TUPLE              2
              6 BUILD_LIST               1
              8 BUILD_MAP                0
             10 BUILD_LIST               0
             12 ROT_THREE
             14 ROT_TWO
             16 STORE_FAST               2 (q)
             18 STORE_FAST               3 (d)
             20 STORE_FAST               4 (res)

  5     >>   22 LOAD_FAST                2 (q)
             24 POP_JUMP_IF_FALSE      124

  6          26 LOAD_FAST                2 (q)
             28 LOAD_METHOD              0 (pop)
             30 LOAD_CONST               2 (0)
             32 CALL_METHOD              1
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               5 (node)
             38 STORE_FAST               6 (level)

  7          40 LOAD_FAST                5 (node)
             42 POP_JUMP_IF_FALSE       22

  8          44 LOAD_FAST                6 (level)
             46 LOAD_FAST                3 (d)
             48 COMPARE_OP               6 (in)
             50 POP_JUMP_IF_FALSE       70
             52 LOAD_FAST                3 (d)
             54 LOAD_FAST                6 (level)
             56 BINARY_SUBSCR
             58 LOAD_METHOD              1 (append)
             60 LOAD_FAST                5 (node)
             62 LOAD_ATTR                2 (val)
             64 CALL_METHOD              1
             66 POP_TOP
             68 JUMP_FORWARD            12 (to 82)

  9     >>   70 LOAD_FAST                5 (node)
             72 LOAD_ATTR                2 (val)
             74 BUILD_LIST               1
             76 LOAD_FAST                3 (d)
             78 LOAD_FAST                6 (level)
             80 STORE_SUBSCR

 10     >>   82 LOAD_FAST                2 (q)
             84 LOAD_METHOD              1 (append)
             86 LOAD_FAST                5 (node)
             88 LOAD_ATTR                3 (left)
             90 LOAD_FAST                6 (level)
             92 LOAD_CONST               1 (1)
             94 BINARY_ADD
             96 BUILD_TUPLE              2
             98 CALL_METHOD              1
            100 POP_TOP

 11         102 LOAD_FAST                2 (q)
            104 LOAD_METHOD              1 (append)
            106 LOAD_FAST                5 (node)
            108 LOAD_ATTR                4 (right)
            110 LOAD_FAST                6 (level)
            112 LOAD_CONST               1 (1)
            114 BINARY_ADD
            116 BUILD_TUPLE              2
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           22

 13     >>  124 LOAD_FAST                3 (d)
            126 GET_ITER
        >>  128 FOR_ITER                18 (to 148)
            130 STORE_FAST               7 (k)

 14         132 LOAD_FAST                4 (res)
            134 LOAD_METHOD              1 (append)
            136 LOAD_FAST                3 (d)
            138 LOAD_FAST                7 (k)
            140 BINARY_SUBSCR
            142 CALL_METHOD              1
            144 POP_TOP
            146 JUMP_ABSOLUTE          128

 16     >>  148 LOAD_FAST                4 (res)
            150 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root or root.val is None:
            return []

        values = []
        q = [root]
        while q:
            level_values = []
            for _ in range(len(q)):
                node = q.pop(0)
                level_values.append(node.val)

                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)

            values.append(level_values)

        return values
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb3b2705240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb3b2705240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fb3b27053a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fb3b27053a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       14
              4 LOAD_FAST                1 (root)
              6 LOAD_ATTR                0 (val)
              8 LOAD_CONST               0 (None)
             10 COMPARE_OP               8 (is)
             12 POP_JUMP_IF_FALSE       18

  4     >>   14 BUILD_LIST               0
             16 RETURN_VALUE

  6     >>   18 BUILD_LIST               0
             20 STORE_FAST               2 (values)

  7          22 LOAD_FAST                1 (root)
             24 BUILD_LIST               1
             26 STORE_FAST               3 (q)

  8     >>   28 LOAD_FAST                3 (q)
             30 POP_JUMP_IF_FALSE      124

  9          32 BUILD_LIST               0
             34 STORE_FAST               4 (level_values)

 10          36 LOAD_GLOBAL              1 (range)
             38 LOAD_GLOBAL              2 (len)
             40 LOAD_FAST                3 (q)
             42 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                62 (to 112)
             50 STORE_FAST               5 (_)

 11          52 LOAD_FAST                3 (q)
             54 LOAD_METHOD              3 (pop)
             56 LOAD_CONST               1 (0)
             58 CALL_METHOD              1
             60 STORE_FAST               6 (node)

 12          62 LOAD_FAST                4 (level_values)
             64 LOAD_METHOD              4 (append)
             66 LOAD_FAST                6 (node)
             68 LOAD_ATTR                0 (val)
             70 CALL_METHOD              1
             72 POP_TOP

 14          74 LOAD_FAST                6 (node)
             76 LOAD_ATTR                5 (left)
             78 POP_JUMP_IF_FALSE       92

 15          80 LOAD_FAST                3 (q)
             82 LOAD_METHOD              4 (append)
             84 LOAD_FAST                6 (node)
             86 LOAD_ATTR                5 (left)
             88 CALL_METHOD              1
             90 POP_TOP

 16     >>   92 LOAD_FAST                6 (node)
             94 LOAD_ATTR                6 (right)
             96 POP_JUMP_IF_FALSE       48

 17          98 LOAD_FAST                3 (q)
            100 LOAD_METHOD              4 (append)
            102 LOAD_FAST                6 (node)
            104 LOAD_ATTR                6 (right)
            106 CALL_METHOD              1
            108 POP_TOP
            110 JUMP_ABSOLUTE           48

 19     >>  112 LOAD_FAST                2 (values)
            114 LOAD_METHOD              4 (append)
            116 LOAD_FAST                4 (level_values)
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           28

 21     >>  124 LOAD_FAST                2 (values)
            126 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        d = {}
        
        def level_order_traversal(node, k):
            if not node:
                return
            else:
                if k not in d:
                    d[k] = [node.val]
                else:
                    d[k].append(node.val)
                level_order_traversal(node.left, k + 1)
                level_order_traversal(node.right, k + 1)
                
        level_order_traversal(root, 0)
        return list(d.values())","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcbaf3153a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcbaf3153a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fcbaf3152f0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fcbaf3152f0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_DEREF              0 (d)

  5           4 LOAD_CLOSURE             0 (d)
              6 LOAD_CLOSURE             1 (level_order_traversal)
              8 BUILD_TUPLE              2
             10 LOAD_CONST               1 (<code object level_order_traversal at 0x7fcbaf315240, file ""<ast>"", line 5>)
             12 LOAD_CONST               2 ('Solution.levelOrder.<locals>.level_order_traversal')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              1 (level_order_traversal)

 16          18 LOAD_DEREF               1 (level_order_traversal)
             20 LOAD_FAST                1 (root)
             22 LOAD_CONST               3 (0)
             24 CALL_FUNCTION            2
             26 POP_TOP

 17          28 LOAD_GLOBAL              0 (list)
             30 LOAD_DEREF               0 (d)
             32 LOAD_METHOD              1 (values)
             34 CALL_METHOD              0
             36 CALL_FUNCTION            1
             38 RETURN_VALUE

Disassembly of <code object level_order_traversal at 0x7fcbaf315240, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

  7           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  9     >>    8 LOAD_FAST                1 (k)
             10 LOAD_DEREF               0 (d)
             12 COMPARE_OP               7 (not in)
             14 POP_JUMP_IF_FALSE       30

 10          16 LOAD_FAST                0 (node)
             18 LOAD_ATTR                0 (val)
             20 BUILD_LIST               1
             22 LOAD_DEREF               0 (d)
             24 LOAD_FAST                1 (k)
             26 STORE_SUBSCR
             28 JUMP_FORWARD            16 (to 46)

 12     >>   30 LOAD_DEREF               0 (d)
             32 LOAD_FAST                1 (k)
             34 BINARY_SUBSCR
             36 LOAD_METHOD              1 (append)
             38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                0 (val)
             42 CALL_METHOD              1
             44 POP_TOP

 13     >>   46 LOAD_DEREF               1 (level_order_traversal)
             48 LOAD_FAST                0 (node)
             50 LOAD_ATTR                2 (left)
             52 LOAD_FAST                1 (k)
             54 LOAD_CONST               1 (1)
             56 BINARY_ADD
             58 CALL_FUNCTION            2
             60 POP_TOP

 14          62 LOAD_DEREF               1 (level_order_traversal)
             64 LOAD_FAST                0 (node)
             66 LOAD_ATTR                3 (right)
             68 LOAD_FAST                1 (k)
             70 LOAD_CONST               1 (1)
             72 BINARY_ADD
             74 CALL_FUNCTION            2
             76 POP_TOP
             78 LOAD_CONST               0 (None)
             80 RETURN_VALUE
None
"
levelOrder,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
      if not root:
        return []
      a = root
      l = [[root.val]]
      d = [a.left, a.right]
      while d:
        temp = []
        ll = []
        for i in d:
          if not i:
            continue
          ll += [i.val]
          temp += [i.left, i.right]
        else:
          if ll:
            l += [ll]
          d = temp
      return l
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9475125240, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9475125240, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7f94751252f0, file ""<ast>"", line 8>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7f94751252f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

 10           4 BUILD_LIST               0
              6 RETURN_VALUE

 11     >>    8 LOAD_FAST                1 (root)
             10 STORE_FAST               2 (a)

 12          12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                0 (val)
             16 BUILD_LIST               1
             18 BUILD_LIST               1
             20 STORE_FAST               3 (l)

 13          22 LOAD_FAST                2 (a)
             24 LOAD_ATTR                1 (left)
             26 LOAD_FAST                2 (a)
             28 LOAD_ATTR                2 (right)
             30 BUILD_LIST               2
             32 STORE_FAST               4 (d)

 14     >>   34 LOAD_FAST                4 (d)
             36 POP_JUMP_IF_FALSE      110

 15          38 BUILD_LIST               0
             40 STORE_FAST               5 (temp)

 16          42 BUILD_LIST               0
             44 STORE_FAST               6 (ll)

 17          46 LOAD_FAST                4 (d)
             48 GET_ITER
        >>   50 FOR_ITER                38 (to 90)
             52 STORE_FAST               7 (i)

 18          54 LOAD_FAST                7 (i)
             56 POP_JUMP_IF_TRUE        60

 19          58 JUMP_ABSOLUTE           50

 20     >>   60 LOAD_FAST                6 (ll)
             62 LOAD_FAST                7 (i)
             64 LOAD_ATTR                0 (val)
             66 BUILD_LIST               1
             68 INPLACE_ADD
             70 STORE_FAST               6 (ll)

 21          72 LOAD_FAST                5 (temp)
             74 LOAD_FAST                7 (i)
             76 LOAD_ATTR                1 (left)
             78 LOAD_FAST                7 (i)
             80 LOAD_ATTR                2 (right)
             82 BUILD_LIST               2
             84 INPLACE_ADD
             86 STORE_FAST               5 (temp)
             88 JUMP_ABSOLUTE           50

 23     >>   90 LOAD_FAST                6 (ll)
             92 POP_JUMP_IF_FALSE      104

 24          94 LOAD_FAST                3 (l)
             96 LOAD_FAST                6 (ll)
             98 BUILD_LIST               1
            100 INPLACE_ADD
            102 STORE_FAST               3 (l)

 25     >>  104 LOAD_FAST                5 (temp)
            106 STORE_FAST               4 (d)
            108 JUMP_ABSOLUTE           34

 26     >>  110 LOAD_FAST                3 (l)
            112 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root is None:
            return root
        
        queue=[]
        
        queue.append(root)
        ans=[]
        while queue:
            l=len(queue)
            level=[]
            while l!=0:
                node= queue.pop(0)
                level.append(node.val)
            
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
                l=l-1
            ans.append(level)     
                
        return ans             
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe6818e5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe6818e5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fe6818e53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fe6818e53a0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_FAST                1 (root)
             10 RETURN_VALUE

  6     >>   12 BUILD_LIST               0
             14 STORE_FAST               2 (queue)

  8          16 LOAD_FAST                2 (queue)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                1 (root)
             22 CALL_METHOD              1
             24 POP_TOP

  9          26 BUILD_LIST               0
             28 STORE_FAST               3 (ans)

 10     >>   30 LOAD_FAST                2 (queue)
             32 POP_JUMP_IF_FALSE      134

 11          34 LOAD_GLOBAL              1 (len)
             36 LOAD_FAST                2 (queue)
             38 CALL_FUNCTION            1
             40 STORE_FAST               4 (l)

 12          42 BUILD_LIST               0
             44 STORE_FAST               5 (level)

 13     >>   46 LOAD_FAST                4 (l)
             48 LOAD_CONST               1 (0)
             50 COMPARE_OP               3 (!=)
             52 POP_JUMP_IF_FALSE      122

 14          54 LOAD_FAST                2 (queue)
             56 LOAD_METHOD              2 (pop)
             58 LOAD_CONST               1 (0)
             60 CALL_METHOD              1
             62 STORE_FAST               6 (node)

 15          64 LOAD_FAST                5 (level)
             66 LOAD_METHOD              0 (append)
             68 LOAD_FAST                6 (node)
             70 LOAD_ATTR                3 (val)
             72 CALL_METHOD              1
             74 POP_TOP

 17          76 LOAD_FAST                6 (node)
             78 LOAD_ATTR                4 (left)
             80 POP_JUMP_IF_FALSE       94

 18          82 LOAD_FAST                2 (queue)
             84 LOAD_METHOD              0 (append)
             86 LOAD_FAST                6 (node)
             88 LOAD_ATTR                4 (left)
             90 CALL_METHOD              1
             92 POP_TOP

 19     >>   94 LOAD_FAST                6 (node)
             96 LOAD_ATTR                5 (right)
             98 POP_JUMP_IF_FALSE      112

 20         100 LOAD_FAST                2 (queue)
            102 LOAD_METHOD              0 (append)
            104 LOAD_FAST                6 (node)
            106 LOAD_ATTR                5 (right)
            108 CALL_METHOD              1
            110 POP_TOP

 21     >>  112 LOAD_FAST                4 (l)
            114 LOAD_CONST               2 (1)
            116 BINARY_SUBTRACT
            118 STORE_FAST               4 (l)
            120 JUMP_ABSOLUTE           46

 22     >>  122 LOAD_FAST                3 (ans)
            124 LOAD_METHOD              0 (append)
            126 LOAD_FAST                5 (level)
            128 CALL_METHOD              1
            130 POP_TOP
            132 JUMP_ABSOLUTE           30

 24     >>  134 LOAD_FAST                3 (ans)
            136 RETURN_VALUE
None
"
levelOrder,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        # 横向的拆 tree 是 BFS 问题，牢记口诀 “深度优先用递归，宽度优先用deque”
        # 思路就是 把每层的 root 放进 deque 里
        # 然后每次拿到 deque 的 长度，l, 循环 l 次， 把 val 放入 temp 中，把 left,right 继续append 进入 deque 中，然后循环结束时候把每次的 temp append 进入 result 里
        # deque 空的时候 tree 就遍历尽了
        if not root: return None
        
        from collections import deque
        q = deque([root])
        result = []
        
        while q:
            l = len(q)
            temp = []
            for i in range(l):
                node = q.popleft()
                temp.append(node.val)
                if node.left: q.append(node.left)
                if node.right: q.append(node.right)
                    
            result.append(temp)
            
        return result
                
                
                    
        
        
        
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff2abbd5240, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2abbd5240, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7ff2abbd53a0, file ""<ast>"", line 8>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7ff2abbd53a0, file ""<ast>"", line 8>:
 13           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 15     >>    8 LOAD_CONST               1 (0)
             10 LOAD_CONST               2 (('deque',))
             12 IMPORT_NAME              0 (collections)
             14 IMPORT_FROM              1 (deque)
             16 STORE_FAST               2 (deque)
             18 POP_TOP

 16          20 LOAD_FAST                2 (deque)
             22 LOAD_FAST                1 (root)
             24 BUILD_LIST               1
             26 CALL_FUNCTION            1
             28 STORE_FAST               3 (q)

 17          30 BUILD_LIST               0
             32 STORE_FAST               4 (result)

 19     >>   34 LOAD_FAST                3 (q)
             36 POP_JUMP_IF_FALSE      132

 20          38 LOAD_GLOBAL              2 (len)
             40 LOAD_FAST                3 (q)
             42 CALL_FUNCTION            1
             44 STORE_FAST               5 (l)

 21          46 BUILD_LIST               0
             48 STORE_FAST               6 (temp)

 22          50 LOAD_GLOBAL              3 (range)
             52 LOAD_FAST                5 (l)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                60 (to 120)
             60 STORE_FAST               7 (i)

 23          62 LOAD_FAST                3 (q)
             64 LOAD_METHOD              4 (popleft)
             66 CALL_METHOD              0
             68 STORE_FAST               8 (node)

 24          70 LOAD_FAST                6 (temp)
             72 LOAD_METHOD              5 (append)
             74 LOAD_FAST                8 (node)
             76 LOAD_ATTR                6 (val)
             78 CALL_METHOD              1
             80 POP_TOP

 25          82 LOAD_FAST                8 (node)
             84 LOAD_ATTR                7 (left)
             86 POP_JUMP_IF_FALSE      100
             88 LOAD_FAST                3 (q)
             90 LOAD_METHOD              5 (append)
             92 LOAD_FAST                8 (node)
             94 LOAD_ATTR                7 (left)
             96 CALL_METHOD              1
             98 POP_TOP

 26     >>  100 LOAD_FAST                8 (node)
            102 LOAD_ATTR                8 (right)
            104 POP_JUMP_IF_FALSE       58
            106 LOAD_FAST                3 (q)
            108 LOAD_METHOD              5 (append)
            110 LOAD_FAST                8 (node)
            112 LOAD_ATTR                8 (right)
            114 CALL_METHOD              1
            116 POP_TOP
            118 JUMP_ABSOLUTE           58

 28     >>  120 LOAD_FAST                4 (result)
            122 LOAD_METHOD              5 (append)
            124 LOAD_FAST                6 (temp)
            126 CALL_METHOD              1
            128 POP_TOP
            130 JUMP_ABSOLUTE           34

 30     >>  132 LOAD_FAST                4 (result)
            134 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        ## RC ##
        ## APPROACH : BFS ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##

        if(not root):   return []
        queue = collections.deque([root])
        all_levels = []
        while (queue): 
            size = len(queue)
            curr_level = []
            for _ in range(size):
                curr = queue.popleft()
                curr_level.append(curr.val)
                if(curr.left):     queue.append(curr.left)
                if(curr.right):    queue.append(curr.right)
            all_levels.append(curr_level)
        return all_levels
    
        ## RECURSIVE APPROACH ##
        if not root:    return []
        levels = collections.defaultdict(list)
        def helper(node, level):
            levels[level].append(node.val)
            if node.left:   helper(node.left, level + 1)
            if node.right:  helper(node.right, level + 1)
        helper(root, 0)
        return levels.values()
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe4972d53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe4972d53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fe4972d52f0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fe4972d52f0, file ""<ast>"", line 2>:
  9           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8
              4 BUILD_LIST               0
              6 RETURN_VALUE

 10     >>    8 LOAD_GLOBAL              0 (collections)
             10 LOAD_METHOD              1 (deque)
             12 LOAD_FAST                1 (root)
             14 BUILD_LIST               1
             16 CALL_METHOD              1
             18 STORE_FAST               2 (queue)

 11          20 BUILD_LIST               0
             22 STORE_FAST               3 (all_levels)

 12     >>   24 LOAD_FAST                2 (queue)
             26 POP_JUMP_IF_FALSE      122

 13          28 LOAD_GLOBAL              2 (len)
             30 LOAD_FAST                2 (queue)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (size)

 14          36 BUILD_LIST               0
             38 STORE_FAST               5 (curr_level)

 15          40 LOAD_GLOBAL              3 (range)
             42 LOAD_FAST                4 (size)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                60 (to 110)
             50 STORE_FAST               6 (_)

 16          52 LOAD_FAST                2 (queue)
             54 LOAD_METHOD              4 (popleft)
             56 CALL_METHOD              0
             58 STORE_FAST               7 (curr)

 17          60 LOAD_FAST                5 (curr_level)
             62 LOAD_METHOD              5 (append)
             64 LOAD_FAST                7 (curr)
             66 LOAD_ATTR                6 (val)
             68 CALL_METHOD              1
             70 POP_TOP

 18          72 LOAD_FAST                7 (curr)
             74 LOAD_ATTR                7 (left)
             76 POP_JUMP_IF_FALSE       90
             78 LOAD_FAST                2 (queue)
             80 LOAD_METHOD              5 (append)
             82 LOAD_FAST                7 (curr)
             84 LOAD_ATTR                7 (left)
             86 CALL_METHOD              1
             88 POP_TOP

 19     >>   90 LOAD_FAST                7 (curr)
             92 LOAD_ATTR                8 (right)
             94 POP_JUMP_IF_FALSE       48
             96 LOAD_FAST                2 (queue)
             98 LOAD_METHOD              5 (append)
            100 LOAD_FAST                7 (curr)
            102 LOAD_ATTR                8 (right)
            104 CALL_METHOD              1
            106 POP_TOP
            108 JUMP_ABSOLUTE           48

 20     >>  110 LOAD_FAST                3 (all_levels)
            112 LOAD_METHOD              5 (append)
            114 LOAD_FAST                5 (curr_level)
            116 CALL_METHOD              1
            118 POP_TOP
            120 JUMP_ABSOLUTE           24

 21     >>  122 LOAD_FAST                3 (all_levels)
            124 RETURN_VALUE

 25         126 LOAD_GLOBAL              0 (collections)
            128 LOAD_METHOD              9 (defaultdict)
            130 LOAD_GLOBAL             10 (list)
            132 CALL_METHOD              1
            134 STORE_DEREF              1 (levels)

 26         136 LOAD_CLOSURE             0 (helper)
            138 LOAD_CLOSURE             1 (levels)
            140 BUILD_TUPLE              2
            142 LOAD_CONST               1 (<code object helper at 0x7fe4972d5240, file ""<ast>"", line 26>)
            144 LOAD_CONST               2 ('Solution.levelOrder.<locals>.helper')
            146 MAKE_FUNCTION            8 (closure)
            148 STORE_DEREF              0 (helper)

 30         150 LOAD_DEREF               0 (helper)
            152 LOAD_FAST                1 (root)
            154 LOAD_CONST               3 (0)
            156 CALL_FUNCTION            2
            158 POP_TOP

 31         160 LOAD_DEREF               1 (levels)
            162 LOAD_METHOD             11 (values)
            164 CALL_METHOD              0
            166 RETURN_VALUE

Disassembly of <code object helper at 0x7fe4972d5240, file ""<ast>"", line 26>:
 27           0 LOAD_DEREF               1 (levels)
              2 LOAD_FAST                1 (level)
              4 BINARY_SUBSCR
              6 LOAD_METHOD              0 (append)
              8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                1 (val)
             12 CALL_METHOD              1
             14 POP_TOP

 28          16 LOAD_FAST                0 (node)
             18 LOAD_ATTR                2 (left)
             20 POP_JUMP_IF_FALSE       38
             22 LOAD_DEREF               0 (helper)
             24 LOAD_FAST                0 (node)
             26 LOAD_ATTR                2 (left)
             28 LOAD_FAST                1 (level)
             30 LOAD_CONST               1 (1)
             32 BINARY_ADD
             34 CALL_FUNCTION            2
             36 POP_TOP

 29     >>   38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                3 (right)
             42 POP_JUMP_IF_FALSE       60
             44 LOAD_DEREF               0 (helper)
             46 LOAD_FAST                0 (node)
             48 LOAD_ATTR                3 (right)
             50 LOAD_FAST                1 (level)
             52 LOAD_CONST               1 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 POP_TOP
        >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE
None
"
levelOrder,"class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        
        levels = []
        
        if not root:   
            return levels
        
        q = collections.deque([root])
        
        while q: 
       
            level = []
        
            for _ in range(len(q)):
                
                node = q.popleft()
                level.append(node.val)
                
                if node.left:     
                    q.append(node.left)
                    
                if node.right:    
                    q.append(node.right)
                    
            levels.append(level)
            
        return levels
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdcacb25240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdcacb25240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                5 (int)
             16 BINARY_SUBSCR
             18 BINARY_SUBSCR
             20 LOAD_CONST               1 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object levelOrder at 0x7fdcacb252f0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.levelOrder')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (levelOrder)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object levelOrder at 0x7fdcacb252f0, file ""<ast>"", line 2>:
  4           0 BUILD_LIST               0
              2 STORE_FAST               2 (levels)

  6           4 LOAD_FAST                1 (root)
              6 POP_JUMP_IF_TRUE        12

  7           8 LOAD_FAST                2 (levels)
             10 RETURN_VALUE

  9     >>   12 LOAD_GLOBAL              0 (collections)
             14 LOAD_METHOD              1 (deque)
             16 LOAD_FAST                1 (root)
             18 BUILD_LIST               1
             20 CALL_METHOD              1
             22 STORE_FAST               3 (q)

 11     >>   24 LOAD_FAST                3 (q)
             26 POP_JUMP_IF_FALSE      118

 13          28 BUILD_LIST               0
             30 STORE_FAST               4 (level)

 15          32 LOAD_GLOBAL              2 (range)
             34 LOAD_GLOBAL              3 (len)
             36 LOAD_FAST                3 (q)
             38 CALL_FUNCTION            1
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                60 (to 106)
             46 STORE_FAST               5 (_)

 17          48 LOAD_FAST                3 (q)
             50 LOAD_METHOD              4 (popleft)
             52 CALL_METHOD              0
             54 STORE_FAST               6 (node)

 18          56 LOAD_FAST                4 (level)
             58 LOAD_METHOD              5 (append)
             60 LOAD_FAST                6 (node)
             62 LOAD_ATTR                6 (val)
             64 CALL_METHOD              1
             66 POP_TOP

 20          68 LOAD_FAST                6 (node)
             70 LOAD_ATTR                7 (left)
             72 POP_JUMP_IF_FALSE       86

 21          74 LOAD_FAST                3 (q)
             76 LOAD_METHOD              5 (append)
             78 LOAD_FAST                6 (node)
             80 LOAD_ATTR                7 (left)
             82 CALL_METHOD              1
             84 POP_TOP

 23     >>   86 LOAD_FAST                6 (node)
             88 LOAD_ATTR                8 (right)
             90 POP_JUMP_IF_FALSE       44

 24          92 LOAD_FAST                3 (q)
             94 LOAD_METHOD              5 (append)
             96 LOAD_FAST                6 (node)
             98 LOAD_ATTR                8 (right)
            100 CALL_METHOD              1
            102 POP_TOP
            104 JUMP_ABSOLUTE           44

 26     >>  106 LOAD_FAST                2 (levels)
            108 LOAD_METHOD              5 (append)
            110 LOAD_FAST                4 (level)
            112 CALL_METHOD              1
            114 POP_TOP
            116 JUMP_ABSOLUTE           24

 28     >>  118 LOAD_FAST                2 (levels)
            120 RETURN_VALUE
None
"
maxDepth,"class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        
        return max(left, right) + 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object TreeNode at 0x7fb3306352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('TreeNode')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('TreeNode')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (TreeNode)

  6          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7fb330635500, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object TreeNode at 0x7fb3306352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('TreeNode')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7fb330635240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('TreeNode.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object __init__ at 0x7fb330635240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  4           6 LOAD_CONST               0 (None)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (left)

  5          12 LOAD_CONST               0 (None)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (right)
             18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb330635500, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fb330635450, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fb330635450, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  9           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 11     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (maxDepth)
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 STORE_FAST               2 (left)

 12          20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              0 (maxDepth)
             24 LOAD_FAST                1 (root)
             26 LOAD_ATTR                2 (right)
             28 CALL_METHOD              1
             30 STORE_FAST               3 (right)

 14          32 LOAD_GLOBAL              3 (max)
             34 LOAD_FAST                2 (left)
             36 LOAD_FAST                3 (right)
             38 CALL_FUNCTION            2
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 RETURN_VALUE
None
"
maxDepth,"class Solution:
	def maxDepth(self, root:TreeNode)->int:
		if not root or root.val is  None: 
			return 0

		left_level = self.maxDepth(root.left) + 1 
		right_level = self.maxDepth(root.right) + 1 

		return max(left_level, right_level)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff4845352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff4845352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7ff484535240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7ff484535240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_FALSE       14
              4 LOAD_FAST                1 (root)
              6 LOAD_ATTR                0 (val)
              8 LOAD_CONST               0 (None)
             10 COMPARE_OP               8 (is)
             12 POP_JUMP_IF_FALSE       18

  4     >>   14 LOAD_CONST               1 (0)
             16 RETURN_VALUE

  6     >>   18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              1 (maxDepth)
             22 LOAD_FAST                1 (root)
             24 LOAD_ATTR                2 (left)
             26 CALL_METHOD              1
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 STORE_FAST               2 (left_level)

  7          34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              1 (maxDepth)
             38 LOAD_FAST                1 (root)
             40 LOAD_ATTR                3 (right)
             42 CALL_METHOD              1
             44 LOAD_CONST               2 (1)
             46 BINARY_ADD
             48 STORE_FAST               3 (right_level)

  9          50 LOAD_GLOBAL              4 (max)
             52 LOAD_FAST                2 (left_level)
             54 LOAD_FAST                3 (right_level)
             56 CALL_FUNCTION            2
             58 RETURN_VALUE
None
"
maxDepth,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        queue = []
        count = 0
        if not root:
            return 0
        queue.append(root)
        while len(queue) > 0:
            size = len(queue)
            while size > 0:
                var = queue.pop(0)
                if var.left is not None:
                    queue.append(var.left)
                if var.right is not None:
                    queue.append(var.right)
                size -= 1 
            count += 1 
        return count  
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1fc6b65240, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1fc6b65240, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f1fc6b653a0, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f1fc6b653a0, file ""<ast>"", line 8>:
  9           0 BUILD_LIST               0
              2 STORE_FAST               2 (queue)

 10           4 LOAD_CONST               1 (0)
              6 STORE_FAST               3 (count)

 11           8 LOAD_FAST                1 (root)
             10 POP_JUMP_IF_TRUE        16

 12          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

 13     >>   16 LOAD_FAST                2 (queue)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                1 (root)
             22 CALL_METHOD              1
             24 POP_TOP

 14     >>   26 LOAD_GLOBAL              1 (len)
             28 LOAD_FAST                2 (queue)
             30 CALL_FUNCTION            1
             32 LOAD_CONST               1 (0)
             34 COMPARE_OP               4 (>)
             36 POP_JUMP_IF_FALSE      128

 15          38 LOAD_GLOBAL              1 (len)
             40 LOAD_FAST                2 (queue)
             42 CALL_FUNCTION            1
             44 STORE_FAST               4 (size)

 16     >>   46 LOAD_FAST                4 (size)
             48 LOAD_CONST               1 (0)
             50 COMPARE_OP               4 (>)
             52 POP_JUMP_IF_FALSE      118

 17          54 LOAD_FAST                2 (queue)
             56 LOAD_METHOD              2 (pop)
             58 LOAD_CONST               1 (0)
             60 CALL_METHOD              1
             62 STORE_FAST               5 (var)

 18          64 LOAD_FAST                5 (var)
             66 LOAD_ATTR                3 (left)
             68 LOAD_CONST               0 (None)
             70 COMPARE_OP               9 (is not)
             72 POP_JUMP_IF_FALSE       86

 19          74 LOAD_FAST                2 (queue)
             76 LOAD_METHOD              0 (append)
             78 LOAD_FAST                5 (var)
             80 LOAD_ATTR                3 (left)
             82 CALL_METHOD              1
             84 POP_TOP

 20     >>   86 LOAD_FAST                5 (var)
             88 LOAD_ATTR                4 (right)
             90 LOAD_CONST               0 (None)
             92 COMPARE_OP               9 (is not)
             94 POP_JUMP_IF_FALSE      108

 21          96 LOAD_FAST                2 (queue)
             98 LOAD_METHOD              0 (append)
            100 LOAD_FAST                5 (var)
            102 LOAD_ATTR                4 (right)
            104 CALL_METHOD              1
            106 POP_TOP

 22     >>  108 LOAD_FAST                4 (size)
            110 LOAD_CONST               2 (1)
            112 INPLACE_SUBTRACT
            114 STORE_FAST               4 (size)
            116 JUMP_ABSOLUTE           46

 23     >>  118 LOAD_FAST                3 (count)
            120 LOAD_CONST               2 (1)
            122 INPLACE_ADD
            124 STORE_FAST               3 (count)
            126 JUMP_ABSOLUTE           26

 24     >>  128 LOAD_FAST                3 (count)
            130 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root: 
            return 0
        
        left_level = self.maxDepth(root.left) + 1 
        right_level = self.maxDepth(root.right) + 1 
        
        return max(left_level, right_level) 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f36b12252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f36b12252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f36b1225240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f36b1225240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (maxDepth)
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 LOAD_CONST               2 (1)
             20 BINARY_ADD
             22 STORE_FAST               2 (left_level)

  7          24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              0 (maxDepth)
             28 LOAD_FAST                1 (root)
             30 LOAD_ATTR                2 (right)
             32 CALL_METHOD              1
             34 LOAD_CONST               2 (1)
             36 BINARY_ADD
             38 STORE_FAST               3 (right_level)

  9          40 LOAD_GLOBAL              3 (max)
             42 LOAD_FAST                2 (left_level)
             44 LOAD_FAST                3 (right_level)
             46 CALL_FUNCTION            2
             48 RETURN_VALUE
None
"
maxDepth,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        def travel(node):
            if not node:
                return 0
            l=r=0
            if node.left:
                l = travel(node.left)
            if node.right:
                r = travel(node.right)
            return 1+max(l,r)
        return travel(root)
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb7fd1755b0, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb7fd1755b0, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fb7fd175500, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fb7fd175500, file ""<ast>"", line 8>:
  9           0 LOAD_CLOSURE             0 (travel)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object travel at 0x7fb7fd175450, file ""<ast>"", line 9>)
              6 LOAD_CONST               2 ('Solution.maxDepth.<locals>.travel')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (travel)

 18          12 LOAD_DEREF               0 (travel)
             14 LOAD_FAST                1 (root)
             16 CALL_FUNCTION            1
             18 RETURN_VALUE

Disassembly of <code object travel at 0x7fb7fd175450, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

 11           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 12     >>    8 LOAD_CONST               1 (0)
             10 DUP_TOP
             12 STORE_FAST               1 (l)
             14 STORE_FAST               2 (r)

 13          16 LOAD_FAST                0 (node)
             18 LOAD_ATTR                0 (left)
             20 POP_JUMP_IF_FALSE       32

 14          22 LOAD_DEREF               0 (travel)
             24 LOAD_FAST                0 (node)
             26 LOAD_ATTR                0 (left)
             28 CALL_FUNCTION            1
             30 STORE_FAST               1 (l)

 15     >>   32 LOAD_FAST                0 (node)
             34 LOAD_ATTR                1 (right)
             36 POP_JUMP_IF_FALSE       48

 16          38 LOAD_DEREF               0 (travel)
             40 LOAD_FAST                0 (node)
             42 LOAD_ATTR                1 (right)
             44 CALL_FUNCTION            1
             46 STORE_FAST               2 (r)

 17     >>   48 LOAD_CONST               2 (1)
             50 LOAD_GLOBAL              2 (max)
             52 LOAD_FAST                1 (l)
             54 LOAD_FAST                2 (r)
             56 CALL_FUNCTION            2
             58 BINARY_ADD
             60 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f53a46852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f53a46852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f53a4685240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f53a4685240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (max)
             10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              1 (maxDepth)
             14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                2 (left)
             18 CALL_METHOD              1
             20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              1 (maxDepth)
             24 LOAD_FAST                1 (root)
             26 LOAD_ATTR                3 (right)
             28 CALL_METHOD              1
             30 CALL_FUNCTION            2
             32 LOAD_CONST               2 (1)
             34 BINARY_ADD
             36 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        def helper(node, depth):
            if not node:
                return depth
            return max(helper(node.left, depth + 1), helper(node.right, depth + 1))
        return helper(root, 0)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc0207c5660, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc0207c5660, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fc0207c55b0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fc0207c55b0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (helper)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object helper at 0x7fc0207c5500, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.maxDepth.<locals>.helper')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (helper)

  7          12 LOAD_DEREF               0 (helper)
             14 LOAD_FAST                1 (root)
             16 LOAD_CONST               3 (0)
             18 CALL_FUNCTION            2
             20 RETURN_VALUE

Disassembly of <code object helper at 0x7fc0207c5500, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

  5           4 LOAD_FAST                1 (depth)
              6 RETURN_VALUE

  6     >>    8 LOAD_GLOBAL              0 (max)
             10 LOAD_DEREF               0 (helper)
             12 LOAD_FAST                0 (node)
             14 LOAD_ATTR                1 (left)
             16 LOAD_FAST                1 (depth)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 CALL_FUNCTION            2
             24 LOAD_DEREF               0 (helper)
             26 LOAD_FAST                0 (node)
             28 LOAD_ATTR                2 (right)
             30 LOAD_FAST                1 (depth)
             32 LOAD_CONST               1 (1)
             34 BINARY_ADD
             36 CALL_FUNCTION            2
             38 CALL_FUNCTION            2
             40 RETURN_VALUE
None
"
maxDepth,"class Solution:
	def maxDepth(self, root: TreeNode) -> int:
		if not root:
			return 0
		q = [root]
		max_depth = 0
		while q:
			size = len(q)
			max_depth+=1
			while size:
				front = q.pop(0)
				size-=1

				if front.left:
					q.append(front.left)
				if front.right:
					q.append(front.right)

		return max_depth
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc5e0965240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc5e0965240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fc5e09652f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fc5e09652f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (root)
             10 BUILD_LIST               1
             12 STORE_FAST               2 (q)

  6          14 LOAD_CONST               1 (0)
             16 STORE_FAST               3 (max_depth)

  7     >>   18 LOAD_FAST                2 (q)
             20 POP_JUMP_IF_FALSE      100

  8          22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                2 (q)
             26 CALL_FUNCTION            1
             28 STORE_FAST               4 (size)

  9          30 LOAD_FAST                3 (max_depth)
             32 LOAD_CONST               2 (1)
             34 INPLACE_ADD
             36 STORE_FAST               3 (max_depth)

 10     >>   38 LOAD_FAST                4 (size)
             40 POP_JUMP_IF_FALSE       18

 11          42 LOAD_FAST                2 (q)
             44 LOAD_METHOD              1 (pop)
             46 LOAD_CONST               1 (0)
             48 CALL_METHOD              1
             50 STORE_FAST               5 (front)

 12          52 LOAD_FAST                4 (size)
             54 LOAD_CONST               2 (1)
             56 INPLACE_SUBTRACT
             58 STORE_FAST               4 (size)

 14          60 LOAD_FAST                5 (front)
             62 LOAD_ATTR                2 (left)
             64 POP_JUMP_IF_FALSE       78

 15          66 LOAD_FAST                2 (q)
             68 LOAD_METHOD              3 (append)
             70 LOAD_FAST                5 (front)
             72 LOAD_ATTR                2 (left)
             74 CALL_METHOD              1
             76 POP_TOP

 16     >>   78 LOAD_FAST                5 (front)
             80 LOAD_ATTR                4 (right)
             82 POP_JUMP_IF_FALSE       38

 17          84 LOAD_FAST                2 (q)
             86 LOAD_METHOD              3 (append)
             88 LOAD_FAST                5 (front)
             90 LOAD_ATTR                4 (right)
             92 CALL_METHOD              1
             94 POP_TOP
             96 JUMP_ABSOLUTE           38
             98 JUMP_ABSOLUTE           18

 19     >>  100 LOAD_FAST                3 (max_depth)
            102 RETURN_VALUE
None
"
maxDepth,"from collections import deque
class Solution:
    def maxDepth(self, root:TreeNode)->int:
        stack,level,final,counter = deque(), [], [], 0
        stack.append(root)
        if not root:
            return 0
        while len(stack)>0:
            for i in range(len(stack)):
                popped = stack.popleft()
                level.append(popped.val)
                if popped.left:
                    stack.append(popped.left)
                if popped.right:
                    stack.append(popped.right)
            final.append(level)
            counter+=1
            level = []
        return counter

                
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f60536952f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f60536952f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f6053695240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f6053695240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (deque)
              2 CALL_FUNCTION            0
              4 BUILD_LIST               0
              6 BUILD_LIST               0
              8 LOAD_CONST               1 (0)
             10 BUILD_TUPLE              4
             12 UNPACK_SEQUENCE          4
             14 STORE_FAST               2 (stack)
             16 STORE_FAST               3 (level)
             18 STORE_FAST               4 (final)
             20 STORE_FAST               5 (counter)

  5          22 LOAD_FAST                2 (stack)
             24 LOAD_METHOD              1 (append)
             26 LOAD_FAST                1 (root)
             28 CALL_METHOD              1
             30 POP_TOP

  6          32 LOAD_FAST                1 (root)
             34 POP_JUMP_IF_TRUE        40

  7          36 LOAD_CONST               1 (0)
             38 RETURN_VALUE

  8     >>   40 LOAD_GLOBAL              2 (len)
             42 LOAD_FAST                2 (stack)
             44 CALL_FUNCTION            1
             46 LOAD_CONST               1 (0)
             48 COMPARE_OP               4 (>)
             50 POP_JUMP_IF_FALSE      150

  9          52 LOAD_GLOBAL              3 (range)
             54 LOAD_GLOBAL              2 (len)
             56 LOAD_FAST                2 (stack)
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                60 (to 126)
             66 STORE_FAST               6 (i)

 10          68 LOAD_FAST                2 (stack)
             70 LOAD_METHOD              4 (popleft)
             72 CALL_METHOD              0
             74 STORE_FAST               7 (popped)

 11          76 LOAD_FAST                3 (level)
             78 LOAD_METHOD              1 (append)
             80 LOAD_FAST                7 (popped)
             82 LOAD_ATTR                5 (val)
             84 CALL_METHOD              1
             86 POP_TOP

 12          88 LOAD_FAST                7 (popped)
             90 LOAD_ATTR                6 (left)
             92 POP_JUMP_IF_FALSE      106

 13          94 LOAD_FAST                2 (stack)
             96 LOAD_METHOD              1 (append)
             98 LOAD_FAST                7 (popped)
            100 LOAD_ATTR                6 (left)
            102 CALL_METHOD              1
            104 POP_TOP

 14     >>  106 LOAD_FAST                7 (popped)
            108 LOAD_ATTR                7 (right)
            110 POP_JUMP_IF_FALSE       64

 15         112 LOAD_FAST                2 (stack)
            114 LOAD_METHOD              1 (append)
            116 LOAD_FAST                7 (popped)
            118 LOAD_ATTR                7 (right)
            120 CALL_METHOD              1
            122 POP_TOP
            124 JUMP_ABSOLUTE           64

 16     >>  126 LOAD_FAST                4 (final)
            128 LOAD_METHOD              1 (append)
            130 LOAD_FAST                3 (level)
            132 CALL_METHOD              1
            134 POP_TOP

 17         136 LOAD_FAST                5 (counter)
            138 LOAD_CONST               2 (1)
            140 INPLACE_ADD
            142 STORE_FAST               5 (counter)

 18         144 BUILD_LIST               0
            146 STORE_FAST               3 (level)
            148 JUMP_ABSOLUTE           40

 19     >>  150 LOAD_FAST                5 (counter)
            152 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        ## RC ##
        ## APPROACH : DFS ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##

        def helper(node):
            if(not node):   return 0
            l = r = 0
            if(node.left):
                l = max(helper(node.left), 0)
            if(node.right):
                r = max(helper(node.right), 0)
            return 1 + max(l, r)
        return helper(root)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f620e8755b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f620e8755b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f620e875500, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f620e875500, file ""<ast>"", line 2>:
  9           0 LOAD_CLOSURE             0 (helper)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object helper at 0x7f620e875450, file ""<ast>"", line 9>)
              6 LOAD_CONST               2 ('Solution.maxDepth.<locals>.helper')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (helper)

 17          12 LOAD_DEREF               0 (helper)
             14 LOAD_FAST                1 (root)
             16 CALL_FUNCTION            1
             18 RETURN_VALUE

Disassembly of <code object helper at 0x7f620e875450, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 11     >>    8 LOAD_CONST               1 (0)
             10 DUP_TOP
             12 STORE_FAST               1 (l)
             14 STORE_FAST               2 (r)

 12          16 LOAD_FAST                0 (node)
             18 LOAD_ATTR                0 (left)
             20 POP_JUMP_IF_FALSE       38

 13          22 LOAD_GLOBAL              1 (max)
             24 LOAD_DEREF               0 (helper)
             26 LOAD_FAST                0 (node)
             28 LOAD_ATTR                0 (left)
             30 CALL_FUNCTION            1
             32 LOAD_CONST               1 (0)
             34 CALL_FUNCTION            2
             36 STORE_FAST               1 (l)

 14     >>   38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                2 (right)
             42 POP_JUMP_IF_FALSE       60

 15          44 LOAD_GLOBAL              1 (max)
             46 LOAD_DEREF               0 (helper)
             48 LOAD_FAST                0 (node)
             50 LOAD_ATTR                2 (right)
             52 CALL_FUNCTION            1
             54 LOAD_CONST               1 (0)
             56 CALL_FUNCTION            2
             58 STORE_FAST               2 (r)

 16     >>   60 LOAD_CONST               2 (1)
             62 LOAD_GLOBAL              1 (max)
             64 LOAD_FAST                1 (l)
             66 LOAD_FAST                2 (r)
             68 CALL_FUNCTION            2
             70 BINARY_ADD
             72 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        
        if not root:
			# Base case:
            # Empty tree or empty leaf node
            return 0
        
        else:
            # General case
            left = self.maxDepth( root.left )
            right = self.maxDepth( root.right )
            
            return max(left, right)+1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9d60d852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9d60d852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f9d60d85240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f9d60d85240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  7           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 11     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (maxDepth)
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 STORE_FAST               2 (left)

 12          20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              0 (maxDepth)
             24 LOAD_FAST                1 (root)
             26 LOAD_ATTR                2 (right)
             28 CALL_METHOD              1
             30 STORE_FAST               3 (right)

 14          32 LOAD_GLOBAL              3 (max)
             34 LOAD_FAST                2 (left)
             36 LOAD_FAST                3 (right)
             38 CALL_FUNCTION            2
             40 LOAD_CONST               2 (1)
             42 BINARY_ADD
             44 RETURN_VALUE
             46 LOAD_CONST               0 (None)
             48 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root != None:
            return calculate_max(root, 1)
        else:
            return 0
    

def calculate_max(root, d):
    if root.right == None and root.left == None:
        return d
    
    d1 = d2 = 0
    
    if root.left != None:
        d1 = calculate_max(root.left, d+1)
    
    if root.right != None:
        d2 = calculate_max(root.right, d+1)
    
    return max([d1, d2])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3fe7b252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)

  9          14 LOAD_CONST               2 (<code object calculate_max at 0x7f3fe7b253a0, file ""<ast>"", line 9>)
             16 LOAD_CONST               3 ('calculate_max')
             18 MAKE_FUNCTION            0
             20 STORE_NAME               1 (calculate_max)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3fe7b252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f3fe7b25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f3fe7b25240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               3 (!=)
              6 POP_JUMP_IF_FALSE       18

  4           8 LOAD_GLOBAL              0 (calculate_max)
             10 LOAD_FAST                1 (root)
             12 LOAD_CONST               1 (1)
             14 CALL_FUNCTION            2
             16 RETURN_VALUE

  6     >>   18 LOAD_CONST               2 (0)
             20 RETURN_VALUE
             22 LOAD_CONST               0 (None)
             24 RETURN_VALUE

Disassembly of <code object calculate_max at 0x7f3fe7b253a0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                0 (root)
              2 LOAD_ATTR                0 (right)
              4 LOAD_CONST               0 (None)
              6 COMPARE_OP               2 (==)
              8 POP_JUMP_IF_FALSE       24
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                1 (left)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

 11          20 LOAD_FAST                1 (d)
             22 RETURN_VALUE

 13     >>   24 LOAD_CONST               1 (0)
             26 DUP_TOP
             28 STORE_FAST               2 (d1)
             30 STORE_FAST               3 (d2)

 15          32 LOAD_FAST                0 (root)
             34 LOAD_ATTR                1 (left)
             36 LOAD_CONST               0 (None)
             38 COMPARE_OP               3 (!=)
             40 POP_JUMP_IF_FALSE       58

 16          42 LOAD_GLOBAL              2 (calculate_max)
             44 LOAD_FAST                0 (root)
             46 LOAD_ATTR                1 (left)
             48 LOAD_FAST                1 (d)
             50 LOAD_CONST               2 (1)
             52 BINARY_ADD
             54 CALL_FUNCTION            2
             56 STORE_FAST               2 (d1)

 18     >>   58 LOAD_FAST                0 (root)
             60 LOAD_ATTR                0 (right)
             62 LOAD_CONST               0 (None)
             64 COMPARE_OP               3 (!=)
             66 POP_JUMP_IF_FALSE       84

 19          68 LOAD_GLOBAL              2 (calculate_max)
             70 LOAD_FAST                0 (root)
             72 LOAD_ATTR                0 (right)
             74 LOAD_FAST                1 (d)
             76 LOAD_CONST               2 (1)
             78 BINARY_ADD
             80 CALL_FUNCTION            2
             82 STORE_FAST               3 (d2)

 21     >>   84 LOAD_GLOBAL              3 (max)
             86 LOAD_FAST                2 (d1)
             88 LOAD_FAST                3 (d2)
             90 BUILD_LIST               2
             92 CALL_FUNCTION            1
             94 RETURN_VALUE
None
"
maxDepth,"class Solution:
       
    def maxDepth(self, root: TreeNode) -> int:
        
        self.tree_depth = 0
        
        def helper( node: TreeNode, depth: int):
            
            if not node:
				# Base case
				# Empty node or empty tree
                return
        
            if not node.left and not node.right:
				# Base case
				# Update max depth when reach leaf node
                self.tree_depth = max( self.tree_depth, depth )
            
            else:
				# General case
				# Keep DFS down to next level
                helper( node.left, depth + 1)
                helper( node.right, depth + 1)
        
        # ------------------------------------------------
        helper( node = root, depth = 1 )
        return self.tree_depth
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f35c3b25500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f35c3b25500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f35c3b25450, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f35c3b25450, file ""<ast>"", line 3>:
  5           0 LOAD_CONST               1 (0)
              2 LOAD_DEREF               1 (self)
              4 STORE_ATTR               0 (tree_depth)

  7           6 LOAD_GLOBAL              1 (TreeNode)
              8 LOAD_GLOBAL              2 (int)
             10 LOAD_CONST               2 (('node', 'depth'))
             12 BUILD_CONST_KEY_MAP      2
             14 LOAD_CLOSURE             0 (helper)
             16 LOAD_CLOSURE             1 (self)
             18 BUILD_TUPLE              2
             20 LOAD_CONST               3 (<code object helper at 0x7f35c3b253a0, file ""<ast>"", line 7>)
             22 LOAD_CONST               4 ('Solution.maxDepth.<locals>.helper')
             24 MAKE_FUNCTION           12 (annotations, closure)
             26 STORE_DEREF              0 (helper)

 26          28 LOAD_DEREF               0 (helper)
             30 LOAD_FAST                1 (root)
             32 LOAD_CONST               5 (1)
             34 LOAD_CONST               2 (('node', 'depth'))
             36 CALL_FUNCTION_KW         2
             38 POP_TOP

 27          40 LOAD_DEREF               1 (self)
             42 LOAD_ATTR                0 (tree_depth)
             44 RETURN_VALUE

Disassembly of <code object helper at 0x7f35c3b253a0, file ""<ast>"", line 7>:
  9           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

 12           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 14     >>    8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (left)
             12 POP_JUMP_IF_TRUE        36
             14 LOAD_FAST                0 (node)
             16 LOAD_ATTR                1 (right)
             18 POP_JUMP_IF_TRUE        36

 17          20 LOAD_GLOBAL              2 (max)
             22 LOAD_DEREF               1 (self)
             24 LOAD_ATTR                3 (tree_depth)
             26 LOAD_FAST                1 (depth)
             28 CALL_FUNCTION            2
             30 LOAD_DEREF               1 (self)
             32 STORE_ATTR               3 (tree_depth)
             34 JUMP_FORWARD            32 (to 68)

 22     >>   36 LOAD_DEREF               0 (helper)
             38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                0 (left)
             42 LOAD_FAST                1 (depth)
             44 LOAD_CONST               1 (1)
             46 BINARY_ADD
             48 CALL_FUNCTION            2
             50 POP_TOP

 23          52 LOAD_DEREF               0 (helper)
             54 LOAD_FAST                0 (node)
             56 LOAD_ATTR                1 (right)
             58 LOAD_FAST                1 (depth)
             60 LOAD_CONST               1 (1)
             62 BINARY_ADD
             64 CALL_FUNCTION            2
             66 POP_TOP
        >>   68 LOAD_CONST               0 (None)
             70 RETURN_VALUE
None
"
maxDepth,"from collections import deque
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        queue=deque()
        queue.append(root)
        if(root is None): return 0
        count,n2=1,1
        while queue:
            for _ in range(n2):
                current=queue.popleft()
                if(current.left): queue.append(current.left)
                if(current.right): queue.append(current.right)
            n2=len(queue)
            if(n2!=0): count+=1
        return count
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fcc1ca05240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcc1ca05240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fcc1ca053a0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fcc1ca053a0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (deque)
              2 CALL_FUNCTION            0
              4 STORE_FAST               2 (queue)

  5           6 LOAD_FAST                2 (queue)
              8 LOAD_METHOD              1 (append)
             10 LOAD_FAST                1 (root)
             12 CALL_METHOD              1
             14 POP_TOP

  6          16 LOAD_FAST                1 (root)
             18 LOAD_CONST               0 (None)
             20 COMPARE_OP               8 (is)
             22 POP_JUMP_IF_FALSE       28
             24 LOAD_CONST               1 (0)
             26 RETURN_VALUE

  7     >>   28 LOAD_CONST               2 ((1, 1))
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               3 (count)
             34 STORE_FAST               4 (n2)

  8     >>   36 LOAD_FAST                2 (queue)
             38 POP_JUMP_IF_FALSE      124

  9          40 LOAD_GLOBAL              2 (range)
             42 LOAD_FAST                4 (n2)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                48 (to 98)
             50 STORE_FAST               5 (_)

 10          52 LOAD_FAST                2 (queue)
             54 LOAD_METHOD              3 (popleft)
             56 CALL_METHOD              0
             58 STORE_FAST               6 (current)

 11          60 LOAD_FAST                6 (current)
             62 LOAD_ATTR                4 (left)
             64 POP_JUMP_IF_FALSE       78
             66 LOAD_FAST                2 (queue)
             68 LOAD_METHOD              1 (append)
             70 LOAD_FAST                6 (current)
             72 LOAD_ATTR                4 (left)
             74 CALL_METHOD              1
             76 POP_TOP

 12     >>   78 LOAD_FAST                6 (current)
             80 LOAD_ATTR                5 (right)
             82 POP_JUMP_IF_FALSE       48
             84 LOAD_FAST                2 (queue)
             86 LOAD_METHOD              1 (append)
             88 LOAD_FAST                6 (current)
             90 LOAD_ATTR                5 (right)
             92 CALL_METHOD              1
             94 POP_TOP
             96 JUMP_ABSOLUTE           48

 13     >>   98 LOAD_GLOBAL              6 (len)
            100 LOAD_FAST                2 (queue)
            102 CALL_FUNCTION            1
            104 STORE_FAST               4 (n2)

 14         106 LOAD_FAST                4 (n2)
            108 LOAD_CONST               1 (0)
            110 COMPARE_OP               3 (!=)
            112 POP_JUMP_IF_FALSE       36
            114 LOAD_FAST                3 (count)
            116 LOAD_CONST               3 (1)
            118 INPLACE_ADD
            120 STORE_FAST               3 (count)
            122 JUMP_ABSOLUTE           36

 15     >>  124 LOAD_FAST                3 (count)
            126 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root == None:
            return 0
        max_depth = 0
        L = [root]
        while L:
            max_depth += 1
            L_next = []
            for n in L:
                if n.left != None:
                    L_next.append(n.left)
                if n.right != None:
                    L_next.append(n.right)
            L = L_next
        return max_depth
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f07be225240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f07be225240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f07be2252f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f07be2252f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               1 (0)
             14 STORE_FAST               2 (max_depth)

  6          16 LOAD_FAST                1 (root)
             18 BUILD_LIST               1
             20 STORE_FAST               3 (L)

  7     >>   22 LOAD_FAST                3 (L)
             24 POP_JUMP_IF_FALSE       98

  8          26 LOAD_FAST                2 (max_depth)
             28 LOAD_CONST               2 (1)
             30 INPLACE_ADD
             32 STORE_FAST               2 (max_depth)

  9          34 BUILD_LIST               0
             36 STORE_FAST               4 (L_next)

 10          38 LOAD_FAST                3 (L)
             40 GET_ITER
        >>   42 FOR_ITER                48 (to 92)
             44 STORE_FAST               5 (n)

 11          46 LOAD_FAST                5 (n)
             48 LOAD_ATTR                0 (left)
             50 LOAD_CONST               0 (None)
             52 COMPARE_OP               3 (!=)
             54 POP_JUMP_IF_FALSE       68

 12          56 LOAD_FAST                4 (L_next)
             58 LOAD_METHOD              1 (append)
             60 LOAD_FAST                5 (n)
             62 LOAD_ATTR                0 (left)
             64 CALL_METHOD              1
             66 POP_TOP

 13     >>   68 LOAD_FAST                5 (n)
             70 LOAD_ATTR                2 (right)
             72 LOAD_CONST               0 (None)
             74 COMPARE_OP               3 (!=)
             76 POP_JUMP_IF_FALSE       42

 14          78 LOAD_FAST                4 (L_next)
             80 LOAD_METHOD              1 (append)
             82 LOAD_FAST                5 (n)
             84 LOAD_ATTR                2 (right)
             86 CALL_METHOD              1
             88 POP_TOP
             90 JUMP_ABSOLUTE           42

 15     >>   92 LOAD_FAST                4 (L_next)
             94 STORE_FAST               3 (L)
             96 JUMP_ABSOLUTE           22

 16     >>   98 LOAD_FAST                2 (max_depth)
            100 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        if not root.left and not root.right:
            return 1
        
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        
        if not root.left:
            return right + 1
        
        if not root.right:
            return left + 1
        
        return max(left, right) + 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa36fa252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa36fa252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fa36fa25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fa36fa25240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (root)
             10 LOAD_ATTR                0 (left)
             12 POP_JUMP_IF_TRUE        24
             14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                1 (right)
             18 POP_JUMP_IF_TRUE        24

  6          20 LOAD_CONST               2 (1)
             22 RETURN_VALUE

  8     >>   24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              2 (maxDepth)
             28 LOAD_FAST                1 (root)
             30 LOAD_ATTR                0 (left)
             32 CALL_METHOD              1
             34 STORE_FAST               2 (left)

  9          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              2 (maxDepth)
             40 LOAD_FAST                1 (root)
             42 LOAD_ATTR                1 (right)
             44 CALL_METHOD              1
             46 STORE_FAST               3 (right)

 11          48 LOAD_FAST                1 (root)
             50 LOAD_ATTR                0 (left)
             52 POP_JUMP_IF_TRUE        62

 12          54 LOAD_FAST                3 (right)
             56 LOAD_CONST               2 (1)
             58 BINARY_ADD
             60 RETURN_VALUE

 14     >>   62 LOAD_FAST                1 (root)
             64 LOAD_ATTR                1 (right)
             66 POP_JUMP_IF_TRUE        76

 15          68 LOAD_FAST                2 (left)
             70 LOAD_CONST               2 (1)
             72 BINARY_ADD
             74 RETURN_VALUE

 17     >>   76 LOAD_GLOBAL              3 (max)
             78 LOAD_FAST                2 (left)
             80 LOAD_FAST                3 (right)
             82 CALL_FUNCTION            2
             84 LOAD_CONST               2 (1)
             86 BINARY_ADD
             88 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, node: TreeNode) -> int:
        if node is None:
            return 0

        return max(self.maxDepth(node.left) + 1, self.maxDepth(node.right) + 1)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f48f25c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f48f25c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('node', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f48f25c5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f48f25c5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (node)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (max)
             14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (maxDepth)
             18 LOAD_FAST                1 (node)
             20 LOAD_ATTR                2 (left)
             22 CALL_METHOD              1
             24 LOAD_CONST               2 (1)
             26 BINARY_ADD
             28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              1 (maxDepth)
             32 LOAD_FAST                1 (node)
             34 LOAD_ATTR                3 (right)
             36 CALL_METHOD              1
             38 LOAD_CONST               2 (1)
             40 BINARY_ADD
             42 CALL_FUNCTION            2
             44 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
            def traverse(x):
                if not x:
                    return 0
                return 1 + max(traverse(x.left), traverse(x.right))
            
            return traverse(root)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff818c255b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff818c255b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7ff818c25500, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7ff818c25500, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (traverse)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object traverse at 0x7ff818c25450, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.maxDepth.<locals>.traverse')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (traverse)

  8          12 LOAD_DEREF               0 (traverse)
             14 LOAD_FAST                1 (root)
             16 CALL_FUNCTION            1
             18 RETURN_VALUE

Disassembly of <code object traverse at 0x7ff818c25450, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (x)
              2 POP_JUMP_IF_TRUE         8

  5           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_CONST               2 (1)
             10 LOAD_GLOBAL              0 (max)
             12 LOAD_DEREF               0 (traverse)
             14 LOAD_FAST                0 (x)
             16 LOAD_ATTR                1 (left)
             18 CALL_FUNCTION            1
             20 LOAD_DEREF               0 (traverse)
             22 LOAD_FAST                0 (x)
             24 LOAD_ATTR                2 (right)
             26 CALL_FUNCTION            1
             28 CALL_FUNCTION            2
             30 BINARY_ADD
             32 RETURN_VALUE
None
"
maxDepth,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        
        max_depth = 0
        
        if not root:
            return max_depth
        
        if not root.left and not root.right:
            return max_depth + 1
            
        max_depth = max(self.current_max_depth(root.left, 1), self.current_max_depth(root.right, 1))
        
        return max_depth
    
    def current_max_depth(self, node: TreeNode, current_max_depth_value: int) -> int:
        
        current_max_depth_value += 1
        
        if not node:
            return current_max_depth_value
        
        if not node.left and not node.right:
            return current_max_depth_value
        
        current_max_depth_value = max(self.current_max_depth(node.left, current_max_depth_value), self.current_max_depth(node.right, current_max_depth_value))
        
        return current_max_depth_value
","  8           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe91c6953a0, file ""<ast>"", line 8>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe91c6953a0, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7fe91c695240, file ""<ast>"", line 9>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)

 23          24 LOAD_NAME                3 (TreeNode)
             26 LOAD_NAME                4 (int)
             28 LOAD_NAME                4 (int)
             30 LOAD_CONST               4 (('node', 'current_max_depth_value', 'return'))
             32 BUILD_CONST_KEY_MAP      3
             34 LOAD_CONST               5 (<code object current_max_depth at 0x7fe91c6952f0, file ""<ast>"", line 23>)
             36 LOAD_CONST               6 ('Solution.current_max_depth')
             38 MAKE_FUNCTION            4 (annotations)
             40 STORE_NAME               6 (current_max_depth)
             42 LOAD_CONST               7 (None)
             44 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7fe91c695240, file ""<ast>"", line 9>:
 11           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (max_depth)

 13           4 LOAD_FAST                1 (root)
              6 POP_JUMP_IF_TRUE        12

 14           8 LOAD_FAST                2 (max_depth)
             10 RETURN_VALUE

 16     >>   12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                0 (left)
             16 POP_JUMP_IF_TRUE        32
             18 LOAD_FAST                1 (root)
             20 LOAD_ATTR                1 (right)
             22 POP_JUMP_IF_TRUE        32

 17          24 LOAD_FAST                2 (max_depth)
             26 LOAD_CONST               2 (1)
             28 BINARY_ADD
             30 RETURN_VALUE

 19     >>   32 LOAD_GLOBAL              2 (max)
             34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              3 (current_max_depth)
             38 LOAD_FAST                1 (root)
             40 LOAD_ATTR                0 (left)
             42 LOAD_CONST               2 (1)
             44 CALL_METHOD              2
             46 LOAD_FAST                0 (self)
             48 LOAD_METHOD              3 (current_max_depth)
             50 LOAD_FAST                1 (root)
             52 LOAD_ATTR                1 (right)
             54 LOAD_CONST               2 (1)
             56 CALL_METHOD              2
             58 CALL_FUNCTION            2
             60 STORE_FAST               2 (max_depth)

 21          62 LOAD_FAST                2 (max_depth)
             64 RETURN_VALUE

Disassembly of <code object current_max_depth at 0x7fe91c6952f0, file ""<ast>"", line 23>:
 25           0 LOAD_FAST                2 (current_max_depth_value)
              2 LOAD_CONST               1 (1)
              4 INPLACE_ADD
              6 STORE_FAST               2 (current_max_depth_value)

 27           8 LOAD_FAST                1 (node)
             10 POP_JUMP_IF_TRUE        16

 28          12 LOAD_FAST                2 (current_max_depth_value)
             14 RETURN_VALUE

 30     >>   16 LOAD_FAST                1 (node)
             18 LOAD_ATTR                0 (left)
             20 POP_JUMP_IF_TRUE        32
             22 LOAD_FAST                1 (node)
             24 LOAD_ATTR                1 (right)
             26 POP_JUMP_IF_TRUE        32

 31          28 LOAD_FAST                2 (current_max_depth_value)
             30 RETURN_VALUE

 33     >>   32 LOAD_GLOBAL              2 (max)
             34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              3 (current_max_depth)
             38 LOAD_FAST                1 (node)
             40 LOAD_ATTR                0 (left)
             42 LOAD_FAST                2 (current_max_depth_value)
             44 CALL_METHOD              2
             46 LOAD_FAST                0 (self)
             48 LOAD_METHOD              3 (current_max_depth)
             50 LOAD_FAST                1 (node)
             52 LOAD_ATTR                1 (right)
             54 LOAD_FAST                2 (current_max_depth_value)
             56 CALL_METHOD              2
             58 CALL_FUNCTION            2
             60 STORE_FAST               2 (current_max_depth_value)

 35          62 LOAD_FAST                2 (current_max_depth_value)
             64 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        left_max = 1 + self.maxDepth(root.left)
        right_max = 1 + self.maxDepth(root.right)
        
        return max(left_max, right_max)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6b355a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6b355a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f6b355a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f6b355a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_CONST               2 (1)
             10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              0 (maxDepth)
             14 LOAD_FAST                1 (root)
             16 LOAD_ATTR                1 (left)
             18 CALL_METHOD              1
             20 BINARY_ADD
             22 STORE_FAST               2 (left_max)

  7          24 LOAD_CONST               2 (1)
             26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              0 (maxDepth)
             30 LOAD_FAST                1 (root)
             32 LOAD_ATTR                2 (right)
             34 CALL_METHOD              1
             36 BINARY_ADD
             38 STORE_FAST               3 (right_max)

  9          40 LOAD_GLOBAL              3 (max)
             42 LOAD_FAST                2 (left_max)
             44 LOAD_FAST                3 (right_max)
             46 CALL_FUNCTION            2
             48 RETURN_VALUE
None
"
maxDepth,"class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        res = []
        que = []
        que.append(root)
        lenn = 0
        if root is None:
            return lenn
        while que:
            nodes = []
            for x in range(len(que)):
                node = que.pop(0)
                nodes.append(node.val)
                if node.left:
                    que.append(node.left)
                if node.right:
                    que.append(node.right)
                    
            lenn += 1
        return lenn
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f943b935240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f943b935240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxDepth at 0x7f943b9353a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxDepth')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxDepth)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxDepth at 0x7f943b9353a0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (res)

  4           4 BUILD_LIST               0
              6 STORE_FAST               3 (que)

  5           8 LOAD_FAST                3 (que)
             10 LOAD_METHOD              0 (append)
             12 LOAD_FAST                1 (root)
             14 CALL_METHOD              1
             16 POP_TOP

  6          18 LOAD_CONST               1 (0)
             20 STORE_FAST               4 (lenn)

  7          22 LOAD_FAST                1 (root)
             24 LOAD_CONST               0 (None)
             26 COMPARE_OP               8 (is)
             28 POP_JUMP_IF_FALSE       34

  8          30 LOAD_FAST                4 (lenn)
             32 RETURN_VALUE

  9     >>   34 LOAD_FAST                3 (que)
             36 POP_JUMP_IF_FALSE      128

 10          38 BUILD_LIST               0
             40 STORE_FAST               5 (nodes)

 11          42 LOAD_GLOBAL              1 (range)
             44 LOAD_GLOBAL              2 (len)
             46 LOAD_FAST                3 (que)
             48 CALL_FUNCTION            1
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER                62 (to 118)
             56 STORE_FAST               6 (x)

 12          58 LOAD_FAST                3 (que)
             60 LOAD_METHOD              3 (pop)
             62 LOAD_CONST               1 (0)
             64 CALL_METHOD              1
             66 STORE_FAST               7 (node)

 13          68 LOAD_FAST                5 (nodes)
             70 LOAD_METHOD              0 (append)
             72 LOAD_FAST                7 (node)
             74 LOAD_ATTR                4 (val)
             76 CALL_METHOD              1
             78 POP_TOP

 14          80 LOAD_FAST                7 (node)
             82 LOAD_ATTR                5 (left)
             84 POP_JUMP_IF_FALSE       98

 15          86 LOAD_FAST                3 (que)
             88 LOAD_METHOD              0 (append)
             90 LOAD_FAST                7 (node)
             92 LOAD_ATTR                5 (left)
             94 CALL_METHOD              1
             96 POP_TOP

 16     >>   98 LOAD_FAST                7 (node)
            100 LOAD_ATTR                6 (right)
            102 POP_JUMP_IF_FALSE       54

 17         104 LOAD_FAST                3 (que)
            106 LOAD_METHOD              0 (append)
            108 LOAD_FAST                7 (node)
            110 LOAD_ATTR                6 (right)
            112 CALL_METHOD              1
            114 POP_TOP
            116 JUMP_ABSOLUTE           54

 19     >>  118 LOAD_FAST                4 (lenn)
            120 LOAD_CONST               2 (1)
            122 INPLACE_ADD
            124 STORE_FAST               4 (lenn)
            126 JUMP_ABSOLUTE           34

 20     >>  128 LOAD_FAST                4 (lenn)
            130 RETURN_VALUE
None
"
maxPathSum,"class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.ans = float(""-inf"")

        def postorder(root):
            if not root:  return 0

            left_val, right_val = max(0, postorder(root.left)), max(0, postorder(root.right))
            self.ans = max(self.ans, (root.val + left_val + right_val))
            return max((root.val + left_val), (root.val + right_val))

        postorder(root)
        return self.ans

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object TreeNode at 0x7f2193cd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('TreeNode')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('TreeNode')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (TreeNode)

  6          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f2193cd57c0, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object TreeNode at 0x7f2193cd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('TreeNode')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               5 ((0, None, None))
             10 LOAD_CONST               3 (<code object __init__ at 0x7f2193cd5240, file ""<ast>"", line 2>)
             12 LOAD_CONST               4 ('TreeNode.__init__')
             14 MAKE_FUNCTION            1 (defaults)
             16 STORE_NAME               3 (__init__)
             18 LOAD_CONST               2 (None)
             20 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f2193cd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (val)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  4           6 LOAD_FAST                2 (left)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (left)

  5          12 LOAD_FAST                3 (right)
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (right)
             18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2193cd57c0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f2193cd5710, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f2193cd5710, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_DEREF               1 (self)
              8 STORE_ATTR               1 (ans)

 10          10 LOAD_CLOSURE             0 (postorder)
             12 LOAD_CLOSURE             1 (self)
             14 BUILD_TUPLE              2
             16 LOAD_CONST               2 (<code object postorder at 0x7f2193cd5660, file ""<ast>"", line 10>)
             18 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.postorder')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (postorder)

 17          24 LOAD_DEREF               0 (postorder)
             26 LOAD_FAST                1 (root)
             28 CALL_FUNCTION            1
             30 POP_TOP

 18          32 LOAD_DEREF               1 (self)
             34 LOAD_ATTR                1 (ans)
             36 RETURN_VALUE

Disassembly of <code object postorder at 0x7f2193cd5660, file ""<ast>"", line 10>:
 11           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 13     >>    8 LOAD_GLOBAL              0 (max)
             10 LOAD_CONST               1 (0)
             12 LOAD_DEREF               0 (postorder)
             14 LOAD_FAST                0 (root)
             16 LOAD_ATTR                1 (left)
             18 CALL_FUNCTION            1
             20 CALL_FUNCTION            2
             22 LOAD_GLOBAL              0 (max)
             24 LOAD_CONST               1 (0)
             26 LOAD_DEREF               0 (postorder)
             28 LOAD_FAST                0 (root)
             30 LOAD_ATTR                2 (right)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            2
             36 ROT_TWO
             38 STORE_FAST               1 (left_val)
             40 STORE_FAST               2 (right_val)

 14          42 LOAD_GLOBAL              0 (max)
             44 LOAD_DEREF               1 (self)
             46 LOAD_ATTR                3 (ans)
             48 LOAD_FAST                0 (root)
             50 LOAD_ATTR                4 (val)
             52 LOAD_FAST                1 (left_val)
             54 BINARY_ADD
             56 LOAD_FAST                2 (right_val)
             58 BINARY_ADD
             60 CALL_FUNCTION            2
             62 LOAD_DEREF               1 (self)
             64 STORE_ATTR               3 (ans)

 15          66 LOAD_GLOBAL              0 (max)
             68 LOAD_FAST                0 (root)
             70 LOAD_ATTR                4 (val)
             72 LOAD_FAST                1 (left_val)
             74 BINARY_ADD
             76 LOAD_FAST                0 (root)
             78 LOAD_ATTR                4 (val)
             80 LOAD_FAST                2 (right_val)
             82 BINARY_ADD
             84 CALL_FUNCTION            2
             86 RETURN_VALUE
None
"
maxPathSum,"import sys
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.answer =  - sys.maxsize - 1
        def dfs(node):
            if not node:
                return 0
            left_sub_tree = dfs(node.left)
            right_sub_tree = dfs(node.right)
            self.answer = max(self.answer , left_sub_tree + right_sub_tree + node.val)
            return max(0 , node.val + max(left_sub_tree , right_sub_tree))
        dfs(root)
        return self.answer
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f7ac90f5660, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7ac90f5660, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f7ac90f55b0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f7ac90f55b0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (sys)
              2 LOAD_ATTR                1 (maxsize)
              4 UNARY_NEGATIVE
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 LOAD_DEREF               1 (self)
             12 STORE_ATTR               2 (answer)

  5          14 LOAD_CLOSURE             0 (dfs)
             16 LOAD_CLOSURE             1 (self)
             18 BUILD_TUPLE              2
             20 LOAD_CONST               2 (<code object dfs at 0x7f7ac90f5500, file ""<ast>"", line 5>)
             22 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.dfs')
             24 MAKE_FUNCTION            8 (closure)
             26 STORE_DEREF              0 (dfs)

 12          28 LOAD_DEREF               0 (dfs)
             30 LOAD_FAST                1 (root)
             32 CALL_FUNCTION            1
             34 POP_TOP

 13          36 LOAD_DEREF               1 (self)
             38 LOAD_ATTR                2 (answer)
             40 RETURN_VALUE

Disassembly of <code object dfs at 0x7f7ac90f5500, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

  7           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  8     >>    8 LOAD_DEREF               0 (dfs)
             10 LOAD_FAST                0 (node)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left_sub_tree)

  9          18 LOAD_DEREF               0 (dfs)
             20 LOAD_FAST                0 (node)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right_sub_tree)

 10          28 LOAD_GLOBAL              2 (max)
             30 LOAD_DEREF               1 (self)
             32 LOAD_ATTR                3 (answer)
             34 LOAD_FAST                1 (left_sub_tree)
             36 LOAD_FAST                2 (right_sub_tree)
             38 BINARY_ADD
             40 LOAD_FAST                0 (node)
             42 LOAD_ATTR                4 (val)
             44 BINARY_ADD
             46 CALL_FUNCTION            2
             48 LOAD_DEREF               1 (self)
             50 STORE_ATTR               3 (answer)

 11          52 LOAD_GLOBAL              2 (max)
             54 LOAD_CONST               1 (0)
             56 LOAD_FAST                0 (node)
             58 LOAD_ATTR                4 (val)
             60 LOAD_GLOBAL              2 (max)
             62 LOAD_FAST                1 (left_sub_tree)
             64 LOAD_FAST                2 (right_sub_tree)
             66 CALL_FUNCTION            2
             68 BINARY_ADD
             70 CALL_FUNCTION            2
             72 RETURN_VALUE
None
"
maxPathSum,"class Solution:
	def maxPathSum(self, root: TreeNode) -> int:

			result = [root.val]

			def findValue(node):
				if node == None:
					return 0
				else:
					l = findValue(node.left)
					r = findValue(node.right)
					temp = max(l+node.val, r+node.val, node.val)
					result.append(temp)
					result.append(l+r+node.val)
					return temp


			findValue(root)
			return max(result)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7faa96815500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7faa96815500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7faa96815450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7faa96815450, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (val)
              4 BUILD_LIST               1
              6 STORE_DEREF              1 (result)

  6           8 LOAD_CLOSURE             0 (findValue)
             10 LOAD_CLOSURE             1 (result)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               1 (<code object findValue at 0x7faa968153a0, file ""<ast>"", line 6>)
             16 LOAD_CONST               2 ('Solution.maxPathSum.<locals>.findValue')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (findValue)

 18          22 LOAD_DEREF               0 (findValue)
             24 LOAD_FAST                1 (root)
             26 CALL_FUNCTION            1
             28 POP_TOP

 19          30 LOAD_GLOBAL              1 (max)
             32 LOAD_DEREF               1 (result)
             34 CALL_FUNCTION            1
             36 RETURN_VALUE

Disassembly of <code object findValue at 0x7faa968153a0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                0 (node)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

 10     >>   12 LOAD_DEREF               0 (findValue)
             14 LOAD_FAST                0 (node)
             16 LOAD_ATTR                0 (left)
             18 CALL_FUNCTION            1
             20 STORE_FAST               1 (l)

 11          22 LOAD_DEREF               0 (findValue)
             24 LOAD_FAST                0 (node)
             26 LOAD_ATTR                1 (right)
             28 CALL_FUNCTION            1
             30 STORE_FAST               2 (r)

 12          32 LOAD_GLOBAL              2 (max)
             34 LOAD_FAST                1 (l)
             36 LOAD_FAST                0 (node)
             38 LOAD_ATTR                3 (val)
             40 BINARY_ADD
             42 LOAD_FAST                2 (r)
             44 LOAD_FAST                0 (node)
             46 LOAD_ATTR                3 (val)
             48 BINARY_ADD
             50 LOAD_FAST                0 (node)
             52 LOAD_ATTR                3 (val)
             54 CALL_FUNCTION            3
             56 STORE_FAST               3 (temp)

 13          58 LOAD_DEREF               1 (result)
             60 LOAD_METHOD              4 (append)
             62 LOAD_FAST                3 (temp)
             64 CALL_METHOD              1
             66 POP_TOP

 14          68 LOAD_DEREF               1 (result)
             70 LOAD_METHOD              4 (append)
             72 LOAD_FAST                1 (l)
             74 LOAD_FAST                2 (r)
             76 BINARY_ADD
             78 LOAD_FAST                0 (node)
             80 LOAD_ATTR                3 (val)
             82 BINARY_ADD
             84 CALL_METHOD              1
             86 POP_TOP

 15          88 LOAD_FAST                3 (temp)
             90 RETURN_VALUE
             92 LOAD_CONST               0 (None)
             94 RETURN_VALUE
None
"
maxPathSum,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if not root:
            return
        
        self.max_sum = 0
        self.neg_sum = float(""-inf"")
        self.negFlag = False
        def helper(root):
            if not root:
                return 0
            
            left = helper(root.left)
            right = helper(root.right)
            
            self.max_sum = max(self.max_sum, left + root.val + right, root.val, root.val + left, root.val + right)
            
            
            # Handling all -ve values
            self.negFlag |= root.val > 0
            self.neg_sum = max(self.neg_sum, root.val)

            return max(root.val + left, root.val + right, root.val)
            
        helper(root)
            
        if not self.negFlag:
            return self.neg_sum
        return self.max_sum    
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fda05f75450, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fda05f75450, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fda05f75240, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fda05f75240, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

 10           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 12     >>    8 LOAD_CONST               1 (0)
             10 LOAD_DEREF               1 (self)
             12 STORE_ATTR               0 (max_sum)

 13          14 LOAD_GLOBAL              1 (float)
             16 LOAD_CONST               2 ('-inf')
             18 CALL_FUNCTION            1
             20 LOAD_DEREF               1 (self)
             22 STORE_ATTR               2 (neg_sum)

 14          24 LOAD_CONST               3 (False)
             26 LOAD_DEREF               1 (self)
             28 STORE_ATTR               3 (negFlag)

 15          30 LOAD_CLOSURE             0 (helper)
             32 LOAD_CLOSURE             1 (self)
             34 BUILD_TUPLE              2
             36 LOAD_CONST               4 (<code object helper at 0x7fda05f753a0, file ""<ast>"", line 15>)
             38 LOAD_CONST               5 ('Solution.maxPathSum.<locals>.helper')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_DEREF              0 (helper)

 31          44 LOAD_DEREF               0 (helper)
             46 LOAD_FAST                1 (root)
             48 CALL_FUNCTION            1
             50 POP_TOP

 33          52 LOAD_DEREF               1 (self)
             54 LOAD_ATTR                3 (negFlag)
             56 POP_JUMP_IF_TRUE        64

 34          58 LOAD_DEREF               1 (self)
             60 LOAD_ATTR                2 (neg_sum)
             62 RETURN_VALUE

 35     >>   64 LOAD_DEREF               1 (self)
             66 LOAD_ATTR                0 (max_sum)
             68 RETURN_VALUE

Disassembly of <code object helper at 0x7fda05f753a0, file ""<ast>"", line 15>:
 16           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

 17           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 19     >>    8 LOAD_DEREF               0 (helper)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left)

 20          18 LOAD_DEREF               0 (helper)
             20 LOAD_FAST                0 (root)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right)

 22          28 LOAD_GLOBAL              2 (max)
             30 LOAD_DEREF               1 (self)
             32 LOAD_ATTR                3 (max_sum)
             34 LOAD_FAST                1 (left)
             36 LOAD_FAST                0 (root)
             38 LOAD_ATTR                4 (val)
             40 BINARY_ADD
             42 LOAD_FAST                2 (right)
             44 BINARY_ADD
             46 LOAD_FAST                0 (root)
             48 LOAD_ATTR                4 (val)
             50 LOAD_FAST                0 (root)
             52 LOAD_ATTR                4 (val)
             54 LOAD_FAST                1 (left)
             56 BINARY_ADD
             58 LOAD_FAST                0 (root)
             60 LOAD_ATTR                4 (val)
             62 LOAD_FAST                2 (right)
             64 BINARY_ADD
             66 CALL_FUNCTION            5
             68 LOAD_DEREF               1 (self)
             70 STORE_ATTR               3 (max_sum)

 26          72 LOAD_DEREF               1 (self)
             74 DUP_TOP
             76 LOAD_ATTR                5 (negFlag)
             78 LOAD_FAST                0 (root)
             80 LOAD_ATTR                4 (val)
             82 LOAD_CONST               1 (0)
             84 COMPARE_OP               4 (>)
             86 INPLACE_OR
             88 ROT_TWO
             90 STORE_ATTR               5 (negFlag)

 27          92 LOAD_GLOBAL              2 (max)
             94 LOAD_DEREF               1 (self)
             96 LOAD_ATTR                6 (neg_sum)
             98 LOAD_FAST                0 (root)
            100 LOAD_ATTR                4 (val)
            102 CALL_FUNCTION            2
            104 LOAD_DEREF               1 (self)
            106 STORE_ATTR               6 (neg_sum)

 29         108 LOAD_GLOBAL              2 (max)
            110 LOAD_FAST                0 (root)
            112 LOAD_ATTR                4 (val)
            114 LOAD_FAST                1 (left)
            116 BINARY_ADD
            118 LOAD_FAST                0 (root)
            120 LOAD_ATTR                4 (val)
            122 LOAD_FAST                2 (right)
            124 BINARY_ADD
            126 LOAD_FAST                0 (root)
            128 LOAD_ATTR                4 (val)
            130 CALL_FUNCTION            3
            132 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def nodeMax(self, node):
        if not node:
            return 0
        else:
            lmax, rmax = self.nodeMax(node.left), self.nodeMax(node.right)
            self.res = max(self.res, node.val + lmax + rmax)
            return max(node.val + max(lmax, rmax), 0)
    def maxPathSum(self, root: TreeNode) -> int:
        self.res = root.val
        self.nodeMax(root)
        return self.res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f97e83253a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f97e83253a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object nodeMax at 0x7f97e8325240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.nodeMax')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (nodeMax)

  9          16 LOAD_NAME                4 (TreeNode)
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               3 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               4 (<code object maxPathSum at 0x7f97e83252f0, file ""<ast>"", line 9>)
             26 LOAD_CONST               5 ('Solution.maxPathSum')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (maxPathSum)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object nodeMax at 0x7f97e8325240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (nodeMax)
             12 LOAD_FAST                1 (node)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              0 (nodeMax)
             22 LOAD_FAST                1 (node)
             24 LOAD_ATTR                2 (right)
             26 CALL_METHOD              1
             28 ROT_TWO
             30 STORE_FAST               2 (lmax)
             32 STORE_FAST               3 (rmax)

  7          34 LOAD_GLOBAL              3 (max)
             36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                4 (res)
             40 LOAD_FAST                1 (node)
             42 LOAD_ATTR                5 (val)
             44 LOAD_FAST                2 (lmax)
             46 BINARY_ADD
             48 LOAD_FAST                3 (rmax)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 LOAD_FAST                0 (self)
             56 STORE_ATTR               4 (res)

  8          58 LOAD_GLOBAL              3 (max)
             60 LOAD_FAST                1 (node)
             62 LOAD_ATTR                5 (val)
             64 LOAD_GLOBAL              3 (max)
             66 LOAD_FAST                2 (lmax)
             68 LOAD_FAST                3 (rmax)
             70 CALL_FUNCTION            2
             72 BINARY_ADD
             74 LOAD_CONST               1 (0)
             76 CALL_FUNCTION            2
             78 RETURN_VALUE
             80 LOAD_CONST               0 (None)
             82 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f97e83252f0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (val)
              4 LOAD_FAST                0 (self)
              6 STORE_ATTR               1 (res)

 11           8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              2 (nodeMax)
             12 LOAD_FAST                1 (root)
             14 CALL_METHOD              1
             16 POP_TOP

 12          18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                1 (res)
             22 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.res = float('-inf')
        self.dfs(root)
        return self.res
    def dfs(self, node):
        if not node:
            return 0
        left = self.dfs(node.left)
        right= self.dfs(node.right)
        self.res = max(self.res, left + right + node.val)
        cur_max = max(left, right) + node.val
        return max(cur_max, 0)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8329ae53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8329ae53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f8329ae5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)

  6          24 LOAD_CONST               4 (<code object dfs at 0x7f8329ae52f0, file ""<ast>"", line 6>)
             26 LOAD_CONST               5 ('Solution.dfs')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (dfs)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f8329ae5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_FAST                0 (self)
              8 STORE_ATTR               1 (res)

  4          10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              2 (dfs)
             14 LOAD_FAST                1 (root)
             16 CALL_METHOD              1
             18 POP_TOP

  5          20 LOAD_FAST                0 (self)
             22 LOAD_ATTR                1 (res)
             24 RETURN_VALUE

Disassembly of <code object dfs at 0x7f8329ae52f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_TRUE         8

  8           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  9     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (dfs)
             12 LOAD_FAST                1 (node)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 STORE_FAST               2 (left)

 10          20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              0 (dfs)
             24 LOAD_FAST                1 (node)
             26 LOAD_ATTR                2 (right)
             28 CALL_METHOD              1
             30 STORE_FAST               3 (right)

 11          32 LOAD_GLOBAL              3 (max)
             34 LOAD_FAST                0 (self)
             36 LOAD_ATTR                4 (res)
             38 LOAD_FAST                2 (left)
             40 LOAD_FAST                3 (right)
             42 BINARY_ADD
             44 LOAD_FAST                1 (node)
             46 LOAD_ATTR                5 (val)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 LOAD_FAST                0 (self)
             54 STORE_ATTR               4 (res)

 12          56 LOAD_GLOBAL              3 (max)
             58 LOAD_FAST                2 (left)
             60 LOAD_FAST                3 (right)
             62 CALL_FUNCTION            2
             64 LOAD_FAST                1 (node)
             66 LOAD_ATTR                5 (val)
             68 BINARY_ADD
             70 STORE_FAST               4 (cur_max)

 13          72 LOAD_GLOBAL              3 (max)
             74 LOAD_FAST                4 (cur_max)
             76 LOAD_CONST               1 (0)
             78 CALL_FUNCTION            2
             80 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if root.right==None and root.left==None:
            return root.val
        ans=[]
        def recur(node):
            if node==None:
                return 0
            left_max=0
            right_max=0
            left_max+=recur(node.left)
            right_max+=recur(node.right)
            ans.append(max(node.val+right_max,left_max+node.val,node.val+right_max+left_max,node.val))
            return max(left_max+node.val,right_max+node.val,node.val)
        recur(root)
        # print(ans)
        return max(ans)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe5f6da53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe5f6da53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fe5f6da5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fe5f6da5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (right)
              4 LOAD_CONST               0 (None)
              6 COMPARE_OP               2 (==)
              8 POP_JUMP_IF_FALSE       26
             10 LOAD_FAST                1 (root)
             12 LOAD_ATTR                1 (left)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       26

  4          20 LOAD_FAST                1 (root)
             22 LOAD_ATTR                2 (val)
             24 RETURN_VALUE

  5     >>   26 BUILD_LIST               0
             28 STORE_DEREF              0 (ans)

  6          30 LOAD_CLOSURE             0 (ans)
             32 LOAD_CLOSURE             1 (recur)
             34 BUILD_TUPLE              2
             36 LOAD_CONST               1 (<code object recur at 0x7fe5f6da52f0, file ""<ast>"", line 6>)
             38 LOAD_CONST               2 ('Solution.maxPathSum.<locals>.recur')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_DEREF              1 (recur)

 15          44 LOAD_DEREF               1 (recur)
             46 LOAD_FAST                1 (root)
             48 CALL_FUNCTION            1
             50 POP_TOP

 17          52 LOAD_GLOBAL              3 (max)
             54 LOAD_DEREF               0 (ans)
             56 CALL_FUNCTION            1
             58 RETURN_VALUE

Disassembly of <code object recur at 0x7fe5f6da52f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                0 (node)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  9     >>   12 LOAD_CONST               1 (0)
             14 STORE_FAST               1 (left_max)

 10          16 LOAD_CONST               1 (0)
             18 STORE_FAST               2 (right_max)

 11          20 LOAD_FAST                1 (left_max)
             22 LOAD_DEREF               1 (recur)
             24 LOAD_FAST                0 (node)
             26 LOAD_ATTR                0 (left)
             28 CALL_FUNCTION            1
             30 INPLACE_ADD
             32 STORE_FAST               1 (left_max)

 12          34 LOAD_FAST                2 (right_max)
             36 LOAD_DEREF               1 (recur)
             38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                1 (right)
             42 CALL_FUNCTION            1
             44 INPLACE_ADD
             46 STORE_FAST               2 (right_max)

 13          48 LOAD_DEREF               0 (ans)
             50 LOAD_METHOD              2 (append)
             52 LOAD_GLOBAL              3 (max)
             54 LOAD_FAST                0 (node)
             56 LOAD_ATTR                4 (val)
             58 LOAD_FAST                2 (right_max)
             60 BINARY_ADD
             62 LOAD_FAST                1 (left_max)
             64 LOAD_FAST                0 (node)
             66 LOAD_ATTR                4 (val)
             68 BINARY_ADD
             70 LOAD_FAST                0 (node)
             72 LOAD_ATTR                4 (val)
             74 LOAD_FAST                2 (right_max)
             76 BINARY_ADD
             78 LOAD_FAST                1 (left_max)
             80 BINARY_ADD
             82 LOAD_FAST                0 (node)
             84 LOAD_ATTR                4 (val)
             86 CALL_FUNCTION            4
             88 CALL_METHOD              1
             90 POP_TOP

 14          92 LOAD_GLOBAL              3 (max)
             94 LOAD_FAST                1 (left_max)
             96 LOAD_FAST                0 (node)
             98 LOAD_ATTR                4 (val)
            100 BINARY_ADD
            102 LOAD_FAST                2 (right_max)
            104 LOAD_FAST                0 (node)
            106 LOAD_ATTR                4 (val)
            108 BINARY_ADD
            110 LOAD_FAST                0 (node)
            112 LOAD_ATTR                4 (val)
            114 CALL_FUNCTION            3
            116 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self._max = -float('inf')
        def traverse(node):
            if not node: return 0
            left = traverse(node.left)
            right = traverse(node.right)
            # we keep traversing upwards
            local_max = max(node.val, node.val + max(left, right))
            # we cross the path and we are done
            self._max = max(self._max, local_max, node.val+left+right)
            return local_max
        return max(traverse(root), self._max)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f17683d5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f17683d5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f17683d5450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f17683d5450, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 UNARY_NEGATIVE
              8 LOAD_DEREF               0 (self)
             10 STORE_ATTR               1 (_max)

  4          12 LOAD_CLOSURE             0 (self)
             14 LOAD_CLOSURE             1 (traverse)
             16 BUILD_TUPLE              2
             18 LOAD_CONST               2 (<code object traverse at 0x7f17683d53a0, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.traverse')
             22 MAKE_FUNCTION            8 (closure)
             24 STORE_DEREF              1 (traverse)

 13          26 LOAD_GLOBAL              2 (max)
             28 LOAD_DEREF               1 (traverse)
             30 LOAD_FAST                1 (root)
             32 CALL_FUNCTION            1
             34 LOAD_DEREF               0 (self)
             36 LOAD_ATTR                1 (_max)
             38 CALL_FUNCTION            2
             40 RETURN_VALUE

Disassembly of <code object traverse at 0x7f17683d53a0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_DEREF               1 (traverse)
             10 LOAD_FAST                0 (node)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left)

  7          18 LOAD_DEREF               1 (traverse)
             20 LOAD_FAST                0 (node)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right)

  9          28 LOAD_GLOBAL              2 (max)
             30 LOAD_FAST                0 (node)
             32 LOAD_ATTR                3 (val)
             34 LOAD_FAST                0 (node)
             36 LOAD_ATTR                3 (val)
             38 LOAD_GLOBAL              2 (max)
             40 LOAD_FAST                1 (left)
             42 LOAD_FAST                2 (right)
             44 CALL_FUNCTION            2
             46 BINARY_ADD
             48 CALL_FUNCTION            2
             50 STORE_FAST               3 (local_max)

 11          52 LOAD_GLOBAL              2 (max)
             54 LOAD_DEREF               0 (self)
             56 LOAD_ATTR                4 (_max)
             58 LOAD_FAST                3 (local_max)
             60 LOAD_FAST                0 (node)
             62 LOAD_ATTR                3 (val)
             64 LOAD_FAST                1 (left)
             66 BINARY_ADD
             68 LOAD_FAST                2 (right)
             70 BINARY_ADD
             72 CALL_FUNCTION            3
             74 LOAD_DEREF               0 (self)
             76 STORE_ATTR               4 (_max)

 12          78 LOAD_FAST                3 (local_max)
             80 RETURN_VALUE
None
"
maxPathSum,"import math
class Solution:
    def helper(self,root):
        if root==None:
            return(-math.inf,-math.inf)
        l,lmax=self.helper(root.left)
        r,rmax=self.helper(root.right)
        c=max(root.val,l+root.val,r+root.val)
        s=max(c,lmax,rmax,l+r+root.val)
        return(c,s)
    def maxPathSum(self, root: TreeNode) -> int:
        return self.helper(root)[1]
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f37702753a0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f37702753a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object helper at 0x7f37702752f0, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.helper')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (helper)

 11          16 LOAD_NAME                4 (TreeNode)
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               3 (('root', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               4 (<code object maxPathSum at 0x7f3770275240, file ""<ast>"", line 11>)
             26 LOAD_CONST               5 ('Solution.maxPathSum')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (maxPathSum)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object helper at 0x7f37702752f0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (root)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       24

  5           8 LOAD_GLOBAL              0 (math)
             10 LOAD_ATTR                1 (inf)
             12 UNARY_NEGATIVE
             14 LOAD_GLOBAL              0 (math)
             16 LOAD_ATTR                1 (inf)
             18 UNARY_NEGATIVE
             20 BUILD_TUPLE              2
             22 RETURN_VALUE

  6     >>   24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              2 (helper)
             28 LOAD_FAST                1 (root)
             30 LOAD_ATTR                3 (left)
             32 CALL_METHOD              1
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               2 (l)
             38 STORE_FAST               3 (lmax)

  7          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              2 (helper)
             44 LOAD_FAST                1 (root)
             46 LOAD_ATTR                4 (right)
             48 CALL_METHOD              1
             50 UNPACK_SEQUENCE          2
             52 STORE_FAST               4 (r)
             54 STORE_FAST               5 (rmax)

  8          56 LOAD_GLOBAL              5 (max)
             58 LOAD_FAST                1 (root)
             60 LOAD_ATTR                6 (val)
             62 LOAD_FAST                2 (l)
             64 LOAD_FAST                1 (root)
             66 LOAD_ATTR                6 (val)
             68 BINARY_ADD
             70 LOAD_FAST                4 (r)
             72 LOAD_FAST                1 (root)
             74 LOAD_ATTR                6 (val)
             76 BINARY_ADD
             78 CALL_FUNCTION            3
             80 STORE_FAST               6 (c)

  9          82 LOAD_GLOBAL              5 (max)
             84 LOAD_FAST                6 (c)
             86 LOAD_FAST                3 (lmax)
             88 LOAD_FAST                5 (rmax)
             90 LOAD_FAST                2 (l)
             92 LOAD_FAST                4 (r)
             94 BINARY_ADD
             96 LOAD_FAST                1 (root)
             98 LOAD_ATTR                6 (val)
            100 BINARY_ADD
            102 CALL_FUNCTION            4
            104 STORE_FAST               7 (s)

 10         106 LOAD_FAST                6 (c)
            108 LOAD_FAST                7 (s)
            110 BUILD_TUPLE              2
            112 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f3770275240, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (helper)
              4 LOAD_FAST                1 (root)
              6 CALL_METHOD              1
              8 LOAD_CONST               1 (1)
             10 BINARY_SUBSCR
             12 RETURN_VALUE
None
"
maxPathSum,"# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root:TreeNode)->int:
        """"""
        :type root: TreeNode
        :rtype: int
        """"""
        self.res = float('-inf')
        self.helper(root)
        return self.res 
        
    def helper(self, root):
        if not root:
            return 0
        left, right = self.helper(root.left), self.helper(root.right)
        self.res = max(self.res, root.val + left + right)
        return max(root.val + max(left, right), 0)
","  8           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6de79353a0, file ""<ast>"", line 8>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6de79353a0, file ""<ast>"", line 8>:
  8           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  9           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f6de7935240, file ""<ast>"", line 9>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)

 18          24 LOAD_CONST               4 (<code object helper at 0x7f6de79352f0, file ""<ast>"", line 18>)
             26 LOAD_CONST               5 ('Solution.helper')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (helper)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f6de7935240, file ""<ast>"", line 9>:
 14           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_FAST                0 (self)
              8 STORE_ATTR               1 (res)

 15          10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              2 (helper)
             14 LOAD_FAST                1 (root)
             16 CALL_METHOD              1
             18 POP_TOP

 16          20 LOAD_FAST                0 (self)
             22 LOAD_ATTR                1 (res)
             24 RETURN_VALUE

Disassembly of <code object helper at 0x7f6de79352f0, file ""<ast>"", line 18>:
 19           0 LOAD_FAST                1 (root)
              2 POP_JUMP_IF_TRUE         8

 20           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 21     >>    8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (helper)
             12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_METHOD              1
             18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              0 (helper)
             22 LOAD_FAST                1 (root)
             24 LOAD_ATTR                2 (right)
             26 CALL_METHOD              1
             28 ROT_TWO
             30 STORE_FAST               2 (left)
             32 STORE_FAST               3 (right)

 22          34 LOAD_GLOBAL              3 (max)
             36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                4 (res)
             40 LOAD_FAST                1 (root)
             42 LOAD_ATTR                5 (val)
             44 LOAD_FAST                2 (left)
             46 BINARY_ADD
             48 LOAD_FAST                3 (right)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 LOAD_FAST                0 (self)
             56 STORE_ATTR               4 (res)

 23          58 LOAD_GLOBAL              3 (max)
             60 LOAD_FAST                1 (root)
             62 LOAD_ATTR                5 (val)
             64 LOAD_GLOBAL              3 (max)
             66 LOAD_FAST                2 (left)
             68 LOAD_FAST                3 (right)
             70 CALL_FUNCTION            2
             72 BINARY_ADD
             74 LOAD_CONST               1 (0)
             76 CALL_FUNCTION            2
             78 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        Max = float(""-inf"")
        def maxPath(root):
            nonlocal Max
            if not root:
                return float(""-inf"")
            left1= maxPath(root.left)
            right1= maxPath(root.right)
            temp = max(root.val, root.val + left1, root.val + right1)
            Max = max(Max, temp, left1+right1+root.val)
            return temp
        res = maxPath(root)
        return Max if Max != float(""-inf"") else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f415fa353a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f415fa353a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f415fa352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f415fa352f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 STORE_DEREF              0 (Max)

  4           8 LOAD_CLOSURE             0 (Max)
             10 LOAD_CLOSURE             1 (maxPath)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               2 (<code object maxPath at 0x7f415fa35240, file ""<ast>"", line 4>)
             16 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.maxPath')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              1 (maxPath)

 13          22 LOAD_DEREF               1 (maxPath)
             24 LOAD_FAST                1 (root)
             26 CALL_FUNCTION            1
             28 STORE_FAST               2 (res)

 14          30 LOAD_DEREF               0 (Max)
             32 LOAD_GLOBAL              0 (float)
             34 LOAD_CONST               1 ('-inf')
             36 CALL_FUNCTION            1
             38 COMPARE_OP               3 (!=)
             40 POP_JUMP_IF_FALSE       46
             42 LOAD_DEREF               0 (Max)
             44 RETURN_VALUE
        >>   46 LOAD_CONST               4 (0)
             48 RETURN_VALUE

Disassembly of <code object maxPath at 0x7f415fa35240, file ""<ast>"", line 4>:
  6           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE        12

  7           4 LOAD_GLOBAL              0 (float)
              6 LOAD_CONST               1 ('-inf')
              8 CALL_FUNCTION            1
             10 RETURN_VALUE

  8     >>   12 LOAD_DEREF               1 (maxPath)
             14 LOAD_FAST                0 (root)
             16 LOAD_ATTR                1 (left)
             18 CALL_FUNCTION            1
             20 STORE_FAST               1 (left1)

  9          22 LOAD_DEREF               1 (maxPath)
             24 LOAD_FAST                0 (root)
             26 LOAD_ATTR                2 (right)
             28 CALL_FUNCTION            1
             30 STORE_FAST               2 (right1)

 10          32 LOAD_GLOBAL              3 (max)
             34 LOAD_FAST                0 (root)
             36 LOAD_ATTR                4 (val)
             38 LOAD_FAST                0 (root)
             40 LOAD_ATTR                4 (val)
             42 LOAD_FAST                1 (left1)
             44 BINARY_ADD
             46 LOAD_FAST                0 (root)
             48 LOAD_ATTR                4 (val)
             50 LOAD_FAST                2 (right1)
             52 BINARY_ADD
             54 CALL_FUNCTION            3
             56 STORE_FAST               3 (temp)

 11          58 LOAD_GLOBAL              3 (max)
             60 LOAD_DEREF               0 (Max)
             62 LOAD_FAST                3 (temp)
             64 LOAD_FAST                1 (left1)
             66 LOAD_FAST                2 (right1)
             68 BINARY_ADD
             70 LOAD_FAST                0 (root)
             72 LOAD_ATTR                4 (val)
             74 BINARY_ADD
             76 CALL_FUNCTION            3
             78 STORE_DEREF              0 (Max)

 12          80 LOAD_FAST                3 (temp)
             82 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        def check(node: TreeNode):
            (lps, ls) = check(node.left) if node.left else (0, float('-inf'))
            (rps, rs) = check(node.right) if node.right else (0, float('-inf'))
            return max(lps + node.val, rps + node.val, node.val), max(ls, rs, lps + node.val, rps + node.val, lps + rps + node.val, node.val)
        return check(root)[1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7faff90f5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7faff90f5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7faff90f52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7faff90f52f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (TreeNode)
              2 LOAD_CONST               1 (('node',))
              4 BUILD_CONST_KEY_MAP      1
              6 LOAD_CLOSURE             0 (check)
              8 BUILD_TUPLE              1
             10 LOAD_CONST               2 (<code object check at 0x7faff90f5450, file ""<ast>"", line 3>)
             12 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.check')
             14 MAKE_FUNCTION           12 (annotations, closure)
             16 STORE_DEREF              0 (check)

  7          18 LOAD_DEREF               0 (check)
             20 LOAD_FAST                1 (root)
             22 CALL_FUNCTION            1
             24 LOAD_CONST               4 (1)
             26 BINARY_SUBSCR
             28 RETURN_VALUE

Disassembly of <code object check at 0x7faff90f5450, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (node)
              2 LOAD_ATTR                0 (left)
              4 POP_JUMP_IF_FALSE       16
              6 LOAD_DEREF               0 (check)
              8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (left)
             12 CALL_FUNCTION            1
             14 JUMP_FORWARD            10 (to 26)
        >>   16 LOAD_CONST               1 (0)
             18 LOAD_GLOBAL              1 (float)
             20 LOAD_CONST               2 ('-inf')
             22 CALL_FUNCTION            1
             24 BUILD_TUPLE              2
        >>   26 UNPACK_SEQUENCE          2
             28 STORE_FAST               1 (lps)
             30 STORE_FAST               2 (ls)

  5          32 LOAD_FAST                0 (node)
             34 LOAD_ATTR                2 (right)
             36 POP_JUMP_IF_FALSE       48
             38 LOAD_DEREF               0 (check)
             40 LOAD_FAST                0 (node)
             42 LOAD_ATTR                2 (right)
             44 CALL_FUNCTION            1
             46 JUMP_FORWARD            10 (to 58)
        >>   48 LOAD_CONST               1 (0)
             50 LOAD_GLOBAL              1 (float)
             52 LOAD_CONST               2 ('-inf')
             54 CALL_FUNCTION            1
             56 BUILD_TUPLE              2
        >>   58 UNPACK_SEQUENCE          2
             60 STORE_FAST               3 (rps)
             62 STORE_FAST               4 (rs)

  6          64 LOAD_GLOBAL              3 (max)
             66 LOAD_FAST                1 (lps)
             68 LOAD_FAST                0 (node)
             70 LOAD_ATTR                4 (val)
             72 BINARY_ADD
             74 LOAD_FAST                3 (rps)
             76 LOAD_FAST                0 (node)
             78 LOAD_ATTR                4 (val)
             80 BINARY_ADD
             82 LOAD_FAST                0 (node)
             84 LOAD_ATTR                4 (val)
             86 CALL_FUNCTION            3
             88 LOAD_GLOBAL              3 (max)
             90 LOAD_FAST                2 (ls)
             92 LOAD_FAST                4 (rs)
             94 LOAD_FAST                1 (lps)
             96 LOAD_FAST                0 (node)
             98 LOAD_ATTR                4 (val)
            100 BINARY_ADD
            102 LOAD_FAST                3 (rps)
            104 LOAD_FAST                0 (node)
            106 LOAD_ATTR                4 (val)
            108 BINARY_ADD
            110 LOAD_FAST                1 (lps)
            112 LOAD_FAST                3 (rps)
            114 BINARY_ADD
            116 LOAD_FAST                0 (node)
            118 LOAD_ATTR                4 (val)
            120 BINARY_ADD
            122 LOAD_FAST                0 (node)
            124 LOAD_ATTR                4 (val)
            126 CALL_FUNCTION            6
            128 BUILD_TUPLE              2
            130 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        _, m = self._maxPathSum(root)
        return m

    def _maxPathSum(self, tree):
        if tree == None:
            return (float('-inf'), float('-inf'))

        lsb, ls = self._maxPathSum(tree.left)
        rsb, rs = self._maxPathSum(tree.right)
        val = tree.val

        cb = max(lsb, rsb)
        b = max(cb + val, val)
        r = max(lsb + val + rsb, b)
        m = max(ls, rs, r)

        return (b , m)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f91a8ea52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f91a8ea52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f91a8ea5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)

  6          24 LOAD_CONST               4 (<code object _maxPathSum at 0x7f91a8ea53a0, file ""<ast>"", line 6>)
             26 LOAD_CONST               5 ('Solution._maxPathSum')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (_maxPathSum)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f91a8ea5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (_maxPathSum)
              4 LOAD_FAST                1 (root)
              6 CALL_METHOD              1
              8 UNPACK_SEQUENCE          2
             10 STORE_FAST               2 (_)
             12 STORE_FAST               3 (m)

  4          14 LOAD_FAST                3 (m)
             16 RETURN_VALUE

Disassembly of <code object _maxPathSum at 0x7f91a8ea53a0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (tree)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       24

  8           8 LOAD_GLOBAL              0 (float)
             10 LOAD_CONST               1 ('-inf')
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (float)
             16 LOAD_CONST               1 ('-inf')
             18 CALL_FUNCTION            1
             20 BUILD_TUPLE              2
             22 RETURN_VALUE

 10     >>   24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              1 (_maxPathSum)
             28 LOAD_FAST                1 (tree)
             30 LOAD_ATTR                2 (left)
             32 CALL_METHOD              1
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               2 (lsb)
             38 STORE_FAST               3 (ls)

 11          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              1 (_maxPathSum)
             44 LOAD_FAST                1 (tree)
             46 LOAD_ATTR                3 (right)
             48 CALL_METHOD              1
             50 UNPACK_SEQUENCE          2
             52 STORE_FAST               4 (rsb)
             54 STORE_FAST               5 (rs)

 12          56 LOAD_FAST                1 (tree)
             58 LOAD_ATTR                4 (val)
             60 STORE_FAST               6 (val)

 14          62 LOAD_GLOBAL              5 (max)
             64 LOAD_FAST                2 (lsb)
             66 LOAD_FAST                4 (rsb)
             68 CALL_FUNCTION            2
             70 STORE_FAST               7 (cb)

 15          72 LOAD_GLOBAL              5 (max)
             74 LOAD_FAST                7 (cb)
             76 LOAD_FAST                6 (val)
             78 BINARY_ADD
             80 LOAD_FAST                6 (val)
             82 CALL_FUNCTION            2
             84 STORE_FAST               8 (b)

 16          86 LOAD_GLOBAL              5 (max)
             88 LOAD_FAST                2 (lsb)
             90 LOAD_FAST                6 (val)
             92 BINARY_ADD
             94 LOAD_FAST                4 (rsb)
             96 BINARY_ADD
             98 LOAD_FAST                8 (b)
            100 CALL_FUNCTION            2
            102 STORE_FAST               9 (r)

 17         104 LOAD_GLOBAL              5 (max)
            106 LOAD_FAST                3 (ls)
            108 LOAD_FAST                5 (rs)
            110 LOAD_FAST                9 (r)
            112 CALL_FUNCTION            3
            114 STORE_FAST              10 (m)

 19         116 LOAD_FAST                8 (b)
            118 LOAD_FAST               10 (m)
            120 BUILD_TUPLE              2
            122 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.ans = -math.inf
        def dfs(r):
            if not r:
                return 0
            left = dfs(r.left)
            right = dfs(r.right)
            self.ans = max(self.ans,r.val+ left+right)
            return max(0,r.val+ max(left,right))
        _ = dfs(root)
        return self.ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdeba9455b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdeba9455b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fdeba945500, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fdeba945500, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (math)
              2 LOAD_ATTR                1 (inf)
              4 UNARY_NEGATIVE
              6 LOAD_DEREF               1 (self)
              8 STORE_ATTR               2 (ans)

  4          10 LOAD_CLOSURE             0 (dfs)
             12 LOAD_CLOSURE             1 (self)
             14 BUILD_TUPLE              2
             16 LOAD_CONST               1 (<code object dfs at 0x7fdeba945450, file ""<ast>"", line 4>)
             18 LOAD_CONST               2 ('Solution.maxPathSum.<locals>.dfs')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (dfs)

 11          24 LOAD_DEREF               0 (dfs)
             26 LOAD_FAST                1 (root)
             28 CALL_FUNCTION            1
             30 STORE_FAST               2 (_)

 12          32 LOAD_DEREF               1 (self)
             34 LOAD_ATTR                2 (ans)
             36 RETURN_VALUE

Disassembly of <code object dfs at 0x7fdeba945450, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (r)
              2 POP_JUMP_IF_TRUE         8

  6           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  7     >>    8 LOAD_DEREF               0 (dfs)
             10 LOAD_FAST                0 (r)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left)

  8          18 LOAD_DEREF               0 (dfs)
             20 LOAD_FAST                0 (r)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right)

  9          28 LOAD_GLOBAL              2 (max)
             30 LOAD_DEREF               1 (self)
             32 LOAD_ATTR                3 (ans)
             34 LOAD_FAST                0 (r)
             36 LOAD_ATTR                4 (val)
             38 LOAD_FAST                1 (left)
             40 BINARY_ADD
             42 LOAD_FAST                2 (right)
             44 BINARY_ADD
             46 CALL_FUNCTION            2
             48 LOAD_DEREF               1 (self)
             50 STORE_ATTR               3 (ans)

 10          52 LOAD_GLOBAL              2 (max)
             54 LOAD_CONST               1 (0)
             56 LOAD_FAST                0 (r)
             58 LOAD_ATTR                4 (val)
             60 LOAD_GLOBAL              2 (max)
             62 LOAD_FAST                1 (left)
             64 LOAD_FAST                2 (right)
             66 CALL_FUNCTION            2
             68 BINARY_ADD
             70 CALL_FUNCTION            2
             72 RETURN_VALUE
None
"
maxPathSum,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        def mpu(root):
            if not root:
                return 0
            left=mpu(root.left)
            right=mpu(root.right)
            ms=max(max(left,right)+root.val,root.val)
            m21=max(ms,left+right+root.val)
            self.res=max(self.res,m21)

            return ms
        self.res=float('-inf')
        mpu(root)
        return self.res","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2b61505500, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2b61505500, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f2b61505450, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f2b61505450, file ""<ast>"", line 8>:
  9           0 LOAD_CLOSURE             0 (mpu)
              2 LOAD_CLOSURE             1 (self)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object mpu at 0x7f2b615053a0, file ""<ast>"", line 9>)
              8 LOAD_CONST               2 ('Solution.maxPathSum.<locals>.mpu')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (mpu)

 19          14 LOAD_GLOBAL              0 (float)
             16 LOAD_CONST               3 ('-inf')
             18 CALL_FUNCTION            1
             20 LOAD_DEREF               1 (self)
             22 STORE_ATTR               1 (res)

 20          24 LOAD_DEREF               0 (mpu)
             26 LOAD_FAST                1 (root)
             28 CALL_FUNCTION            1
             30 POP_TOP

 21          32 LOAD_DEREF               1 (self)
             34 LOAD_ATTR                1 (res)
             36 RETURN_VALUE

Disassembly of <code object mpu at 0x7f2b615053a0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

 11           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 12     >>    8 LOAD_DEREF               0 (mpu)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left)

 13          18 LOAD_DEREF               0 (mpu)
             20 LOAD_FAST                0 (root)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right)

 14          28 LOAD_GLOBAL              2 (max)
             30 LOAD_GLOBAL              2 (max)
             32 LOAD_FAST                1 (left)
             34 LOAD_FAST                2 (right)
             36 CALL_FUNCTION            2
             38 LOAD_FAST                0 (root)
             40 LOAD_ATTR                3 (val)
             42 BINARY_ADD
             44 LOAD_FAST                0 (root)
             46 LOAD_ATTR                3 (val)
             48 CALL_FUNCTION            2
             50 STORE_FAST               3 (ms)

 15          52 LOAD_GLOBAL              2 (max)
             54 LOAD_FAST                3 (ms)
             56 LOAD_FAST                1 (left)
             58 LOAD_FAST                2 (right)
             60 BINARY_ADD
             62 LOAD_FAST                0 (root)
             64 LOAD_ATTR                3 (val)
             66 BINARY_ADD
             68 CALL_FUNCTION            2
             70 STORE_FAST               4 (m21)

 16          72 LOAD_GLOBAL              2 (max)
             74 LOAD_DEREF               1 (self)
             76 LOAD_ATTR                4 (res)
             78 LOAD_FAST                4 (m21)
             80 CALL_FUNCTION            2
             82 LOAD_DEREF               1 (self)
             84 STORE_ATTR               4 (res)

 18          86 LOAD_FAST                3 (ms)
             88 RETURN_VALUE
None
"
maxPathSum,"fmax = lambda x,y: x if x>y else y # Custom Max Function (33% Faster than Python's Built-in Max function)
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.result = root.val
        def maxpath(node):
            if not node:
                return 0
            x = node.val
            l = fmax(0,maxpath(node.left )) # ignore ""left"" branch if negative
            r = fmax(0,maxpath(node.right)) # ignore ""right"" branch if negative
            self.result = fmax(self.result, x+l+r ) # Check if merged arc-path (left+node+right) beats the current result
            return fmax(x+l,x+r) # Try to build maximum branch value
        maxpath(root)
        return self.result
","  1           0 LOAD_CONST               0 (<code object <lambda> at 0x7fcc5ead5240, file ""<ast>"", line 1>)
              2 LOAD_CONST               1 ('<lambda>')
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (fmax)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7fcc5ead55b0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fcc5ead5240, file ""<ast>"", line 1>:
  1           0 LOAD_FAST                0 (x)
              2 LOAD_FAST                1 (y)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_FAST                0 (x)
             10 RETURN_VALUE
        >>   12 LOAD_FAST                1 (y)
             14 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcc5ead55b0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fcc5ead5500, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fcc5ead5500, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (val)
              4 LOAD_DEREF               1 (self)
              6 STORE_ATTR               1 (result)

  5           8 LOAD_CLOSURE             0 (maxpath)
             10 LOAD_CLOSURE             1 (self)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               1 (<code object maxpath at 0x7fcc5ead5450, file ""<ast>"", line 5>)
             16 LOAD_CONST               2 ('Solution.maxPathSum.<locals>.maxpath')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (maxpath)

 13          22 LOAD_DEREF               0 (maxpath)
             24 LOAD_FAST                1 (root)
             26 CALL_FUNCTION            1
             28 POP_TOP

 14          30 LOAD_DEREF               1 (self)
             32 LOAD_ATTR                1 (result)
             34 RETURN_VALUE

Disassembly of <code object maxpath at 0x7fcc5ead5450, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

  7           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  8     >>    8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (val)
             12 STORE_FAST               1 (x)

  9          14 LOAD_GLOBAL              1 (fmax)
             16 LOAD_CONST               1 (0)
             18 LOAD_DEREF               0 (maxpath)
             20 LOAD_FAST                0 (node)
             22 LOAD_ATTR                2 (left)
             24 CALL_FUNCTION            1
             26 CALL_FUNCTION            2
             28 STORE_FAST               2 (l)

 10          30 LOAD_GLOBAL              1 (fmax)
             32 LOAD_CONST               1 (0)
             34 LOAD_DEREF               0 (maxpath)
             36 LOAD_FAST                0 (node)
             38 LOAD_ATTR                3 (right)
             40 CALL_FUNCTION            1
             42 CALL_FUNCTION            2
             44 STORE_FAST               3 (r)

 11          46 LOAD_GLOBAL              1 (fmax)
             48 LOAD_DEREF               1 (self)
             50 LOAD_ATTR                4 (result)
             52 LOAD_FAST                1 (x)
             54 LOAD_FAST                2 (l)
             56 BINARY_ADD
             58 LOAD_FAST                3 (r)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 LOAD_DEREF               1 (self)
             66 STORE_ATTR               4 (result)

 12          68 LOAD_GLOBAL              1 (fmax)
             70 LOAD_FAST                1 (x)
             72 LOAD_FAST                2 (l)
             74 BINARY_ADD
             76 LOAD_FAST                1 (x)
             78 LOAD_FAST                3 (r)
             80 BINARY_ADD
             82 CALL_FUNCTION            2
             84 RETURN_VALUE
None
"
maxPathSum,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode)->int:
        self.ans = -float('inf')
        
        def path(root):
            if not root:
                return 0
            left = max(path(root.left),0)
            right = max(path(root.right),0)
            val = root.val
            self.ans = max(self.ans,val+left+right)
            return val+max(left,right)
        
        path(root)
        return self.ans
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc908e75500, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc908e75500, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fc908e75450, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fc908e75450, file ""<ast>"", line 8>:
  9           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('inf')
              4 CALL_FUNCTION            1
              6 UNARY_NEGATIVE
              8 LOAD_DEREF               1 (self)
             10 STORE_ATTR               1 (ans)

 11          12 LOAD_CLOSURE             0 (path)
             14 LOAD_CLOSURE             1 (self)
             16 BUILD_TUPLE              2
             18 LOAD_CONST               2 (<code object path at 0x7fc908e753a0, file ""<ast>"", line 11>)
             20 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.path')
             22 MAKE_FUNCTION            8 (closure)
             24 STORE_DEREF              0 (path)

 20          26 LOAD_DEREF               0 (path)
             28 LOAD_FAST                1 (root)
             30 CALL_FUNCTION            1
             32 POP_TOP

 21          34 LOAD_DEREF               1 (self)
             36 LOAD_ATTR                1 (ans)
             38 RETURN_VALUE

Disassembly of <code object path at 0x7fc908e753a0, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8

 13           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 14     >>    8 LOAD_GLOBAL              0 (max)
             10 LOAD_DEREF               0 (path)
             12 LOAD_FAST                0 (root)
             14 LOAD_ATTR                1 (left)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               1 (0)
             20 CALL_FUNCTION            2
             22 STORE_FAST               1 (left)

 15          24 LOAD_GLOBAL              0 (max)
             26 LOAD_DEREF               0 (path)
             28 LOAD_FAST                0 (root)
             30 LOAD_ATTR                2 (right)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               1 (0)
             36 CALL_FUNCTION            2
             38 STORE_FAST               2 (right)

 16          40 LOAD_FAST                0 (root)
             42 LOAD_ATTR                3 (val)
             44 STORE_FAST               3 (val)

 17          46 LOAD_GLOBAL              0 (max)
             48 LOAD_DEREF               1 (self)
             50 LOAD_ATTR                4 (ans)
             52 LOAD_FAST                3 (val)
             54 LOAD_FAST                1 (left)
             56 BINARY_ADD
             58 LOAD_FAST                2 (right)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 LOAD_DEREF               1 (self)
             66 STORE_ATTR               4 (ans)

 18          68 LOAD_FAST                3 (val)
             70 LOAD_GLOBAL              0 (max)
             72 LOAD_FAST                1 (left)
             74 LOAD_FAST                2 (right)
             76 CALL_FUNCTION            2
             78 BINARY_ADD
             80 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.ans = float('-inf')
        def dfs(root):
            if not root:return 0
            left = dfs(root.left)
            right = dfs(root.right)
            self.ans = max(self.ans,root.val,root.val+left,root.val+right,root.val+left+right)
            return max(root.val,root.val+left,root.val+right)
        dfs(root)
        return self.ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe7c7dc5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe7c7dc5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fe7c7dc5450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fe7c7dc5450, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_DEREF               1 (self)
              8 STORE_ATTR               1 (ans)

  4          10 LOAD_CLOSURE             0 (dfs)
             12 LOAD_CLOSURE             1 (self)
             14 BUILD_TUPLE              2
             16 LOAD_CONST               2 (<code object dfs at 0x7fe7c7dc53a0, file ""<ast>"", line 4>)
             18 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.dfs')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (dfs)

 10          24 LOAD_DEREF               0 (dfs)
             26 LOAD_FAST                1 (root)
             28 CALL_FUNCTION            1
             30 POP_TOP

 11          32 LOAD_DEREF               1 (self)
             34 LOAD_ATTR                1 (ans)
             36 RETURN_VALUE

Disassembly of <code object dfs at 0x7fe7c7dc53a0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (root)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_DEREF               0 (dfs)
             10 LOAD_FAST                0 (root)
             12 LOAD_ATTR                0 (left)
             14 CALL_FUNCTION            1
             16 STORE_FAST               1 (left)

  7          18 LOAD_DEREF               0 (dfs)
             20 LOAD_FAST                0 (root)
             22 LOAD_ATTR                1 (right)
             24 CALL_FUNCTION            1
             26 STORE_FAST               2 (right)

  8          28 LOAD_GLOBAL              2 (max)
             30 LOAD_DEREF               1 (self)
             32 LOAD_ATTR                3 (ans)
             34 LOAD_FAST                0 (root)
             36 LOAD_ATTR                4 (val)
             38 LOAD_FAST                0 (root)
             40 LOAD_ATTR                4 (val)
             42 LOAD_FAST                1 (left)
             44 BINARY_ADD
             46 LOAD_FAST                0 (root)
             48 LOAD_ATTR                4 (val)
             50 LOAD_FAST                2 (right)
             52 BINARY_ADD
             54 LOAD_FAST                0 (root)
             56 LOAD_ATTR                4 (val)
             58 LOAD_FAST                1 (left)
             60 BINARY_ADD
             62 LOAD_FAST                2 (right)
             64 BINARY_ADD
             66 CALL_FUNCTION            5
             68 LOAD_DEREF               1 (self)
             70 STORE_ATTR               3 (ans)

  9          72 LOAD_GLOBAL              2 (max)
             74 LOAD_FAST                0 (root)
             76 LOAD_ATTR                4 (val)
             78 LOAD_FAST                0 (root)
             80 LOAD_ATTR                4 (val)
             82 LOAD_FAST                1 (left)
             84 BINARY_ADD
             86 LOAD_FAST                0 (root)
             88 LOAD_ATTR                4 (val)
             90 LOAD_FAST                2 (right)
             92 BINARY_ADD
             94 CALL_FUNCTION            3
             96 RETURN_VALUE
None
"
maxPathSum,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if not root.left and not root.right:
            return root.val
        if not root:
            return 0
        
        def solve(node):
            nonlocal res
            l=r=0
            if not node:
                return 0
            if node.left:
                l = max(solve(node.left), 0)
            if node.right:
                r = max(solve(node.right), 0)
            res = max(res, node.val+l+r)
            return node.val + max(l,r)
            
        res = float('-inf')
        solve(root)
        return res
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6b9bfc5500, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6b9bfc5500, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7f6b9bfc5450, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7f6b9bfc5450, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                1 (root)
              2 LOAD_ATTR                0 (left)
              4 POP_JUMP_IF_TRUE        18
              6 LOAD_FAST                1 (root)
              8 LOAD_ATTR                1 (right)
             10 POP_JUMP_IF_TRUE        18

 10          12 LOAD_FAST                1 (root)
             14 LOAD_ATTR                2 (val)
             16 RETURN_VALUE

 11     >>   18 LOAD_FAST                1 (root)
             20 POP_JUMP_IF_TRUE        26

 12          22 LOAD_CONST               1 (0)
             24 RETURN_VALUE

 14     >>   26 LOAD_CLOSURE             0 (res)
             28 LOAD_CLOSURE             1 (solve)
             30 BUILD_TUPLE              2
             32 LOAD_CONST               2 (<code object solve at 0x7f6b9bfc53a0, file ""<ast>"", line 14>)
             34 LOAD_CONST               3 ('Solution.maxPathSum.<locals>.solve')
             36 MAKE_FUNCTION            8 (closure)
             38 STORE_DEREF              1 (solve)

 26          40 LOAD_GLOBAL              3 (float)
             42 LOAD_CONST               4 ('-inf')
             44 CALL_FUNCTION            1
             46 STORE_DEREF              0 (res)

 27          48 LOAD_DEREF               1 (solve)
             50 LOAD_FAST                1 (root)
             52 CALL_FUNCTION            1
             54 POP_TOP

 28          56 LOAD_DEREF               0 (res)
             58 RETURN_VALUE

Disassembly of <code object solve at 0x7f6b9bfc53a0, file ""<ast>"", line 14>:
 16           0 LOAD_CONST               1 (0)
              2 DUP_TOP
              4 STORE_FAST               1 (l)
              6 STORE_FAST               2 (r)

 17           8 LOAD_FAST                0 (node)
             10 POP_JUMP_IF_TRUE        16

 18          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

 19     >>   16 LOAD_FAST                0 (node)
             18 LOAD_ATTR                0 (left)
             20 POP_JUMP_IF_FALSE       38

 20          22 LOAD_GLOBAL              1 (max)
             24 LOAD_DEREF               1 (solve)
             26 LOAD_FAST                0 (node)
             28 LOAD_ATTR                0 (left)
             30 CALL_FUNCTION            1
             32 LOAD_CONST               1 (0)
             34 CALL_FUNCTION            2
             36 STORE_FAST               1 (l)

 21     >>   38 LOAD_FAST                0 (node)
             40 LOAD_ATTR                2 (right)
             42 POP_JUMP_IF_FALSE       60

 22          44 LOAD_GLOBAL              1 (max)
             46 LOAD_DEREF               1 (solve)
             48 LOAD_FAST                0 (node)
             50 LOAD_ATTR                2 (right)
             52 CALL_FUNCTION            1
             54 LOAD_CONST               1 (0)
             56 CALL_FUNCTION            2
             58 STORE_FAST               2 (r)

 23     >>   60 LOAD_GLOBAL              1 (max)
             62 LOAD_DEREF               0 (res)
             64 LOAD_FAST                0 (node)
             66 LOAD_ATTR                3 (val)
             68 LOAD_FAST                1 (l)
             70 BINARY_ADD
             72 LOAD_FAST                2 (r)
             74 BINARY_ADD
             76 CALL_FUNCTION            2
             78 STORE_DEREF              0 (res)

 24          80 LOAD_FAST                0 (node)
             82 LOAD_ATTR                3 (val)
             84 LOAD_GLOBAL              1 (max)
             86 LOAD_FAST                1 (l)
             88 LOAD_FAST                2 (r)
             90 CALL_FUNCTION            2
             92 BINARY_ADD
             94 RETURN_VALUE
None
"
maxPathSum,"class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        ## RC ##
        ## APPROACH : RECURSION ##
        ## LOGIC : POST ORDER CALCULATION ##
        
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##
        
        self.max_sum = float('-inf')
        self.calculateMaxPath(root)
        return self.max_sum
        
    def calculateMaxPath(self,node):
        if(node):
            left = right = 0
            if(node.left):
                left = max(self.calculateMaxPath(node.left), 0)
            if(node.right):
                right = max(self.calculateMaxPath(node.right), 0)
            self.max_sum = max(left + right + node.val, self.max_sum)
            return max(left, right) + node.val
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fca448752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fca448752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (TreeNode)
             10 LOAD_NAME                4 (int)
             12 LOAD_CONST               1 (('root', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object maxPathSum at 0x7fca44875240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.maxPathSum')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               5 (maxPathSum)

 14          24 LOAD_CONST               4 (<code object calculateMaxPath at 0x7fca448753a0, file ""<ast>"", line 14>)
             26 LOAD_CONST               5 ('Solution.calculateMaxPath')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               6 (calculateMaxPath)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object maxPathSum at 0x7fca44875240, file ""<ast>"", line 2>:
 10           0 LOAD_GLOBAL              0 (float)
              2 LOAD_CONST               1 ('-inf')
              4 CALL_FUNCTION            1
              6 LOAD_FAST                0 (self)
              8 STORE_ATTR               1 (max_sum)

 11          10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              2 (calculateMaxPath)
             14 LOAD_FAST                1 (root)
             16 CALL_METHOD              1
             18 POP_TOP

 12          20 LOAD_FAST                0 (self)
             22 LOAD_ATTR                1 (max_sum)
             24 RETURN_VALUE

Disassembly of <code object calculateMaxPath at 0x7fca448753a0, file ""<ast>"", line 14>:
 15           0 LOAD_FAST                1 (node)
              2 POP_JUMP_IF_FALSE      100

 16           4 LOAD_CONST               1 (0)
              6 DUP_TOP
              8 STORE_FAST               2 (left)
             10 STORE_FAST               3 (right)

 17          12 LOAD_FAST                1 (node)
             14 LOAD_ATTR                0 (left)
             16 POP_JUMP_IF_FALSE       36

 18          18 LOAD_GLOBAL              1 (max)
             20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              2 (calculateMaxPath)
             24 LOAD_FAST                1 (node)
             26 LOAD_ATTR                0 (left)
             28 CALL_METHOD              1
             30 LOAD_CONST               1 (0)
             32 CALL_FUNCTION            2
             34 STORE_FAST               2 (left)

 19     >>   36 LOAD_FAST                1 (node)
             38 LOAD_ATTR                3 (right)
             40 POP_JUMP_IF_FALSE       60

 20          42 LOAD_GLOBAL              1 (max)
             44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              2 (calculateMaxPath)
             48 LOAD_FAST                1 (node)
             50 LOAD_ATTR                3 (right)
             52 CALL_METHOD              1
             54 LOAD_CONST               1 (0)
             56 CALL_FUNCTION            2
             58 STORE_FAST               3 (right)

 21     >>   60 LOAD_GLOBAL              1 (max)
             62 LOAD_FAST                2 (left)
             64 LOAD_FAST                3 (right)
             66 BINARY_ADD
             68 LOAD_FAST                1 (node)
             70 LOAD_ATTR                4 (val)
             72 BINARY_ADD
             74 LOAD_FAST                0 (self)
             76 LOAD_ATTR                5 (max_sum)
             78 CALL_FUNCTION            2
             80 LOAD_FAST                0 (self)
             82 STORE_ATTR               5 (max_sum)

 22          84 LOAD_GLOBAL              1 (max)
             86 LOAD_FAST                2 (left)
             88 LOAD_FAST                3 (right)
             90 CALL_FUNCTION            2
             92 LOAD_FAST                1 (node)
             94 LOAD_ATTR                4 (val)
             96 BINARY_ADD
             98 RETURN_VALUE
        >>  100 LOAD_CONST               0 (None)
            102 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n<0:
            x = 1/x
            n = abs(n)
        res = 1
        while n > 0:
            if n%2 == 1:
                res *= x
            x *= x
            n //= 2
        return res
    
    
   # 2^8 = 4^4
   # 2^9 = 2*4^4 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe72b5952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe72b5952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fe72b595240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fe72b595240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       24

  4           8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 STORE_FAST               1 (x)

  5          16 LOAD_GLOBAL              0 (abs)
             18 LOAD_FAST                2 (n)
             20 CALL_FUNCTION            1
             22 STORE_FAST               2 (n)

  6     >>   24 LOAD_CONST               2 (1)
             26 STORE_FAST               3 (res)

  7     >>   28 LOAD_FAST                2 (n)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               4 (>)
             34 POP_JUMP_IF_FALSE       74

  8          36 LOAD_FAST                2 (n)
             38 LOAD_CONST               3 (2)
             40 BINARY_MODULO
             42 LOAD_CONST               2 (1)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       56

  9          48 LOAD_FAST                3 (res)
             50 LOAD_FAST                1 (x)
             52 INPLACE_MULTIPLY
             54 STORE_FAST               3 (res)

 10     >>   56 LOAD_FAST                1 (x)
             58 LOAD_FAST                1 (x)
             60 INPLACE_MULTIPLY
             62 STORE_FAST               1 (x)

 11          64 LOAD_FAST                2 (n)
             66 LOAD_CONST               3 (2)
             68 INPLACE_FLOOR_DIVIDE
             70 STORE_FAST               2 (n)
             72 JUMP_ABSOLUTE           28

 12     >>   74 LOAD_FAST                3 (res)
             76 RETURN_VALUE
None
"
myPow,"from math import inf
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if abs(x) == 1:
            return 1 if n % 2 == 0 else x
        
        memo = {1: x}
        isInverse = n < 0
        m = abs(n)
        result = 1
        
        while m > 0:
            # reached lang limits
            if result == 0.0:
                return result
            if result == inf:
                break
                
            if m in memo:
                result *= memo[m]
                break
            
            subRes = x
            progress = 1
			
			# equivalent to floor(log2(m))
            while progress * 2 <= m:
                subRes *= subRes
                progress *= 2
            
            memo[progress] = subRes
            result *= subRes
            m -= progress
            
        return 1 / result if isInverse else result
    
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('inf',))
              4 IMPORT_NAME              0 (math)
              6 IMPORT_FROM              1 (inf)
              8 STORE_NAME               1 (inf)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f696fbb52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f696fbb52f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f696fbb5240, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f696fbb5240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  6     >>   12 LOAD_GLOBAL              0 (abs)
             14 LOAD_FAST                1 (x)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               2 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       44

  7          24 LOAD_FAST                2 (n)
             26 LOAD_CONST               3 (2)
             28 BINARY_MODULO
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       40
             36 LOAD_CONST               2 (1)
             38 RETURN_VALUE
        >>   40 LOAD_FAST                1 (x)
             42 RETURN_VALUE

  9     >>   44 LOAD_CONST               2 (1)
             46 LOAD_FAST                1 (x)
             48 BUILD_MAP                1
             50 STORE_FAST               3 (memo)

 10          52 LOAD_FAST                2 (n)
             54 LOAD_CONST               1 (0)
             56 COMPARE_OP               0 (<)
             58 STORE_FAST               4 (isInverse)

 11          60 LOAD_GLOBAL              0 (abs)
             62 LOAD_FAST                2 (n)
             64 CALL_FUNCTION            1
             66 STORE_FAST               5 (m)

 12          68 LOAD_CONST               2 (1)
             70 STORE_FAST               6 (result)

 14     >>   72 LOAD_FAST                5 (m)
             74 LOAD_CONST               1 (0)
             76 COMPARE_OP               4 (>)
             78 POP_JUMP_IF_FALSE      188

 16          80 LOAD_FAST                6 (result)
             82 LOAD_CONST               4 (0.0)
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE       92

 17          88 LOAD_FAST                6 (result)
             90 RETURN_VALUE

 18     >>   92 LOAD_FAST                6 (result)
             94 LOAD_GLOBAL              1 (inf)
             96 COMPARE_OP               2 (==)
             98 POP_JUMP_IF_FALSE      102

 19         100 JUMP_ABSOLUTE          188

 21     >>  102 LOAD_FAST                5 (m)
            104 LOAD_FAST                3 (memo)
            106 COMPARE_OP               6 (in)
            108 POP_JUMP_IF_FALSE      124

 22         110 LOAD_FAST                6 (result)
            112 LOAD_FAST                3 (memo)
            114 LOAD_FAST                5 (m)
            116 BINARY_SUBSCR
            118 INPLACE_MULTIPLY
            120 STORE_FAST               6 (result)

 23         122 JUMP_ABSOLUTE          188

 25     >>  124 LOAD_FAST                1 (x)
            126 STORE_FAST               7 (subRes)

 26         128 LOAD_CONST               2 (1)
            130 STORE_FAST               8 (progress)

 29     >>  132 LOAD_FAST                8 (progress)
            134 LOAD_CONST               3 (2)
            136 BINARY_MULTIPLY
            138 LOAD_FAST                5 (m)
            140 COMPARE_OP               1 (<=)
            142 POP_JUMP_IF_FALSE      162

 30         144 LOAD_FAST                7 (subRes)
            146 LOAD_FAST                7 (subRes)
            148 INPLACE_MULTIPLY
            150 STORE_FAST               7 (subRes)

 31         152 LOAD_FAST                8 (progress)
            154 LOAD_CONST               3 (2)
            156 INPLACE_MULTIPLY
            158 STORE_FAST               8 (progress)
            160 JUMP_ABSOLUTE          132

 33     >>  162 LOAD_FAST                7 (subRes)
            164 LOAD_FAST                3 (memo)
            166 LOAD_FAST                8 (progress)
            168 STORE_SUBSCR

 34         170 LOAD_FAST                6 (result)
            172 LOAD_FAST                7 (subRes)
            174 INPLACE_MULTIPLY
            176 STORE_FAST               6 (result)

 35         178 LOAD_FAST                5 (m)
            180 LOAD_FAST                8 (progress)
            182 INPLACE_SUBTRACT
            184 STORE_FAST               5 (m)
            186 JUMP_ABSOLUTE           72

 37     >>  188 LOAD_FAST                4 (isInverse)
            190 POP_JUMP_IF_FALSE      200
            192 LOAD_CONST               2 (1)
            194 LOAD_FAST                6 (result)
            196 BINARY_TRUE_DIVIDE
            198 RETURN_VALUE
        >>  200 LOAD_FAST                6 (result)
            202 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8ebc815500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8ebc815500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f8ebc815450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f8ebc815450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0 or x == 1.0:
            return 1.0
        if x == 0:
            if n < 0:
                return float('inf')
            else:
                return 0.0
        
        if n < 0:
            x, n = 1/x, -n
        
        res, num, power = 1.0, x, n
        while power != 1:
            if power%2 == 0:
                num = num*num
                power /= 2
            else:
                res *= num
                power -= 1
        
        return res*num
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f54396e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f54396e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f54396e5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f54396e5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (1.0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (1.0)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       48

  6          28 LOAD_FAST                2 (n)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               0 (<)
             34 POP_JUMP_IF_FALSE       44

  7          36 LOAD_GLOBAL              0 (float)
             38 LOAD_CONST               3 ('inf')
             40 CALL_FUNCTION            1
             42 RETURN_VALUE

  9     >>   44 LOAD_CONST               4 (0.0)
             46 RETURN_VALUE

 11     >>   48 LOAD_FAST                2 (n)
             50 LOAD_CONST               1 (0)
             52 COMPARE_OP               0 (<)
             54 POP_JUMP_IF_FALSE       72

 12          56 LOAD_CONST               5 (1)
             58 LOAD_FAST                1 (x)
             60 BINARY_TRUE_DIVIDE
             62 LOAD_FAST                2 (n)
             64 UNARY_NEGATIVE
             66 ROT_TWO
             68 STORE_FAST               1 (x)
             70 STORE_FAST               2 (n)

 14     >>   72 LOAD_CONST               2 (1.0)
             74 LOAD_FAST                1 (x)
             76 LOAD_FAST                2 (n)
             78 ROT_THREE
             80 ROT_TWO
             82 STORE_FAST               3 (res)
             84 STORE_FAST               4 (num)
             86 STORE_FAST               5 (power)

 15     >>   88 LOAD_FAST                5 (power)
             90 LOAD_CONST               5 (1)
             92 COMPARE_OP               3 (!=)
             94 POP_JUMP_IF_FALSE      144

 16          96 LOAD_FAST                5 (power)
             98 LOAD_CONST               6 (2)
            100 BINARY_MODULO
            102 LOAD_CONST               1 (0)
            104 COMPARE_OP               2 (==)
            106 POP_JUMP_IF_FALSE      126

 17         108 LOAD_FAST                4 (num)
            110 LOAD_FAST                4 (num)
            112 BINARY_MULTIPLY
            114 STORE_FAST               4 (num)

 18         116 LOAD_FAST                5 (power)
            118 LOAD_CONST               6 (2)
            120 INPLACE_TRUE_DIVIDE
            122 STORE_FAST               5 (power)
            124 JUMP_ABSOLUTE           88

 20     >>  126 LOAD_FAST                3 (res)
            128 LOAD_FAST                4 (num)
            130 INPLACE_MULTIPLY
            132 STORE_FAST               3 (res)

 21         134 LOAD_FAST                5 (power)
            136 LOAD_CONST               5 (1)
            138 INPLACE_SUBTRACT
            140 STORE_FAST               5 (power)
            142 JUMP_ABSOLUTE           88

 23     >>  144 LOAD_FAST                3 (res)
            146 LOAD_FAST                4 (num)
            148 BINARY_MULTIPLY
            150 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f23074c5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f23074c5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f23074c5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f23074c5450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        # x**n == (1/x)**(-n) 
        # by using the property above we can transform the negetive power problem to positive power problem
        # so that we solve the positive power situation, we also solved the negtive power situation.
        if n < 0:
            x = 1/x
            n = -n
        # We solve the positive power here:
        power = 1
        current_product = x
        while n > 0:
            # if n is odd numberm, we need to time x one more time
            if n%2 : 
                power = power * current_product
            current_product = current_product * current_product
            n = n//2
        return power
            
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4838ea52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4838ea52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f4838ea5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f4838ea5240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       22

  7           8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 STORE_FAST               1 (x)

  8          16 LOAD_FAST                2 (n)
             18 UNARY_NEGATIVE
             20 STORE_FAST               2 (n)

 10     >>   22 LOAD_CONST               2 (1)
             24 STORE_FAST               3 (power)

 11          26 LOAD_FAST                1 (x)
             28 STORE_FAST               4 (current_product)

 12     >>   30 LOAD_FAST                2 (n)
             32 LOAD_CONST               1 (0)
             34 COMPARE_OP               4 (>)
             36 POP_JUMP_IF_FALSE       72

 14          38 LOAD_FAST                2 (n)
             40 LOAD_CONST               3 (2)
             42 BINARY_MODULO
             44 POP_JUMP_IF_FALSE       54

 15          46 LOAD_FAST                3 (power)
             48 LOAD_FAST                4 (current_product)
             50 BINARY_MULTIPLY
             52 STORE_FAST               3 (power)

 16     >>   54 LOAD_FAST                4 (current_product)
             56 LOAD_FAST                4 (current_product)
             58 BINARY_MULTIPLY
             60 STORE_FAST               4 (current_product)

 17          62 LOAD_FAST                2 (n)
             64 LOAD_CONST               3 (2)
             66 BINARY_FLOOR_DIVIDE
             68 STORE_FAST               2 (n)
             70 JUMP_ABSOLUTE           30

 18     >>   72 LOAD_FAST                3 (power)
             74 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0 or abs(x) == 1: return 1 if x == 1 else 1 - 2*(n % 2)
        p, T = 1, 1E5
        for i in range(abs(n)):
            p *= x
            if (abs(p) < 1/T and n > 0) or (abs(p) > T and n < 0): return 0
        return p if n > 0 else 1/p
		","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5199a752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5199a752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f5199a75240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f5199a75240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_GLOBAL              0 (abs)
             10 LOAD_FAST                1 (x)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       48
        >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               2 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               2 (1)
             30 RETURN_VALUE
        >>   32 LOAD_CONST               2 (1)
             34 LOAD_CONST               3 (2)
             36 LOAD_FAST                2 (n)
             38 LOAD_CONST               3 (2)
             40 BINARY_MODULO
             42 BINARY_MULTIPLY
             44 BINARY_SUBTRACT
             46 RETURN_VALUE

  4     >>   48 LOAD_CONST               4 ((1, 100000.0))
             50 UNPACK_SEQUENCE          2
             52 STORE_FAST               3 (p)
             54 STORE_FAST               4 (T)

  5          56 LOAD_GLOBAL              1 (range)
             58 LOAD_GLOBAL              0 (abs)
             60 LOAD_FAST                2 (n)
             62 CALL_FUNCTION            1
             64 CALL_FUNCTION            1
             66 GET_ITER
        >>   68 FOR_ITER                62 (to 132)
             70 STORE_FAST               5 (i)

  6          72 LOAD_FAST                3 (p)
             74 LOAD_FAST                1 (x)
             76 INPLACE_MULTIPLY
             78 STORE_FAST               3 (p)

  7          80 LOAD_GLOBAL              0 (abs)
             82 LOAD_FAST                3 (p)
             84 CALL_FUNCTION            1
             86 LOAD_CONST               2 (1)
             88 LOAD_FAST                4 (T)
             90 BINARY_TRUE_DIVIDE
             92 COMPARE_OP               0 (<)
             94 POP_JUMP_IF_FALSE      104
             96 LOAD_FAST                2 (n)
             98 LOAD_CONST               1 (0)
            100 COMPARE_OP               4 (>)
            102 POP_JUMP_IF_TRUE       124
        >>  104 LOAD_GLOBAL              0 (abs)
            106 LOAD_FAST                3 (p)
            108 CALL_FUNCTION            1
            110 LOAD_FAST                4 (T)
            112 COMPARE_OP               4 (>)
            114 POP_JUMP_IF_FALSE       68
            116 LOAD_FAST                2 (n)
            118 LOAD_CONST               1 (0)
            120 COMPARE_OP               0 (<)
            122 POP_JUMP_IF_FALSE       68
        >>  124 POP_TOP
            126 LOAD_CONST               1 (0)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE           68

  8     >>  132 LOAD_FAST                2 (n)
            134 LOAD_CONST               1 (0)
            136 COMPARE_OP               4 (>)
            138 POP_JUMP_IF_FALSE      144
            140 LOAD_FAST                3 (p)
            142 RETURN_VALUE
        >>  144 LOAD_CONST               2 (1)
            146 LOAD_FAST                3 (p)
            148 BINARY_TRUE_DIVIDE
            150 RETURN_VALUE
None
"
myPow,"class Solution:
	def myPow(self, x: float, n: int) -> float:
		import math
		return pow(x,n)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2f3bff5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2f3bff5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f2f3bff5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f2f3bff5450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 LOAD_CONST               0 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_FAST               3 (math)

  4           8 LOAD_GLOBAL              1 (pow)
             10 LOAD_FAST                1 (x)
             12 LOAD_FAST                2 (n)
             14 CALL_FUNCTION            2
             16 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        
        myres = 1
        
        if n == 0: return 1
        elif n < 0: 
            x = 1/x
            n = -n
            
        curProd = x
        k = n
        
        while (k > 0):
            if k%2 == 1: myres *= curProd
            curProd *= curProd
            k //= 2
        return myres

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa0294552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa0294552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fa029455240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fa029455240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (myres)

  6           4 LOAD_FAST                2 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (1)
             14 RETURN_VALUE

  7     >>   16 LOAD_FAST                2 (n)
             18 LOAD_CONST               2 (0)
             20 COMPARE_OP               0 (<)
             22 POP_JUMP_IF_FALSE       38

  8          24 LOAD_CONST               1 (1)
             26 LOAD_FAST                1 (x)
             28 BINARY_TRUE_DIVIDE
             30 STORE_FAST               1 (x)

  9          32 LOAD_FAST                2 (n)
             34 UNARY_NEGATIVE
             36 STORE_FAST               2 (n)

 11     >>   38 LOAD_FAST                1 (x)
             40 STORE_FAST               4 (curProd)

 12          42 LOAD_FAST                2 (n)
             44 STORE_FAST               5 (k)

 14     >>   46 LOAD_FAST                5 (k)
             48 LOAD_CONST               2 (0)
             50 COMPARE_OP               4 (>)
             52 POP_JUMP_IF_FALSE       92

 15          54 LOAD_FAST                5 (k)
             56 LOAD_CONST               3 (2)
             58 BINARY_MODULO
             60 LOAD_CONST               1 (1)
             62 COMPARE_OP               2 (==)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_FAST                3 (myres)
             68 LOAD_FAST                4 (curProd)
             70 INPLACE_MULTIPLY
             72 STORE_FAST               3 (myres)

 16     >>   74 LOAD_FAST                4 (curProd)
             76 LOAD_FAST                4 (curProd)
             78 INPLACE_MULTIPLY
             80 STORE_FAST               4 (curProd)

 17          82 LOAD_FAST                5 (k)
             84 LOAD_CONST               3 (2)
             86 INPLACE_FLOOR_DIVIDE
             88 STORE_FAST               5 (k)
             90 JUMP_ABSOLUTE           46

 18     >>   92 LOAD_FAST                3 (myres)
             94 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        ret = 1
        tmp = abs(n)
        while(tmp):
            if tmp % 2 == 1:
                ret *= x
                tmp -= 1
            else:
                x *= x
                tmp /= 2
                
        return ret if n>0 else 1/ret
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f98b82b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f98b82b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f98b82b5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f98b82b5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (ret)

  4           4 LOAD_GLOBAL              0 (abs)
              6 LOAD_FAST                2 (n)
              8 CALL_FUNCTION            1
             10 STORE_FAST               4 (tmp)

  5     >>   12 LOAD_FAST                4 (tmp)
             14 POP_JUMP_IF_FALSE       64

  6          16 LOAD_FAST                4 (tmp)
             18 LOAD_CONST               2 (2)
             20 BINARY_MODULO
             22 LOAD_CONST               1 (1)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       46

  7          28 LOAD_FAST                3 (ret)
             30 LOAD_FAST                1 (x)
             32 INPLACE_MULTIPLY
             34 STORE_FAST               3 (ret)

  8          36 LOAD_FAST                4 (tmp)
             38 LOAD_CONST               1 (1)
             40 INPLACE_SUBTRACT
             42 STORE_FAST               4 (tmp)
             44 JUMP_ABSOLUTE           12

 10     >>   46 LOAD_FAST                1 (x)
             48 LOAD_FAST                1 (x)
             50 INPLACE_MULTIPLY
             52 STORE_FAST               1 (x)

 11          54 LOAD_FAST                4 (tmp)
             56 LOAD_CONST               2 (2)
             58 INPLACE_TRUE_DIVIDE
             60 STORE_FAST               4 (tmp)
             62 JUMP_ABSOLUTE           12

 13     >>   64 LOAD_FAST                2 (n)
             66 LOAD_CONST               3 (0)
             68 COMPARE_OP               4 (>)
             70 POP_JUMP_IF_FALSE       76
             72 LOAD_FAST                3 (ret)
             74 RETURN_VALUE
        >>   76 LOAD_CONST               1 (1)
             78 LOAD_FAST                3 (ret)
             80 BINARY_TRUE_DIVIDE
             82 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        result = 1

        
        if n<0:
            x = 1/x
            n=-n
        power = n

        
        while power:
            if power&1:
                result = result*x
            x = x*x
            power = power >>1
            
        return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc46f0a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc46f0a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fc46f0a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fc46f0a5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (result)

  6           4 LOAD_FAST                2 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_FALSE       26

  7          12 LOAD_CONST               1 (1)
             14 LOAD_FAST                1 (x)
             16 BINARY_TRUE_DIVIDE
             18 STORE_FAST               1 (x)

  8          20 LOAD_FAST                2 (n)
             22 UNARY_NEGATIVE
             24 STORE_FAST               2 (n)

  9     >>   26 LOAD_FAST                2 (n)
             28 STORE_FAST               4 (power)

 12     >>   30 LOAD_FAST                4 (power)
             32 POP_JUMP_IF_FALSE       68

 13          34 LOAD_FAST                4 (power)
             36 LOAD_CONST               1 (1)
             38 BINARY_AND
             40 POP_JUMP_IF_FALSE       50

 14          42 LOAD_FAST                3 (result)
             44 LOAD_FAST                1 (x)
             46 BINARY_MULTIPLY
             48 STORE_FAST               3 (result)

 15     >>   50 LOAD_FAST                1 (x)
             52 LOAD_FAST                1 (x)
             54 BINARY_MULTIPLY
             56 STORE_FAST               1 (x)

 16          58 LOAD_FAST                4 (power)
             60 LOAD_CONST               1 (1)
             62 BINARY_RSHIFT
             64 STORE_FAST               4 (power)
             66 JUMP_ABSOLUTE           30

 18     >>   68 LOAD_FAST                3 (result)
             70 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x, n, r=1) -> float:
        x, n = n < 0 and 1 / x or x, abs(n)
        return self.myPow(x * x, n // 2, r * (not n % 2 or x)) if n else r
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2d7c9552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2d7c9552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               6 ((1,))
             10 LOAD_NAME                3 (float)
             12 LOAD_CONST               2 (('return',))
             14 BUILD_CONST_KEY_MAP      1
             16 LOAD_CONST               3 (<code object myPow at 0x7f2d7c955240, file ""<ast>"", line 2>)
             18 LOAD_CONST               4 ('Solution.myPow')
             20 MAKE_FUNCTION            5 (defaults, annotations)
             22 STORE_NAME               4 (myPow)
             24 LOAD_CONST               5 (None)
             26 RETURN_VALUE

Disassembly of <code object myPow at 0x7f2d7c955240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       16
              8 LOAD_CONST               2 (1)
             10 LOAD_FAST                1 (x)
             12 BINARY_TRUE_DIVIDE
             14 JUMP_IF_TRUE_OR_POP     18
        >>   16 LOAD_FAST                1 (x)
        >>   18 LOAD_GLOBAL              0 (abs)
             20 LOAD_FAST                2 (n)
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               1 (x)
             28 STORE_FAST               2 (n)

  4          30 LOAD_FAST                2 (n)
             32 POP_JUMP_IF_FALSE       70
             34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              1 (myPow)
             38 LOAD_FAST                1 (x)
             40 LOAD_FAST                1 (x)
             42 BINARY_MULTIPLY
             44 LOAD_FAST                2 (n)
             46 LOAD_CONST               3 (2)
             48 BINARY_FLOOR_DIVIDE
             50 LOAD_FAST                3 (r)
             52 LOAD_FAST                2 (n)
             54 LOAD_CONST               3 (2)
             56 BINARY_MODULO
             58 UNARY_NOT
             60 JUMP_IF_TRUE_OR_POP     64
             62 LOAD_FAST                1 (x)
        >>   64 BINARY_MULTIPLY
             66 CALL_METHOD              3
             68 RETURN_VALUE
        >>   70 LOAD_FAST                3 (r)
             72 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:

        def function(base = x, exponent = abs(n)):
            if exponent == 0:
                return 1
            elif exponent % 2 == 0:
                return function(base * base, exponent // 2)
            else:
                return base * function(base * base, (exponent - 1) // 2)

        f = function()
        
        return float(f) if n >= 0 else 1/f
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f69b31b5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f69b31b5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f69b31b5450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f69b31b5450, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_GLOBAL              0 (abs)
              4 LOAD_FAST                2 (n)
              6 CALL_FUNCTION            1
              8 BUILD_TUPLE              2
             10 LOAD_CLOSURE             0 (function)
             12 BUILD_TUPLE              1
             14 LOAD_CONST               1 (<code object function at 0x7f69b31b53a0, file ""<ast>"", line 4>)
             16 LOAD_CONST               2 ('Solution.myPow.<locals>.function')
             18 MAKE_FUNCTION            9 (defaults, closure)
             20 STORE_DEREF              0 (function)

 12          22 LOAD_DEREF               0 (function)
             24 CALL_FUNCTION            0
             26 STORE_FAST               3 (f)

 14          28 LOAD_FAST                2 (n)
             30 LOAD_CONST               3 (0)
             32 COMPARE_OP               5 (>=)
             34 POP_JUMP_IF_FALSE       44
             36 LOAD_GLOBAL              1 (float)
             38 LOAD_FAST                3 (f)
             40 CALL_FUNCTION            1
             42 RETURN_VALUE
        >>   44 LOAD_CONST               4 (1)
             46 LOAD_FAST                3 (f)
             48 BINARY_TRUE_DIVIDE
             50 RETURN_VALUE

Disassembly of <code object function at 0x7f69b31b53a0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (exponent)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  6           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                1 (exponent)
             14 LOAD_CONST               3 (2)
             16 BINARY_MODULO
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       42

  8          24 LOAD_DEREF               0 (function)
             26 LOAD_FAST                0 (base)
             28 LOAD_FAST                0 (base)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (exponent)
             34 LOAD_CONST               3 (2)
             36 BINARY_FLOOR_DIVIDE
             38 CALL_FUNCTION            2
             40 RETURN_VALUE

 10     >>   42 LOAD_FAST                0 (base)
             44 LOAD_DEREF               0 (function)
             46 LOAD_FAST                0 (base)
             48 LOAD_FAST                0 (base)
             50 BINARY_MULTIPLY
             52 LOAD_FAST                1 (exponent)
             54 LOAD_CONST               2 (1)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               3 (2)
             60 BINARY_FLOOR_DIVIDE
             62 CALL_FUNCTION            2
             64 BINARY_MULTIPLY
             66 RETURN_VALUE
             68 LOAD_CONST               0 (None)
             70 RETURN_VALUE
None
"
myPow,"class Solution:

    def myPow(self, x: float, n: int) -> float:
        if x == 0: return 0.0
        if x == 1 or n == 0: return 1.0
        
        power = abs(n)
        stored_power = {}
        res = self.get_positive_power(x, power, stored_power)
        return 1/res if n < 0 else res 
		
    def get_positive_power(self, x, power, stored_power):
        if power == 1: return x
        if power == 2: return x*x
        
        if stored_power.get(power): return stored_power[power]
        
        prev_power = 1
        next_power = 2
        prev_val = x
        
        while next_power < power:
            prev_val = prev_val*prev_val
            stored_power[next_power] = prev_val
            prev_power = next_power
            next_power *= 2
        
        stored_power[power] = prev_val * self.get_positive_power(x, power-prev_power, stored_power)
        return stored_power[power]

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f151ae252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f151ae252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f151ae25240, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)

 12          26 LOAD_CONST               4 (<code object get_positive_power at 0x7f151ae25450, file ""<ast>"", line 12>)
             28 LOAD_CONST               5 ('Solution.get_positive_power')
             30 MAKE_FUNCTION            0
             32 STORE_NAME               6 (get_positive_power)
             34 LOAD_CONST               6 (None)
             36 RETURN_VALUE

Disassembly of <code object myPow at 0x7f151ae25240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0.0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (x)
             14 LOAD_CONST               3 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_TRUE        28
             20 LOAD_FAST                2 (n)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       32
        >>   28 LOAD_CONST               4 (1.0)
             30 RETURN_VALUE

  7     >>   32 LOAD_GLOBAL              0 (abs)
             34 LOAD_FAST                2 (n)
             36 CALL_FUNCTION            1
             38 STORE_FAST               3 (power)

  8          40 BUILD_MAP                0
             42 STORE_FAST               4 (stored_power)

  9          44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              1 (get_positive_power)
             48 LOAD_FAST                1 (x)
             50 LOAD_FAST                3 (power)
             52 LOAD_FAST                4 (stored_power)
             54 CALL_METHOD              3
             56 STORE_FAST               5 (res)

 10          58 LOAD_FAST                2 (n)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               0 (<)
             64 POP_JUMP_IF_FALSE       74
             66 LOAD_CONST               3 (1)
             68 LOAD_FAST                5 (res)
             70 BINARY_TRUE_DIVIDE
             72 RETURN_VALUE
        >>   74 LOAD_FAST                5 (res)
             76 RETURN_VALUE

Disassembly of <code object get_positive_power at 0x7f151ae25450, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                2 (power)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_FAST                1 (x)
             10 RETURN_VALUE

 14     >>   12 LOAD_FAST                2 (power)
             14 LOAD_CONST               2 (2)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28
             20 LOAD_FAST                1 (x)
             22 LOAD_FAST                1 (x)
             24 BINARY_MULTIPLY
             26 RETURN_VALUE

 16     >>   28 LOAD_FAST                3 (stored_power)
             30 LOAD_METHOD              0 (get)
             32 LOAD_FAST                2 (power)
             34 CALL_METHOD              1
             36 POP_JUMP_IF_FALSE       46
             38 LOAD_FAST                3 (stored_power)
             40 LOAD_FAST                2 (power)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

 18     >>   46 LOAD_CONST               1 (1)
             48 STORE_FAST               4 (prev_power)

 19          50 LOAD_CONST               2 (2)
             52 STORE_FAST               5 (next_power)

 20          54 LOAD_FAST                1 (x)
             56 STORE_FAST               6 (prev_val)

 22     >>   58 LOAD_FAST                5 (next_power)
             60 LOAD_FAST                2 (power)
             62 COMPARE_OP               0 (<)
             64 POP_JUMP_IF_FALSE       96

 23          66 LOAD_FAST                6 (prev_val)
             68 LOAD_FAST                6 (prev_val)
             70 BINARY_MULTIPLY
             72 STORE_FAST               6 (prev_val)

 24          74 LOAD_FAST                6 (prev_val)
             76 LOAD_FAST                3 (stored_power)
             78 LOAD_FAST                5 (next_power)
             80 STORE_SUBSCR

 25          82 LOAD_FAST                5 (next_power)
             84 STORE_FAST               4 (prev_power)

 26          86 LOAD_FAST                5 (next_power)
             88 LOAD_CONST               2 (2)
             90 INPLACE_MULTIPLY
             92 STORE_FAST               5 (next_power)
             94 JUMP_ABSOLUTE           58

 28     >>   96 LOAD_FAST                6 (prev_val)
             98 LOAD_FAST                0 (self)
            100 LOAD_METHOD              1 (get_positive_power)
            102 LOAD_FAST                1 (x)
            104 LOAD_FAST                2 (power)
            106 LOAD_FAST                4 (prev_power)
            108 BINARY_SUBTRACT
            110 LOAD_FAST                3 (stored_power)
            112 CALL_METHOD              3
            114 BINARY_MULTIPLY
            116 LOAD_FAST                3 (stored_power)
            118 LOAD_FAST                2 (power)
            120 STORE_SUBSCR

 29         122 LOAD_FAST                3 (stored_power)
            124 LOAD_FAST                2 (power)
            126 BINARY_SUBSCR
            128 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        ## RC ##
        ## APPROACH : RECURSION ##    
        def recurse(n):
            ans = 1
            if(n == 0):
                return 1
            if(n==1):
                return x
            if(n == 2):
                return x * x
            
            if(n%2 == 0):
                ans = recurse(n//2)
                return ans * ans
            if( n%2 == 1):
                ans = recurse(n//2) * recurse((n//2) + 1)
                return ans
            
        if( n < 0 ):
            x = 1/x
            n = -n
        return recurse(n)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6e55e95500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6e55e95500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f6e55e953a0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f6e55e953a0, file ""<ast>"", line 2>:
  5           0 LOAD_CLOSURE             0 (recurse)
              2 LOAD_CLOSURE             1 (x)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object recurse at 0x7f6e55e95450, file ""<ast>"", line 5>)
              8 LOAD_CONST               2 ('Solution.myPow.<locals>.recurse')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (recurse)

 21          14 LOAD_FAST                2 (n)
             16 LOAD_CONST               3 (0)
             18 COMPARE_OP               0 (<)
             20 POP_JUMP_IF_FALSE       36

 22          22 LOAD_CONST               4 (1)
             24 LOAD_DEREF               1 (x)
             26 BINARY_TRUE_DIVIDE
             28 STORE_DEREF              1 (x)

 23          30 LOAD_FAST                2 (n)
             32 UNARY_NEGATIVE
             34 STORE_FAST               2 (n)

 24     >>   36 LOAD_DEREF               0 (recurse)
             38 LOAD_FAST                2 (n)
             40 CALL_FUNCTION            1
             42 RETURN_VALUE

Disassembly of <code object recurse at 0x7f6e55e95450, file ""<ast>"", line 5>:
  6           0 LOAD_CONST               1 (1)
              2 STORE_FAST               1 (ans)

  7           4 LOAD_FAST                0 (n)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  8          12 LOAD_CONST               1 (1)
             14 RETURN_VALUE

  9     >>   16 LOAD_FAST                0 (n)
             18 LOAD_CONST               1 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

 10          24 LOAD_DEREF               1 (x)
             26 RETURN_VALUE

 11     >>   28 LOAD_FAST                0 (n)
             30 LOAD_CONST               3 (2)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       44

 12          36 LOAD_DEREF               1 (x)
             38 LOAD_DEREF               1 (x)
             40 BINARY_MULTIPLY
             42 RETURN_VALUE

 14     >>   44 LOAD_FAST                0 (n)
             46 LOAD_CONST               3 (2)
             48 BINARY_MODULO
             50 LOAD_CONST               2 (0)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       76

 15          56 LOAD_DEREF               0 (recurse)
             58 LOAD_FAST                0 (n)
             60 LOAD_CONST               3 (2)
             62 BINARY_FLOOR_DIVIDE
             64 CALL_FUNCTION            1
             66 STORE_FAST               1 (ans)

 16          68 LOAD_FAST                1 (ans)
             70 LOAD_FAST                1 (ans)
             72 BINARY_MULTIPLY
             74 RETURN_VALUE

 17     >>   76 LOAD_FAST                0 (n)
             78 LOAD_CONST               3 (2)
             80 BINARY_MODULO
             82 LOAD_CONST               1 (1)
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE      120

 18          88 LOAD_DEREF               0 (recurse)
             90 LOAD_FAST                0 (n)
             92 LOAD_CONST               3 (2)
             94 BINARY_FLOOR_DIVIDE
             96 CALL_FUNCTION            1
             98 LOAD_DEREF               0 (recurse)
            100 LOAD_FAST                0 (n)
            102 LOAD_CONST               3 (2)
            104 BINARY_FLOOR_DIVIDE
            106 LOAD_CONST               1 (1)
            108 BINARY_ADD
            110 CALL_FUNCTION            1
            112 BINARY_MULTIPLY
            114 STORE_FAST               1 (ans)

 19         116 LOAD_FAST                1 (ans)
            118 RETURN_VALUE
        >>  120 LOAD_CONST               0 (None)
            122 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
            res = 1 
            temp = abs(n)
            while temp > 0:
                if temp & 1:
                    res = res * x 
                x = x * x 
                temp = temp >> 1 
            if n > 0:
                return res
            else:   
                return 1 / res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7feca2d652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7feca2d652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7feca2d65240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7feca2d65240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               3 (res)

  4           4 LOAD_GLOBAL              0 (abs)
              6 LOAD_FAST                2 (n)
              8 CALL_FUNCTION            1
             10 STORE_FAST               4 (temp)

  5     >>   12 LOAD_FAST                4 (temp)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       54

  6          20 LOAD_FAST                4 (temp)
             22 LOAD_CONST               1 (1)
             24 BINARY_AND
             26 POP_JUMP_IF_FALSE       36

  7          28 LOAD_FAST                3 (res)
             30 LOAD_FAST                1 (x)
             32 BINARY_MULTIPLY
             34 STORE_FAST               3 (res)

  8     >>   36 LOAD_FAST                1 (x)
             38 LOAD_FAST                1 (x)
             40 BINARY_MULTIPLY
             42 STORE_FAST               1 (x)

  9          44 LOAD_FAST                4 (temp)
             46 LOAD_CONST               1 (1)
             48 BINARY_RSHIFT
             50 STORE_FAST               4 (temp)
             52 JUMP_ABSOLUTE           12

 10     >>   54 LOAD_FAST                2 (n)
             56 LOAD_CONST               2 (0)
             58 COMPARE_OP               4 (>)
             60 POP_JUMP_IF_FALSE       66

 11          62 LOAD_FAST                3 (res)
             64 RETURN_VALUE

 13     >>   66 LOAD_CONST               1 (1)
             68 LOAD_FAST                3 (res)
             70 BINARY_TRUE_DIVIDE
             72 RETURN_VALUE
             74 LOAD_CONST               0 (None)
             76 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n < 0:
            return Solution.calc((1/x), -1 * n)
        else:
            return Solution.calc(x, n)
    
    @staticmethod
    def calc(x,y):
        if y == 0:
            return 1
        if y == 1:
            return x
        if y % 2:
            return x * Solution.calc(x, y-1)
        return Solution.calc(x*x, y//2)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6b5cad53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6b5cad53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f6b5cad5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)

  8          26 LOAD_NAME                6 (staticmethod)

  9          28 LOAD_CONST               4 (<code object calc at 0x7f6b5cad52f0, file ""<ast>"", line 8>)
             30 LOAD_CONST               5 ('Solution.calc')
             32 MAKE_FUNCTION            0
             34 CALL_FUNCTION            1
             36 STORE_NAME               7 (calc)
             38 LOAD_CONST               6 (None)
             40 RETURN_VALUE

Disassembly of <code object myPow at 0x7f6b5cad5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       28

  4           8 LOAD_GLOBAL              0 (Solution)
             10 LOAD_METHOD              1 (calc)
             12 LOAD_CONST               2 (1)
             14 LOAD_FAST                1 (x)
             16 BINARY_TRUE_DIVIDE
             18 LOAD_CONST               3 (-1)
             20 LOAD_FAST                2 (n)
             22 BINARY_MULTIPLY
             24 CALL_METHOD              2
             26 RETURN_VALUE

  6     >>   28 LOAD_GLOBAL              0 (Solution)
             30 LOAD_METHOD              1 (calc)
             32 LOAD_FAST                1 (x)
             34 LOAD_FAST                2 (n)
             36 CALL_METHOD              2
             38 RETURN_VALUE
             40 LOAD_CONST               0 (None)
             42 RETURN_VALUE

Disassembly of <code object calc at 0x7f6b5cad52f0, file ""<ast>"", line 8>:
 10           0 LOAD_FAST                1 (y)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

 11           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

 12     >>   12 LOAD_FAST                1 (y)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

 13          20 LOAD_FAST                0 (x)
             22 RETURN_VALUE

 14     >>   24 LOAD_FAST                1 (y)
             26 LOAD_CONST               3 (2)
             28 BINARY_MODULO
             30 POP_JUMP_IF_FALSE       52

 15          32 LOAD_FAST                0 (x)
             34 LOAD_GLOBAL              0 (Solution)
             36 LOAD_METHOD              1 (calc)
             38 LOAD_FAST                0 (x)
             40 LOAD_FAST                1 (y)
             42 LOAD_CONST               2 (1)
             44 BINARY_SUBTRACT
             46 CALL_METHOD              2
             48 BINARY_MULTIPLY
             50 RETURN_VALUE

 16     >>   52 LOAD_GLOBAL              0 (Solution)
             54 LOAD_METHOD              1 (calc)
             56 LOAD_FAST                0 (x)
             58 LOAD_FAST                0 (x)
             60 BINARY_MULTIPLY
             62 LOAD_FAST                1 (y)
             64 LOAD_CONST               3 (2)
             66 BINARY_FLOOR_DIVIDE
             68 CALL_METHOD              2
             70 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x**n
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcde7645500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcde7645500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7fcde7645450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7fcde7645450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_FAST                2 (n)
              4 BINARY_POWER
              6 RETURN_VALUE
None
"
myPow,"class Solution:
    def myPow(self, x: float, n: int) -> float:
        def helper(x, n):
            if n == 0:
                return 1
            tmp = helper(x, n // 2)
            if n % 2 == 0:
                return tmp * tmp
            if n % 2 == 1:
                return x * tmp * tmp

        if n >= 0:
            return helper(x, n)

        return 1 / helper(x, -n)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f33c2d55500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f33c2d55500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (float)
             10 LOAD_NAME                4 (int)
             12 LOAD_NAME                3 (float)
             14 LOAD_CONST               1 (('x', 'n', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object myPow at 0x7f33c2d55450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.myPow')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (myPow)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object myPow at 0x7f33c2d55450, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (helper)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object helper at 0x7f33c2d553a0, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.myPow.<locals>.helper')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (helper)

 12          12 LOAD_FAST                2 (n)
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       30

 13          20 LOAD_DEREF               0 (helper)
             22 LOAD_FAST                1 (x)
             24 LOAD_FAST                2 (n)
             26 CALL_FUNCTION            2
             28 RETURN_VALUE

 15     >>   30 LOAD_CONST               4 (1)
             32 LOAD_DEREF               0 (helper)
             34 LOAD_FAST                1 (x)
             36 LOAD_FAST                2 (n)
             38 UNARY_NEGATIVE
             40 CALL_FUNCTION            2
             42 BINARY_TRUE_DIVIDE
             44 RETURN_VALUE

Disassembly of <code object helper at 0x7f33c2d553a0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  6     >>   12 LOAD_DEREF               0 (helper)
             14 LOAD_FAST                0 (x)
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               3 (2)
             20 BINARY_FLOOR_DIVIDE
             22 CALL_FUNCTION            2
             24 STORE_FAST               2 (tmp)

  7          26 LOAD_FAST                1 (n)
             28 LOAD_CONST               3 (2)
             30 BINARY_MODULO
             32 LOAD_CONST               1 (0)
             34 COMPARE_OP               2 (==)
             36 POP_JUMP_IF_FALSE       46

  8          38 LOAD_FAST                2 (tmp)
             40 LOAD_FAST                2 (tmp)
             42 BINARY_MULTIPLY
             44 RETURN_VALUE

  9     >>   46 LOAD_FAST                1 (n)
             48 LOAD_CONST               3 (2)
             50 BINARY_MODULO
             52 LOAD_CONST               2 (1)
             54 COMPARE_OP               2 (==)
             56 POP_JUMP_IF_FALSE       70

 10          58 LOAD_FAST                0 (x)
             60 LOAD_FAST                2 (tmp)
             62 BINARY_MULTIPLY
             64 LOAD_FAST                2 (tmp)
             66 BINARY_MULTIPLY
             68 RETURN_VALUE
        >>   70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        a = x            
        while int(a) * int(a) > x:
            a -= (a * a - x) / (2 * a)            
        return int(a)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4dbb2852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4dbb2852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f4dbb285240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f4dbb285240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 STORE_FAST               2 (a)

  4     >>    4 LOAD_GLOBAL              0 (int)
              6 LOAD_FAST                2 (a)
              8 CALL_FUNCTION            1
             10 LOAD_GLOBAL              0 (int)
             12 LOAD_FAST                2 (a)
             14 CALL_FUNCTION            1
             16 BINARY_MULTIPLY
             18 LOAD_FAST                1 (x)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       50

  5          24 LOAD_FAST                2 (a)
             26 LOAD_FAST                2 (a)
             28 LOAD_FAST                2 (a)
             30 BINARY_MULTIPLY
             32 LOAD_FAST                1 (x)
             34 BINARY_SUBTRACT
             36 LOAD_CONST               1 (2)
             38 LOAD_FAST                2 (a)
             40 BINARY_MULTIPLY
             42 BINARY_TRUE_DIVIDE
             44 INPLACE_SUBTRACT
             46 STORE_FAST               2 (a)
             48 JUMP_ABSOLUTE            4

  6     >>   50 LOAD_GLOBAL              0 (int)
             52 LOAD_FAST                2 (a)
             54 CALL_FUNCTION            1
             56 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        return int(x ** (1/2))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb2d9215450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb2d9215450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fb2d92153a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fb2d92153a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_FAST                1 (x)
              4 LOAD_CONST               1 (0.5)
              6 BINARY_POWER
              8 CALL_FUNCTION            1
             10 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x:int)->int:
        r = x + 1
        while r * r > x: 
            r = int( r - (r * r - x) / (2 * r))
        return r
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd6ba3a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd6ba3a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fd6ba3a5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fd6ba3a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 STORE_FAST               2 (r)

  4     >>    8 LOAD_FAST                2 (r)
             10 LOAD_FAST                2 (r)
             12 BINARY_MULTIPLY
             14 LOAD_FAST                1 (x)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       50

  5          20 LOAD_GLOBAL              0 (int)
             22 LOAD_FAST                2 (r)
             24 LOAD_FAST                2 (r)
             26 LOAD_FAST                2 (r)
             28 BINARY_MULTIPLY
             30 LOAD_FAST                1 (x)
             32 BINARY_SUBTRACT
             34 LOAD_CONST               2 (2)
             36 LOAD_FAST                2 (r)
             38 BINARY_MULTIPLY
             40 BINARY_TRUE_DIVIDE
             42 BINARY_SUBTRACT
             44 CALL_FUNCTION            1
             46 STORE_FAST               2 (r)
             48 JUMP_ABSOLUTE            8

  6     >>   50 LOAD_FAST                2 (r)
             52 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x:int)->int:        
        eps = 1
        x_i = 1
        while(abs(self.newton(x_i, x) - x_i) > eps):
            x_i = self.newton(x_i, x) 
        
        if int(x_i) * int(x_i) > x:
            return int(x_i) - 1
        
        return int(x_i)
        
    
    def newton(self, x_i, a):
        return 0.5 * (x_i + a / x_i)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9fdbfe53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9fdbfe53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f9fdbfe5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)

 14          24 LOAD_CONST               4 (<code object newton at 0x7f9fdbfe52f0, file ""<ast>"", line 14>)
             26 LOAD_CONST               5 ('Solution.newton')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (newton)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f9fdbfe5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (eps)

  4           4 LOAD_CONST               1 (1)
              6 STORE_FAST               3 (x_i)

  5     >>    8 LOAD_GLOBAL              0 (abs)
             10 LOAD_FAST                0 (self)
             12 LOAD_METHOD              1 (newton)
             14 LOAD_FAST                3 (x_i)
             16 LOAD_FAST                1 (x)
             18 CALL_METHOD              2
             20 LOAD_FAST                3 (x_i)
             22 BINARY_SUBTRACT
             24 CALL_FUNCTION            1
             26 LOAD_FAST                2 (eps)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       46

  6          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              1 (newton)
             36 LOAD_FAST                3 (x_i)
             38 LOAD_FAST                1 (x)
             40 CALL_METHOD              2
             42 STORE_FAST               3 (x_i)
             44 JUMP_ABSOLUTE            8

  8     >>   46 LOAD_GLOBAL              2 (int)
             48 LOAD_FAST                3 (x_i)
             50 CALL_FUNCTION            1
             52 LOAD_GLOBAL              2 (int)
             54 LOAD_FAST                3 (x_i)
             56 CALL_FUNCTION            1
             58 BINARY_MULTIPLY
             60 LOAD_FAST                1 (x)
             62 COMPARE_OP               4 (>)
             64 POP_JUMP_IF_FALSE       78

  9          66 LOAD_GLOBAL              2 (int)
             68 LOAD_FAST                3 (x_i)
             70 CALL_FUNCTION            1
             72 LOAD_CONST               1 (1)
             74 BINARY_SUBTRACT
             76 RETURN_VALUE

 11     >>   78 LOAD_GLOBAL              2 (int)
             80 LOAD_FAST                3 (x_i)
             82 CALL_FUNCTION            1
             84 RETURN_VALUE

Disassembly of <code object newton at 0x7f9fdbfe52f0, file ""<ast>"", line 14>:
 15           0 LOAD_CONST               1 (0.5)
              2 LOAD_FAST                1 (x_i)
              4 LOAD_FAST                2 (a)
              6 LOAD_FAST                1 (x_i)
              8 BINARY_TRUE_DIVIDE
             10 BINARY_ADD
             12 BINARY_MULTIPLY
             14 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        ## RC ##
        ## APPROACH : Binary Search ##
        #   1. Any number greater than 1, will have sqrt(n) less than n/2
        #   2. We can check i*i < n till n/2.
        #   3. Can be optimized with binary search, listing all nums till n/2 and check i*i < n
        if(x < 4): return 1 if (x!=0) else 0
            
        low = 2
        high = x//2 
        while(low <= high):
            mid = low + (high - low)//2
            if( mid**2 < x):
                low = mid + 1
            
            elif( mid**2 > x):
                high = mid - 1
            else:
                return mid
        return high
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff7aeb45240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff7aeb45240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7ff7aeb452f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7ff7aeb452f0, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (4)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       24
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               3 (!=)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_CONST               3 (1)
             18 RETURN_VALUE
        >>   20 LOAD_CONST               2 (0)
             22 RETURN_VALUE

 10     >>   24 LOAD_CONST               4 (2)
             26 STORE_FAST               2 (low)

 11          28 LOAD_FAST                1 (x)
             30 LOAD_CONST               4 (2)
             32 BINARY_FLOOR_DIVIDE
             34 STORE_FAST               3 (high)

 12     >>   36 LOAD_FAST                2 (low)
             38 LOAD_FAST                3 (high)
             40 COMPARE_OP               1 (<=)
             42 POP_JUMP_IF_FALSE      110

 13          44 LOAD_FAST                2 (low)
             46 LOAD_FAST                3 (high)
             48 LOAD_FAST                2 (low)
             50 BINARY_SUBTRACT
             52 LOAD_CONST               4 (2)
             54 BINARY_FLOOR_DIVIDE
             56 BINARY_ADD
             58 STORE_FAST               4 (mid)

 14          60 LOAD_FAST                4 (mid)
             62 LOAD_CONST               4 (2)
             64 BINARY_POWER
             66 LOAD_FAST                1 (x)
             68 COMPARE_OP               0 (<)
             70 POP_JUMP_IF_FALSE       82

 15          72 LOAD_FAST                4 (mid)
             74 LOAD_CONST               3 (1)
             76 BINARY_ADD
             78 STORE_FAST               2 (low)
             80 JUMP_ABSOLUTE           36

 17     >>   82 LOAD_FAST                4 (mid)
             84 LOAD_CONST               4 (2)
             86 BINARY_POWER
             88 LOAD_FAST                1 (x)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE      104

 18          94 LOAD_FAST                4 (mid)
             96 LOAD_CONST               3 (1)
             98 BINARY_SUBTRACT
            100 STORE_FAST               3 (high)
            102 JUMP_ABSOLUTE           36

 20     >>  104 LOAD_FAST                4 (mid)
            106 RETURN_VALUE
            108 JUMP_ABSOLUTE           36

 21     >>  110 LOAD_FAST                3 (high)
            112 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        r = x
        while r*r>x:
            r = (r+x//r)//2
        return int(r)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1c66f052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1c66f052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f1c66f05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f1c66f05240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 STORE_FAST               2 (r)

  4     >>    4 LOAD_FAST                2 (r)
              6 LOAD_FAST                2 (r)
              8 BINARY_MULTIPLY
             10 LOAD_FAST                1 (x)
             12 COMPARE_OP               4 (>)
             14 POP_JUMP_IF_FALSE       34

  5          16 LOAD_FAST                2 (r)
             18 LOAD_FAST                1 (x)
             20 LOAD_FAST                2 (r)
             22 BINARY_FLOOR_DIVIDE
             24 BINARY_ADD
             26 LOAD_CONST               1 (2)
             28 BINARY_FLOOR_DIVIDE
             30 STORE_FAST               2 (r)
             32 JUMP_ABSOLUTE            4

  6     >>   34 LOAD_GLOBAL              0 (int)
             36 LOAD_FAST                2 (r)
             38 CALL_FUNCTION            1
             40 RETURN_VALUE
None
"
mySqrt,"class Solution:
	def mySqrt(self, x: int) -> int:
		if x==1: return 1
		low=1
		high=x//2
		while low+1<high:
			mid=(high+low)//2
			if mid*mid==x:
				return mid
			elif mid*mid >x:
				high=mid
			else:
				low=mid
		if high*high>x:
			return low
		return high","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc537015240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc537015240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fc5370152f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fc5370152f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

  4     >>   12 LOAD_CONST               1 (1)
             14 STORE_FAST               2 (low)

  5          16 LOAD_FAST                1 (x)
             18 LOAD_CONST               2 (2)
             20 BINARY_FLOOR_DIVIDE
             22 STORE_FAST               3 (high)

  6     >>   24 LOAD_FAST                2 (low)
             26 LOAD_CONST               1 (1)
             28 BINARY_ADD
             30 LOAD_FAST                3 (high)
             32 COMPARE_OP               0 (<)
             34 POP_JUMP_IF_FALSE       88

  7          36 LOAD_FAST                3 (high)
             38 LOAD_FAST                2 (low)
             40 BINARY_ADD
             42 LOAD_CONST               2 (2)
             44 BINARY_FLOOR_DIVIDE
             46 STORE_FAST               4 (mid)

  8          48 LOAD_FAST                4 (mid)
             50 LOAD_FAST                4 (mid)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (x)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

  9          60 LOAD_FAST                4 (mid)
             62 RETURN_VALUE

 10     >>   64 LOAD_FAST                4 (mid)
             66 LOAD_FAST                4 (mid)
             68 BINARY_MULTIPLY
             70 LOAD_FAST                1 (x)
             72 COMPARE_OP               4 (>)
             74 POP_JUMP_IF_FALSE       82

 11          76 LOAD_FAST                4 (mid)
             78 STORE_FAST               3 (high)
             80 JUMP_ABSOLUTE           24

 13     >>   82 LOAD_FAST                4 (mid)
             84 STORE_FAST               2 (low)
             86 JUMP_ABSOLUTE           24

 14     >>   88 LOAD_FAST                3 (high)
             90 LOAD_FAST                3 (high)
             92 BINARY_MULTIPLY
             94 LOAD_FAST                1 (x)
             96 COMPARE_OP               4 (>)
             98 POP_JUMP_IF_FALSE      104

 15         100 LOAD_FAST                2 (low)
            102 RETURN_VALUE

 16     >>  104 LOAD_FAST                3 (high)
            106 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        '''
        Using the iterative method developed for EDSAC to calculate sqrt(x)
        https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#A_two-variable_iterative_method
        
        valid for 0 < x < 3
        let a_0 = x, c_0 = x-1
        then:
        a_n+1 = a_n-(a_n*c_n)/2
        c_n+1 = c_n^2*(c_n-3)/4
        
        for all n, x*(1+c_n) = a_n^2
        so as c_n -> 0, a_n -> sqrt(x)
        '''
        
        # eliminate trivial cases
        if x == 0 or x == 1:
            return x
        
        # floor(sqrt(x)) == floor(sqrt(x+k)) for 0 <= k < 1, so aim for the middle of that interval, x + 1/2
        x += 0.5
        
        # initialise a = x and c = x-1, but method only valid for 0 < x < 3 with fastest convergence around x = 1
        # so divide by 4 until 1/2 <= x < 2
        a = x
        factors_of_4 = 0
        while a >= 2:
            a /= 4
            factors_of_4 += 1
        c = a-1
        
        # iterate until error term less than 1/x^2, always gets suitably close
        error = 1/x**2
        while abs(c) > error:
            a -= a*c/2
            c = c*c*(c-3)/4
        
        # a = sqrt(x), but divided x by 4 many times earlier, so multiply a by 2 that many times for final answer
        return int(a*2**factors_of_4)
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f437de052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f437de052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f437de05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f437de05240, file ""<ast>"", line 2>:
 18           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

 19     >>   16 LOAD_FAST                1 (x)
             18 RETURN_VALUE

 22     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               3 (0.5)
             24 INPLACE_ADD
             26 STORE_FAST               1 (x)

 26          28 LOAD_FAST                1 (x)
             30 STORE_FAST               2 (a)

 27          32 LOAD_CONST               1 (0)
             34 STORE_FAST               3 (factors_of_4)

 28     >>   36 LOAD_FAST                2 (a)
             38 LOAD_CONST               4 (2)
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_FALSE       62

 29          44 LOAD_FAST                2 (a)
             46 LOAD_CONST               5 (4)
             48 INPLACE_TRUE_DIVIDE
             50 STORE_FAST               2 (a)

 30          52 LOAD_FAST                3 (factors_of_4)
             54 LOAD_CONST               2 (1)
             56 INPLACE_ADD
             58 STORE_FAST               3 (factors_of_4)
             60 JUMP_ABSOLUTE           36

 31     >>   62 LOAD_FAST                2 (a)
             64 LOAD_CONST               2 (1)
             66 BINARY_SUBTRACT
             68 STORE_FAST               4 (c)

 34          70 LOAD_CONST               2 (1)
             72 LOAD_FAST                1 (x)
             74 LOAD_CONST               4 (2)
             76 BINARY_POWER
             78 BINARY_TRUE_DIVIDE
             80 STORE_FAST               5 (error)

 35     >>   82 LOAD_GLOBAL              0 (abs)
             84 LOAD_FAST                4 (c)
             86 CALL_FUNCTION            1
             88 LOAD_FAST                5 (error)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE      132

 36          94 LOAD_FAST                2 (a)
             96 LOAD_FAST                2 (a)
             98 LOAD_FAST                4 (c)
            100 BINARY_MULTIPLY
            102 LOAD_CONST               4 (2)
            104 BINARY_TRUE_DIVIDE
            106 INPLACE_SUBTRACT
            108 STORE_FAST               2 (a)

 37         110 LOAD_FAST                4 (c)
            112 LOAD_FAST                4 (c)
            114 BINARY_MULTIPLY
            116 LOAD_FAST                4 (c)
            118 LOAD_CONST               6 (3)
            120 BINARY_SUBTRACT
            122 BINARY_MULTIPLY
            124 LOAD_CONST               5 (4)
            126 BINARY_TRUE_DIVIDE
            128 STORE_FAST               4 (c)
            130 JUMP_ABSOLUTE           82

 40     >>  132 LOAD_GLOBAL              1 (int)
            134 LOAD_FAST                2 (a)
            136 LOAD_CONST               4 (2)
            138 LOAD_FAST                3 (factors_of_4)
            140 BINARY_POWER
            142 BINARY_MULTIPLY
            144 CALL_FUNCTION            1
            146 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x:int)->int:
        """"""
        :type x: int
        :rtype: int
        """"""
        if x < 2:
            return x

        min_val = 0
        max_val = x
        new_x = x // 2

        while new_x != min_val:
            if x < new_x ** 2:
                max_val = new_x
            elif x > new_x ** 2:
                min_val = new_x
            else:
                return new_x
            new_x = (min_val + max_val) // 2
        return new_x
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6ef8d052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6ef8d052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f6ef8d05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f6ef8d05240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

  8           8 LOAD_FAST                1 (x)
             10 RETURN_VALUE

 10     >>   12 LOAD_CONST               2 (0)
             14 STORE_FAST               2 (min_val)

 11          16 LOAD_FAST                1 (x)
             18 STORE_FAST               3 (max_val)

 12          20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               4 (new_x)

 14     >>   28 LOAD_FAST                4 (new_x)
             30 LOAD_FAST                2 (min_val)
             32 COMPARE_OP               3 (!=)
             34 POP_JUMP_IF_FALSE       90

 15          36 LOAD_FAST                1 (x)
             38 LOAD_FAST                4 (new_x)
             40 LOAD_CONST               1 (2)
             42 BINARY_POWER
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       54

 16          48 LOAD_FAST                4 (new_x)
             50 STORE_FAST               3 (max_val)
             52 JUMP_FORWARD            22 (to 76)

 17     >>   54 LOAD_FAST                1 (x)
             56 LOAD_FAST                4 (new_x)
             58 LOAD_CONST               1 (2)
             60 BINARY_POWER
             62 COMPARE_OP               4 (>)
             64 POP_JUMP_IF_FALSE       72

 18          66 LOAD_FAST                4 (new_x)
             68 STORE_FAST               2 (min_val)
             70 JUMP_FORWARD             4 (to 76)

 20     >>   72 LOAD_FAST                4 (new_x)
             74 RETURN_VALUE

 21     >>   76 LOAD_FAST                2 (min_val)
             78 LOAD_FAST                3 (max_val)
             80 BINARY_ADD
             82 LOAD_CONST               1 (2)
             84 BINARY_FLOOR_DIVIDE
             86 STORE_FAST               4 (new_x)
             88 JUMP_ABSOLUTE           28

 22     >>   90 LOAD_FAST                4 (new_x)
             92 RETURN_VALUE
None
"
mySqrt,"# approach:
# (1) use left and right pointers to conduct a type of binary search
# (2) only difference is we maintain a refernce to the maximum number that has worked ...
# (3) ... as well as a reference the minimum number that has not worked
# (4) when those numbers are separated by one, we are done

class Solution:
    def mySqrt(self, x:int)->int:
        """"""
        :type x: int
        :rtype: int
        """"""
        # corner cases / bad inputs
        if x == 0:
            return 0

        if x < 0:
            return -2147483648

        l, r = 1, 1
        maximum, minimum = 0, x + 1
        while maximum < minimum - 1:
            if r * r <= x:
                maximum = r
                l = r
                r = min(2 * r, int((minimum + l) / 2))
            else:
                minimum = r
                r = int((l + r) / 2)

        return maximum
","  7           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f24e9e45240, file ""<ast>"", line 7>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f24e9e45240, file ""<ast>"", line 7>:
  7           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f24e9e453a0, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f24e9e453a0, file ""<ast>"", line 8>:
 14           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

 15           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

 17     >>   12 LOAD_FAST                1 (x)
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       24

 18          20 LOAD_CONST               2 (-2147483648)
             22 RETURN_VALUE

 20     >>   24 LOAD_CONST               3 ((1, 1))
             26 UNPACK_SEQUENCE          2
             28 STORE_FAST               2 (l)
             30 STORE_FAST               3 (r)

 21          32 LOAD_CONST               1 (0)
             34 LOAD_FAST                1 (x)
             36 LOAD_CONST               4 (1)
             38 BINARY_ADD
             40 ROT_TWO
             42 STORE_FAST               4 (maximum)
             44 STORE_FAST               5 (minimum)

 22     >>   46 LOAD_FAST                4 (maximum)
             48 LOAD_FAST                5 (minimum)
             50 LOAD_CONST               4 (1)
             52 BINARY_SUBTRACT
             54 COMPARE_OP               0 (<)
             56 POP_JUMP_IF_FALSE      128

 23          58 LOAD_FAST                3 (r)
             60 LOAD_FAST                3 (r)
             62 BINARY_MULTIPLY
             64 LOAD_FAST                1 (x)
             66 COMPARE_OP               1 (<=)
             68 POP_JUMP_IF_FALSE      106

 24          70 LOAD_FAST                3 (r)
             72 STORE_FAST               4 (maximum)

 25          74 LOAD_FAST                3 (r)
             76 STORE_FAST               2 (l)

 26          78 LOAD_GLOBAL              0 (min)
             80 LOAD_CONST               5 (2)
             82 LOAD_FAST                3 (r)
             84 BINARY_MULTIPLY
             86 LOAD_GLOBAL              1 (int)
             88 LOAD_FAST                5 (minimum)
             90 LOAD_FAST                2 (l)
             92 BINARY_ADD
             94 LOAD_CONST               5 (2)
             96 BINARY_TRUE_DIVIDE
             98 CALL_FUNCTION            1
            100 CALL_FUNCTION            2
            102 STORE_FAST               3 (r)
            104 JUMP_ABSOLUTE           46

 28     >>  106 LOAD_FAST                3 (r)
            108 STORE_FAST               5 (minimum)

 29         110 LOAD_GLOBAL              1 (int)
            112 LOAD_FAST                2 (l)
            114 LOAD_FAST                3 (r)
            116 BINARY_ADD
            118 LOAD_CONST               5 (2)
            120 BINARY_TRUE_DIVIDE
            122 CALL_FUNCTION            1
            124 STORE_FAST               3 (r)
            126 JUMP_ABSOLUTE           46

 31     >>  128 LOAD_FAST                4 (maximum)
            130 RETURN_VALUE
None
"
mySqrt,"## Newton method
class Solution:
    def mySqrt(self, x: int) -> int:
        num = x
        while num * num > x:
            num = (num + x//num) // 2
        return num
        

","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5783b252f0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5783b252f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f5783b25240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f5783b25240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (x)
              2 STORE_FAST               2 (num)

  5     >>    4 LOAD_FAST                2 (num)
              6 LOAD_FAST                2 (num)
              8 BINARY_MULTIPLY
             10 LOAD_FAST                1 (x)
             12 COMPARE_OP               4 (>)
             14 POP_JUMP_IF_FALSE       34

  6          16 LOAD_FAST                2 (num)
             18 LOAD_FAST                1 (x)
             20 LOAD_FAST                2 (num)
             22 BINARY_FLOOR_DIVIDE
             24 BINARY_ADD
             26 LOAD_CONST               1 (2)
             28 BINARY_FLOOR_DIVIDE
             30 STORE_FAST               2 (num)
             32 JUMP_ABSOLUTE            4

  7     >>   34 LOAD_FAST                2 (num)
             36 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        l = 1
        r = x
        while l <= r:
            mid = (l + r) // 2
            if mid * mid <= x:
                l = mid + 1
            else:
                r = mid - 1
                
        return l - 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fca279452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fca279452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fca27945240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fca27945240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (l)

  4           4 LOAD_FAST                1 (x)
              6 STORE_FAST               3 (r)

  5     >>    8 LOAD_FAST                2 (l)
             10 LOAD_FAST                3 (r)
             12 COMPARE_OP               1 (<=)
             14 POP_JUMP_IF_FALSE       60

  6          16 LOAD_FAST                2 (l)
             18 LOAD_FAST                3 (r)
             20 BINARY_ADD
             22 LOAD_CONST               2 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               4 (mid)

  7          28 LOAD_FAST                4 (mid)
             30 LOAD_FAST                4 (mid)
             32 BINARY_MULTIPLY
             34 LOAD_FAST                1 (x)
             36 COMPARE_OP               1 (<=)
             38 POP_JUMP_IF_FALSE       50

  8          40 LOAD_FAST                4 (mid)
             42 LOAD_CONST               1 (1)
             44 BINARY_ADD
             46 STORE_FAST               2 (l)
             48 JUMP_ABSOLUTE            8

 10     >>   50 LOAD_FAST                4 (mid)
             52 LOAD_CONST               1 (1)
             54 BINARY_SUBTRACT
             56 STORE_FAST               3 (r)
             58 JUMP_ABSOLUTE            8

 12     >>   60 LOAD_FAST                2 (l)
             62 LOAD_CONST               1 (1)
             64 BINARY_SUBTRACT
             66 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        x = int(x**0.5)
        return x
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc4ec0153a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc4ec0153a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fc4ec0152f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fc4ec0152f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_FAST                1 (x)
              4 LOAD_CONST               1 (0.5)
              6 BINARY_POWER
              8 CALL_FUNCTION            1
             10 STORE_FAST               1 (x)

  4          12 LOAD_FAST                1 (x)
             14 RETURN_VALUE
None
"
mySqrt,"## Binary search
class Solution:
    def mySqrt(self, x: int) -> int:
        left, right = 0, x + 1
        while left < right:
            mid = left + (right - left) // 2
            if mid ** 2 == x:
                return mid
            if mid ** 2 < x:
                left = mid + 1
            else:
                right = mid
        return left - 1","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbe68d652f0, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbe68d652f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fbe68d65240, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fbe68d65240, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (0)
              2 LOAD_FAST                1 (x)
              4 LOAD_CONST               2 (1)
              6 BINARY_ADD
              8 ROT_TWO
             10 STORE_FAST               2 (left)
             12 STORE_FAST               3 (right)

  5     >>   14 LOAD_FAST                2 (left)
             16 LOAD_FAST                3 (right)
             18 COMPARE_OP               0 (<)
             20 POP_JUMP_IF_FALSE       82

  6          22 LOAD_FAST                2 (left)
             24 LOAD_FAST                3 (right)
             26 LOAD_FAST                2 (left)
             28 BINARY_SUBTRACT
             30 LOAD_CONST               3 (2)
             32 BINARY_FLOOR_DIVIDE
             34 BINARY_ADD
             36 STORE_FAST               4 (mid)

  7          38 LOAD_FAST                4 (mid)
             40 LOAD_CONST               3 (2)
             42 BINARY_POWER
             44 LOAD_FAST                1 (x)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       54

  8          50 LOAD_FAST                4 (mid)
             52 RETURN_VALUE

  9     >>   54 LOAD_FAST                4 (mid)
             56 LOAD_CONST               3 (2)
             58 BINARY_POWER
             60 LOAD_FAST                1 (x)
             62 COMPARE_OP               0 (<)
             64 POP_JUMP_IF_FALSE       76

 10          66 LOAD_FAST                4 (mid)
             68 LOAD_CONST               2 (1)
             70 BINARY_ADD
             72 STORE_FAST               2 (left)
             74 JUMP_ABSOLUTE           14

 12     >>   76 LOAD_FAST                4 (mid)
             78 STORE_FAST               3 (right)
             80 JUMP_ABSOLUTE           14

 13     >>   82 LOAD_FAST                2 (left)
             84 LOAD_CONST               2 (1)
             86 BINARY_SUBTRACT
             88 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0 or x == 1:
            return x
        half = x//2
        index = x - half
        while True:
            if index*index == x:
                return index
            elif (index*index < x) and ((index+1)*(index+1) > x):
                return index
            elif (index*index > x) and ((index-1)*(index-1) < x):
                return (index-1)
            elif index*index > x:
                half = max(half//2, half%2)
                index -= half
            elif index*index < x:
                half = max(half//2, half%2)
                index += half
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f49b44d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f49b44d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f49b44d5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f49b44d5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_FAST                1 (x)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               3 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               2 (half)

  6          28 LOAD_FAST                1 (x)
             30 LOAD_FAST                2 (half)
             32 BINARY_SUBTRACT
             34 STORE_FAST               3 (index)

  8     >>   36 LOAD_FAST                3 (index)
             38 LOAD_FAST                3 (index)
             40 BINARY_MULTIPLY
             42 LOAD_FAST                1 (x)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       52

  9          48 LOAD_FAST                3 (index)
             50 RETURN_VALUE

 10     >>   52 LOAD_FAST                3 (index)
             54 LOAD_FAST                3 (index)
             56 BINARY_MULTIPLY
             58 LOAD_FAST                1 (x)
             60 COMPARE_OP               0 (<)
             62 POP_JUMP_IF_FALSE       88
             64 LOAD_FAST                3 (index)
             66 LOAD_CONST               2 (1)
             68 BINARY_ADD
             70 LOAD_FAST                3 (index)
             72 LOAD_CONST               2 (1)
             74 BINARY_ADD
             76 BINARY_MULTIPLY
             78 LOAD_FAST                1 (x)
             80 COMPARE_OP               4 (>)
             82 POP_JUMP_IF_FALSE       88

 11          84 LOAD_FAST                3 (index)
             86 RETURN_VALUE

 12     >>   88 LOAD_FAST                3 (index)
             90 LOAD_FAST                3 (index)
             92 BINARY_MULTIPLY
             94 LOAD_FAST                1 (x)
             96 COMPARE_OP               4 (>)
             98 POP_JUMP_IF_FALSE      128
            100 LOAD_FAST                3 (index)
            102 LOAD_CONST               2 (1)
            104 BINARY_SUBTRACT
            106 LOAD_FAST                3 (index)
            108 LOAD_CONST               2 (1)
            110 BINARY_SUBTRACT
            112 BINARY_MULTIPLY
            114 LOAD_FAST                1 (x)
            116 COMPARE_OP               0 (<)
            118 POP_JUMP_IF_FALSE      128

 13         120 LOAD_FAST                3 (index)
            122 LOAD_CONST               2 (1)
            124 BINARY_SUBTRACT
            126 RETURN_VALUE

 14     >>  128 LOAD_FAST                3 (index)
            130 LOAD_FAST                3 (index)
            132 BINARY_MULTIPLY
            134 LOAD_FAST                1 (x)
            136 COMPARE_OP               4 (>)
            138 POP_JUMP_IF_FALSE      168

 15         140 LOAD_GLOBAL              0 (max)
            142 LOAD_FAST                2 (half)
            144 LOAD_CONST               3 (2)
            146 BINARY_FLOOR_DIVIDE
            148 LOAD_FAST                2 (half)
            150 LOAD_CONST               3 (2)
            152 BINARY_MODULO
            154 CALL_FUNCTION            2
            156 STORE_FAST               2 (half)

 16         158 LOAD_FAST                3 (index)
            160 LOAD_FAST                2 (half)
            162 INPLACE_SUBTRACT
            164 STORE_FAST               3 (index)
            166 JUMP_ABSOLUTE           36

 17     >>  168 LOAD_FAST                3 (index)
            170 LOAD_FAST                3 (index)
            172 BINARY_MULTIPLY
            174 LOAD_FAST                1 (x)
            176 COMPARE_OP               0 (<)
            178 POP_JUMP_IF_FALSE       36

 18         180 LOAD_GLOBAL              0 (max)
            182 LOAD_FAST                2 (half)
            184 LOAD_CONST               3 (2)
            186 BINARY_FLOOR_DIVIDE
            188 LOAD_FAST                2 (half)
            190 LOAD_CONST               3 (2)
            192 BINARY_MODULO
            194 CALL_FUNCTION            2
            196 STORE_FAST               2 (half)

 19         198 LOAD_FAST                3 (index)
            200 LOAD_FAST                2 (half)
            202 INPLACE_ADD
            204 STORE_FAST               3 (index)
            206 JUMP_ABSOLUTE           36
            208 LOAD_CONST               0 (None)
            210 RETURN_VALUE
None
"
mySqrt,"class Solution:    
    def mySqrt(self, x: int) -> int:
        return int((x ** (1/2)) // 1)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc823065450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc823065450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7fc8230653a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7fc8230653a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_FAST                1 (x)
              4 LOAD_CONST               1 (0.5)
              6 BINARY_POWER
              8 LOAD_CONST               2 (1)
             10 BINARY_FLOOR_DIVIDE
             12 CALL_FUNCTION            1
             14 RETURN_VALUE
None
"
mySqrt,"import math
class Solution:
    def mySqrt(self, x: int) -> int:
        result = math.sqrt(x)
        return int(result)","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7ff22adb55b0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff22adb55b0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7ff22adb5500, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7ff22adb5500, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (math)
              2 LOAD_METHOD              1 (sqrt)
              4 LOAD_FAST                1 (x)
              6 CALL_METHOD              1
              8 STORE_FAST               2 (result)

  5          10 LOAD_GLOBAL              2 (int)
             12 LOAD_FAST                2 (result)
             14 CALL_FUNCTION            1
             16 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:

        if x == 1 or x == 0:
            return x

        lower = 0
        upper = x//2 if x > 4 else x
        middle = (lower + upper +1)//2

        while True:
            if (middle * middle <= x) and ((middle + 1) * (middle + 1) > x) :
                break
            elif middle * middle > x:
                upper = middle
            elif (middle+1) * (middle+1) <= x:
                lower = middle
            middle = (lower + upper +1)//2
        return middle
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1678b852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1678b852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f1678b85240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f1678b85240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (x)
             10 LOAD_CONST               2 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  5     >>   16 LOAD_FAST                1 (x)
             18 RETURN_VALUE

  7     >>   20 LOAD_CONST               2 (0)
             22 STORE_FAST               2 (lower)

  8          24 LOAD_FAST                1 (x)
             26 LOAD_CONST               3 (4)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       40
             32 LOAD_FAST                1 (x)
             34 LOAD_CONST               4 (2)
             36 BINARY_FLOOR_DIVIDE
             38 JUMP_FORWARD             2 (to 42)
        >>   40 LOAD_FAST                1 (x)
        >>   42 STORE_FAST               3 (upper)

  9          44 LOAD_FAST                2 (lower)
             46 LOAD_FAST                3 (upper)
             48 BINARY_ADD
             50 LOAD_CONST               1 (1)
             52 BINARY_ADD
             54 LOAD_CONST               4 (2)
             56 BINARY_FLOOR_DIVIDE
             58 STORE_FAST               4 (middle)

 12     >>   60 LOAD_FAST                4 (middle)
             62 LOAD_FAST                4 (middle)
             64 BINARY_MULTIPLY
             66 LOAD_FAST                1 (x)
             68 COMPARE_OP               1 (<=)
             70 POP_JUMP_IF_FALSE       96
             72 LOAD_FAST                4 (middle)
             74 LOAD_CONST               1 (1)
             76 BINARY_ADD
             78 LOAD_FAST                4 (middle)
             80 LOAD_CONST               1 (1)
             82 BINARY_ADD
             84 BINARY_MULTIPLY
             86 LOAD_FAST                1 (x)
             88 COMPARE_OP               4 (>)
             90 POP_JUMP_IF_FALSE       96

 13          92 JUMP_ABSOLUTE          156
             94 JUMP_FORWARD            42 (to 138)

 14     >>   96 LOAD_FAST                4 (middle)
             98 LOAD_FAST                4 (middle)
            100 BINARY_MULTIPLY
            102 LOAD_FAST                1 (x)
            104 COMPARE_OP               4 (>)
            106 POP_JUMP_IF_FALSE      114

 15         108 LOAD_FAST                4 (middle)
            110 STORE_FAST               3 (upper)
            112 JUMP_FORWARD            24 (to 138)

 16     >>  114 LOAD_FAST                4 (middle)
            116 LOAD_CONST               1 (1)
            118 BINARY_ADD
            120 LOAD_FAST                4 (middle)
            122 LOAD_CONST               1 (1)
            124 BINARY_ADD
            126 BINARY_MULTIPLY
            128 LOAD_FAST                1 (x)
            130 COMPARE_OP               1 (<=)
            132 POP_JUMP_IF_FALSE      138

 17         134 LOAD_FAST                4 (middle)
            136 STORE_FAST               2 (lower)

 18     >>  138 LOAD_FAST                2 (lower)
            140 LOAD_FAST                3 (upper)
            142 BINARY_ADD
            144 LOAD_CONST               1 (1)
            146 BINARY_ADD
            148 LOAD_CONST               4 (2)
            150 BINARY_FLOOR_DIVIDE
            152 STORE_FAST               4 (middle)
            154 JUMP_ABSOLUTE           60

 19     >>  156 LOAD_FAST                4 (middle)
            158 RETURN_VALUE
None
"
mySqrt,"class Solution:
	def mySqrt(self, x: int) -> int:
		if x == 1:
			return 1

		lower = 0
		upper = x // 2 if x > 5 else x
		middle = (lower + upper) // 2

		while True:
			if middle * middle == x:
				return middle
			elif middle * middle > x:
				upper = middle
			else:
				lower = middle

			if (lower + upper) // 2 == middle:
				return middle
			middle = (lower + upper) // 2","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0096695240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0096695240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f00966952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f00966952f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (0)
             14 STORE_FAST               2 (lower)

  7          16 LOAD_FAST                1 (x)
             18 LOAD_CONST               3 (5)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       32
             24 LOAD_FAST                1 (x)
             26 LOAD_CONST               4 (2)
             28 BINARY_FLOOR_DIVIDE
             30 JUMP_FORWARD             2 (to 34)
        >>   32 LOAD_FAST                1 (x)
        >>   34 STORE_FAST               3 (upper)

  8          36 LOAD_FAST                2 (lower)
             38 LOAD_FAST                3 (upper)
             40 BINARY_ADD
             42 LOAD_CONST               4 (2)
             44 BINARY_FLOOR_DIVIDE
             46 STORE_FAST               4 (middle)

 11     >>   48 LOAD_FAST                4 (middle)
             50 LOAD_FAST                4 (middle)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                1 (x)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

 12          60 LOAD_FAST                4 (middle)
             62 RETURN_VALUE

 13     >>   64 LOAD_FAST                4 (middle)
             66 LOAD_FAST                4 (middle)
             68 BINARY_MULTIPLY
             70 LOAD_FAST                1 (x)
             72 COMPARE_OP               4 (>)
             74 POP_JUMP_IF_FALSE       82

 14          76 LOAD_FAST                4 (middle)
             78 STORE_FAST               3 (upper)
             80 JUMP_FORWARD             4 (to 86)

 16     >>   82 LOAD_FAST                4 (middle)
             84 STORE_FAST               2 (lower)

 18     >>   86 LOAD_FAST                2 (lower)
             88 LOAD_FAST                3 (upper)
             90 BINARY_ADD
             92 LOAD_CONST               4 (2)
             94 BINARY_FLOOR_DIVIDE
             96 LOAD_FAST                4 (middle)
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE      106

 19         102 LOAD_FAST                4 (middle)
            104 RETURN_VALUE

 20     >>  106 LOAD_FAST                2 (lower)
            108 LOAD_FAST                3 (upper)
            110 BINARY_ADD
            112 LOAD_CONST               4 (2)
            114 BINARY_FLOOR_DIVIDE
            116 STORE_FAST               4 (middle)
            118 JUMP_ABSOLUTE           48
            120 LOAD_CONST               0 (None)
            122 RETURN_VALUE
None
"
mySqrt,"from numpy import sqrt
class Solution:
    def mySqrt(self, x: int) -> int:
        return int(sqrt(x))
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('sqrt',))
              4 IMPORT_NAME              0 (numpy)
              6 IMPORT_FROM              1 (sqrt)
              8 STORE_NAME               1 (sqrt)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f245f7755b0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f245f7755b0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f245f775500, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f245f775500, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (sqrt)
              4 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1
              8 CALL_FUNCTION            1
             10 RETURN_VALUE
None
"
mySqrt,"class Solution:
    def mySqrt(self, x: int) -> int:
            i = 0
            while i <= x:
                if i*i == x:
                    return i
                elif i*i > x:
                    return i - 1
                i += 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7cf94f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7cf94f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object mySqrt at 0x7f7cf94f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.mySqrt')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (mySqrt)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object mySqrt at 0x7f7cf94f5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (i)

  4     >>    4 LOAD_FAST                2 (i)
              6 LOAD_FAST                1 (x)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       58

  5          12 LOAD_FAST                2 (i)
             14 LOAD_FAST                2 (i)
             16 BINARY_MULTIPLY
             18 LOAD_FAST                1 (x)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  6          24 LOAD_FAST                2 (i)
             26 RETURN_VALUE

  7     >>   28 LOAD_FAST                2 (i)
             30 LOAD_FAST                2 (i)
             32 BINARY_MULTIPLY
             34 LOAD_FAST                1 (x)
             36 COMPARE_OP               4 (>)
             38 POP_JUMP_IF_FALSE       48

  8          40 LOAD_FAST                2 (i)
             42 LOAD_CONST               2 (1)
             44 BINARY_SUBTRACT
             46 RETURN_VALUE

  9     >>   48 LOAD_FAST                2 (i)
             50 LOAD_CONST               2 (1)
             52 INPLACE_ADD
             54 STORE_FAST               2 (i)
             56 JUMP_ABSOLUTE            4
        >>   58 LOAD_CONST               0 (None)
             60 RETURN_VALUE
None
"
numIslands,"from typing import List
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
            count = 0
            for r,row in enumerate(grid):
                for c,col in enumerate(row):
                    if grid[r][c] == '1':
                        self.removeNeighbors(r,c,grid)
                        count += 1
            return count            
    def removeNeighbors(self, r ,c, grid):
        grid[r][c] = 0 
        # print(grid)   
        if r+1 < len(grid) and grid[r+1][c] == '1':
            self.removeNeighbors(r+1,c,grid)
        if c+1 < len(grid[0]) and grid[r][c+1] == '1':
            self.removeNeighbors(r,c+1,grid)    
        if r-1 >= 0 and grid[r-1][c] == '1':
            self.removeNeighbors(r-1,c,grid)
        if c-1 >= 0 and grid[r][c-1] == '1':
            self.removeNeighbors(r,c-1,grid)   
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f467cb453a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f467cb453a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f467cb45240, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 11          32 LOAD_CONST               4 (<code object removeNeighbors at 0x7f467cb452f0, file ""<ast>"", line 11>)
             34 LOAD_CONST               5 ('Solution.removeNeighbors')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (removeNeighbors)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f467cb45240, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (count)

  5           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                64 (to 78)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (r)
             18 STORE_FAST               4 (row)

  6          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                4 (row)
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER                46 (to 76)
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               5 (c)
             34 STORE_FAST               6 (col)

  7          36 LOAD_FAST                1 (grid)
             38 LOAD_FAST                3 (r)
             40 BINARY_SUBSCR
             42 LOAD_FAST                5 (c)
             44 BINARY_SUBSCR
             46 LOAD_CONST               2 ('1')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       28

  8          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              1 (removeNeighbors)
             56 LOAD_FAST                3 (r)
             58 LOAD_FAST                5 (c)
             60 LOAD_FAST                1 (grid)
             62 CALL_METHOD              3
             64 POP_TOP

  9          66 LOAD_FAST                2 (count)
             68 LOAD_CONST               3 (1)
             70 INPLACE_ADD
             72 STORE_FAST               2 (count)
             74 JUMP_ABSOLUTE           28
        >>   76 JUMP_ABSOLUTE           12

 10     >>   78 LOAD_FAST                2 (count)
             80 RETURN_VALUE

Disassembly of <code object removeNeighbors at 0x7f467cb452f0, file ""<ast>"", line 11>:
 12           0 LOAD_CONST               1 (0)
              2 LOAD_FAST                3 (grid)
              4 LOAD_FAST                1 (r)
              6 BINARY_SUBSCR
              8 LOAD_FAST                2 (c)
             10 STORE_SUBSCR

 14          12 LOAD_FAST                1 (r)
             14 LOAD_CONST               2 (1)
             16 BINARY_ADD
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                3 (grid)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       66
             28 LOAD_FAST                3 (grid)
             30 LOAD_FAST                1 (r)
             32 LOAD_CONST               2 (1)
             34 BINARY_ADD
             36 BINARY_SUBSCR
             38 LOAD_FAST                2 (c)
             40 BINARY_SUBSCR
             42 LOAD_CONST               3 ('1')
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       66

 15          48 LOAD_FAST                0 (self)
             50 LOAD_METHOD              1 (removeNeighbors)
             52 LOAD_FAST                1 (r)
             54 LOAD_CONST               2 (1)
             56 BINARY_ADD
             58 LOAD_FAST                2 (c)
             60 LOAD_FAST                3 (grid)
             62 CALL_METHOD              3
             64 POP_TOP

 16     >>   66 LOAD_FAST                2 (c)
             68 LOAD_CONST               2 (1)
             70 BINARY_ADD
             72 LOAD_GLOBAL              0 (len)
             74 LOAD_FAST                3 (grid)
             76 LOAD_CONST               1 (0)
             78 BINARY_SUBSCR
             80 CALL_FUNCTION            1
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE      124
             86 LOAD_FAST                3 (grid)
             88 LOAD_FAST                1 (r)
             90 BINARY_SUBSCR
             92 LOAD_FAST                2 (c)
             94 LOAD_CONST               2 (1)
             96 BINARY_ADD
             98 BINARY_SUBSCR
            100 LOAD_CONST               3 ('1')
            102 COMPARE_OP               2 (==)
            104 POP_JUMP_IF_FALSE      124

 17         106 LOAD_FAST                0 (self)
            108 LOAD_METHOD              1 (removeNeighbors)
            110 LOAD_FAST                1 (r)
            112 LOAD_FAST                2 (c)
            114 LOAD_CONST               2 (1)
            116 BINARY_ADD
            118 LOAD_FAST                3 (grid)
            120 CALL_METHOD              3
            122 POP_TOP

 18     >>  124 LOAD_FAST                1 (r)
            126 LOAD_CONST               2 (1)
            128 BINARY_SUBTRACT
            130 LOAD_CONST               1 (0)
            132 COMPARE_OP               5 (>=)
            134 POP_JUMP_IF_FALSE      174
            136 LOAD_FAST                3 (grid)
            138 LOAD_FAST                1 (r)
            140 LOAD_CONST               2 (1)
            142 BINARY_SUBTRACT
            144 BINARY_SUBSCR
            146 LOAD_FAST                2 (c)
            148 BINARY_SUBSCR
            150 LOAD_CONST               3 ('1')
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      174

 19         156 LOAD_FAST                0 (self)
            158 LOAD_METHOD              1 (removeNeighbors)
            160 LOAD_FAST                1 (r)
            162 LOAD_CONST               2 (1)
            164 BINARY_SUBTRACT
            166 LOAD_FAST                2 (c)
            168 LOAD_FAST                3 (grid)
            170 CALL_METHOD              3
            172 POP_TOP

 20     >>  174 LOAD_FAST                2 (c)
            176 LOAD_CONST               2 (1)
            178 BINARY_SUBTRACT
            180 LOAD_CONST               1 (0)
            182 COMPARE_OP               5 (>=)
            184 POP_JUMP_IF_FALSE      224
            186 LOAD_FAST                3 (grid)
            188 LOAD_FAST                1 (r)
            190 BINARY_SUBSCR
            192 LOAD_FAST                2 (c)
            194 LOAD_CONST               2 (1)
            196 BINARY_SUBTRACT
            198 BINARY_SUBSCR
            200 LOAD_CONST               3 ('1')
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      224

 21         206 LOAD_FAST                0 (self)
            208 LOAD_METHOD              1 (removeNeighbors)
            210 LOAD_FAST                1 (r)
            212 LOAD_FAST                2 (c)
            214 LOAD_CONST               2 (1)
            216 BINARY_SUBTRACT
            218 LOAD_FAST                3 (grid)
            220 CALL_METHOD              3
            222 POP_TOP
        >>  224 LOAD_CONST               0 (None)
            226 RETURN_VALUE
None
"
numIslands,"# python BFS code

class Solution(object):
    def numIslands(self, grid):
        """"""
        :type grid: List[List[str]]
        :rtype: int
        """""" 
        ans = 0
        for r0, row in enumerate(grid):
            for c0, val in enumerate(row):
                if val==""1"":
                    stack = [(r0, c0)]
                    ans=ans+1
                    while stack:
                        r, c = stack.pop()
                        
                        if (0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c]==""1"") :
                    
                            
                            
                            grid[r][c]=""0""
                            p=[(r,c-1),(r,c+1),(r-1,c),(r+1,c)]
                            stack+=p
                    #ans+=1
                            
        return ans
        
","  3           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd0358352f0, file ""<ast>"", line 3>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 LOAD_NAME                0 (object)
             12 CALL_FUNCTION            3
             14 STORE_NAME               1 (Solution)
             16 LOAD_CONST               2 (None)
             18 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd0358352f0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_CONST               1 (<code object numIslands at 0x7fd035835240, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.numIslands')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numIslands)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fd035835240, file ""<ast>"", line 4>:
  9           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (ans)

 10           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER               210 (to 224)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (r0)
             18 STORE_FAST               4 (row)

 11          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                4 (row)
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER               192 (to 222)
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               5 (c0)
             34 STORE_FAST               6 (val)

 12          36 LOAD_FAST                6 (val)
             38 LOAD_CONST               2 ('1')
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       28

 13          44 LOAD_FAST                3 (r0)
             46 LOAD_FAST                5 (c0)
             48 BUILD_TUPLE              2
             50 BUILD_LIST               1
             52 STORE_FAST               7 (stack)

 14          54 LOAD_FAST                2 (ans)
             56 LOAD_CONST               3 (1)
             58 BINARY_ADD
             60 STORE_FAST               2 (ans)

 15     >>   62 LOAD_FAST                7 (stack)
             64 POP_JUMP_IF_FALSE       28

 16          66 LOAD_FAST                7 (stack)
             68 LOAD_METHOD              1 (pop)
             70 CALL_METHOD              0
             72 UNPACK_SEQUENCE          2
             74 STORE_FAST               8 (r)
             76 STORE_FAST               9 (c)

 18          78 LOAD_CONST               1 (0)
             80 LOAD_FAST                8 (r)
             82 DUP_TOP
             84 ROT_THREE
             86 COMPARE_OP               1 (<=)
             88 POP_JUMP_IF_FALSE      102
             90 LOAD_GLOBAL              2 (len)
             92 LOAD_FAST                1 (grid)
             94 CALL_FUNCTION            1
             96 COMPARE_OP               0 (<)
             98 POP_JUMP_IF_FALSE       62
            100 JUMP_FORWARD             4 (to 106)
        >>  102 POP_TOP
            104 JUMP_ABSOLUTE           62
        >>  106 LOAD_CONST               1 (0)
            108 LOAD_FAST                9 (c)
            110 DUP_TOP
            112 ROT_THREE
            114 COMPARE_OP               1 (<=)
            116 POP_JUMP_IF_FALSE      134
            118 LOAD_GLOBAL              2 (len)
            120 LOAD_FAST                1 (grid)
            122 LOAD_CONST               1 (0)
            124 BINARY_SUBSCR
            126 CALL_FUNCTION            1
            128 COMPARE_OP               0 (<)
            130 POP_JUMP_IF_FALSE       62
            132 JUMP_FORWARD             4 (to 138)
        >>  134 POP_TOP
            136 JUMP_ABSOLUTE           62
        >>  138 LOAD_FAST                1 (grid)
            140 LOAD_FAST                8 (r)
            142 BINARY_SUBSCR
            144 LOAD_FAST                9 (c)
            146 BINARY_SUBSCR
            148 LOAD_CONST               2 ('1')
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE       62

 22         154 LOAD_CONST               4 ('0')
            156 LOAD_FAST                1 (grid)
            158 LOAD_FAST                8 (r)
            160 BINARY_SUBSCR
            162 LOAD_FAST                9 (c)
            164 STORE_SUBSCR

 23         166 LOAD_FAST                8 (r)
            168 LOAD_FAST                9 (c)
            170 LOAD_CONST               3 (1)
            172 BINARY_SUBTRACT
            174 BUILD_TUPLE              2
            176 LOAD_FAST                8 (r)
            178 LOAD_FAST                9 (c)
            180 LOAD_CONST               3 (1)
            182 BINARY_ADD
            184 BUILD_TUPLE              2
            186 LOAD_FAST                8 (r)
            188 LOAD_CONST               3 (1)
            190 BINARY_SUBTRACT
            192 LOAD_FAST                9 (c)
            194 BUILD_TUPLE              2
            196 LOAD_FAST                8 (r)
            198 LOAD_CONST               3 (1)
            200 BINARY_ADD
            202 LOAD_FAST                9 (c)
            204 BUILD_TUPLE              2
            206 BUILD_LIST               4
            208 STORE_FAST              10 (p)

 24         210 LOAD_FAST                7 (stack)
            212 LOAD_FAST               10 (p)
            214 INPLACE_ADD
            216 STORE_FAST               7 (stack)
            218 JUMP_ABSOLUTE           62
            220 JUMP_ABSOLUTE           28
        >>  222 JUMP_ABSOLUTE           12

 27     >>  224 LOAD_FAST                2 (ans)
            226 RETURN_VALUE
None
"
numIslands,"class Solution:
    def countIslands(self, grid: List[List[str]], row, col) -> None:
        if(row in [-1, len(grid)] or col in [-1, len(grid[0])] or grid[row][col] == ""0""):
            return
        grid[row][col] = ""0""
        self.countIslands(grid, row, col-1)
        self.countIslands(grid, row-1, col)
        self.countIslands(grid, row, col+1)
        self.countIslands(grid, row+1, col)
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] == ""1"":
                    count += 1
                    self.countIslands(grid, row, col)
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4c44d153a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4c44d153a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object countIslands at 0x7f4c44d15240, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.countIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (countIslands)

 12          32 LOAD_NAME                3 (List)
             34 LOAD_NAME                3 (List)
             36 LOAD_NAME                4 (str)
             38 BINARY_SUBSCR
             40 BINARY_SUBSCR
             42 LOAD_NAME                6 (int)
             44 LOAD_CONST               2 (('grid', 'return'))
             46 BUILD_CONST_KEY_MAP      2
             48 LOAD_CONST               5 (<code object numIslands at 0x7f4c44d152f0, file ""<ast>"", line 12>)
             50 LOAD_CONST               6 ('Solution.numIslands')
             52 MAKE_FUNCTION            4 (annotations)
             54 STORE_NAME               7 (numIslands)
             56 LOAD_CONST               1 (None)
             58 RETURN_VALUE

Disassembly of <code object countIslands at 0x7f4c44d15240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (row)
              2 LOAD_CONST               1 (-1)
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 BUILD_TUPLE              2
             12 COMPARE_OP               6 (in)
             14 POP_JUMP_IF_TRUE        52
             16 LOAD_FAST                3 (col)
             18 LOAD_CONST               1 (-1)
             20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               2 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 BUILD_TUPLE              2
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_TRUE        52
             36 LOAD_FAST                1 (grid)
             38 LOAD_FAST                2 (row)
             40 BINARY_SUBSCR
             42 LOAD_FAST                3 (col)
             44 BINARY_SUBSCR
             46 LOAD_CONST               3 ('0')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       56

  4     >>   52 LOAD_CONST               0 (None)
             54 RETURN_VALUE

  5     >>   56 LOAD_CONST               3 ('0')
             58 LOAD_FAST                1 (grid)
             60 LOAD_FAST                2 (row)
             62 BINARY_SUBSCR
             64 LOAD_FAST                3 (col)
             66 STORE_SUBSCR

  6          68 LOAD_FAST                0 (self)
             70 LOAD_METHOD              1 (countIslands)
             72 LOAD_FAST                1 (grid)
             74 LOAD_FAST                2 (row)
             76 LOAD_FAST                3 (col)
             78 LOAD_CONST               4 (1)
             80 BINARY_SUBTRACT
             82 CALL_METHOD              3
             84 POP_TOP

  7          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              1 (countIslands)
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                2 (row)
             94 LOAD_CONST               4 (1)
             96 BINARY_SUBTRACT
             98 LOAD_FAST                3 (col)
            100 CALL_METHOD              3
            102 POP_TOP

  8         104 LOAD_FAST                0 (self)
            106 LOAD_METHOD              1 (countIslands)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                2 (row)
            112 LOAD_FAST                3 (col)
            114 LOAD_CONST               4 (1)
            116 BINARY_ADD
            118 CALL_METHOD              3
            120 POP_TOP

  9         122 LOAD_FAST                0 (self)
            124 LOAD_METHOD              1 (countIslands)
            126 LOAD_FAST                1 (grid)
            128 LOAD_FAST                2 (row)
            130 LOAD_CONST               4 (1)
            132 BINARY_ADD
            134 LOAD_FAST                3 (col)
            136 CALL_METHOD              3
            138 POP_TOP

 10         140 LOAD_CONST               0 (None)
            142 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f4c44d152f0, file ""<ast>"", line 12>:
 13           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (count)

 14           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (grid)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                64 (to 82)
             18 STORE_FAST               3 (row)

 15          20 LOAD_GLOBAL              0 (range)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                1 (grid)
             26 LOAD_CONST               1 (0)
             28 BINARY_SUBSCR
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                42 (to 80)
             38 STORE_FAST               4 (col)

 16          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (row)
             44 BINARY_SUBSCR
             46 LOAD_FAST                4 (col)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       36

 17          56 LOAD_FAST                2 (count)
             58 LOAD_CONST               3 (1)
             60 INPLACE_ADD
             62 STORE_FAST               2 (count)

 18          64 LOAD_FAST                0 (self)
             66 LOAD_METHOD              2 (countIslands)
             68 LOAD_FAST                1 (grid)
             70 LOAD_FAST                3 (row)
             72 LOAD_FAST                4 (col)
             74 CALL_METHOD              3
             76 POP_TOP
             78 JUMP_ABSOLUTE           36
        >>   80 JUMP_ABSOLUTE           16

 19     >>   82 LOAD_FAST                2 (count)
             84 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        total_islands = 0
        def recursive_islands(grid, m, n):
            if grid[m][n] == '0':
                return 
            
            grid[m][n] = '0'
            if m-1 >= 0:
                recursive_islands(grid, m-1,n)
            if m+1<len(grid):
                recursive_islands(grid, m+1, n)
            if n-1 >= 0:
                recursive_islands(grid, m, n-1)
            if n+1 < len(grid[0]):
                recursive_islands(grid, m, n+1)
                
            
        
        for i in range(0, len(grid)):
            for j in range(0, len(grid[0])):
                if grid[i][j] == '1':
                    #then we go into recursion to mark everything 0
                    recursive_islands(grid, i, j)
                    total_islands+=1
                else:
                    continue
        
        return total_islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f04567052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f04567052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f04567053a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f04567053a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (total_islands)

  4           4 LOAD_CLOSURE             0 (recursive_islands)
              6 BUILD_TUPLE              1
              8 LOAD_CONST               2 (<code object recursive_islands at 0x7f0456705240, file ""<ast>"", line 4>)
             10 LOAD_CONST               3 ('Solution.numIslands.<locals>.recursive_islands')
             12 MAKE_FUNCTION            8 (closure)
             14 STORE_DEREF              0 (recursive_islands)

 20          16 LOAD_GLOBAL              0 (range)
             18 LOAD_CONST               1 (0)
             20 LOAD_GLOBAL              1 (len)
             22 LOAD_FAST                1 (grid)
             24 CALL_FUNCTION            1
             26 CALL_FUNCTION            2
             28 GET_ITER
        >>   30 FOR_ITER                68 (to 100)
             32 STORE_FAST               3 (i)

 21          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               1 (0)
             38 LOAD_GLOBAL              1 (len)
             40 LOAD_FAST                1 (grid)
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 CALL_FUNCTION            1
             48 CALL_FUNCTION            2
             50 GET_ITER
        >>   52 FOR_ITER                44 (to 98)
             54 STORE_FAST               4 (j)

 22          56 LOAD_FAST                1 (grid)
             58 LOAD_FAST                3 (i)
             60 BINARY_SUBSCR
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_CONST               4 ('1')
             68 COMPARE_OP               2 (==)
             70 POP_JUMP_IF_FALSE       52

 24          72 LOAD_DEREF               0 (recursive_islands)
             74 LOAD_FAST                1 (grid)
             76 LOAD_FAST                3 (i)
             78 LOAD_FAST                4 (j)
             80 CALL_FUNCTION            3
             82 POP_TOP

 25          84 LOAD_FAST                2 (total_islands)
             86 LOAD_CONST               5 (1)
             88 INPLACE_ADD
             90 STORE_FAST               2 (total_islands)
             92 JUMP_ABSOLUTE           52

 27          94 JUMP_ABSOLUTE           52
             96 JUMP_ABSOLUTE           52
        >>   98 JUMP_ABSOLUTE           30

 29     >>  100 LOAD_FAST                2 (total_islands)
            102 RETURN_VALUE

Disassembly of <code object recursive_islands at 0x7f0456705240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                0 (grid)
              2 LOAD_FAST                1 (m)
              4 BINARY_SUBSCR
              6 LOAD_FAST                2 (n)
              8 BINARY_SUBSCR
             10 LOAD_CONST               1 ('0')
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  6          16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

  8     >>   20 LOAD_CONST               1 ('0')
             22 LOAD_FAST                0 (grid)
             24 LOAD_FAST                1 (m)
             26 BINARY_SUBSCR
             28 LOAD_FAST                2 (n)
             30 STORE_SUBSCR

  9          32 LOAD_FAST                1 (m)
             34 LOAD_CONST               2 (1)
             36 BINARY_SUBTRACT
             38 LOAD_CONST               3 (0)
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_FALSE       60

 10          44 LOAD_DEREF               0 (recursive_islands)
             46 LOAD_FAST                0 (grid)
             48 LOAD_FAST                1 (m)
             50 LOAD_CONST               2 (1)
             52 BINARY_SUBTRACT
             54 LOAD_FAST                2 (n)
             56 CALL_FUNCTION            3
             58 POP_TOP

 11     >>   60 LOAD_FAST                1 (m)
             62 LOAD_CONST               2 (1)
             64 BINARY_ADD
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                0 (grid)
             70 CALL_FUNCTION            1
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE       92

 12          76 LOAD_DEREF               0 (recursive_islands)
             78 LOAD_FAST                0 (grid)
             80 LOAD_FAST                1 (m)
             82 LOAD_CONST               2 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (n)
             88 CALL_FUNCTION            3
             90 POP_TOP

 13     >>   92 LOAD_FAST                2 (n)
             94 LOAD_CONST               2 (1)
             96 BINARY_SUBTRACT
             98 LOAD_CONST               3 (0)
            100 COMPARE_OP               5 (>=)
            102 POP_JUMP_IF_FALSE      120

 14         104 LOAD_DEREF               0 (recursive_islands)
            106 LOAD_FAST                0 (grid)
            108 LOAD_FAST                1 (m)
            110 LOAD_FAST                2 (n)
            112 LOAD_CONST               2 (1)
            114 BINARY_SUBTRACT
            116 CALL_FUNCTION            3
            118 POP_TOP

 15     >>  120 LOAD_FAST                2 (n)
            122 LOAD_CONST               2 (1)
            124 BINARY_ADD
            126 LOAD_GLOBAL              0 (len)
            128 LOAD_FAST                0 (grid)
            130 LOAD_CONST               3 (0)
            132 BINARY_SUBSCR
            134 CALL_FUNCTION            1
            136 COMPARE_OP               0 (<)
            138 POP_JUMP_IF_FALSE      156

 16         140 LOAD_DEREF               0 (recursive_islands)
            142 LOAD_FAST                0 (grid)
            144 LOAD_FAST                1 (m)
            146 LOAD_FAST                2 (n)
            148 LOAD_CONST               2 (1)
            150 BINARY_ADD
            152 CALL_FUNCTION            3
            154 POP_TOP
        >>  156 LOAD_CONST               0 (None)
            158 RETURN_VALUE
None
"
numIslands,"class Solution:
	def numIslands(self, grid: List[List[str]]) -> int:

		island_count = 0

		for i, _ in enumerate(grid):
			for j, _ in enumerate(grid[i]):
				if grid[i][j] == '1':
					self.dfs(i, j, grid)
					island_count += 1

		return island_count


	def dfs(self, i, j, grid):

		if i < 0 or i >= len(grid):
			return

		if j < 0 or j >= len(grid[0]):
			return

		if grid[i][j] == '0':
			return

		grid[i][j] = '0'

		self.dfs(i - 1, j, grid)
		self.dfs(i + 1, j, grid)
		self.dfs(i, j - 1, grid)
		self.dfs(i, j + 1, grid)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f983c7853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f983c7853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f983c785240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 15          32 LOAD_CONST               4 (<code object dfs at 0x7f983c7852f0, file ""<ast>"", line 15>)
             34 LOAD_CONST               5 ('Solution.dfs')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (dfs)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f983c785240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (island_count)

  6           4 LOAD_GLOBAL              0 (enumerate)
              6 LOAD_FAST                1 (grid)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                68 (to 82)
             14 UNPACK_SEQUENCE          2
             16 STORE_FAST               3 (i)
             18 STORE_FAST               4 (_)

  7          20 LOAD_GLOBAL              0 (enumerate)
             22 LOAD_FAST                1 (grid)
             24 LOAD_FAST                3 (i)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                46 (to 80)
             34 UNPACK_SEQUENCE          2
             36 STORE_FAST               5 (j)
             38 STORE_FAST               4 (_)

  8          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                5 (j)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       32

  9          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (dfs)
             60 LOAD_FAST                3 (i)
             62 LOAD_FAST                5 (j)
             64 LOAD_FAST                1 (grid)
             66 CALL_METHOD              3
             68 POP_TOP

 10          70 LOAD_FAST                2 (island_count)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               2 (island_count)
             78 JUMP_ABSOLUTE           32
        >>   80 JUMP_ABSOLUTE           12

 12     >>   82 LOAD_FAST                2 (island_count)
             84 RETURN_VALUE

Disassembly of <code object dfs at 0x7f983c7852f0, file ""<ast>"", line 15>:
 17           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        20
              8 LOAD_FAST                1 (i)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                3 (grid)
             14 CALL_FUNCTION            1
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       24

 18     >>   20 LOAD_CONST               0 (None)
             22 RETURN_VALUE

 20     >>   24 LOAD_FAST                2 (j)
             26 LOAD_CONST               1 (0)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_TRUE        48
             32 LOAD_FAST                2 (j)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                3 (grid)
             38 LOAD_CONST               1 (0)
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 COMPARE_OP               5 (>=)
             46 POP_JUMP_IF_FALSE       52

 21     >>   48 LOAD_CONST               0 (None)
             50 RETURN_VALUE

 23     >>   52 LOAD_FAST                3 (grid)
             54 LOAD_FAST                1 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (j)
             60 BINARY_SUBSCR
             62 LOAD_CONST               2 ('0')
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       72

 24          68 LOAD_CONST               0 (None)
             70 RETURN_VALUE

 26     >>   72 LOAD_CONST               2 ('0')
             74 LOAD_FAST                3 (grid)
             76 LOAD_FAST                1 (i)
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (j)
             82 STORE_SUBSCR

 28          84 LOAD_FAST                0 (self)
             86 LOAD_METHOD              1 (dfs)
             88 LOAD_FAST                1 (i)
             90 LOAD_CONST               3 (1)
             92 BINARY_SUBTRACT
             94 LOAD_FAST                2 (j)
             96 LOAD_FAST                3 (grid)
             98 CALL_METHOD              3
            100 POP_TOP

 29         102 LOAD_FAST                0 (self)
            104 LOAD_METHOD              1 (dfs)
            106 LOAD_FAST                1 (i)
            108 LOAD_CONST               3 (1)
            110 BINARY_ADD
            112 LOAD_FAST                2 (j)
            114 LOAD_FAST                3 (grid)
            116 CALL_METHOD              3
            118 POP_TOP

 30         120 LOAD_FAST                0 (self)
            122 LOAD_METHOD              1 (dfs)
            124 LOAD_FAST                1 (i)
            126 LOAD_FAST                2 (j)
            128 LOAD_CONST               3 (1)
            130 BINARY_SUBTRACT
            132 LOAD_FAST                3 (grid)
            134 CALL_METHOD              3
            136 POP_TOP

 31         138 LOAD_FAST                0 (self)
            140 LOAD_METHOD              1 (dfs)
            142 LOAD_FAST                1 (i)
            144 LOAD_FAST                2 (j)
            146 LOAD_CONST               3 (1)
            148 BINARY_ADD
            150 LOAD_FAST                3 (grid)
            152 CALL_METHOD              3
            154 POP_TOP
            156 LOAD_CONST               0 (None)
            158 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        #如果是 grid 为空，返回 0
        if not grid: return 0
        row, col,island = len(grid), len(grid[0]), 0
        
        # dfs 用循环或者递归，找到一格island之后，将其改成 water，然后沿着四个方向继续做 dfs 检查
        def dfs(x,y):
            if x in range(row) and y in range(col) and grid[x][y]==""1"":
                grid[x][y] = 0
                list(map(dfs,(x+1,x-1,x,x),(y,y,y+1,y-1))) 
                return 1 
# ***找到一格 island，返回 一个 1，但是只有最后的一个格子返回的 1 才会被 nested loop 记录在list里求sum***
            return 0 #如果是 water 或者超界返回 0
        
        # Nested loop 必须放在 list 里, 对返回值 1，island 的个数求和
        return sum([dfs(i,j) for i in range(row) for j in range(col)])
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6fb7ba5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6fb7ba5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f6fb7ba53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f6fb7ba53a0, file ""<ast>"", line 2>:
  4           0 LOAD_DEREF               2 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               2 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               2 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 LOAD_CONST               1 (0)
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_DEREF              3 (row)
             32 STORE_DEREF              0 (col)
             34 STORE_FAST               2 (island)

  8          36 LOAD_CLOSURE             0 (col)
             38 LOAD_CLOSURE             1 (dfs)
             40 LOAD_CLOSURE             2 (grid)
             42 LOAD_CLOSURE             3 (row)
             44 BUILD_TUPLE              4
             46 LOAD_CONST               2 (<code object dfs at 0x7f6fb7ba52f0, file ""<ast>"", line 8>)
             48 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             50 MAKE_FUNCTION            8 (closure)
             52 STORE_DEREF              1 (dfs)

 17          54 LOAD_GLOBAL              1 (sum)
             56 LOAD_CLOSURE             0 (col)
             58 LOAD_CLOSURE             1 (dfs)
             60 BUILD_TUPLE              2
             62 LOAD_CONST               4 (<code object <listcomp> at 0x7f6fb7ba5240, file ""<ast>"", line 17>)
             64 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
             66 MAKE_FUNCTION            8 (closure)
             68 LOAD_GLOBAL              2 (range)
             70 LOAD_DEREF               3 (row)
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 CALL_FUNCTION            1
             80 RETURN_VALUE

Disassembly of <code object dfs at 0x7f6fb7ba52f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (x)
              2 LOAD_GLOBAL              0 (range)
              4 LOAD_DEREF               3 (row)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_FALSE      104
             12 LOAD_FAST                1 (y)
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (col)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE      104
             24 LOAD_DEREF               2 (grid)
             26 LOAD_FAST                0 (x)
             28 BINARY_SUBSCR
             30 LOAD_FAST                1 (y)
             32 BINARY_SUBSCR
             34 LOAD_CONST               1 ('1')
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE      104

 10          40 LOAD_CONST               2 (0)
             42 LOAD_DEREF               2 (grid)
             44 LOAD_FAST                0 (x)
             46 BINARY_SUBSCR
             48 LOAD_FAST                1 (y)
             50 STORE_SUBSCR

 11          52 LOAD_GLOBAL              1 (list)
             54 LOAD_GLOBAL              2 (map)
             56 LOAD_DEREF               1 (dfs)
             58 LOAD_FAST                0 (x)
             60 LOAD_CONST               3 (1)
             62 BINARY_ADD
             64 LOAD_FAST                0 (x)
             66 LOAD_CONST               3 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                0 (x)
             72 LOAD_FAST                0 (x)
             74 BUILD_TUPLE              4
             76 LOAD_FAST                1 (y)
             78 LOAD_FAST                1 (y)
             80 LOAD_FAST                1 (y)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                1 (y)
             88 LOAD_CONST               3 (1)
             90 BINARY_SUBTRACT
             92 BUILD_TUPLE              4
             94 CALL_FUNCTION            3
             96 CALL_FUNCTION            1
             98 POP_TOP

 12         100 LOAD_CONST               3 (1)
            102 RETURN_VALUE

 14     >>  104 LOAD_CONST               2 (0)
            106 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f6fb7ba5240, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (range)
             10 LOAD_DEREF               0 (col)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                14 (to 32)
             18 STORE_FAST               2 (j)
             20 LOAD_DEREF               1 (dfs)
             22 LOAD_FAST                1 (i)
             24 LOAD_FAST                2 (j)
             26 CALL_FUNCTION            2
             28 LIST_APPEND              3
             30 JUMP_ABSOLUTE           16
        >>   32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        #如果是 grid 为空，返回 0
        if not grid: return 0
        row, col,island = len(grid), len(grid[0]), 0
        
        # dfs 用循环或者递归，找到一格island之后，将其改成 water，然后沿着四个方向继续做 dfs 检查
        def dfs(x,y):
            if x in range(row) and y in range(col) and grid[x][y]==""1"":
                grid[x][y] = 0
                list(map(dfs,(x+1,x-1,x,x),(y,y,y+1,y-1)))
                
        for i in range(row):
            for j in range(col):
                if grid[i][j]==""1"":
                    island +=1 #双循环遍历 grid, 如果发现了一个格子的 island，计数器 + 1，消去跟它相邻的
                    dfs(i,j)
                
        return island        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f59fad65240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f59fad65240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f59fad653a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f59fad653a0, file ""<ast>"", line 2>:
  4           0 LOAD_DEREF               2 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               2 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               2 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 LOAD_CONST               1 (0)
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_DEREF              3 (row)
             32 STORE_DEREF              0 (col)
             34 STORE_FAST               2 (island)

  8          36 LOAD_CLOSURE             0 (col)
             38 LOAD_CLOSURE             1 (dfs)
             40 LOAD_CLOSURE             2 (grid)
             42 LOAD_CLOSURE             3 (row)
             44 BUILD_TUPLE              4
             46 LOAD_CONST               2 (<code object dfs at 0x7f59fad652f0, file ""<ast>"", line 8>)
             48 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             50 MAKE_FUNCTION            8 (closure)
             52 STORE_DEREF              1 (dfs)

 13          54 LOAD_GLOBAL              1 (range)
             56 LOAD_DEREF               3 (row)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER                52 (to 116)
             64 STORE_FAST               3 (i)

 14          66 LOAD_GLOBAL              1 (range)
             68 LOAD_DEREF               0 (col)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                38 (to 114)
             76 STORE_FAST               4 (j)

 15          78 LOAD_DEREF               2 (grid)
             80 LOAD_FAST                3 (i)
             82 BINARY_SUBSCR
             84 LOAD_FAST                4 (j)
             86 BINARY_SUBSCR
             88 LOAD_CONST               4 ('1')
             90 COMPARE_OP               2 (==)
             92 POP_JUMP_IF_FALSE       74

 16          94 LOAD_FAST                2 (island)
             96 LOAD_CONST               5 (1)
             98 INPLACE_ADD
            100 STORE_FAST               2 (island)

 17         102 LOAD_DEREF               1 (dfs)
            104 LOAD_FAST                3 (i)
            106 LOAD_FAST                4 (j)
            108 CALL_FUNCTION            2
            110 POP_TOP
            112 JUMP_ABSOLUTE           74
        >>  114 JUMP_ABSOLUTE           62

 19     >>  116 LOAD_FAST                2 (island)
            118 RETURN_VALUE

Disassembly of <code object dfs at 0x7f59fad652f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (x)
              2 LOAD_GLOBAL              0 (range)
              4 LOAD_DEREF               3 (row)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_FALSE      100
             12 LOAD_FAST                1 (y)
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (col)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE      100
             24 LOAD_DEREF               2 (grid)
             26 LOAD_FAST                0 (x)
             28 BINARY_SUBSCR
             30 LOAD_FAST                1 (y)
             32 BINARY_SUBSCR
             34 LOAD_CONST               1 ('1')
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE      100

 10          40 LOAD_CONST               2 (0)
             42 LOAD_DEREF               2 (grid)
             44 LOAD_FAST                0 (x)
             46 BINARY_SUBSCR
             48 LOAD_FAST                1 (y)
             50 STORE_SUBSCR

 11          52 LOAD_GLOBAL              1 (list)
             54 LOAD_GLOBAL              2 (map)
             56 LOAD_DEREF               1 (dfs)
             58 LOAD_FAST                0 (x)
             60 LOAD_CONST               3 (1)
             62 BINARY_ADD
             64 LOAD_FAST                0 (x)
             66 LOAD_CONST               3 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                0 (x)
             72 LOAD_FAST                0 (x)
             74 BUILD_TUPLE              4
             76 LOAD_FAST                1 (y)
             78 LOAD_FAST                1 (y)
             80 LOAD_FAST                1 (y)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                1 (y)
             88 LOAD_CONST               3 (1)
             90 BINARY_SUBTRACT
             92 BUILD_TUPLE              4
             94 CALL_FUNCTION            3
             96 CALL_FUNCTION            1
             98 POP_TOP
        >>  100 LOAD_CONST               0 (None)
            102 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        
        rows = len(grid)
        cols = len(grid[0])
		
		# Our helper will take a location on an island and subsequently 
		# update all values of that island to mark it has already been counted.
        def helper(row, col, grid):
		    # Ensure we're in the grid and we're on an unexplored island location ('1') otherwise return (stop the search)
            if row > rows-1 or row < 0 or col > cols-1 or col < 0 or grid[row][col] != '1':
                return
			# If we're in a vald location update the value to mark it's been explored and accounted for.
            grid[row][col] = '#'
			# Continue search in adjacent cells.
            helper(row+1, col, grid)
            helper(row-1, col, grid)        
            helper(row, col+1, grid)
            helper(row, col-1, grid)
		
		# Keep count of the '1' s that we find, which will be the number of islands.
        cnt = 0    
        for row in range(len(grid)):
            for col in range(len(grid[0])):
			    # If we find a location on an island we'll start our DFS and count the island.
                if grid[row][col] == '1':
                    helper(row, col, grid)
                    cnt += 1
                    
        return cnt
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fba68cc5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fba68cc5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fba68cc5500, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fba68cc5500, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 STORE_DEREF              2 (rows)

  6          16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                1 (grid)
             20 LOAD_CONST               1 (0)
             22 BINARY_SUBSCR
             24 CALL_FUNCTION            1
             26 STORE_DEREF              0 (cols)

 10          28 LOAD_CLOSURE             0 (cols)
             30 LOAD_CLOSURE             1 (helper)
             32 LOAD_CLOSURE             2 (rows)
             34 BUILD_TUPLE              3
             36 LOAD_CONST               2 (<code object helper at 0x7fba68cc53a0, file ""<ast>"", line 10>)
             38 LOAD_CONST               3 ('Solution.numIslands.<locals>.helper')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_DEREF              1 (helper)

 23          44 LOAD_CONST               1 (0)
             46 STORE_FAST               2 (cnt)

 24          48 LOAD_GLOBAL              1 (range)
             50 LOAD_GLOBAL              0 (len)
             52 LOAD_FAST                1 (grid)
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                62 (to 124)
             62 STORE_FAST               3 (row)

 25          64 LOAD_GLOBAL              1 (range)
             66 LOAD_GLOBAL              0 (len)
             68 LOAD_FAST                1 (grid)
             70 LOAD_CONST               1 (0)
             72 BINARY_SUBSCR
             74 CALL_FUNCTION            1
             76 CALL_FUNCTION            1
             78 GET_ITER
        >>   80 FOR_ITER                40 (to 122)
             82 STORE_FAST               4 (col)

 27          84 LOAD_FAST                1 (grid)
             86 LOAD_FAST                3 (row)
             88 BINARY_SUBSCR
             90 LOAD_FAST                4 (col)
             92 BINARY_SUBSCR
             94 LOAD_CONST               4 ('1')
             96 COMPARE_OP               2 (==)
             98 POP_JUMP_IF_FALSE       80

 28         100 LOAD_DEREF               1 (helper)
            102 LOAD_FAST                3 (row)
            104 LOAD_FAST                4 (col)
            106 LOAD_FAST                1 (grid)
            108 CALL_FUNCTION            3
            110 POP_TOP

 29         112 LOAD_FAST                2 (cnt)
            114 LOAD_CONST               5 (1)
            116 INPLACE_ADD
            118 STORE_FAST               2 (cnt)
            120 JUMP_ABSOLUTE           80
        >>  122 JUMP_ABSOLUTE           60

 31     >>  124 LOAD_FAST                2 (cnt)
            126 RETURN_VALUE

Disassembly of <code object helper at 0x7fba68cc53a0, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                0 (row)
              2 LOAD_DEREF               2 (rows)
              4 LOAD_CONST               1 (1)
              6 BINARY_SUBTRACT
              8 COMPARE_OP               4 (>)
             10 POP_JUMP_IF_TRUE        56
             12 LOAD_FAST                0 (row)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_TRUE        56
             20 LOAD_FAST                1 (col)
             22 LOAD_DEREF               0 (cols)
             24 LOAD_CONST               1 (1)
             26 BINARY_SUBTRACT
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_TRUE        56
             32 LOAD_FAST                1 (col)
             34 LOAD_CONST               2 (0)
             36 COMPARE_OP               0 (<)
             38 POP_JUMP_IF_TRUE        56
             40 LOAD_FAST                2 (grid)
             42 LOAD_FAST                0 (row)
             44 BINARY_SUBSCR
             46 LOAD_FAST                1 (col)
             48 BINARY_SUBSCR
             50 LOAD_CONST               3 ('1')
             52 COMPARE_OP               3 (!=)
             54 POP_JUMP_IF_FALSE       60

 13     >>   56 LOAD_CONST               0 (None)
             58 RETURN_VALUE

 15     >>   60 LOAD_CONST               4 ('#')
             62 LOAD_FAST                2 (grid)
             64 LOAD_FAST                0 (row)
             66 BINARY_SUBSCR
             68 LOAD_FAST                1 (col)
             70 STORE_SUBSCR

 17          72 LOAD_DEREF               1 (helper)
             74 LOAD_FAST                0 (row)
             76 LOAD_CONST               1 (1)
             78 BINARY_ADD
             80 LOAD_FAST                1 (col)
             82 LOAD_FAST                2 (grid)
             84 CALL_FUNCTION            3
             86 POP_TOP

 18          88 LOAD_DEREF               1 (helper)
             90 LOAD_FAST                0 (row)
             92 LOAD_CONST               1 (1)
             94 BINARY_SUBTRACT
             96 LOAD_FAST                1 (col)
             98 LOAD_FAST                2 (grid)
            100 CALL_FUNCTION            3
            102 POP_TOP

 19         104 LOAD_DEREF               1 (helper)
            106 LOAD_FAST                0 (row)
            108 LOAD_FAST                1 (col)
            110 LOAD_CONST               1 (1)
            112 BINARY_ADD
            114 LOAD_FAST                2 (grid)
            116 CALL_FUNCTION            3
            118 POP_TOP

 20         120 LOAD_DEREF               1 (helper)
            122 LOAD_FAST                0 (row)
            124 LOAD_FAST                1 (col)
            126 LOAD_CONST               1 (1)
            128 BINARY_SUBTRACT
            130 LOAD_FAST                2 (grid)
            132 CALL_FUNCTION            3
            134 POP_TOP
            136 LOAD_CONST               0 (None)
            138 RETURN_VALUE
None
"
numIslands,"import collections
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        
        directions = ((1, 0), (-1, 0), (0, 1), (0, -1))
        rows = len(grid)
        cols = len(grid[0])
        
        cnt = 0
        
        for row in range(rows):
            for col in range(cols):
			    # If we find a location on an island start our BFS of that island.
                if grid[row][col] == '1':
				    # Update our count and add the starting location to the deque.
                    cnt += 1
                    q = collections.deque([])
                    q.append((row, col))
					# While we have valid island locations to process:
                    while q:
					    # Take the next location from the deque.
                        location = q.popleft()
                        r, c = location[0], location[1]
						# Search the possible adjacent directions.
                        for neigh in directions:
						    # New row and col coords to check
                            nr = r + neigh[0]
                            nc = c + neigh[-1]
							# If the new coords are valid and the lcoation is part of the island.
                            if nr >= 0 and nr < rows and nc >= 0 and nc < cols and grid[nr][nc] == '1':
							    # Update the cell value to mark it's been counted/explored.
                                grid[nr][nc] = '#'
								# Append the current location to the deque to further search it's adjacents.
                                q.append((nr, nc))
                                
        return cnt
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7fcdd2b452f0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcdd2b452f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fcdd2b45240, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fcdd2b45240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_CONST               2 (((1, 0), (-1, 0), (0, 1), (0, -1)))
             10 STORE_FAST               2 (directions)

  7          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (grid)
             16 CALL_FUNCTION            1
             18 STORE_FAST               3 (rows)

  8          20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               1 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_FAST               4 (cols)

 10          32 LOAD_CONST               1 (0)
             34 STORE_FAST               5 (cnt)

 12          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                3 (rows)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER               206 (to 252)
             46 STORE_FAST               6 (row)

 13          48 LOAD_GLOBAL              1 (range)
             50 LOAD_FAST                4 (cols)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER               192 (to 250)
             58 STORE_FAST               7 (col)

 15          60 LOAD_FAST                1 (grid)
             62 LOAD_FAST                6 (row)
             64 BINARY_SUBSCR
             66 LOAD_FAST                7 (col)
             68 BINARY_SUBSCR
             70 LOAD_CONST               3 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       56

 17          76 LOAD_FAST                5 (cnt)
             78 LOAD_CONST               4 (1)
             80 INPLACE_ADD
             82 STORE_FAST               5 (cnt)

 18          84 LOAD_GLOBAL              2 (collections)
             86 LOAD_METHOD              3 (deque)
             88 BUILD_LIST               0
             90 CALL_METHOD              1
             92 STORE_FAST               8 (q)

 19          94 LOAD_FAST                8 (q)
             96 LOAD_METHOD              4 (append)
             98 LOAD_FAST                6 (row)
            100 LOAD_FAST                7 (col)
            102 BUILD_TUPLE              2
            104 CALL_METHOD              1
            106 POP_TOP

 21     >>  108 LOAD_FAST                8 (q)
            110 POP_JUMP_IF_FALSE       56

 23         112 LOAD_FAST                8 (q)
            114 LOAD_METHOD              5 (popleft)
            116 CALL_METHOD              0
            118 STORE_FAST               9 (location)

 24         120 LOAD_FAST                9 (location)
            122 LOAD_CONST               1 (0)
            124 BINARY_SUBSCR
            126 LOAD_FAST                9 (location)
            128 LOAD_CONST               4 (1)
            130 BINARY_SUBSCR
            132 ROT_TWO
            134 STORE_FAST              10 (r)
            136 STORE_FAST              11 (c)

 26         138 LOAD_FAST                2 (directions)
            140 GET_ITER
        >>  142 FOR_ITER               102 (to 246)
            144 STORE_FAST              12 (neigh)

 28         146 LOAD_FAST               10 (r)
            148 LOAD_FAST               12 (neigh)
            150 LOAD_CONST               1 (0)
            152 BINARY_SUBSCR
            154 BINARY_ADD
            156 STORE_FAST              13 (nr)

 29         158 LOAD_FAST               11 (c)
            160 LOAD_FAST               12 (neigh)
            162 LOAD_CONST               5 (-1)
            164 BINARY_SUBSCR
            166 BINARY_ADD
            168 STORE_FAST              14 (nc)

 31         170 LOAD_FAST               13 (nr)
            172 LOAD_CONST               1 (0)
            174 COMPARE_OP               5 (>=)
            176 POP_JUMP_IF_FALSE      142
            178 LOAD_FAST               13 (nr)
            180 LOAD_FAST                3 (rows)
            182 COMPARE_OP               0 (<)
            184 POP_JUMP_IF_FALSE      142
            186 LOAD_FAST               14 (nc)
            188 LOAD_CONST               1 (0)
            190 COMPARE_OP               5 (>=)
            192 POP_JUMP_IF_FALSE      142
            194 LOAD_FAST               14 (nc)
            196 LOAD_FAST                4 (cols)
            198 COMPARE_OP               0 (<)
            200 POP_JUMP_IF_FALSE      142
            202 LOAD_FAST                1 (grid)
            204 LOAD_FAST               13 (nr)
            206 BINARY_SUBSCR
            208 LOAD_FAST               14 (nc)
            210 BINARY_SUBSCR
            212 LOAD_CONST               3 ('1')
            214 COMPARE_OP               2 (==)
            216 POP_JUMP_IF_FALSE      142

 33         218 LOAD_CONST               6 ('#')
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST               13 (nr)
            224 BINARY_SUBSCR
            226 LOAD_FAST               14 (nc)
            228 STORE_SUBSCR

 35         230 LOAD_FAST                8 (q)
            232 LOAD_METHOD              4 (append)
            234 LOAD_FAST               13 (nr)
            236 LOAD_FAST               14 (nc)
            238 BUILD_TUPLE              2
            240 CALL_METHOD              1
            242 POP_TOP
            244 JUMP_ABSOLUTE          142
        >>  246 JUMP_ABSOLUTE          108
            248 JUMP_ABSOLUTE           56
        >>  250 JUMP_ABSOLUTE           44

 37     >>  252 LOAD_FAST                5 (cnt)
            254 RETURN_VALUE
None
"
numIslands,"# Union-Find based solution
# Time complexity - O(m*n) to traverse through the entire grid | Space complexity - O(m*n) as required by UnionFind data-structure where m=number of rows, n=number of cols
class UnionFind:
    # This step will initialize the parent and rank arrays of the UnionFind data-structure and set number of islands equal to the number of 1s encountered in the grid. 
    # It'll also set the parent of every cell to be itself. 
    def __init__(self, grid):
        self.rows,self.cols = len(grid),len(grid[0])
        self.parent = [-1 for _ in range(self.rows*self.cols)]
        self.rank = [0 for _ in range(self.rows*self.cols)]
        self.numofislands=0
        for i in range(self.rows):
            for j in range(self.cols):
                if grid[i][j]=='1':
                    self.parent[i*self.cols+j]=i*self.cols+j
                    self.numofislands+=1
        
    # Recursively find the parent of given element until you reach the root (that is when parent[x]=x). 
    # Keep setting parent of all intermediate cells to be equal to the cell of the root of the parent. 
    # Note that this is the path-compression step which reduces the find operation's time complexity to amortized O(logn).
    def find(self,x):
        if self.parent[x]!=x:
            self.parent[x]=self.find(self.parent[x])
        return self.parent[x]
    
    # For any two cells (coordinates are their corresponding 1d coordinates), union both the cells if they're connected to the same root. 
    # Else don't union the two components. 
    def union(self,x,y):
        # Find the roots of x and y cells (components).
        rootx,rooty=self.find(x),self.find(y)
        # If both of the cells belong to different components then union them. That is, set one to be parent of other based on their ranks. 
        if rootx!=rooty:
            # If rank (weight) of x's root is higher than that of y's root, then set parent of y to be x. 
            if self.rank[rootx]>self.rank[rooty]:
                self.parent[rooty]=rootx
            # Similarly if rank (weight) of y's root is higher than that of x's root, then set parent of x to be y.
            elif self.rank[rooty]>self.rank[rootx]:
                self.parent[rootx]=rooty
            # Else if both have the same rank (weight) then set parent of y to be x (could also be vice-versa) 
            # and increment the rank of this new component by 1.
            else:
                self.rank[rootx]+=1
                self.parent[rooty]=self.parent[rootx]
            # Decrement the number of islands by 1 every time we union two different cells with value==1
            self.numofislands-=1
    
            
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        
        rows,cols=len(grid),len(grid[0])
        
        # Initialize the UnionFind data-structure with the current grid. 
        # This step will initialize the parent and rank arrays of the UnionFind data-structure and set number of islands equal to the number of 1s encountered in the grid. 
        # It'll also set the parent of every cell to be itself. 
        uf = UnionFind(grid)
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j]=='1':
                    for d in [(1,0),(0,1),(-1,0),(0,-1)]:
                        ii,jj=i+d[0],j+d[1]
                        if 0<=ii<rows and 0<=jj<cols and grid[ii][jj]=='1':
                            x,y=i*cols+j,ii*cols+jj
                            uf.union(x,y)
                            
        return uf.numofislands
","  3           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object UnionFind at 0x7f1c648655b0, file ""<ast>"", line 3>)
              4 LOAD_CONST               1 ('UnionFind')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('UnionFind')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (UnionFind)

 47          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f1c64865710, file ""<ast>"", line 47>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object UnionFind at 0x7f1c648655b0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('UnionFind')
              6 STORE_NAME               2 (__qualname__)

  6           8 LOAD_CONST               1 (<code object __init__ at 0x7f1c648653a0, file ""<ast>"", line 6>)
             10 LOAD_CONST               2 ('UnionFind.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

 20          16 LOAD_CONST               3 (<code object find at 0x7f1c64865450, file ""<ast>"", line 20>)
             18 LOAD_CONST               4 ('UnionFind.find')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (find)

 27          24 LOAD_CONST               5 (<code object union at 0x7f1c64865500, file ""<ast>"", line 27>)
             26 LOAD_CONST               6 ('UnionFind.union')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (union)
             32 LOAD_CONST               7 (None)
             34 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f1c648653a0, file ""<ast>"", line 6>:
  7           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (grid)
             10 LOAD_CONST               1 (0)
             12 BINARY_SUBSCR
             14 CALL_FUNCTION            1
             16 ROT_TWO
             18 LOAD_FAST                0 (self)
             20 STORE_ATTR               1 (rows)
             22 LOAD_FAST                0 (self)
             24 STORE_ATTR               2 (cols)

  8          26 LOAD_CONST               2 (<code object <listcomp> at 0x7f1c64865240, file ""<ast>"", line 8>)
             28 LOAD_CONST               3 ('UnionFind.__init__.<locals>.<listcomp>')
             30 MAKE_FUNCTION            0
             32 LOAD_GLOBAL              3 (range)
             34 LOAD_FAST                0 (self)
             36 LOAD_ATTR                1 (rows)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                2 (cols)
             42 BINARY_MULTIPLY
             44 CALL_FUNCTION            1
             46 GET_ITER
             48 CALL_FUNCTION            1
             50 LOAD_FAST                0 (self)
             52 STORE_ATTR               4 (parent)

  9          54 LOAD_CONST               4 (<code object <listcomp> at 0x7f1c648652f0, file ""<ast>"", line 9>)
             56 LOAD_CONST               3 ('UnionFind.__init__.<locals>.<listcomp>')
             58 MAKE_FUNCTION            0
             60 LOAD_GLOBAL              3 (range)
             62 LOAD_FAST                0 (self)
             64 LOAD_ATTR                1 (rows)
             66 LOAD_FAST                0 (self)
             68 LOAD_ATTR                2 (cols)
             70 BINARY_MULTIPLY
             72 CALL_FUNCTION            1
             74 GET_ITER
             76 CALL_FUNCTION            1
             78 LOAD_FAST                0 (self)
             80 STORE_ATTR               5 (rank)

 10          82 LOAD_CONST               1 (0)
             84 LOAD_FAST                0 (self)
             86 STORE_ATTR               6 (numofislands)

 11          88 LOAD_GLOBAL              3 (range)
             90 LOAD_FAST                0 (self)
             92 LOAD_ATTR                1 (rows)
             94 CALL_FUNCTION            1
             96 GET_ITER
        >>   98 FOR_ITER                80 (to 180)
            100 STORE_FAST               2 (i)

 12         102 LOAD_GLOBAL              3 (range)
            104 LOAD_FAST                0 (self)
            106 LOAD_ATTR                2 (cols)
            108 CALL_FUNCTION            1
            110 GET_ITER
        >>  112 FOR_ITER                64 (to 178)
            114 STORE_FAST               3 (j)

 13         116 LOAD_FAST                1 (grid)
            118 LOAD_FAST                2 (i)
            120 BINARY_SUBSCR
            122 LOAD_FAST                3 (j)
            124 BINARY_SUBSCR
            126 LOAD_CONST               5 ('1')
            128 COMPARE_OP               2 (==)
            130 POP_JUMP_IF_FALSE      112

 14         132 LOAD_FAST                2 (i)
            134 LOAD_FAST                0 (self)
            136 LOAD_ATTR                2 (cols)
            138 BINARY_MULTIPLY
            140 LOAD_FAST                3 (j)
            142 BINARY_ADD
            144 LOAD_FAST                0 (self)
            146 LOAD_ATTR                4 (parent)
            148 LOAD_FAST                2 (i)
            150 LOAD_FAST                0 (self)
            152 LOAD_ATTR                2 (cols)
            154 BINARY_MULTIPLY
            156 LOAD_FAST                3 (j)
            158 BINARY_ADD
            160 STORE_SUBSCR

 15         162 LOAD_FAST                0 (self)
            164 DUP_TOP
            166 LOAD_ATTR                6 (numofislands)
            168 LOAD_CONST               6 (1)
            170 INPLACE_ADD
            172 ROT_TWO
            174 STORE_ATTR               6 (numofislands)
            176 JUMP_ABSOLUTE          112
        >>  178 JUMP_ABSOLUTE           98
        >>  180 LOAD_CONST               0 (None)
            182 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1c64865240, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (-1)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1c648652f0, file ""<ast>"", line 9>:
  9           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object find at 0x7f1c64865450, file ""<ast>"", line 20>:
 21           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (parent)
              4 LOAD_FAST                1 (x)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (x)
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       36

 22          14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (find)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (parent)
             22 LOAD_FAST                1 (x)
             24 BINARY_SUBSCR
             26 CALL_METHOD              1
             28 LOAD_FAST                0 (self)
             30 LOAD_ATTR                0 (parent)
             32 LOAD_FAST                1 (x)
             34 STORE_SUBSCR

 23     >>   36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                0 (parent)
             40 LOAD_FAST                1 (x)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

Disassembly of <code object union at 0x7f1c64865500, file ""<ast>"", line 27>:
 29           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                1 (x)
              6 CALL_METHOD              1
              8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (find)
             12 LOAD_FAST                2 (y)
             14 CALL_METHOD              1
             16 ROT_TWO
             18 STORE_FAST               3 (rootx)
             20 STORE_FAST               4 (rooty)

 31          22 LOAD_FAST                3 (rootx)
             24 LOAD_FAST                4 (rooty)
             26 COMPARE_OP               3 (!=)
             28 POP_JUMP_IF_FALSE      142

 33          30 LOAD_FAST                0 (self)
             32 LOAD_ATTR                1 (rank)
             34 LOAD_FAST                3 (rootx)
             36 BINARY_SUBSCR
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                1 (rank)
             42 LOAD_FAST                4 (rooty)
             44 BINARY_SUBSCR
             46 COMPARE_OP               4 (>)
             48 POP_JUMP_IF_FALSE       62

 34          50 LOAD_FAST                3 (rootx)
             52 LOAD_FAST                0 (self)
             54 LOAD_ATTR                2 (parent)
             56 LOAD_FAST                4 (rooty)
             58 STORE_SUBSCR
             60 JUMP_FORWARD            66 (to 128)

 36     >>   62 LOAD_FAST                0 (self)
             64 LOAD_ATTR                1 (rank)
             66 LOAD_FAST                4 (rooty)
             68 BINARY_SUBSCR
             70 LOAD_FAST                0 (self)
             72 LOAD_ATTR                1 (rank)
             74 LOAD_FAST                3 (rootx)
             76 BINARY_SUBSCR
             78 COMPARE_OP               4 (>)
             80 POP_JUMP_IF_FALSE       94

 37          82 LOAD_FAST                4 (rooty)
             84 LOAD_FAST                0 (self)
             86 LOAD_ATTR                2 (parent)
             88 LOAD_FAST                3 (rootx)
             90 STORE_SUBSCR
             92 JUMP_FORWARD            34 (to 128)

 41     >>   94 LOAD_FAST                0 (self)
             96 LOAD_ATTR                1 (rank)
             98 LOAD_FAST                3 (rootx)
            100 DUP_TOP_TWO
            102 BINARY_SUBSCR
            104 LOAD_CONST               1 (1)
            106 INPLACE_ADD
            108 ROT_THREE
            110 STORE_SUBSCR

 42         112 LOAD_FAST                0 (self)
            114 LOAD_ATTR                2 (parent)
            116 LOAD_FAST                3 (rootx)
            118 BINARY_SUBSCR
            120 LOAD_FAST                0 (self)
            122 LOAD_ATTR                2 (parent)
            124 LOAD_FAST                4 (rooty)
            126 STORE_SUBSCR

 44     >>  128 LOAD_FAST                0 (self)
            130 DUP_TOP
            132 LOAD_ATTR                3 (numofislands)
            134 LOAD_CONST               1 (1)
            136 INPLACE_SUBTRACT
            138 ROT_TWO
            140 STORE_ATTR               3 (numofislands)
        >>  142 LOAD_CONST               0 (None)
            144 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1c64865710, file ""<ast>"", line 47>:
 47           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 48           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f1c64865660, file ""<ast>"", line 48>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f1c64865660, file ""<ast>"", line 48>:
 49           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

 50           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 52     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (rows)
             28 STORE_FAST               3 (cols)

 57          30 LOAD_GLOBAL              1 (UnionFind)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 STORE_FAST               4 (uf)

 59          38 LOAD_GLOBAL              2 (range)
             40 LOAD_FAST                2 (rows)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER               172 (to 220)
             48 STORE_FAST               5 (i)

 60          50 LOAD_GLOBAL              2 (range)
             52 LOAD_FAST                3 (cols)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER               158 (to 218)
             60 STORE_FAST               6 (j)

 61          62 LOAD_FAST                1 (grid)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 LOAD_FAST                6 (j)
             70 BINARY_SUBSCR
             72 LOAD_CONST               2 ('1')
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE       58

 62          78 LOAD_CONST               3 (((1, 0), (0, 1), (-1, 0), (0, -1)))
             80 GET_ITER
        >>   82 FOR_ITER               132 (to 216)
             84 STORE_FAST               7 (d)

 63          86 LOAD_FAST                5 (i)
             88 LOAD_FAST                7 (d)
             90 LOAD_CONST               1 (0)
             92 BINARY_SUBSCR
             94 BINARY_ADD
             96 LOAD_FAST                6 (j)
             98 LOAD_FAST                7 (d)
            100 LOAD_CONST               4 (1)
            102 BINARY_SUBSCR
            104 BINARY_ADD
            106 ROT_TWO
            108 STORE_FAST               8 (ii)
            110 STORE_FAST               9 (jj)

 64         112 LOAD_CONST               1 (0)
            114 LOAD_FAST                8 (ii)
            116 DUP_TOP
            118 ROT_THREE
            120 COMPARE_OP               1 (<=)
            122 POP_JUMP_IF_FALSE      132
            124 LOAD_FAST                2 (rows)
            126 COMPARE_OP               0 (<)
            128 POP_JUMP_IF_FALSE       82
            130 JUMP_FORWARD             4 (to 136)
        >>  132 POP_TOP
            134 JUMP_ABSOLUTE           82
        >>  136 LOAD_CONST               1 (0)
            138 LOAD_FAST                9 (jj)
            140 DUP_TOP
            142 ROT_THREE
            144 COMPARE_OP               1 (<=)
            146 POP_JUMP_IF_FALSE      156
            148 LOAD_FAST                3 (cols)
            150 COMPARE_OP               0 (<)
            152 POP_JUMP_IF_FALSE       82
            154 JUMP_FORWARD             4 (to 160)
        >>  156 POP_TOP
            158 JUMP_ABSOLUTE           82
        >>  160 LOAD_FAST                1 (grid)
            162 LOAD_FAST                8 (ii)
            164 BINARY_SUBSCR
            166 LOAD_FAST                9 (jj)
            168 BINARY_SUBSCR
            170 LOAD_CONST               2 ('1')
            172 COMPARE_OP               2 (==)
            174 POP_JUMP_IF_FALSE       82

 65         176 LOAD_FAST                5 (i)
            178 LOAD_FAST                3 (cols)
            180 BINARY_MULTIPLY
            182 LOAD_FAST                6 (j)
            184 BINARY_ADD
            186 LOAD_FAST                8 (ii)
            188 LOAD_FAST                3 (cols)
            190 BINARY_MULTIPLY
            192 LOAD_FAST                9 (jj)
            194 BINARY_ADD
            196 ROT_TWO
            198 STORE_FAST              10 (x)
            200 STORE_FAST              11 (y)

 66         202 LOAD_FAST                4 (uf)
            204 LOAD_METHOD              3 (union)
            206 LOAD_FAST               10 (x)
            208 LOAD_FAST               11 (y)
            210 CALL_METHOD              2
            212 POP_TOP
            214 JUMP_ABSOLUTE           82
        >>  216 JUMP_ABSOLUTE           58
        >>  218 JUMP_ABSOLUTE           46

 68     >>  220 LOAD_FAST                4 (uf)
            222 LOAD_ATTR                4 (numofislands)
            224 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ## RC ##
        ## APPROACH : DFS ##
        # 1. find the land, go to surroundings and convert to water
        # 2. increment island count, get back and search for next islands.
        
		## TIME COMPLEXITY : O(N^2) ##
		## SPACE COMPLEXITY : O(1) ##

        def convertLandToWater(grid,i,j):
            if(i<0 or j<0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1'):
                return
            grid[i][j] = '0'
            for x,y in directions:
                convertLandToWater(grid, i + x, j + y)
        
        if len(grid) == 0 : return 0
        isLandCount = 0
        directions = [(0,1), (0,-1), (-1,0), (1,0)]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    isLandCount += 1
                    convertLandToWater(grid, i, j)
        return isLandCount        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4c1fbc5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4c1fbc5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f4c1fbc53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f4c1fbc53a0, file ""<ast>"", line 2>:
 11           0 LOAD_CLOSURE             0 (convertLandToWater)
              2 LOAD_CLOSURE             1 (directions)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object convertLandToWater at 0x7f4c1fbc52f0, file ""<ast>"", line 11>)
              8 LOAD_CONST               2 ('Solution.numIslands.<locals>.convertLandToWater')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (convertLandToWater)

 18          14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 CALL_FUNCTION            1
             20 LOAD_CONST               3 (0)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
             26 LOAD_CONST               3 (0)
             28 RETURN_VALUE

 19     >>   30 LOAD_CONST               3 (0)
             32 STORE_FAST               2 (isLandCount)

 20          34 LOAD_CONST               4 ((0, 1))
             36 LOAD_CONST               5 ((0, -1))
             38 LOAD_CONST               6 ((-1, 0))
             40 LOAD_CONST               7 ((1, 0))
             42 BUILD_LIST               4
             44 STORE_DEREF              1 (directions)

 21          46 LOAD_GLOBAL              1 (range)
             48 LOAD_GLOBAL              0 (len)
             50 LOAD_FAST                1 (grid)
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                62 (to 122)
             60 STORE_FAST               3 (i)

 22          62 LOAD_GLOBAL              1 (range)
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (grid)
             68 LOAD_CONST               3 (0)
             70 BINARY_SUBSCR
             72 CALL_FUNCTION            1
             74 CALL_FUNCTION            1
             76 GET_ITER
        >>   78 FOR_ITER                40 (to 120)
             80 STORE_FAST               4 (j)

 23          82 LOAD_FAST                1 (grid)
             84 LOAD_FAST                3 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (j)
             90 BINARY_SUBSCR
             92 LOAD_CONST               8 ('1')
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE       78

 24          98 LOAD_FAST                2 (isLandCount)
            100 LOAD_CONST               9 (1)
            102 INPLACE_ADD
            104 STORE_FAST               2 (isLandCount)

 25         106 LOAD_DEREF               0 (convertLandToWater)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                3 (i)
            112 LOAD_FAST                4 (j)
            114 CALL_FUNCTION            3
            116 POP_TOP
            118 JUMP_ABSOLUTE           78
        >>  120 JUMP_ABSOLUTE           58

 26     >>  122 LOAD_FAST                2 (isLandCount)
            124 RETURN_VALUE

Disassembly of <code object convertLandToWater at 0x7f4c1fbc52f0, file ""<ast>"", line 11>:
 12           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        60
              8 LOAD_FAST                2 (j)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_TRUE        60
             16 LOAD_FAST                1 (i)
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                0 (grid)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               5 (>=)
             26 POP_JUMP_IF_TRUE        60
             28 LOAD_FAST                2 (j)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                0 (grid)
             34 LOAD_CONST               1 (0)
             36 BINARY_SUBSCR
             38 CALL_FUNCTION            1
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (grid)
             46 LOAD_FAST                1 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (j)
             52 BINARY_SUBSCR
             54 LOAD_CONST               2 ('1')
             56 COMPARE_OP               3 (!=)
             58 POP_JUMP_IF_FALSE       64

 13     >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE

 14     >>   64 LOAD_CONST               3 ('0')
             66 LOAD_FAST                0 (grid)
             68 LOAD_FAST                1 (i)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (j)
             74 STORE_SUBSCR

 15          76 LOAD_DEREF               1 (directions)
             78 GET_ITER
        >>   80 FOR_ITER                28 (to 110)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               3 (x)
             86 STORE_FAST               4 (y)

 16          88 LOAD_DEREF               0 (convertLandToWater)
             90 LOAD_FAST                0 (grid)
             92 LOAD_FAST                1 (i)
             94 LOAD_FAST                3 (x)
             96 BINARY_ADD
             98 LOAD_FAST                2 (j)
            100 LOAD_FAST                4 (y)
            102 BINARY_ADD
            104 CALL_FUNCTION            3
            106 POP_TOP
            108 JUMP_ABSOLUTE           80
        >>  110 LOAD_CONST               0 (None)
            112 RETURN_VALUE
None
"
numIslands,"from queue import Queue

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:            
        result = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == ""1"":
                    self.bfs(grid, i, j)
                    result += 1
        
        
        return result
    
    def bfs(self, grid, i, j):
        q = Queue()
        q.put([i, j])
        grid[i][j] = ""#""
        
        while(q.qsize() > 0):
            i, j  = q.get()
            
            if i - 1 >= 0 and grid[i - 1][j] == ""1"":
                q.put([i - 1, j])
                grid[i - 1][j] = ""#""
            
            if j - 1 >= 0 and grid[i][j - 1] == ""1"":
                q.put([i, j - 1])
                grid[i][j - 1] = ""#""
                
            if i + 1 < len(grid) and grid[i + 1][j] == ""1"":
                q.put([i + 1, j])
                grid[i + 1][j] = ""#""
            
            if j + 1 < len(grid[0]) and grid[i][j + 1] == ""1"":
                q.put([i, j + 1])
                grid[i][j + 1] = ""#""
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Queue',))
              4 IMPORT_NAME              0 (queue)
              6 IMPORT_FROM              1 (Queue)
              8 STORE_NAME               1 (Queue)
             10 POP_TOP

  3          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7ff2461753a0, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff2461753a0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7ff246175240, file ""<ast>"", line 4>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)

 15          32 LOAD_CONST               4 (<code object bfs at 0x7ff2461752f0, file ""<ast>"", line 15>)
             34 LOAD_CONST               5 ('Solution.bfs')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               7 (bfs)
             40 LOAD_CONST               6 (None)
             42 RETURN_VALUE

Disassembly of <code object numIslands at 0x7ff246175240, file ""<ast>"", line 4>:
  5           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (result)

  6           4 LOAD_GLOBAL              0 (range)
              6 LOAD_GLOBAL              1 (len)
              8 LOAD_FAST                1 (grid)
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                64 (to 82)
             18 STORE_FAST               3 (i)

  7          20 LOAD_GLOBAL              0 (range)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                1 (grid)
             26 LOAD_CONST               1 (0)
             28 BINARY_SUBSCR
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                42 (to 80)
             38 STORE_FAST               4 (j)

  8          40 LOAD_FAST                1 (grid)
             42 LOAD_FAST                3 (i)
             44 BINARY_SUBSCR
             46 LOAD_FAST                4 (j)
             48 BINARY_SUBSCR
             50 LOAD_CONST               2 ('1')
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       36

  9          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              2 (bfs)
             60 LOAD_FAST                1 (grid)
             62 LOAD_FAST                3 (i)
             64 LOAD_FAST                4 (j)
             66 CALL_METHOD              3
             68 POP_TOP

 10          70 LOAD_FAST                2 (result)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               2 (result)
             78 JUMP_ABSOLUTE           36
        >>   80 JUMP_ABSOLUTE           16

 13     >>   82 LOAD_FAST                2 (result)
             84 RETURN_VALUE

Disassembly of <code object bfs at 0x7ff2461752f0, file ""<ast>"", line 15>:
 16           0 LOAD_GLOBAL              0 (Queue)
              2 CALL_FUNCTION            0
              4 STORE_FAST               4 (q)

 17           6 LOAD_FAST                4 (q)
              8 LOAD_METHOD              1 (put)
             10 LOAD_FAST                2 (i)
             12 LOAD_FAST                3 (j)
             14 BUILD_LIST               2
             16 CALL_METHOD              1
             18 POP_TOP

 18          20 LOAD_CONST               1 ('#')
             22 LOAD_FAST                1 (grid)
             24 LOAD_FAST                2 (i)
             26 BINARY_SUBSCR
             28 LOAD_FAST                3 (j)
             30 STORE_SUBSCR

 20     >>   32 LOAD_FAST                4 (q)
             34 LOAD_METHOD              2 (qsize)
             36 CALL_METHOD              0
             38 LOAD_CONST               2 (0)
             40 COMPARE_OP               4 (>)
             42 EXTENDED_ARG             1
             44 POP_JUMP_IF_FALSE      340

 21          46 LOAD_FAST                4 (q)
             48 LOAD_METHOD              3 (get)
             50 CALL_METHOD              0
             52 UNPACK_SEQUENCE          2
             54 STORE_FAST               2 (i)
             56 STORE_FAST               3 (j)

 23          58 LOAD_FAST                2 (i)
             60 LOAD_CONST               3 (1)
             62 BINARY_SUBTRACT
             64 LOAD_CONST               2 (0)
             66 COMPARE_OP               5 (>=)
             68 POP_JUMP_IF_FALSE      124
             70 LOAD_FAST                1 (grid)
             72 LOAD_FAST                2 (i)
             74 LOAD_CONST               3 (1)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 LOAD_FAST                3 (j)
             82 BINARY_SUBSCR
             84 LOAD_CONST               4 ('1')
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE      124

 24          90 LOAD_FAST                4 (q)
             92 LOAD_METHOD              1 (put)
             94 LOAD_FAST                2 (i)
             96 LOAD_CONST               3 (1)
             98 BINARY_SUBTRACT
            100 LOAD_FAST                3 (j)
            102 BUILD_LIST               2
            104 CALL_METHOD              1
            106 POP_TOP

 25         108 LOAD_CONST               1 ('#')
            110 LOAD_FAST                1 (grid)
            112 LOAD_FAST                2 (i)
            114 LOAD_CONST               3 (1)
            116 BINARY_SUBTRACT
            118 BINARY_SUBSCR
            120 LOAD_FAST                3 (j)
            122 STORE_SUBSCR

 27     >>  124 LOAD_FAST                3 (j)
            126 LOAD_CONST               3 (1)
            128 BINARY_SUBTRACT
            130 LOAD_CONST               2 (0)
            132 COMPARE_OP               5 (>=)
            134 POP_JUMP_IF_FALSE      190
            136 LOAD_FAST                1 (grid)
            138 LOAD_FAST                2 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                3 (j)
            144 LOAD_CONST               3 (1)
            146 BINARY_SUBTRACT
            148 BINARY_SUBSCR
            150 LOAD_CONST               4 ('1')
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      190

 28         156 LOAD_FAST                4 (q)
            158 LOAD_METHOD              1 (put)
            160 LOAD_FAST                2 (i)
            162 LOAD_FAST                3 (j)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 BUILD_LIST               2
            170 CALL_METHOD              1
            172 POP_TOP

 29         174 LOAD_CONST               1 ('#')
            176 LOAD_FAST                1 (grid)
            178 LOAD_FAST                2 (i)
            180 BINARY_SUBSCR
            182 LOAD_FAST                3 (j)
            184 LOAD_CONST               3 (1)
            186 BINARY_SUBTRACT
            188 STORE_SUBSCR

 31     >>  190 LOAD_FAST                2 (i)
            192 LOAD_CONST               3 (1)
            194 BINARY_ADD
            196 LOAD_GLOBAL              4 (len)
            198 LOAD_FAST                1 (grid)
            200 CALL_FUNCTION            1
            202 COMPARE_OP               0 (<)
            204 EXTENDED_ARG             1
            206 POP_JUMP_IF_FALSE      264
            208 LOAD_FAST                1 (grid)
            210 LOAD_FAST                2 (i)
            212 LOAD_CONST               3 (1)
            214 BINARY_ADD
            216 BINARY_SUBSCR
            218 LOAD_FAST                3 (j)
            220 BINARY_SUBSCR
            222 LOAD_CONST               4 ('1')
            224 COMPARE_OP               2 (==)
            226 EXTENDED_ARG             1
            228 POP_JUMP_IF_FALSE      264

 32         230 LOAD_FAST                4 (q)
            232 LOAD_METHOD              1 (put)
            234 LOAD_FAST                2 (i)
            236 LOAD_CONST               3 (1)
            238 BINARY_ADD
            240 LOAD_FAST                3 (j)
            242 BUILD_LIST               2
            244 CALL_METHOD              1
            246 POP_TOP

 33         248 LOAD_CONST               1 ('#')
            250 LOAD_FAST                1 (grid)
            252 LOAD_FAST                2 (i)
            254 LOAD_CONST               3 (1)
            256 BINARY_ADD
            258 BINARY_SUBSCR
            260 LOAD_FAST                3 (j)
            262 STORE_SUBSCR

 35     >>  264 LOAD_FAST                3 (j)
            266 LOAD_CONST               3 (1)
            268 BINARY_ADD
            270 LOAD_GLOBAL              4 (len)
            272 LOAD_FAST                1 (grid)
            274 LOAD_CONST               2 (0)
            276 BINARY_SUBSCR
            278 CALL_FUNCTION            1
            280 COMPARE_OP               0 (<)
            282 POP_JUMP_IF_FALSE       32
            284 LOAD_FAST                1 (grid)
            286 LOAD_FAST                2 (i)
            288 BINARY_SUBSCR
            290 LOAD_FAST                3 (j)
            292 LOAD_CONST               3 (1)
            294 BINARY_ADD
            296 BINARY_SUBSCR
            298 LOAD_CONST               4 ('1')
            300 COMPARE_OP               2 (==)
            302 POP_JUMP_IF_FALSE       32

 36         304 LOAD_FAST                4 (q)
            306 LOAD_METHOD              1 (put)
            308 LOAD_FAST                2 (i)
            310 LOAD_FAST                3 (j)
            312 LOAD_CONST               3 (1)
            314 BINARY_ADD
            316 BUILD_LIST               2
            318 CALL_METHOD              1
            320 POP_TOP

 37         322 LOAD_CONST               1 ('#')
            324 LOAD_FAST                1 (grid)
            326 LOAD_FAST                2 (i)
            328 BINARY_SUBSCR
            330 LOAD_FAST                3 (j)
            332 LOAD_CONST               3 (1)
            334 BINARY_ADD
            336 STORE_SUBSCR
            338 JUMP_ABSOLUTE           32
        >>  340 LOAD_CONST               0 (None)
            342 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0;
        
        visited = grid.copy() # in case we do not want to modify our input
        islands = 0
        stack = [] # this will simulate the call stack 
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if visited[i][j] != 'X' and grid[i][j] == '1':
                    islands += 1
                    stack.append((i, j))
					# perform dfs iteratively
                    while stack:
                        row, col = stack.pop()
                        
                        if grid[row][col] == '1' and visited[row][col] != 'X':
                            visited[row][col] = 'X'
                            
                        if  row + 1 < len(grid) and grid[row + 1][col] == '1':
                            stack.append((row + 1, col))
                        if  col + 1 < len(grid[0]) and grid[row][col + 1] == '1':
                            stack.append((row, col + 1))
                        if row - 1 >= 0 and grid[row - 1][col] == '1':
                            stack.append((row - 1, col))
                        if col - 1 >= 0 and grid[row][col - 1] == '1':
                            stack.append((row, col - 1))
        return islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdd239652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdd239652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fdd23965240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fdd23965240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                1 (grid)
             10 LOAD_METHOD              0 (copy)
             12 CALL_METHOD              0
             14 STORE_FAST               2 (visited)

  7          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (islands)

  8          20 BUILD_LIST               0
             22 STORE_FAST               4 (stack)

 10          24 LOAD_GLOBAL              1 (range)
             26 LOAD_GLOBAL              2 (len)
             28 LOAD_FAST                1 (grid)
             30 CALL_FUNCTION            1
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 EXTENDED_ARG             1
             38 FOR_ITER               364 (to 404)
             40 STORE_FAST               5 (i)

 11          42 LOAD_GLOBAL              1 (range)
             44 LOAD_GLOBAL              2 (len)
             46 LOAD_FAST                1 (grid)
             48 LOAD_CONST               1 (0)
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 EXTENDED_ARG             1
             60 FOR_ITER               340 (to 402)
             62 STORE_FAST               6 (j)

 12          64 LOAD_FAST                2 (visited)
             66 LOAD_FAST                5 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                6 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('X')
             76 COMPARE_OP               3 (!=)
             78 POP_JUMP_IF_FALSE       58
             80 LOAD_FAST                1 (grid)
             82 LOAD_FAST                5 (i)
             84 BINARY_SUBSCR
             86 LOAD_FAST                6 (j)
             88 BINARY_SUBSCR
             90 LOAD_CONST               3 ('1')
             92 COMPARE_OP               2 (==)
             94 POP_JUMP_IF_FALSE       58

 13          96 LOAD_FAST                3 (islands)
             98 LOAD_CONST               4 (1)
            100 INPLACE_ADD
            102 STORE_FAST               3 (islands)

 14         104 LOAD_FAST                4 (stack)
            106 LOAD_METHOD              3 (append)
            108 LOAD_FAST                5 (i)
            110 LOAD_FAST                6 (j)
            112 BUILD_TUPLE              2
            114 CALL_METHOD              1
            116 POP_TOP

 16     >>  118 LOAD_FAST                4 (stack)
            120 POP_JUMP_IF_FALSE       58

 17         122 LOAD_FAST                4 (stack)
            124 LOAD_METHOD              4 (pop)
            126 CALL_METHOD              0
            128 UNPACK_SEQUENCE          2
            130 STORE_FAST               7 (row)
            132 STORE_FAST               8 (col)

 19         134 LOAD_FAST                1 (grid)
            136 LOAD_FAST                7 (row)
            138 BINARY_SUBSCR
            140 LOAD_FAST                8 (col)
            142 BINARY_SUBSCR
            144 LOAD_CONST               3 ('1')
            146 COMPARE_OP               2 (==)
            148 POP_JUMP_IF_FALSE      178
            150 LOAD_FAST                2 (visited)
            152 LOAD_FAST                7 (row)
            154 BINARY_SUBSCR
            156 LOAD_FAST                8 (col)
            158 BINARY_SUBSCR
            160 LOAD_CONST               2 ('X')
            162 COMPARE_OP               3 (!=)
            164 POP_JUMP_IF_FALSE      178

 20         166 LOAD_CONST               2 ('X')
            168 LOAD_FAST                2 (visited)
            170 LOAD_FAST                7 (row)
            172 BINARY_SUBSCR
            174 LOAD_FAST                8 (col)
            176 STORE_SUBSCR

 22     >>  178 LOAD_FAST                7 (row)
            180 LOAD_CONST               4 (1)
            182 BINARY_ADD
            184 LOAD_GLOBAL              2 (len)
            186 LOAD_FAST                1 (grid)
            188 CALL_FUNCTION            1
            190 COMPARE_OP               0 (<)
            192 POP_JUMP_IF_FALSE      232
            194 LOAD_FAST                1 (grid)
            196 LOAD_FAST                7 (row)
            198 LOAD_CONST               4 (1)
            200 BINARY_ADD
            202 BINARY_SUBSCR
            204 LOAD_FAST                8 (col)
            206 BINARY_SUBSCR
            208 LOAD_CONST               3 ('1')
            210 COMPARE_OP               2 (==)
            212 POP_JUMP_IF_FALSE      232

 23         214 LOAD_FAST                4 (stack)
            216 LOAD_METHOD              3 (append)
            218 LOAD_FAST                7 (row)
            220 LOAD_CONST               4 (1)
            222 BINARY_ADD
            224 LOAD_FAST                8 (col)
            226 BUILD_TUPLE              2
            228 CALL_METHOD              1
            230 POP_TOP

 24     >>  232 LOAD_FAST                8 (col)
            234 LOAD_CONST               4 (1)
            236 BINARY_ADD
            238 LOAD_GLOBAL              2 (len)
            240 LOAD_FAST                1 (grid)
            242 LOAD_CONST               1 (0)
            244 BINARY_SUBSCR
            246 CALL_FUNCTION            1
            248 COMPARE_OP               0 (<)
            250 EXTENDED_ARG             1
            252 POP_JUMP_IF_FALSE      294
            254 LOAD_FAST                1 (grid)
            256 LOAD_FAST                7 (row)
            258 BINARY_SUBSCR
            260 LOAD_FAST                8 (col)
            262 LOAD_CONST               4 (1)
            264 BINARY_ADD
            266 BINARY_SUBSCR
            268 LOAD_CONST               3 ('1')
            270 COMPARE_OP               2 (==)
            272 EXTENDED_ARG             1
            274 POP_JUMP_IF_FALSE      294

 25         276 LOAD_FAST                4 (stack)
            278 LOAD_METHOD              3 (append)
            280 LOAD_FAST                7 (row)
            282 LOAD_FAST                8 (col)
            284 LOAD_CONST               4 (1)
            286 BINARY_ADD
            288 BUILD_TUPLE              2
            290 CALL_METHOD              1
            292 POP_TOP

 26     >>  294 LOAD_FAST                7 (row)
            296 LOAD_CONST               4 (1)
            298 BINARY_SUBTRACT
            300 LOAD_CONST               1 (0)
            302 COMPARE_OP               5 (>=)
            304 EXTENDED_ARG             1
            306 POP_JUMP_IF_FALSE      348
            308 LOAD_FAST                1 (grid)
            310 LOAD_FAST                7 (row)
            312 LOAD_CONST               4 (1)
            314 BINARY_SUBTRACT
            316 BINARY_SUBSCR
            318 LOAD_FAST                8 (col)
            320 BINARY_SUBSCR
            322 LOAD_CONST               3 ('1')
            324 COMPARE_OP               2 (==)
            326 EXTENDED_ARG             1
            328 POP_JUMP_IF_FALSE      348

 27         330 LOAD_FAST                4 (stack)
            332 LOAD_METHOD              3 (append)
            334 LOAD_FAST                7 (row)
            336 LOAD_CONST               4 (1)
            338 BINARY_SUBTRACT
            340 LOAD_FAST                8 (col)
            342 BUILD_TUPLE              2
            344 CALL_METHOD              1
            346 POP_TOP

 28     >>  348 LOAD_FAST                8 (col)
            350 LOAD_CONST               4 (1)
            352 BINARY_SUBTRACT
            354 LOAD_CONST               1 (0)
            356 COMPARE_OP               5 (>=)
            358 POP_JUMP_IF_FALSE      118
            360 LOAD_FAST                1 (grid)
            362 LOAD_FAST                7 (row)
            364 BINARY_SUBSCR
            366 LOAD_FAST                8 (col)
            368 LOAD_CONST               4 (1)
            370 BINARY_SUBTRACT
            372 BINARY_SUBSCR
            374 LOAD_CONST               3 ('1')
            376 COMPARE_OP               2 (==)
            378 POP_JUMP_IF_FALSE      118

 29         380 LOAD_FAST                4 (stack)
            382 LOAD_METHOD              3 (append)
            384 LOAD_FAST                7 (row)
            386 LOAD_FAST                8 (col)
            388 LOAD_CONST               4 (1)
            390 BINARY_SUBTRACT
            392 BUILD_TUPLE              2
            394 CALL_METHOD              1
            396 POP_TOP
            398 JUMP_ABSOLUTE          118
            400 JUMP_ABSOLUTE           58
        >>  402 JUMP_ABSOLUTE           36

 30     >>  404 LOAD_FAST                3 (islands)
            406 RETURN_VALUE
None
"
numIslands,"class Solution:

    def numIslands(self, grid: List[List[str]]) -> int:
        rows_count = len(grid)
        cols_count = len(grid[0]) if grid else 0
        num_islands = 0
        stack = []
        for i in range(rows_count):
            for j in range(cols_count):
                if grid[i][j] == '1':
                    num_islands += 1
                    stack.append((i, j))
                    while stack:
                        ci, cj = stack.pop()
                        grid[ci][cj] = '0'

                        if ci > 0 and grid[ci - 1][cj] == '1':
                            stack.append((ci - 1, cj))

                        if ci < rows_count - 1 and grid[ci + 1][cj] == '1':
                            stack.append((ci + 1, cj))

                        if cj > 0 and grid[ci][cj - 1] == '1':
                            stack.append((ci, cj - 1))

                        if cj < cols_count - 1 and grid[ci][cj + 1] == '1':
                            stack.append((ci, cj + 1))

        return num_islands
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc9482652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc9482652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7fc948265240, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7fc948265240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (rows_count)

  5           8 LOAD_FAST                1 (grid)
             10 POP_JUMP_IF_FALSE       24
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (grid)
             16 LOAD_CONST               1 (0)
             18 BINARY_SUBSCR
             20 CALL_FUNCTION            1
             22 JUMP_FORWARD             2 (to 26)
        >>   24 LOAD_CONST               1 (0)
        >>   26 STORE_FAST               3 (cols_count)

  6          28 LOAD_CONST               1 (0)
             30 STORE_FAST               4 (num_islands)

  7          32 BUILD_LIST               0
             34 STORE_FAST               5 (stack)

  8          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                2 (rows_count)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 EXTENDED_ARG             1
             46 FOR_ITER               284 (to 332)
             48 STORE_FAST               6 (i)

  9          50 LOAD_GLOBAL              1 (range)
             52 LOAD_FAST                3 (cols_count)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 EXTENDED_ARG             1
             60 FOR_ITER               268 (to 330)
             62 STORE_FAST               7 (j)

 10          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                6 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                7 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       58

 11          80 LOAD_FAST                4 (num_islands)
             82 LOAD_CONST               3 (1)
             84 INPLACE_ADD
             86 STORE_FAST               4 (num_islands)

 12          88 LOAD_FAST                5 (stack)
             90 LOAD_METHOD              2 (append)
             92 LOAD_FAST                6 (i)
             94 LOAD_FAST                7 (j)
             96 BUILD_TUPLE              2
             98 CALL_METHOD              1
            100 POP_TOP

 13     >>  102 LOAD_FAST                5 (stack)
            104 POP_JUMP_IF_FALSE       58

 14         106 LOAD_FAST                5 (stack)
            108 LOAD_METHOD              3 (pop)
            110 CALL_METHOD              0
            112 UNPACK_SEQUENCE          2
            114 STORE_FAST               8 (ci)
            116 STORE_FAST               9 (cj)

 15         118 LOAD_CONST               4 ('0')
            120 LOAD_FAST                1 (grid)
            122 LOAD_FAST                8 (ci)
            124 BINARY_SUBSCR
            126 LOAD_FAST                9 (cj)
            128 STORE_SUBSCR

 17         130 LOAD_FAST                8 (ci)
            132 LOAD_CONST               1 (0)
            134 COMPARE_OP               4 (>)
            136 POP_JUMP_IF_FALSE      176
            138 LOAD_FAST                1 (grid)
            140 LOAD_FAST                8 (ci)
            142 LOAD_CONST               3 (1)
            144 BINARY_SUBTRACT
            146 BINARY_SUBSCR
            148 LOAD_FAST                9 (cj)
            150 BINARY_SUBSCR
            152 LOAD_CONST               2 ('1')
            154 COMPARE_OP               2 (==)
            156 POP_JUMP_IF_FALSE      176

 18         158 LOAD_FAST                5 (stack)
            160 LOAD_METHOD              2 (append)
            162 LOAD_FAST                8 (ci)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 LOAD_FAST                9 (cj)
            170 BUILD_TUPLE              2
            172 CALL_METHOD              1
            174 POP_TOP

 20     >>  176 LOAD_FAST                8 (ci)
            178 LOAD_FAST                2 (rows_count)
            180 LOAD_CONST               3 (1)
            182 BINARY_SUBTRACT
            184 COMPARE_OP               0 (<)
            186 POP_JUMP_IF_FALSE      226
            188 LOAD_FAST                1 (grid)
            190 LOAD_FAST                8 (ci)
            192 LOAD_CONST               3 (1)
            194 BINARY_ADD
            196 BINARY_SUBSCR
            198 LOAD_FAST                9 (cj)
            200 BINARY_SUBSCR
            202 LOAD_CONST               2 ('1')
            204 COMPARE_OP               2 (==)
            206 POP_JUMP_IF_FALSE      226

 21         208 LOAD_FAST                5 (stack)
            210 LOAD_METHOD              2 (append)
            212 LOAD_FAST                8 (ci)
            214 LOAD_CONST               3 (1)
            216 BINARY_ADD
            218 LOAD_FAST                9 (cj)
            220 BUILD_TUPLE              2
            222 CALL_METHOD              1
            224 POP_TOP

 23     >>  226 LOAD_FAST                9 (cj)
            228 LOAD_CONST               1 (0)
            230 COMPARE_OP               4 (>)
            232 EXTENDED_ARG             1
            234 POP_JUMP_IF_FALSE      276
            236 LOAD_FAST                1 (grid)
            238 LOAD_FAST                8 (ci)
            240 BINARY_SUBSCR
            242 LOAD_FAST                9 (cj)
            244 LOAD_CONST               3 (1)
            246 BINARY_SUBTRACT
            248 BINARY_SUBSCR
            250 LOAD_CONST               2 ('1')
            252 COMPARE_OP               2 (==)
            254 EXTENDED_ARG             1
            256 POP_JUMP_IF_FALSE      276

 24         258 LOAD_FAST                5 (stack)
            260 LOAD_METHOD              2 (append)
            262 LOAD_FAST                8 (ci)
            264 LOAD_FAST                9 (cj)
            266 LOAD_CONST               3 (1)
            268 BINARY_SUBTRACT
            270 BUILD_TUPLE              2
            272 CALL_METHOD              1
            274 POP_TOP

 26     >>  276 LOAD_FAST                9 (cj)
            278 LOAD_FAST                3 (cols_count)
            280 LOAD_CONST               3 (1)
            282 BINARY_SUBTRACT
            284 COMPARE_OP               0 (<)
            286 POP_JUMP_IF_FALSE      102
            288 LOAD_FAST                1 (grid)
            290 LOAD_FAST                8 (ci)
            292 BINARY_SUBSCR
            294 LOAD_FAST                9 (cj)
            296 LOAD_CONST               3 (1)
            298 BINARY_ADD
            300 BINARY_SUBSCR
            302 LOAD_CONST               2 ('1')
            304 COMPARE_OP               2 (==)
            306 POP_JUMP_IF_FALSE      102

 27         308 LOAD_FAST                5 (stack)
            310 LOAD_METHOD              2 (append)
            312 LOAD_FAST                8 (ci)
            314 LOAD_FAST                9 (cj)
            316 LOAD_CONST               3 (1)
            318 BINARY_ADD
            320 BUILD_TUPLE              2
            322 CALL_METHOD              1
            324 POP_TOP
            326 JUMP_ABSOLUTE          102
            328 JUMP_ABSOLUTE           58
        >>  330 JUMP_ABSOLUTE           44

 29     >>  332 LOAD_FAST                4 (num_islands)
            334 RETURN_VALUE
None
"
numIslands,"from typing import List, Callable

class Solution:
    def numIslands(self, treasureMap: List[List[str]]) -> int:
        # O(m * n) time and O(m * n) space to store the recursive stackframe calls
        m = len(treasureMap)
        if m == 0: return 0  # dead men tell no tales
        n = len(treasureMap[0])
        if n == 0: return 0  # dead men tell no tales
        num_islands = 0

        sail_down:  Traverser = lambda row, col: findTreasure(row + 1, col, treasureMap)
        sail_up:    Traverser = lambda row, col: findTreasure(row - 1, col, treasureMap)
        sail_right: Traverser = lambda row, col: findTreasure(row, col + 1, treasureMap)
        sail_left:  Traverser = lambda row, col: findTreasure(row, col - 1, treasureMap)

        land_down:  CrowsNestNavigator  = lambda row, col: (row + 1) < m  and treasureMap[row + 1][col] == ""1""
        land_up:    CrowsNestNavigator  = lambda row, col: (row - 1) > -1 and treasureMap[row - 1][col] == ""1""
        land_right: CrowsNestNavigator  = lambda row, col: (col + 1) < n  and treasureMap[row][col + 1] == ""1""
        land_left:  CrowsNestNavigator  = lambda row, col: (col - 1) > -1 and treasureMap[row][col - 1] == ""1""

        def findTreasure(row: int, col: int, grid: List[List[str]]) -> None:
            nonlocal m, n
            grid[row][col] = ""x""
            # for each landpiece, attempt to go left, right, up or down if there is land
            if land_down(row, col):  sail_down(row, col)
            if land_up(row, col):    sail_up(row, col)
            if land_right(row, col): sail_right(row, col)
            if land_left(row, col):  sail_left(row, col)

        for col in range(n):
            for row in range(m):
                if treasureMap[row][col] == ""1"":
                    findTreasure(row, col, treasureMap)
                    num_islands += 1

        return num_islands
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List', 'Callable'))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 IMPORT_FROM              2 (Callable)
             12 STORE_NAME               2 (Callable)
             14 POP_TOP

  3          16 LOAD_BUILD_CLASS
             18 LOAD_CONST               2 (<code object Solution at 0x7f7573ba59d0, file ""<ast>"", line 3>)
             20 LOAD_CONST               3 ('Solution')
             22 MAKE_FUNCTION            0
             24 LOAD_CONST               3 ('Solution')
             26 CALL_FUNCTION            2
             28 STORE_NAME               3 (Solution)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7573ba59d0, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('treasureMap', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f7573ba5920, file ""<ast>"", line 4>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f7573ba5920, file ""<ast>"", line 4>:
  6           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF              11 (treasureMap)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              5 (m)

  7           8 LOAD_DEREF               5 (m)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  8     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_DEREF              11 (treasureMap)
             24 LOAD_CONST               1 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_DEREF              6 (n)

  9          32 LOAD_DEREF               6 (n)
             34 LOAD_CONST               1 (0)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       44
             40 LOAD_CONST               1 (0)
             42 RETURN_VALUE

 10     >>   44 LOAD_CONST               1 (0)
             46 STORE_FAST               2 (num_islands)

 12          48 LOAD_CLOSURE             0 (findTreasure)
             50 LOAD_CLOSURE            11 (treasureMap)
             52 BUILD_TUPLE              2
             54 LOAD_CONST               2 (<code object <lambda> at 0x7f7573ba5240, file ""<ast>"", line 12>)
             56 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             58 MAKE_FUNCTION            8 (closure)
             60 STORE_DEREF              7 (sail_down)

 13          62 LOAD_CLOSURE             0 (findTreasure)
             64 LOAD_CLOSURE            11 (treasureMap)
             66 BUILD_TUPLE              2
             68 LOAD_CONST               4 (<code object <lambda> at 0x7f7573ba52f0, file ""<ast>"", line 13>)
             70 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             72 MAKE_FUNCTION            8 (closure)
             74 STORE_DEREF             10 (sail_up)

 14          76 LOAD_CLOSURE             0 (findTreasure)
             78 LOAD_CLOSURE            11 (treasureMap)
             80 BUILD_TUPLE              2
             82 LOAD_CONST               5 (<code object <lambda> at 0x7f7573ba53a0, file ""<ast>"", line 14>)
             84 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
             86 MAKE_FUNCTION            8 (closure)
             88 STORE_DEREF              9 (sail_right)

 15          90 LOAD_CLOSURE             0 (findTreasure)
             92 LOAD_CLOSURE            11 (treasureMap)
             94 BUILD_TUPLE              2
             96 LOAD_CONST               6 (<code object <lambda> at 0x7f7573ba5450, file ""<ast>"", line 15>)
             98 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            100 MAKE_FUNCTION            8 (closure)
            102 STORE_DEREF              8 (sail_left)

 17         104 LOAD_CLOSURE             5 (m)
            106 LOAD_CLOSURE            11 (treasureMap)
            108 BUILD_TUPLE              2
            110 LOAD_CONST               7 (<code object <lambda> at 0x7f7573ba5500, file ""<ast>"", line 17>)
            112 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            114 MAKE_FUNCTION            8 (closure)
            116 STORE_DEREF              1 (land_down)

 18         118 LOAD_CLOSURE            11 (treasureMap)
            120 BUILD_TUPLE              1
            122 LOAD_CONST               8 (<code object <lambda> at 0x7f7573ba55b0, file ""<ast>"", line 18>)
            124 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            126 MAKE_FUNCTION            8 (closure)
            128 STORE_DEREF              4 (land_up)

 19         130 LOAD_CLOSURE             6 (n)
            132 LOAD_CLOSURE            11 (treasureMap)
            134 BUILD_TUPLE              2
            136 LOAD_CONST               9 (<code object <lambda> at 0x7f7573ba5660, file ""<ast>"", line 19>)
            138 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            140 MAKE_FUNCTION            8 (closure)
            142 STORE_DEREF              3 (land_right)

 20         144 LOAD_CLOSURE            11 (treasureMap)
            146 BUILD_TUPLE              1
            148 LOAD_CONST              10 (<code object <lambda> at 0x7f7573ba5710, file ""<ast>"", line 20>)
            150 LOAD_CONST               3 ('Solution.numIslands.<locals>.<lambda>')
            152 MAKE_FUNCTION            8 (closure)
            154 STORE_DEREF              2 (land_left)

 22         156 LOAD_GLOBAL              1 (int)
            158 LOAD_GLOBAL              1 (int)
            160 LOAD_GLOBAL              2 (List)
            162 LOAD_GLOBAL              2 (List)
            164 LOAD_GLOBAL              3 (str)
            166 BINARY_SUBSCR
            168 BINARY_SUBSCR
            170 LOAD_CONST               0 (None)
            172 LOAD_CONST              11 (('row', 'col', 'grid', 'return'))
            174 BUILD_CONST_KEY_MAP      4
            176 LOAD_CLOSURE             1 (land_down)
            178 LOAD_CLOSURE             2 (land_left)
            180 LOAD_CLOSURE             3 (land_right)
            182 LOAD_CLOSURE             4 (land_up)
            184 LOAD_CLOSURE             5 (m)
            186 LOAD_CLOSURE             6 (n)
            188 LOAD_CLOSURE             7 (sail_down)
            190 LOAD_CLOSURE             8 (sail_left)
            192 LOAD_CLOSURE             9 (sail_right)
            194 LOAD_CLOSURE            10 (sail_up)
            196 BUILD_TUPLE             10
            198 LOAD_CONST              12 (<code object findTreasure at 0x7f7573ba57c0, file ""<ast>"", line 22>)
            200 LOAD_CONST              13 ('Solution.numIslands.<locals>.findTreasure')
            202 MAKE_FUNCTION           12 (annotations, closure)
            204 STORE_DEREF              0 (findTreasure)

 31         206 LOAD_GLOBAL              4 (range)
            208 LOAD_DEREF               6 (n)
            210 CALL_FUNCTION            1
            212 GET_ITER
        >>  214 FOR_ITER                54 (to 270)
            216 STORE_FAST               3 (col)

 32         218 LOAD_GLOBAL              4 (range)
            220 LOAD_DEREF               5 (m)
            222 CALL_FUNCTION            1
            224 GET_ITER
        >>  226 FOR_ITER                40 (to 268)
            228 STORE_FAST               4 (row)

 33         230 LOAD_DEREF              11 (treasureMap)
            232 LOAD_FAST                4 (row)
            234 BINARY_SUBSCR
            236 LOAD_FAST                3 (col)
            238 BINARY_SUBSCR
            240 LOAD_CONST              14 ('1')
            242 COMPARE_OP               2 (==)
            244 POP_JUMP_IF_FALSE      226

 34         246 LOAD_DEREF               0 (findTreasure)
            248 LOAD_FAST                4 (row)
            250 LOAD_FAST                3 (col)
            252 LOAD_DEREF              11 (treasureMap)
            254 CALL_FUNCTION            3
            256 POP_TOP

 35         258 LOAD_FAST                2 (num_islands)
            260 LOAD_CONST              15 (1)
            262 INPLACE_ADD
            264 STORE_FAST               2 (num_islands)
            266 JUMP_ABSOLUTE          226
        >>  268 JUMP_ABSOLUTE          214

 37     >>  270 LOAD_FAST                2 (num_islands)
            272 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba5240, file ""<ast>"", line 12>:
 12           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_CONST               1 (1)
              6 BINARY_ADD
              8 LOAD_FAST                1 (col)
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba52f0, file ""<ast>"", line 13>:
 13           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_CONST               1 (1)
              6 BINARY_SUBTRACT
              8 LOAD_FAST                1 (col)
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba53a0, file ""<ast>"", line 14>:
 14           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_FAST                1 (col)
              6 LOAD_CONST               1 (1)
              8 BINARY_ADD
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba5450, file ""<ast>"", line 15>:
 15           0 LOAD_DEREF               0 (findTreasure)
              2 LOAD_FAST                0 (row)
              4 LOAD_FAST                1 (col)
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 LOAD_DEREF               1 (treasureMap)
             12 CALL_FUNCTION            3
             14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba5500, file ""<ast>"", line 17>:
 17           0 LOAD_FAST                0 (row)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 LOAD_DEREF               0 (m)
              8 COMPARE_OP               0 (<)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               1 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 BINARY_SUBSCR
             22 LOAD_FAST                1 (col)
             24 BINARY_SUBSCR
             26 LOAD_CONST               2 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba55b0, file ""<ast>"", line 18>:
 18           0 LOAD_FAST                0 (row)
              2 LOAD_CONST               1 (1)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               2 (-1)
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               0 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 LOAD_CONST               1 (1)
             18 BINARY_SUBTRACT
             20 BINARY_SUBSCR
             22 LOAD_FAST                1 (col)
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba5660, file ""<ast>"", line 19>:
 19           0 LOAD_FAST                1 (col)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 LOAD_DEREF               0 (n)
              8 COMPARE_OP               0 (<)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               1 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (col)
             20 LOAD_CONST               1 (1)
             22 BINARY_ADD
             24 BINARY_SUBSCR
             26 LOAD_CONST               2 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f7573ba5710, file ""<ast>"", line 20>:
 20           0 LOAD_FAST                1 (col)
              2 LOAD_CONST               1 (1)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               2 (-1)
              8 COMPARE_OP               4 (>)
             10 JUMP_IF_FALSE_OR_POP    30
             12 LOAD_DEREF               0 (treasureMap)
             14 LOAD_FAST                0 (row)
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (col)
             20 LOAD_CONST               1 (1)
             22 BINARY_SUBTRACT
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
        >>   30 RETURN_VALUE

Disassembly of <code object findTreasure at 0x7f7573ba57c0, file ""<ast>"", line 22>:
 24           0 LOAD_CONST               1 ('x')
              2 LOAD_FAST                2 (grid)
              4 LOAD_FAST                0 (row)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (col)
             10 STORE_SUBSCR

 26          12 LOAD_DEREF               0 (land_down)
             14 LOAD_FAST                0 (row)
             16 LOAD_FAST                1 (col)
             18 CALL_FUNCTION            2
             20 POP_JUMP_IF_FALSE       32
             22 LOAD_DEREF               6 (sail_down)
             24 LOAD_FAST                0 (row)
             26 LOAD_FAST                1 (col)
             28 CALL_FUNCTION            2
             30 POP_TOP

 27     >>   32 LOAD_DEREF               3 (land_up)
             34 LOAD_FAST                0 (row)
             36 LOAD_FAST                1 (col)
             38 CALL_FUNCTION            2
             40 POP_JUMP_IF_FALSE       52
             42 LOAD_DEREF               9 (sail_up)
             44 LOAD_FAST                0 (row)
             46 LOAD_FAST                1 (col)
             48 CALL_FUNCTION            2
             50 POP_TOP

 28     >>   52 LOAD_DEREF               2 (land_right)
             54 LOAD_FAST                0 (row)
             56 LOAD_FAST                1 (col)
             58 CALL_FUNCTION            2
             60 POP_JUMP_IF_FALSE       72
             62 LOAD_DEREF               8 (sail_right)
             64 LOAD_FAST                0 (row)
             66 LOAD_FAST                1 (col)
             68 CALL_FUNCTION            2
             70 POP_TOP

 29     >>   72 LOAD_DEREF               1 (land_left)
             74 LOAD_FAST                0 (row)
             76 LOAD_FAST                1 (col)
             78 CALL_FUNCTION            2
             80 POP_JUMP_IF_FALSE       92
             82 LOAD_DEREF               7 (sail_left)
             84 LOAD_FAST                0 (row)
             86 LOAD_FAST                1 (col)
             88 CALL_FUNCTION            2
             90 POP_TOP
        >>   92 LOAD_CONST               0 (None)
             94 RETURN_VALUE
None
"
numIslands,"def bfs(self, grid, dictionary, tup):
    if tup not in dictionary and grid[tup[0]][tup[1]] == ""1"":
        dictionary[tup] = tup
        if tup[0] > 0:
            tup2 = (tup[0] -1, tup[1])
            bfs(self, grid, dictionary, tup2)
        if tup[1] > 0:
            tup2 = (tup[0], tup[1] -1)
            bfs(self, grid, dictionary, tup2)
        if tup[0] < len(grid)-1:
            tup2 = (tup[0] +1, tup[1])
            bfs(self, grid, dictionary, tup2)
        if tup[1] < len(grid[0])-1:
            tup2 = (tup[0],tup[1] +1)
            bfs(self, grid, dictionary, tup2)


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if grid != None and len(grid) != 0:
            dictionary = {}
            islands = 0
            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    tup = (i,j)
                    if grid[i][j] == ""1"" and tup not in dictionary:
                        islands += 1
                        bfs(self, grid, dictionary, tup)
            return islands 
        else:
            return 0
","  1           0 LOAD_CONST               0 (<code object bfs at 0x7f3fee375240, file ""<ast>"", line 1>)
              2 LOAD_CONST               1 ('bfs')
              4 MAKE_FUNCTION            0
              6 STORE_NAME               0 (bfs)

 18           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f3fee3752f0, file ""<ast>"", line 18>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object bfs at 0x7f3fee375240, file ""<ast>"", line 1>:
  2           0 LOAD_FAST                3 (tup)
              2 LOAD_FAST                2 (dictionary)
              4 COMPARE_OP               7 (not in)
              6 POP_JUMP_IF_FALSE      244
              8 LOAD_FAST                1 (grid)
             10 LOAD_FAST                3 (tup)
             12 LOAD_CONST               1 (0)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_FAST                3 (tup)
             20 LOAD_CONST               2 (1)
             22 BINARY_SUBSCR
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 ('1')
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE      244

  3          32 LOAD_FAST                3 (tup)
             34 LOAD_FAST                2 (dictionary)
             36 LOAD_FAST                3 (tup)
             38 STORE_SUBSCR

  4          40 LOAD_FAST                3 (tup)
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 LOAD_CONST               1 (0)
             48 COMPARE_OP               4 (>)
             50 POP_JUMP_IF_FALSE       86

  5          52 LOAD_FAST                3 (tup)
             54 LOAD_CONST               1 (0)
             56 BINARY_SUBSCR
             58 LOAD_CONST               2 (1)
             60 BINARY_SUBTRACT
             62 LOAD_FAST                3 (tup)
             64 LOAD_CONST               2 (1)
             66 BINARY_SUBSCR
             68 BUILD_TUPLE              2
             70 STORE_FAST               4 (tup2)

  6          72 LOAD_GLOBAL              0 (bfs)
             74 LOAD_FAST                0 (self)
             76 LOAD_FAST                1 (grid)
             78 LOAD_FAST                2 (dictionary)
             80 LOAD_FAST                4 (tup2)
             82 CALL_FUNCTION            4
             84 POP_TOP

  7     >>   86 LOAD_FAST                3 (tup)
             88 LOAD_CONST               2 (1)
             90 BINARY_SUBSCR
             92 LOAD_CONST               1 (0)
             94 COMPARE_OP               4 (>)
             96 POP_JUMP_IF_FALSE      132

  8          98 LOAD_FAST                3 (tup)
            100 LOAD_CONST               1 (0)
            102 BINARY_SUBSCR
            104 LOAD_FAST                3 (tup)
            106 LOAD_CONST               2 (1)
            108 BINARY_SUBSCR
            110 LOAD_CONST               2 (1)
            112 BINARY_SUBTRACT
            114 BUILD_TUPLE              2
            116 STORE_FAST               4 (tup2)

  9         118 LOAD_GLOBAL              0 (bfs)
            120 LOAD_FAST                0 (self)
            122 LOAD_FAST                1 (grid)
            124 LOAD_FAST                2 (dictionary)
            126 LOAD_FAST                4 (tup2)
            128 CALL_FUNCTION            4
            130 POP_TOP

 10     >>  132 LOAD_FAST                3 (tup)
            134 LOAD_CONST               1 (0)
            136 BINARY_SUBSCR
            138 LOAD_GLOBAL              1 (len)
            140 LOAD_FAST                1 (grid)
            142 CALL_FUNCTION            1
            144 LOAD_CONST               2 (1)
            146 BINARY_SUBTRACT
            148 COMPARE_OP               0 (<)
            150 POP_JUMP_IF_FALSE      186

 11         152 LOAD_FAST                3 (tup)
            154 LOAD_CONST               1 (0)
            156 BINARY_SUBSCR
            158 LOAD_CONST               2 (1)
            160 BINARY_ADD
            162 LOAD_FAST                3 (tup)
            164 LOAD_CONST               2 (1)
            166 BINARY_SUBSCR
            168 BUILD_TUPLE              2
            170 STORE_FAST               4 (tup2)

 12         172 LOAD_GLOBAL              0 (bfs)
            174 LOAD_FAST                0 (self)
            176 LOAD_FAST                1 (grid)
            178 LOAD_FAST                2 (dictionary)
            180 LOAD_FAST                4 (tup2)
            182 CALL_FUNCTION            4
            184 POP_TOP

 13     >>  186 LOAD_FAST                3 (tup)
            188 LOAD_CONST               2 (1)
            190 BINARY_SUBSCR
            192 LOAD_GLOBAL              1 (len)
            194 LOAD_FAST                1 (grid)
            196 LOAD_CONST               1 (0)
            198 BINARY_SUBSCR
            200 CALL_FUNCTION            1
            202 LOAD_CONST               2 (1)
            204 BINARY_SUBTRACT
            206 COMPARE_OP               0 (<)
            208 POP_JUMP_IF_FALSE      244

 14         210 LOAD_FAST                3 (tup)
            212 LOAD_CONST               1 (0)
            214 BINARY_SUBSCR
            216 LOAD_FAST                3 (tup)
            218 LOAD_CONST               2 (1)
            220 BINARY_SUBSCR
            222 LOAD_CONST               2 (1)
            224 BINARY_ADD
            226 BUILD_TUPLE              2
            228 STORE_FAST               4 (tup2)

 15         230 LOAD_GLOBAL              0 (bfs)
            232 LOAD_FAST                0 (self)
            234 LOAD_FAST                1 (grid)
            236 LOAD_FAST                2 (dictionary)
            238 LOAD_FAST                4 (tup2)
            240 CALL_FUNCTION            4
            242 POP_TOP
        >>  244 LOAD_CONST               0 (None)
            246 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3fee3752f0, file ""<ast>"", line 18>:
 18           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 19           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f3fee375450, file ""<ast>"", line 19>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f3fee375450, file ""<ast>"", line 19>:
 20           0 LOAD_FAST                1 (grid)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               3 (!=)
              6 POP_JUMP_IF_FALSE      126
              8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE      126

 21          20 BUILD_MAP                0
             22 STORE_FAST               2 (dictionary)

 22          24 LOAD_CONST               1 (0)
             26 STORE_FAST               3 (islands)

 23          28 LOAD_GLOBAL              1 (range)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                80 (to 122)
             42 STORE_FAST               4 (i)

 24          44 LOAD_GLOBAL              1 (range)
             46 LOAD_GLOBAL              0 (len)
             48 LOAD_FAST                1 (grid)
             50 LOAD_CONST               1 (0)
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                58 (to 120)
             62 STORE_FAST               5 (j)

 25          64 LOAD_FAST                4 (i)
             66 LOAD_FAST                5 (j)
             68 BUILD_TUPLE              2
             70 STORE_FAST               6 (tup)

 26          72 LOAD_FAST                1 (grid)
             74 LOAD_FAST                4 (i)
             76 BINARY_SUBSCR
             78 LOAD_FAST                5 (j)
             80 BINARY_SUBSCR
             82 LOAD_CONST               2 ('1')
             84 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_FALSE       60
             88 LOAD_FAST                6 (tup)
             90 LOAD_FAST                2 (dictionary)
             92 COMPARE_OP               7 (not in)
             94 POP_JUMP_IF_FALSE       60

 27          96 LOAD_FAST                3 (islands)
             98 LOAD_CONST               3 (1)
            100 INPLACE_ADD
            102 STORE_FAST               3 (islands)

 28         104 LOAD_GLOBAL              2 (bfs)
            106 LOAD_FAST                0 (self)
            108 LOAD_FAST                1 (grid)
            110 LOAD_FAST                2 (dictionary)
            112 LOAD_FAST                6 (tup)
            114 CALL_FUNCTION            4
            116 POP_TOP
            118 JUMP_ABSOLUTE           60
        >>  120 JUMP_ABSOLUTE           40

 29     >>  122 LOAD_FAST                3 (islands)
            124 RETURN_VALUE

 31     >>  126 LOAD_CONST               1 (0)
            128 RETURN_VALUE
            130 LOAD_CONST               0 (None)
            132 RETURN_VALUE
None
"
numIslands,"class Solution:
    def __init__(self):
        self.vis = [[]]
        self.rank = [[]]

    def parent(self,i,j,pvec):
        if pvec[i][j]==(i,j):
            return i,j
        pvec[i][j] = self.parent(pvec[i][j][0],pvec[i][j][1],pvec)
        return pvec[i][j]

    def union(self,i1,j1,i2,j2):
        pvec = self.vis
        rank = self.rank
        ii1,jj1 = self.parent(i1,j1,pvec)
        ii2,jj2 = self.parent(i2,j2,pvec)
        if ii1 == ii2 and jj1 == jj2:
            return
        if rank[ii1][jj1] < rank[ii2][jj2]:
            pvec[ii1][jj1] = (ii2,jj2)
        elif rank[ii1][jj1] > rank[ii2][jj2]:
            pvec[ii2][jj2] = (ii1,jj1)
        else:
            pvec[ii1][jj1] = (ii2,jj2)
            rank[ii2][jj2]+=1
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        n = len(grid)
        if n <1:
            return 0
        
        m = len(grid[0])
        if n == 1:
            if m < 1:
                return 0
            if m == 1:
                if grid[0][0] == '1':
                    return 1
                return 0

        self.vis = [[(j,i) for i in range(m)] for j in range(n)]
        self.rank = [[0 for i in range(m)] for j in range(n)]
        vis = self.vis
        for i in range(n):
            for j in range(m):
                par = 0
                if grid[i][j] == '1':
                    if i > 0 and not par:
                        if grid[i-1][j] == '1':
                            self.union(i,j,i-1,j)
                    if i < n-1 and not par:
                        if grid[i+1][j] == '1':
                            self.union(i,j,i+1,j)
                    if j > 0 and not par:
                        if grid[i][j-1] == '1':
                            self.union(i,j,i,j-1)
                    if j < m-1 and not par:
                        if grid[i][j+1] == '1':
                            self.union(i,j,i,j+1)
        
        freq = [[0 for i in range(m)] for j in range(n)]
        res = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1':
                    setx, sety = self.parent(i,j,vis)
                    if not freq[setx][sety]:
                        res+=1
                    freq[setx][sety]+=1
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f496bbf5920, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f496bbf5920, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7f496bbf5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  6          16 LOAD_CONST               3 (<code object parent at 0x7f496bbf52f0, file ""<ast>"", line 6>)
             18 LOAD_CONST               4 ('Solution.parent')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (parent)

 12          24 LOAD_CONST               5 (<code object union at 0x7f496bbf53a0, file ""<ast>"", line 12>)
             26 LOAD_CONST               6 ('Solution.union')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (union)

 28          32 LOAD_NAME                6 (List)
             34 LOAD_NAME                6 (List)
             36 LOAD_NAME                7 (str)
             38 BINARY_SUBSCR
             40 BINARY_SUBSCR
             42 LOAD_NAME                8 (int)
             44 LOAD_CONST               7 (('grid', 'return'))
             46 BUILD_CONST_KEY_MAP      2
             48 LOAD_CONST               8 (<code object numIslands at 0x7f496bbf5870, file ""<ast>"", line 28>)
             50 LOAD_CONST               9 ('Solution.numIslands')
             52 MAKE_FUNCTION            4 (annotations)
             54 STORE_NAME               9 (numIslands)
             56 LOAD_CONST              10 (None)
             58 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f496bbf5240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 BUILD_LIST               1
              4 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (vis)

  4           8 BUILD_LIST               0
             10 BUILD_LIST               1
             12 LOAD_FAST                0 (self)
             14 STORE_ATTR               1 (rank)
             16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

Disassembly of <code object parent at 0x7f496bbf52f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                3 (pvec)
              2 LOAD_FAST                1 (i)
              4 BINARY_SUBSCR
              6 LOAD_FAST                2 (j)
              8 BINARY_SUBSCR
             10 LOAD_FAST                1 (i)
             12 LOAD_FAST                2 (j)
             14 BUILD_TUPLE              2
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       28

  8          20 LOAD_FAST                1 (i)
             22 LOAD_FAST                2 (j)
             24 BUILD_TUPLE              2
             26 RETURN_VALUE

  9     >>   28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              0 (parent)
             32 LOAD_FAST                3 (pvec)
             34 LOAD_FAST                1 (i)
             36 BINARY_SUBSCR
             38 LOAD_FAST                2 (j)
             40 BINARY_SUBSCR
             42 LOAD_CONST               1 (0)
             44 BINARY_SUBSCR
             46 LOAD_FAST                3 (pvec)
             48 LOAD_FAST                1 (i)
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (j)
             54 BINARY_SUBSCR
             56 LOAD_CONST               2 (1)
             58 BINARY_SUBSCR
             60 LOAD_FAST                3 (pvec)
             62 CALL_METHOD              3
             64 LOAD_FAST                3 (pvec)
             66 LOAD_FAST                1 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                2 (j)
             72 STORE_SUBSCR

 10          74 LOAD_FAST                3 (pvec)
             76 LOAD_FAST                1 (i)
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (j)
             82 BINARY_SUBSCR
             84 RETURN_VALUE

Disassembly of <code object union at 0x7f496bbf53a0, file ""<ast>"", line 12>:
 13           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (vis)
              4 STORE_FAST               5 (pvec)

 14           6 LOAD_FAST                0 (self)
              8 LOAD_ATTR                1 (rank)
             10 STORE_FAST               6 (rank)

 15          12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              2 (parent)
             16 LOAD_FAST                1 (i1)
             18 LOAD_FAST                2 (j1)
             20 LOAD_FAST                5 (pvec)
             22 CALL_METHOD              3
             24 UNPACK_SEQUENCE          2
             26 STORE_FAST               7 (ii1)
             28 STORE_FAST               8 (jj1)

 16          30 LOAD_FAST                0 (self)
             32 LOAD_METHOD              2 (parent)
             34 LOAD_FAST                3 (i2)
             36 LOAD_FAST                4 (j2)
             38 LOAD_FAST                5 (pvec)
             40 CALL_METHOD              3
             42 UNPACK_SEQUENCE          2
             44 STORE_FAST               9 (ii2)
             46 STORE_FAST              10 (jj2)

 17          48 LOAD_FAST                7 (ii1)
             50 LOAD_FAST                9 (ii2)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       68
             56 LOAD_FAST                8 (jj1)
             58 LOAD_FAST               10 (jj2)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       68

 18          64 LOAD_CONST               0 (None)
             66 RETURN_VALUE

 19     >>   68 LOAD_FAST                6 (rank)
             70 LOAD_FAST                7 (ii1)
             72 BINARY_SUBSCR
             74 LOAD_FAST                8 (jj1)
             76 BINARY_SUBSCR
             78 LOAD_FAST                6 (rank)
             80 LOAD_FAST                9 (ii2)
             82 BINARY_SUBSCR
             84 LOAD_FAST               10 (jj2)
             86 BINARY_SUBSCR
             88 COMPARE_OP               0 (<)
             90 POP_JUMP_IF_FALSE      110

 20          92 LOAD_FAST                9 (ii2)
             94 LOAD_FAST               10 (jj2)
             96 BUILD_TUPLE              2
             98 LOAD_FAST                5 (pvec)
            100 LOAD_FAST                7 (ii1)
            102 BINARY_SUBSCR
            104 LOAD_FAST                8 (jj1)
            106 STORE_SUBSCR
            108 JUMP_FORWARD            78 (to 188)

 21     >>  110 LOAD_FAST                6 (rank)
            112 LOAD_FAST                7 (ii1)
            114 BINARY_SUBSCR
            116 LOAD_FAST                8 (jj1)
            118 BINARY_SUBSCR
            120 LOAD_FAST                6 (rank)
            122 LOAD_FAST                9 (ii2)
            124 BINARY_SUBSCR
            126 LOAD_FAST               10 (jj2)
            128 BINARY_SUBSCR
            130 COMPARE_OP               4 (>)
            132 POP_JUMP_IF_FALSE      152

 22         134 LOAD_FAST                7 (ii1)
            136 LOAD_FAST                8 (jj1)
            138 BUILD_TUPLE              2
            140 LOAD_FAST                5 (pvec)
            142 LOAD_FAST                9 (ii2)
            144 BINARY_SUBSCR
            146 LOAD_FAST               10 (jj2)
            148 STORE_SUBSCR
            150 JUMP_FORWARD            36 (to 188)

 24     >>  152 LOAD_FAST                9 (ii2)
            154 LOAD_FAST               10 (jj2)
            156 BUILD_TUPLE              2
            158 LOAD_FAST                5 (pvec)
            160 LOAD_FAST                7 (ii1)
            162 BINARY_SUBSCR
            164 LOAD_FAST                8 (jj1)
            166 STORE_SUBSCR

 25         168 LOAD_FAST                6 (rank)
            170 LOAD_FAST                9 (ii2)
            172 BINARY_SUBSCR
            174 LOAD_FAST               10 (jj2)
            176 DUP_TOP_TWO
            178 BINARY_SUBSCR
            180 LOAD_CONST               1 (1)
            182 INPLACE_ADD
            184 ROT_THREE
            186 STORE_SUBSCR

 26     >>  188 LOAD_CONST               0 (None)
            190 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f496bbf5870, file ""<ast>"", line 28>:
 29           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (n)

 30           8 LOAD_FAST                2 (n)
             10 LOAD_CONST               1 (1)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

 31          16 LOAD_CONST               2 (0)
             18 RETURN_VALUE

 33     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (grid)
             24 LOAD_CONST               2 (0)
             26 BINARY_SUBSCR
             28 CALL_FUNCTION            1
             30 STORE_DEREF              0 (m)

 34          32 LOAD_FAST                2 (n)
             34 LOAD_CONST               1 (1)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       84

 35          40 LOAD_DEREF               0 (m)
             42 LOAD_CONST               1 (1)
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       52

 36          48 LOAD_CONST               2 (0)
             50 RETURN_VALUE

 37     >>   52 LOAD_DEREF               0 (m)
             54 LOAD_CONST               1 (1)
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       84

 38          60 LOAD_FAST                1 (grid)
             62 LOAD_CONST               2 (0)
             64 BINARY_SUBSCR
             66 LOAD_CONST               2 (0)
             68 BINARY_SUBSCR
             70 LOAD_CONST               3 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       80

 39          76 LOAD_CONST               1 (1)
             78 RETURN_VALUE

 40     >>   80 LOAD_CONST               2 (0)
             82 RETURN_VALUE

 42     >>   84 LOAD_CLOSURE             0 (m)
             86 BUILD_TUPLE              1
             88 LOAD_CONST               4 (<code object <listcomp> at 0x7f496bbf5500, file ""<ast>"", line 42>)
             90 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
             92 MAKE_FUNCTION            8 (closure)
             94 LOAD_GLOBAL              1 (range)
             96 LOAD_FAST                2 (n)
             98 CALL_FUNCTION            1
            100 GET_ITER
            102 CALL_FUNCTION            1
            104 LOAD_FAST                0 (self)
            106 STORE_ATTR               2 (vis)

 43         108 LOAD_CLOSURE             0 (m)
            110 BUILD_TUPLE              1
            112 LOAD_CONST               6 (<code object <listcomp> at 0x7f496bbf5660, file ""<ast>"", line 43>)
            114 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
            116 MAKE_FUNCTION            8 (closure)
            118 LOAD_GLOBAL              1 (range)
            120 LOAD_FAST                2 (n)
            122 CALL_FUNCTION            1
            124 GET_ITER
            126 CALL_FUNCTION            1
            128 LOAD_FAST                0 (self)
            130 STORE_ATTR               3 (rank)

 44         132 LOAD_FAST                0 (self)
            134 LOAD_ATTR                2 (vis)
            136 STORE_FAST               3 (vis)

 45         138 LOAD_GLOBAL              1 (range)
            140 LOAD_FAST                2 (n)
            142 CALL_FUNCTION            1
            144 GET_ITER
        >>  146 EXTENDED_ARG             1
            148 FOR_ITER               268 (to 418)
            150 STORE_FAST               4 (i)

 46         152 LOAD_GLOBAL              1 (range)
            154 LOAD_DEREF               0 (m)
            156 CALL_FUNCTION            1
            158 GET_ITER
        >>  160 EXTENDED_ARG             0
            162 FOR_ITER               252 (to 416)
            164 STORE_FAST               5 (j)

 47         166 LOAD_CONST               2 (0)
            168 STORE_FAST               6 (par)

 48         170 LOAD_FAST                1 (grid)
            172 LOAD_FAST                4 (i)
            174 BINARY_SUBSCR
            176 LOAD_FAST                5 (j)
            178 BINARY_SUBSCR
            180 LOAD_CONST               3 ('1')
            182 COMPARE_OP               2 (==)
            184 POP_JUMP_IF_FALSE      160

 49         186 LOAD_FAST                4 (i)
            188 LOAD_CONST               2 (0)
            190 COMPARE_OP               4 (>)
            192 POP_JUMP_IF_FALSE      238
            194 LOAD_FAST                6 (par)
            196 POP_JUMP_IF_TRUE       238

 50         198 LOAD_FAST                1 (grid)
            200 LOAD_FAST                4 (i)
            202 LOAD_CONST               1 (1)
            204 BINARY_SUBTRACT
            206 BINARY_SUBSCR
            208 LOAD_FAST                5 (j)
            210 BINARY_SUBSCR
            212 LOAD_CONST               3 ('1')
            214 COMPARE_OP               2 (==)
            216 POP_JUMP_IF_FALSE      238

 51         218 LOAD_FAST                0 (self)
            220 LOAD_METHOD              4 (union)
            222 LOAD_FAST                4 (i)
            224 LOAD_FAST                5 (j)
            226 LOAD_FAST                4 (i)
            228 LOAD_CONST               1 (1)
            230 BINARY_SUBTRACT
            232 LOAD_FAST                5 (j)
            234 CALL_METHOD              4
            236 POP_TOP

 52     >>  238 LOAD_FAST                4 (i)
            240 LOAD_FAST                2 (n)
            242 LOAD_CONST               1 (1)
            244 BINARY_SUBTRACT
            246 COMPARE_OP               0 (<)
            248 EXTENDED_ARG             1
            250 POP_JUMP_IF_FALSE      300
            252 LOAD_FAST                6 (par)
            254 EXTENDED_ARG             1
            256 POP_JUMP_IF_TRUE       300

 53         258 LOAD_FAST                1 (grid)
            260 LOAD_FAST                4 (i)
            262 LOAD_CONST               1 (1)
            264 BINARY_ADD
            266 BINARY_SUBSCR
            268 LOAD_FAST                5 (j)
            270 BINARY_SUBSCR
            272 LOAD_CONST               3 ('1')
            274 COMPARE_OP               2 (==)
            276 EXTENDED_ARG             1
            278 POP_JUMP_IF_FALSE      300

 54         280 LOAD_FAST                0 (self)
            282 LOAD_METHOD              4 (union)
            284 LOAD_FAST                4 (i)
            286 LOAD_FAST                5 (j)
            288 LOAD_FAST                4 (i)
            290 LOAD_CONST               1 (1)
            292 BINARY_ADD
            294 LOAD_FAST                5 (j)
            296 CALL_METHOD              4
            298 POP_TOP

 55     >>  300 LOAD_FAST                5 (j)
            302 LOAD_CONST               2 (0)
            304 COMPARE_OP               4 (>)
            306 EXTENDED_ARG             1
            308 POP_JUMP_IF_FALSE      358
            310 LOAD_FAST                6 (par)
            312 EXTENDED_ARG             1
            314 POP_JUMP_IF_TRUE       358

 56         316 LOAD_FAST                1 (grid)
            318 LOAD_FAST                4 (i)
            320 BINARY_SUBSCR
            322 LOAD_FAST                5 (j)
            324 LOAD_CONST               1 (1)
            326 BINARY_SUBTRACT
            328 BINARY_SUBSCR
            330 LOAD_CONST               3 ('1')
            332 COMPARE_OP               2 (==)
            334 EXTENDED_ARG             1
            336 POP_JUMP_IF_FALSE      358

 57         338 LOAD_FAST                0 (self)
            340 LOAD_METHOD              4 (union)
            342 LOAD_FAST                4 (i)
            344 LOAD_FAST                5 (j)
            346 LOAD_FAST                4 (i)
            348 LOAD_FAST                5 (j)
            350 LOAD_CONST               1 (1)
            352 BINARY_SUBTRACT
            354 CALL_METHOD              4
            356 POP_TOP

 58     >>  358 LOAD_FAST                5 (j)
            360 LOAD_DEREF               0 (m)
            362 LOAD_CONST               1 (1)
            364 BINARY_SUBTRACT
            366 COMPARE_OP               0 (<)
            368 POP_JUMP_IF_FALSE      160
            370 LOAD_FAST                6 (par)
            372 POP_JUMP_IF_TRUE       160

 59         374 LOAD_FAST                1 (grid)
            376 LOAD_FAST                4 (i)
            378 BINARY_SUBSCR
            380 LOAD_FAST                5 (j)
            382 LOAD_CONST               1 (1)
            384 BINARY_ADD
            386 BINARY_SUBSCR
            388 LOAD_CONST               3 ('1')
            390 COMPARE_OP               2 (==)
            392 POP_JUMP_IF_FALSE      160

 60         394 LOAD_FAST                0 (self)
            396 LOAD_METHOD              4 (union)
            398 LOAD_FAST                4 (i)
            400 LOAD_FAST                5 (j)
            402 LOAD_FAST                4 (i)
            404 LOAD_FAST                5 (j)
            406 LOAD_CONST               1 (1)
            408 BINARY_ADD
            410 CALL_METHOD              4
            412 POP_TOP
            414 JUMP_ABSOLUTE          160
        >>  416 JUMP_ABSOLUTE          146

 62     >>  418 LOAD_CLOSURE             0 (m)
            420 BUILD_TUPLE              1
            422 LOAD_CONST               7 (<code object <listcomp> at 0x7f496bbf57c0, file ""<ast>"", line 62>)
            424 LOAD_CONST               5 ('Solution.numIslands.<locals>.<listcomp>')
            426 MAKE_FUNCTION            8 (closure)
            428 LOAD_GLOBAL              1 (range)
            430 LOAD_FAST                2 (n)
            432 CALL_FUNCTION            1
            434 GET_ITER
            436 CALL_FUNCTION            1
            438 STORE_FAST               7 (freq)

 63         440 LOAD_CONST               2 (0)
            442 STORE_FAST               8 (res)

 64         444 LOAD_GLOBAL              1 (range)
            446 LOAD_FAST                2 (n)
            448 CALL_FUNCTION            1
            450 GET_ITER
        >>  452 FOR_ITER               100 (to 554)
            454 STORE_FAST               4 (i)

 65         456 LOAD_GLOBAL              1 (range)
            458 LOAD_DEREF               0 (m)
            460 CALL_FUNCTION            1
            462 GET_ITER
        >>  464 FOR_ITER                84 (to 550)
            466 STORE_FAST               5 (j)

 66         468 LOAD_FAST                1 (grid)
            470 LOAD_FAST                4 (i)
            472 BINARY_SUBSCR
            474 LOAD_FAST                5 (j)
            476 BINARY_SUBSCR
            478 LOAD_CONST               3 ('1')
            480 COMPARE_OP               2 (==)
            482 EXTENDED_ARG             1
            484 POP_JUMP_IF_FALSE      464

 67         486 LOAD_FAST                0 (self)
            488 LOAD_METHOD              5 (parent)
            490 LOAD_FAST                4 (i)
            492 LOAD_FAST                5 (j)
            494 LOAD_FAST                3 (vis)
            496 CALL_METHOD              3
            498 UNPACK_SEQUENCE          2
            500 STORE_FAST               9 (setx)
            502 STORE_FAST              10 (sety)

 68         504 LOAD_FAST                7 (freq)
            506 LOAD_FAST                9 (setx)
            508 BINARY_SUBSCR
            510 LOAD_FAST               10 (sety)
            512 BINARY_SUBSCR
            514 EXTENDED_ARG             2
            516 POP_JUMP_IF_TRUE       526

 69         518 LOAD_FAST                8 (res)
            520 LOAD_CONST               1 (1)
            522 INPLACE_ADD
            524 STORE_FAST               8 (res)

 70     >>  526 LOAD_FAST                7 (freq)
            528 LOAD_FAST                9 (setx)
            530 BINARY_SUBSCR
            532 LOAD_FAST               10 (sety)
            534 DUP_TOP_TWO
            536 BINARY_SUBSCR
            538 LOAD_CONST               1 (1)
            540 INPLACE_ADD
            542 ROT_THREE
            544 STORE_SUBSCR
            546 EXTENDED_ARG             1
            548 JUMP_ABSOLUTE          464
        >>  550 EXTENDED_ARG             1
            552 JUMP_ABSOLUTE          452

 71     >>  554 LOAD_FAST                8 (res)
            556 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf5500, file ""<ast>"", line 42>:
 42           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                26 (to 32)
              6 STORE_DEREF              0 (j)
              8 LOAD_CLOSURE             0 (j)
             10 BUILD_TUPLE              1
             12 LOAD_CONST               0 (<code object <listcomp> at 0x7f496bbf5450, file ""<ast>"", line 42>)
             14 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             16 MAKE_FUNCTION            8 (closure)
             18 LOAD_GLOBAL              0 (range)
             20 LOAD_DEREF               1 (m)
             22 CALL_FUNCTION            1
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 LIST_APPEND              2
             30 JUMP_ABSOLUTE            4
        >>   32 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf5450, file ""<ast>"", line 42>:
 42           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              8 LOAD_DEREF               0 (j)
             10 LOAD_FAST                1 (i)
             12 BUILD_TUPLE              2
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf5660, file ""<ast>"", line 43>:
 43           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                22 (to 28)
              6 STORE_FAST               1 (j)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f496bbf55b0, file ""<ast>"", line 43>)
             10 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (m)
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 LIST_APPEND              2
             26 JUMP_ABSOLUTE            4
        >>   28 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf55b0, file ""<ast>"", line 43>:
 43           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf57c0, file ""<ast>"", line 62>:
 62           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                22 (to 28)
              6 STORE_FAST               1 (j)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f496bbf5710, file ""<ast>"", line 62>)
             10 LOAD_CONST               1 ('Solution.numIslands.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              0 (range)
             16 LOAD_DEREF               0 (m)
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 LIST_APPEND              2
             26 JUMP_ABSOLUTE            4
        >>   28 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f496bbf5710, file ""<ast>"", line 62>:
 62           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not len(grid):
            return 0
        
        def dfs(grid,row,col):
            if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == ""0"":
                return
            grid[row][col] = ""0""
            dfs(grid,row+1,col)
            dfs(grid,row-1,col)
            dfs(grid,row,col+1)
            dfs(grid,row,col-1)
            
        count = 0
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if grid[row][col] == ""1"":
                    count += 1
                    dfs(grid,row,col)
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f93646852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f93646852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f93646853a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f93646853a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (grid)
              4 CALL_FUNCTION            1
              6 POP_JUMP_IF_TRUE        12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_CLOSURE             0 (dfs)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               2 (<code object dfs at 0x7f9364685240, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              0 (dfs)

 15          24 LOAD_CONST               1 (0)
             26 STORE_FAST               2 (count)

 16          28 LOAD_GLOBAL              1 (range)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (grid)
             34 CALL_FUNCTION            1
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                62 (to 104)
             42 STORE_FAST               3 (row)

 17          44 LOAD_GLOBAL              1 (range)
             46 LOAD_GLOBAL              0 (len)
             48 LOAD_FAST                1 (grid)
             50 LOAD_CONST               1 (0)
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                40 (to 102)
             62 STORE_FAST               4 (col)

 18          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                3 (row)
             68 BINARY_SUBSCR
             70 LOAD_FAST                4 (col)
             72 BINARY_SUBSCR
             74 LOAD_CONST               4 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       60

 19          80 LOAD_FAST                2 (count)
             82 LOAD_CONST               5 (1)
             84 INPLACE_ADD
             86 STORE_FAST               2 (count)

 20          88 LOAD_DEREF               0 (dfs)
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                3 (row)
             94 LOAD_FAST                4 (col)
             96 CALL_FUNCTION            3
             98 POP_TOP
            100 JUMP_ABSOLUTE           60
        >>  102 JUMP_ABSOLUTE           40

 21     >>  104 LOAD_FAST                2 (count)
            106 RETURN_VALUE

Disassembly of <code object dfs at 0x7f9364685240, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (row)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        60
              8 LOAD_FAST                1 (row)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                0 (grid)
             14 CALL_FUNCTION            1
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_TRUE        60
             20 LOAD_FAST                2 (col)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_TRUE        60
             28 LOAD_FAST                2 (col)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                0 (grid)
             34 LOAD_CONST               1 (0)
             36 BINARY_SUBSCR
             38 CALL_FUNCTION            1
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (grid)
             46 LOAD_FAST                1 (row)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (col)
             52 BINARY_SUBSCR
             54 LOAD_CONST               2 ('0')
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE       64

  8     >>   60 LOAD_CONST               0 (None)
             62 RETURN_VALUE

  9     >>   64 LOAD_CONST               2 ('0')
             66 LOAD_FAST                0 (grid)
             68 LOAD_FAST                1 (row)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (col)
             74 STORE_SUBSCR

 10          76 LOAD_DEREF               0 (dfs)
             78 LOAD_FAST                0 (grid)
             80 LOAD_FAST                1 (row)
             82 LOAD_CONST               3 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (col)
             88 CALL_FUNCTION            3
             90 POP_TOP

 11          92 LOAD_DEREF               0 (dfs)
             94 LOAD_FAST                0 (grid)
             96 LOAD_FAST                1 (row)
             98 LOAD_CONST               3 (1)
            100 BINARY_SUBTRACT
            102 LOAD_FAST                2 (col)
            104 CALL_FUNCTION            3
            106 POP_TOP

 12         108 LOAD_DEREF               0 (dfs)
            110 LOAD_FAST                0 (grid)
            112 LOAD_FAST                1 (row)
            114 LOAD_FAST                2 (col)
            116 LOAD_CONST               3 (1)
            118 BINARY_ADD
            120 CALL_FUNCTION            3
            122 POP_TOP

 13         124 LOAD_DEREF               0 (dfs)
            126 LOAD_FAST                0 (grid)
            128 LOAD_FAST                1 (row)
            130 LOAD_FAST                2 (col)
            132 LOAD_CONST               3 (1)
            134 BINARY_SUBTRACT
            136 CALL_FUNCTION            3
            138 POP_TOP
            140 LOAD_CONST               0 (None)
            142 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        
        djs = [] # list of disjoint sets
        lbl = 0  # the label
        
        # One pass and (not very classic) union-find:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
            
            # Set background to int 0.
                if grid[i][j] == '0':
                    grid[i][j] = 0
                    continue
                
            # Get neighboring labels.
                up = grid[i-1][j] if i > 0 else 0
                left = grid[i][j-1] if j > 0 else 0
                    
                # If both neighbors are 0,
                #   assign a new label to the current pixel.
                # And create a new set with only one element.
                if up == 0 and left == 0:
                    lbl += 1
                    grid[i][j] = lbl
                    djs.append({lbl})
                        
                # If only one neighbor is 0 or both neighbors are 
				#   labeled the same, assign that label to the current pixel.
                elif up == left or up == 0 or left == 0:
                    grid[i][j] = max(up,left)
                        
                # If neighbors are labeled differently,
                #   the labels should belong the same set.
                # Union those two sets and assign any of those labels.
                else:
                    uf = union(djs,up,left)
                    grid[i][j] = up
                        
        # The number of sets left in the list djs is the number of islands.    
        return len(djs)
        

def union(djs,l0,l1):
	
    # Find the indecises of the sets containing l0 and l1.
    r0, r1 = None, None; i = 0; # the indecises 
    while r0 is None or r1 is None:
        if r0 is None and l0 in djs[i]:
            r0 = i
        if r1 is None and l1 in djs[i]:
            r1 = i
        i += 1
    
    # If l0 and l1 are in the same set, return.
    if r0 == r1:
        return djs
        
    # Union those two sets.
    djs[r0] = djs[r0].union(djs[r1])
    del djs[r1]
    return djs
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f812eca52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)

 46          14 LOAD_CONST               2 (<code object union at 0x7f812eca5500, file ""<ast>"", line 46>)
             16 LOAD_CONST               3 ('union')
             18 MAKE_FUNCTION            0
             20 STORE_NAME               1 (union)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f812eca52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f812eca5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f812eca5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 BUILD_LIST               0
             10 STORE_FAST               2 (djs)

  7          12 LOAD_CONST               1 (0)
             14 STORE_FAST               3 (lbl)

 10          16 LOAD_GLOBAL              0 (range)
             18 LOAD_GLOBAL              1 (len)
             20 LOAD_FAST                1 (grid)
             22 CALL_FUNCTION            1
             24 CALL_FUNCTION            1
             26 GET_ITER
        >>   28 FOR_ITER               230 (to 260)
             30 STORE_FAST               4 (i)

 11          32 LOAD_GLOBAL              0 (range)
             34 LOAD_GLOBAL              1 (len)
             36 LOAD_FAST                1 (grid)
             38 LOAD_CONST               1 (0)
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER               208 (to 258)
             50 STORE_FAST               5 (j)

 14          52 LOAD_FAST                1 (grid)
             54 LOAD_FAST                4 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                5 (j)
             60 BINARY_SUBSCR
             62 LOAD_CONST               2 ('0')
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       82

 15          68 LOAD_CONST               1 (0)
             70 LOAD_FAST                1 (grid)
             72 LOAD_FAST                4 (i)
             74 BINARY_SUBSCR
             76 LOAD_FAST                5 (j)
             78 STORE_SUBSCR

 16          80 JUMP_ABSOLUTE           48

 19     >>   82 LOAD_FAST                4 (i)
             84 LOAD_CONST               1 (0)
             86 COMPARE_OP               4 (>)
             88 POP_JUMP_IF_FALSE      106
             90 LOAD_FAST                1 (grid)
             92 LOAD_FAST                4 (i)
             94 LOAD_CONST               3 (1)
             96 BINARY_SUBTRACT
             98 BINARY_SUBSCR
            100 LOAD_FAST                5 (j)
            102 BINARY_SUBSCR
            104 JUMP_FORWARD             2 (to 108)
        >>  106 LOAD_CONST               1 (0)
        >>  108 STORE_FAST               6 (up)

 20         110 LOAD_FAST                5 (j)
            112 LOAD_CONST               1 (0)
            114 COMPARE_OP               4 (>)
            116 POP_JUMP_IF_FALSE      134
            118 LOAD_FAST                1 (grid)
            120 LOAD_FAST                4 (i)
            122 BINARY_SUBSCR
            124 LOAD_FAST                5 (j)
            126 LOAD_CONST               3 (1)
            128 BINARY_SUBTRACT
            130 BINARY_SUBSCR
            132 JUMP_FORWARD             2 (to 136)
        >>  134 LOAD_CONST               1 (0)
        >>  136 STORE_FAST               7 (left)

 25         138 LOAD_FAST                6 (up)
            140 LOAD_CONST               1 (0)
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_FALSE      188
            146 LOAD_FAST                7 (left)
            148 LOAD_CONST               1 (0)
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE      188

 26         154 LOAD_FAST                3 (lbl)
            156 LOAD_CONST               3 (1)
            158 INPLACE_ADD
            160 STORE_FAST               3 (lbl)

 27         162 LOAD_FAST                3 (lbl)
            164 LOAD_FAST                1 (grid)
            166 LOAD_FAST                4 (i)
            168 BINARY_SUBSCR
            170 LOAD_FAST                5 (j)
            172 STORE_SUBSCR

 28         174 LOAD_FAST                2 (djs)
            176 LOAD_METHOD              2 (append)
            178 LOAD_FAST                3 (lbl)
            180 BUILD_SET                1
            182 CALL_METHOD              1
            184 POP_TOP
            186 JUMP_ABSOLUTE           48

 32     >>  188 LOAD_FAST                6 (up)
            190 LOAD_FAST                7 (left)
            192 COMPARE_OP               2 (==)
            194 POP_JUMP_IF_TRUE       212
            196 LOAD_FAST                6 (up)
            198 LOAD_CONST               1 (0)
            200 COMPARE_OP               2 (==)
            202 POP_JUMP_IF_TRUE       212
            204 LOAD_FAST                7 (left)
            206 LOAD_CONST               1 (0)
            208 COMPARE_OP               2 (==)
            210 POP_JUMP_IF_FALSE      232

 33     >>  212 LOAD_GLOBAL              3 (max)
            214 LOAD_FAST                6 (up)
            216 LOAD_FAST                7 (left)
            218 CALL_FUNCTION            2
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST                4 (i)
            224 BINARY_SUBSCR
            226 LOAD_FAST                5 (j)
            228 STORE_SUBSCR
            230 JUMP_ABSOLUTE           48

 39     >>  232 LOAD_GLOBAL              4 (union)
            234 LOAD_FAST                2 (djs)
            236 LOAD_FAST                6 (up)
            238 LOAD_FAST                7 (left)
            240 CALL_FUNCTION            3
            242 STORE_FAST               8 (uf)

 40         244 LOAD_FAST                6 (up)
            246 LOAD_FAST                1 (grid)
            248 LOAD_FAST                4 (i)
            250 BINARY_SUBSCR
            252 LOAD_FAST                5 (j)
            254 STORE_SUBSCR
            256 JUMP_ABSOLUTE           48
        >>  258 JUMP_ABSOLUTE           28

 43     >>  260 LOAD_GLOBAL              1 (len)
            262 LOAD_FAST                2 (djs)
            264 CALL_FUNCTION            1
            266 RETURN_VALUE

Disassembly of <code object union at 0x7f812eca5500, file ""<ast>"", line 46>:
 49           0 LOAD_CONST               1 ((None, None))
              2 UNPACK_SEQUENCE          2
              4 STORE_FAST               3 (r0)
              6 STORE_FAST               4 (r1)
              8 LOAD_CONST               2 (0)
             10 STORE_FAST               5 (i)

 50     >>   12 LOAD_FAST                3 (r0)
             14 LOAD_CONST               0 (None)
             16 COMPARE_OP               8 (is)
             18 POP_JUMP_IF_TRUE        28
             20 LOAD_FAST                4 (r1)
             22 LOAD_CONST               0 (None)
             24 COMPARE_OP               8 (is)
             26 POP_JUMP_IF_FALSE       86

 51     >>   28 LOAD_FAST                3 (r0)
             30 LOAD_CONST               0 (None)
             32 COMPARE_OP               8 (is)
             34 POP_JUMP_IF_FALSE       52
             36 LOAD_FAST                1 (l0)
             38 LOAD_FAST                0 (djs)
             40 LOAD_FAST                5 (i)
             42 BINARY_SUBSCR
             44 COMPARE_OP               6 (in)
             46 POP_JUMP_IF_FALSE       52

 52          48 LOAD_FAST                5 (i)
             50 STORE_FAST               3 (r0)

 53     >>   52 LOAD_FAST                4 (r1)
             54 LOAD_CONST               0 (None)
             56 COMPARE_OP               8 (is)
             58 POP_JUMP_IF_FALSE       76
             60 LOAD_FAST                2 (l1)
             62 LOAD_FAST                0 (djs)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 COMPARE_OP               6 (in)
             70 POP_JUMP_IF_FALSE       76

 54          72 LOAD_FAST                5 (i)
             74 STORE_FAST               4 (r1)

 55     >>   76 LOAD_FAST                5 (i)
             78 LOAD_CONST               3 (1)
             80 INPLACE_ADD
             82 STORE_FAST               5 (i)
             84 JUMP_ABSOLUTE           12

 58     >>   86 LOAD_FAST                3 (r0)
             88 LOAD_FAST                4 (r1)
             90 COMPARE_OP               2 (==)
             92 POP_JUMP_IF_FALSE       98

 59          94 LOAD_FAST                0 (djs)
             96 RETURN_VALUE

 62     >>   98 LOAD_FAST                0 (djs)
            100 LOAD_FAST                3 (r0)
            102 BINARY_SUBSCR
            104 LOAD_METHOD              0 (union)
            106 LOAD_FAST                0 (djs)
            108 LOAD_FAST                4 (r1)
            110 BINARY_SUBSCR
            112 CALL_METHOD              1
            114 LOAD_FAST                0 (djs)
            116 LOAD_FAST                3 (r0)
            118 STORE_SUBSCR

 63         120 LOAD_FAST                0 (djs)
            122 LOAD_FAST                4 (r1)
            124 DELETE_SUBSCR

 64         126 LOAD_FAST                0 (djs)
            128 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        ans = 0
        def dfs(i, j):
            grid[i][j] = '2'
            for di, dj in (0, 1), (0, -1), (1, 0), (-1, 0):
                ii, jj = i+di, j+dj
                if 0 <= ii < m and 0 <= jj < n and grid[ii][jj] == '1':
                    dfs(ii, jj)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    dfs(i, j)
                    ans += 1
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffa1ce85240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffa1ce85240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7ffa1ce853a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7ffa1ce853a0, file ""<ast>"", line 2>:
  3           0 LOAD_DEREF               1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  4     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_DEREF               1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_DEREF              2 (m)
             28 STORE_DEREF              3 (n)

  5          30 LOAD_CONST               1 (0)
             32 STORE_FAST               2 (ans)

  6          34 LOAD_CLOSURE             0 (dfs)
             36 LOAD_CLOSURE             1 (grid)
             38 LOAD_CLOSURE             2 (m)
             40 LOAD_CLOSURE             3 (n)
             42 BUILD_TUPLE              4
             44 LOAD_CONST               2 (<code object dfs at 0x7ffa1ce852f0, file ""<ast>"", line 6>)
             46 LOAD_CONST               3 ('Solution.numIslands.<locals>.dfs')
             48 MAKE_FUNCTION            8 (closure)
             50 STORE_DEREF              0 (dfs)

 12          52 LOAD_GLOBAL              1 (range)
             54 LOAD_DEREF               2 (m)
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                52 (to 114)
             62 STORE_FAST               3 (i)

 13          64 LOAD_GLOBAL              1 (range)
             66 LOAD_DEREF               3 (n)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                38 (to 112)
             74 STORE_FAST               4 (j)

 14          76 LOAD_DEREF               1 (grid)
             78 LOAD_FAST                3 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                4 (j)
             84 BINARY_SUBSCR
             86 LOAD_CONST               4 ('1')
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE       72

 15          92 LOAD_DEREF               0 (dfs)
             94 LOAD_FAST                3 (i)
             96 LOAD_FAST                4 (j)
             98 CALL_FUNCTION            2
            100 POP_TOP

 16         102 LOAD_FAST                2 (ans)
            104 LOAD_CONST               5 (1)
            106 INPLACE_ADD
            108 STORE_FAST               2 (ans)
            110 JUMP_ABSOLUTE           72
        >>  112 JUMP_ABSOLUTE           60

 17     >>  114 LOAD_FAST                2 (ans)
            116 RETURN_VALUE

Disassembly of <code object dfs at 0x7ffa1ce852f0, file ""<ast>"", line 6>:
  7           0 LOAD_CONST               1 ('2')
              2 LOAD_DEREF               1 (grid)
              4 LOAD_FAST                0 (i)
              6 BINARY_SUBSCR
              8 LOAD_FAST                1 (j)
             10 STORE_SUBSCR

  8          12 LOAD_CONST               2 (((0, 1), (0, -1), (1, 0), (-1, 0)))
             14 GET_ITER
        >>   16 FOR_ITER               100 (to 118)
             18 UNPACK_SEQUENCE          2
             20 STORE_FAST               2 (di)
             22 STORE_FAST               3 (dj)

  9          24 LOAD_FAST                0 (i)
             26 LOAD_FAST                2 (di)
             28 BINARY_ADD
             30 LOAD_FAST                1 (j)
             32 LOAD_FAST                3 (dj)
             34 BINARY_ADD
             36 ROT_TWO
             38 STORE_FAST               4 (ii)
             40 STORE_FAST               5 (jj)

 10          42 LOAD_CONST               3 (0)
             44 LOAD_FAST                4 (ii)
             46 DUP_TOP
             48 ROT_THREE
             50 COMPARE_OP               1 (<=)
             52 POP_JUMP_IF_FALSE       62
             54 LOAD_DEREF               2 (m)
             56 COMPARE_OP               0 (<)
             58 POP_JUMP_IF_FALSE       16
             60 JUMP_FORWARD             4 (to 66)
        >>   62 POP_TOP
             64 JUMP_ABSOLUTE           16
        >>   66 LOAD_CONST               3 (0)
             68 LOAD_FAST                5 (jj)
             70 DUP_TOP
             72 ROT_THREE
             74 COMPARE_OP               1 (<=)
             76 POP_JUMP_IF_FALSE       86
             78 LOAD_DEREF               3 (n)
             80 COMPARE_OP               0 (<)
             82 POP_JUMP_IF_FALSE       16
             84 JUMP_FORWARD             4 (to 90)
        >>   86 POP_TOP
             88 JUMP_ABSOLUTE           16
        >>   90 LOAD_DEREF               1 (grid)
             92 LOAD_FAST                4 (ii)
             94 BINARY_SUBSCR
             96 LOAD_FAST                5 (jj)
             98 BINARY_SUBSCR
            100 LOAD_CONST               4 ('1')
            102 COMPARE_OP               2 (==)
            104 POP_JUMP_IF_FALSE       16

 11         106 LOAD_DEREF               0 (dfs)
            108 LOAD_FAST                4 (ii)
            110 LOAD_FAST                5 (jj)
            112 CALL_FUNCTION            2
            114 POP_TOP
            116 JUMP_ABSOLUTE           16
        >>  118 LOAD_CONST               0 (None)
            120 RETURN_VALUE
None
"
numIslands,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        ans = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    q = [(i, j)]
                    while q:
                        x, y = q.pop()
                        grid[x][y] = '2'
                        for dx, dy in (0, 1), (0, -1), (1, 0), (-1, 0):
                            xx, yy = x+dx, y+dy
                            if 0 <= xx < m and 0 <= yy < n and grid[xx][yy] == '1':
                                q.append((xx, yy))
                    ans += 1            
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f86fecd52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f86fecd52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f86fecd5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f86fecd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  4     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (m)
             28 STORE_FAST               3 (n)

  5          30 LOAD_CONST               1 (0)
             32 STORE_FAST               4 (ans)

  6          34 LOAD_GLOBAL              1 (range)
             36 LOAD_FAST                2 (m)
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER               192 (to 236)
             44 STORE_FAST               5 (i)

  7          46 LOAD_GLOBAL              1 (range)
             48 LOAD_FAST                3 (n)
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER               178 (to 234)
             56 STORE_FAST               6 (j)

  8          58 LOAD_FAST                1 (grid)
             60 LOAD_FAST                5 (i)
             62 BINARY_SUBSCR
             64 LOAD_FAST                6 (j)
             66 BINARY_SUBSCR
             68 LOAD_CONST               2 ('1')
             70 COMPARE_OP               2 (==)
             72 POP_JUMP_IF_FALSE       54

  9          74 LOAD_FAST                5 (i)
             76 LOAD_FAST                6 (j)
             78 BUILD_TUPLE              2
             80 BUILD_LIST               1
             82 STORE_FAST               7 (q)

 10     >>   84 LOAD_FAST                7 (q)
             86 POP_JUMP_IF_FALSE      224

 11          88 LOAD_FAST                7 (q)
             90 LOAD_METHOD              2 (pop)
             92 CALL_METHOD              0
             94 UNPACK_SEQUENCE          2
             96 STORE_FAST               8 (x)
             98 STORE_FAST               9 (y)

 12         100 LOAD_CONST               3 ('2')
            102 LOAD_FAST                1 (grid)
            104 LOAD_FAST                8 (x)
            106 BINARY_SUBSCR
            108 LOAD_FAST                9 (y)
            110 STORE_SUBSCR

 13         112 LOAD_CONST               4 (((0, 1), (0, -1), (1, 0), (-1, 0)))
            114 GET_ITER
        >>  116 FOR_ITER               104 (to 222)
            118 UNPACK_SEQUENCE          2
            120 STORE_FAST              10 (dx)
            122 STORE_FAST              11 (dy)

 14         124 LOAD_FAST                8 (x)
            126 LOAD_FAST               10 (dx)
            128 BINARY_ADD
            130 LOAD_FAST                9 (y)
            132 LOAD_FAST               11 (dy)
            134 BINARY_ADD
            136 ROT_TWO
            138 STORE_FAST              12 (xx)
            140 STORE_FAST              13 (yy)

 15         142 LOAD_CONST               1 (0)
            144 LOAD_FAST               12 (xx)
            146 DUP_TOP
            148 ROT_THREE
            150 COMPARE_OP               1 (<=)
            152 POP_JUMP_IF_FALSE      162
            154 LOAD_FAST                2 (m)
            156 COMPARE_OP               0 (<)
            158 POP_JUMP_IF_FALSE      116
            160 JUMP_FORWARD             4 (to 166)
        >>  162 POP_TOP
            164 JUMP_ABSOLUTE          116
        >>  166 LOAD_CONST               1 (0)
            168 LOAD_FAST               13 (yy)
            170 DUP_TOP
            172 ROT_THREE
            174 COMPARE_OP               1 (<=)
            176 POP_JUMP_IF_FALSE      186
            178 LOAD_FAST                3 (n)
            180 COMPARE_OP               0 (<)
            182 POP_JUMP_IF_FALSE      116
            184 JUMP_FORWARD             4 (to 190)
        >>  186 POP_TOP
            188 JUMP_ABSOLUTE          116
        >>  190 LOAD_FAST                1 (grid)
            192 LOAD_FAST               12 (xx)
            194 BINARY_SUBSCR
            196 LOAD_FAST               13 (yy)
            198 BINARY_SUBSCR
            200 LOAD_CONST               2 ('1')
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_FALSE      116

 16         206 LOAD_FAST                7 (q)
            208 LOAD_METHOD              3 (append)
            210 LOAD_FAST               12 (xx)
            212 LOAD_FAST               13 (yy)
            214 BUILD_TUPLE              2
            216 CALL_METHOD              1
            218 POP_TOP
            220 JUMP_ABSOLUTE          116
        >>  222 JUMP_ABSOLUTE           84

 17     >>  224 LOAD_FAST                4 (ans)
            226 LOAD_CONST               5 (1)
            228 INPLACE_ADD
            230 STORE_FAST               4 (ans)
            232 JUMP_ABSOLUTE           54
        >>  234 JUMP_ABSOLUTE           42

 18     >>  236 LOAD_FAST                4 (ans)
            238 RETURN_VALUE
None
"
numIslands,"class UF:
    def __init__(self, n):
        self.p = [i for i in range(n)]
        self.n = n
        self.size = n

    def union(self, i, j):
        pi, pj = self.find(i), self.find(j)
        if pi != pj:
            self.size -= 1
            self.p[pj] = pi

    def find(self, i):
        if i != self.p[i]:
            self.p[i] = self.find(self.p[i])
        return self.p[i]


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        m, n = len(grid), len(grid[0])
        d = dict()
        idx = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    d[i, j] = idx
                    idx += 1
        uf = UF(idx)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    if i > 0 and grid[i-1][j] == '1':
                        uf.union(d[i-1, j], d[i, j])
                    if j > 0 and grid[i][j-1] == '1':
                        uf.union(d[i, j-1], d[i, j])
        return uf.size
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object UF at 0x7f630e695500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('UF')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('UF')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (UF)

 19          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f630e695660, file ""<ast>"", line 19>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object UF at 0x7f630e695500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('UF')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object __init__ at 0x7f630e6952f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('UF.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

  7          16 LOAD_CONST               3 (<code object union at 0x7f630e6953a0, file ""<ast>"", line 7>)
             18 LOAD_CONST               4 ('UF.union')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (union)

 13          24 LOAD_CONST               5 (<code object find at 0x7f630e695450, file ""<ast>"", line 13>)
             26 LOAD_CONST               6 ('UF.find')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (find)
             32 LOAD_CONST               7 (None)
             34 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f630e6952f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f630e695240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('UF.__init__.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 LOAD_FAST                0 (self)
             18 STORE_ATTR               1 (p)

  4          20 LOAD_FAST                1 (n)
             22 LOAD_FAST                0 (self)
             24 STORE_ATTR               2 (n)

  5          26 LOAD_FAST                1 (n)
             28 LOAD_FAST                0 (self)
             30 STORE_ATTR               3 (size)
             32 LOAD_CONST               0 (None)
             34 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f630e695240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_FAST                1 (i)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object union at 0x7f630e6953a0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                1 (i)
              6 CALL_METHOD              1
              8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (find)
             12 LOAD_FAST                2 (j)
             14 CALL_METHOD              1
             16 ROT_TWO
             18 STORE_FAST               3 (pi)
             20 STORE_FAST               4 (pj)

  9          22 LOAD_FAST                3 (pi)
             24 LOAD_FAST                4 (pj)
             26 COMPARE_OP               3 (!=)
             28 POP_JUMP_IF_FALSE       54

 10          30 LOAD_FAST                0 (self)
             32 DUP_TOP
             34 LOAD_ATTR                1 (size)
             36 LOAD_CONST               1 (1)
             38 INPLACE_SUBTRACT
             40 ROT_TWO
             42 STORE_ATTR               1 (size)

 11          44 LOAD_FAST                3 (pi)
             46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                2 (p)
             50 LOAD_FAST                4 (pj)
             52 STORE_SUBSCR
        >>   54 LOAD_CONST               0 (None)
             56 RETURN_VALUE

Disassembly of <code object find at 0x7f630e695450, file ""<ast>"", line 13>:
 14           0 LOAD_FAST                1 (i)
              2 LOAD_FAST                0 (self)
              4 LOAD_ATTR                0 (p)
              6 LOAD_FAST                1 (i)
              8 BINARY_SUBSCR
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       36

 15          14 LOAD_FAST                0 (self)
             16 LOAD_METHOD              1 (find)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (p)
             22 LOAD_FAST                1 (i)
             24 BINARY_SUBSCR
             26 CALL_METHOD              1
             28 LOAD_FAST                0 (self)
             30 LOAD_ATTR                0 (p)
             32 LOAD_FAST                1 (i)
             34 STORE_SUBSCR

 16     >>   36 LOAD_FAST                0 (self)
             38 LOAD_ATTR                0 (p)
             40 LOAD_FAST                1 (i)
             42 BINARY_SUBSCR
             44 RETURN_VALUE

Disassembly of <code object Solution at 0x7f630e695660, file ""<ast>"", line 19>:
 19           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

 20           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('grid', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f630e6955b0, file ""<ast>"", line 20>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f630e6955b0, file ""<ast>"", line 20>:
 21           0 LOAD_FAST                1 (grid)
              2 POP_JUMP_IF_TRUE         8

 22           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

 23     >>    8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (grid)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (grid)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 ROT_TWO
             26 STORE_FAST               2 (m)
             28 STORE_FAST               3 (n)

 24          30 LOAD_GLOBAL              1 (dict)
             32 CALL_FUNCTION            0
             34 STORE_FAST               4 (d)

 25          36 LOAD_CONST               1 (0)
             38 STORE_FAST               5 (idx)

 26          40 LOAD_GLOBAL              2 (range)
             42 LOAD_FAST                2 (m)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                54 (to 104)
             50 STORE_FAST               6 (i)

 27          52 LOAD_GLOBAL              2 (range)
             54 LOAD_FAST                3 (n)
             56 CALL_FUNCTION            1
             58 GET_ITER
        >>   60 FOR_ITER                40 (to 102)
             62 STORE_FAST               7 (j)

 28          64 LOAD_FAST                1 (grid)
             66 LOAD_FAST                6 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                7 (j)
             72 BINARY_SUBSCR
             74 LOAD_CONST               2 ('1')
             76 COMPARE_OP               2 (==)
             78 POP_JUMP_IF_FALSE       60

 29          80 LOAD_FAST                5 (idx)
             82 LOAD_FAST                4 (d)
             84 LOAD_FAST                6 (i)
             86 LOAD_FAST                7 (j)
             88 BUILD_TUPLE              2
             90 STORE_SUBSCR

 30          92 LOAD_FAST                5 (idx)
             94 LOAD_CONST               3 (1)
             96 INPLACE_ADD
             98 STORE_FAST               5 (idx)
            100 JUMP_ABSOLUTE           60
        >>  102 JUMP_ABSOLUTE           48

 31     >>  104 LOAD_GLOBAL              3 (UF)
            106 LOAD_FAST                5 (idx)
            108 CALL_FUNCTION            1
            110 STORE_FAST               8 (uf)

 32         112 LOAD_GLOBAL              2 (range)
            114 LOAD_FAST                2 (m)
            116 CALL_FUNCTION            1
            118 GET_ITER
        >>  120 FOR_ITER               154 (to 276)
            122 STORE_FAST               6 (i)

 33         124 LOAD_GLOBAL              2 (range)
            126 LOAD_FAST                3 (n)
            128 CALL_FUNCTION            1
            130 GET_ITER
        >>  132 FOR_ITER               140 (to 274)
            134 STORE_FAST               7 (j)

 34         136 LOAD_FAST                1 (grid)
            138 LOAD_FAST                6 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                7 (j)
            144 BINARY_SUBSCR
            146 LOAD_CONST               2 ('1')
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      132

 35         152 LOAD_FAST                6 (i)
            154 LOAD_CONST               1 (0)
            156 COMPARE_OP               4 (>)
            158 POP_JUMP_IF_FALSE      212
            160 LOAD_FAST                1 (grid)
            162 LOAD_FAST                6 (i)
            164 LOAD_CONST               3 (1)
            166 BINARY_SUBTRACT
            168 BINARY_SUBSCR
            170 LOAD_FAST                7 (j)
            172 BINARY_SUBSCR
            174 LOAD_CONST               2 ('1')
            176 COMPARE_OP               2 (==)
            178 POP_JUMP_IF_FALSE      212

 36         180 LOAD_FAST                8 (uf)
            182 LOAD_METHOD              4 (union)
            184 LOAD_FAST                4 (d)
            186 LOAD_FAST                6 (i)
            188 LOAD_CONST               3 (1)
            190 BINARY_SUBTRACT
            192 LOAD_FAST                7 (j)
            194 BUILD_TUPLE              2
            196 BINARY_SUBSCR
            198 LOAD_FAST                4 (d)
            200 LOAD_FAST                6 (i)
            202 LOAD_FAST                7 (j)
            204 BUILD_TUPLE              2
            206 BINARY_SUBSCR
            208 CALL_METHOD              2
            210 POP_TOP

 37     >>  212 LOAD_FAST                7 (j)
            214 LOAD_CONST               1 (0)
            216 COMPARE_OP               4 (>)
            218 POP_JUMP_IF_FALSE      132
            220 LOAD_FAST                1 (grid)
            222 LOAD_FAST                6 (i)
            224 BINARY_SUBSCR
            226 LOAD_FAST                7 (j)
            228 LOAD_CONST               3 (1)
            230 BINARY_SUBTRACT
            232 BINARY_SUBSCR
            234 LOAD_CONST               2 ('1')
            236 COMPARE_OP               2 (==)
            238 POP_JUMP_IF_FALSE      132

 38         240 LOAD_FAST                8 (uf)
            242 LOAD_METHOD              4 (union)
            244 LOAD_FAST                4 (d)
            246 LOAD_FAST                6 (i)
            248 LOAD_FAST                7 (j)
            250 LOAD_CONST               3 (1)
            252 BINARY_SUBTRACT
            254 BUILD_TUPLE              2
            256 BINARY_SUBSCR
            258 LOAD_FAST                4 (d)
            260 LOAD_FAST                6 (i)
            262 LOAD_FAST                7 (j)
            264 BUILD_TUPLE              2
            266 BINARY_SUBSCR
            268 CALL_METHOD              2
            270 POP_TOP
            272 JUMP_ABSOLUTE          132
        >>  274 JUMP_ABSOLUTE          120

 39     >>  276 LOAD_FAST                8 (uf)
            278 LOAD_ATTR                5 (size)
            280 RETURN_VALUE
None
"
numIslands,"# python.    code   DFS
class Solution:
    def numIslands(self, m: List[List[str]]) -> int:
        def find(m,i,j,r,c):
            if i<0 or j<0:
                return 0
            if i>r-1 or j>c-1 or m[i][j]!=""1"":
                return 0
            m[i][j]=""2""
            
            for di,dj in [(0,-1),(0,1),(1,0),(-1,0)]:
                find(m,i+di,j+dj,r,c)
        
        
        r=len(m)
        t_i=0
        for i in range (r):
            c=len(m[i])
            for j in range(c):
                if m[i][j]=='1':
                    find(m,i,j,r,c)
                    t_i+=1
        return t_i

","  2           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f26b9365240, file ""<ast>"", line 2>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f26b9365240, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_NAME                5 (int)
             20 LOAD_CONST               1 (('m', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               2 (<code object numIslands at 0x7f26b93653a0, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.numIslands')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               6 (numIslands)
             32 LOAD_CONST               4 (None)
             34 RETURN_VALUE

Disassembly of <code object numIslands at 0x7f26b93653a0, file ""<ast>"", line 3>:
  4           0 LOAD_CLOSURE             0 (find)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object find at 0x7f26b93652f0, file ""<ast>"", line 4>)
              6 LOAD_CONST               2 ('Solution.numIslands.<locals>.find')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (find)

 15          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (m)
             16 CALL_FUNCTION            1
             18 STORE_FAST               2 (r)

 16          20 LOAD_CONST               3 (0)
             22 STORE_FAST               3 (t_i)

 17          24 LOAD_GLOBAL              1 (range)
             26 LOAD_FAST                2 (r)
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                70 (to 104)
             34 STORE_FAST               4 (i)

 18          36 LOAD_GLOBAL              0 (len)
             38 LOAD_FAST                1 (m)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 CALL_FUNCTION            1
             46 STORE_FAST               5 (c)

 19          48 LOAD_GLOBAL              1 (range)
             50 LOAD_FAST                5 (c)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                44 (to 102)
             58 STORE_FAST               6 (j)

 20          60 LOAD_FAST                1 (m)
             62 LOAD_FAST                4 (i)
             64 BINARY_SUBSCR
             66 LOAD_FAST                6 (j)
             68 BINARY_SUBSCR
             70 LOAD_CONST               4 ('1')
             72 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_FALSE       56

 21          76 LOAD_DEREF               0 (find)
             78 LOAD_FAST                1 (m)
             80 LOAD_FAST                4 (i)
             82 LOAD_FAST                6 (j)
             84 LOAD_FAST                2 (r)
             86 LOAD_FAST                5 (c)
             88 CALL_FUNCTION            5
             90 POP_TOP

 22          92 LOAD_FAST                3 (t_i)
             94 LOAD_CONST               5 (1)
             96 INPLACE_ADD
             98 STORE_FAST               3 (t_i)
            100 JUMP_ABSOLUTE           56
        >>  102 JUMP_ABSOLUTE           32

 23     >>  104 LOAD_FAST                3 (t_i)
            106 RETURN_VALUE

Disassembly of <code object find at 0x7f26b93652f0, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (i)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                2 (j)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       20

  6     >>   16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  7     >>   20 LOAD_FAST                1 (i)
             22 LOAD_FAST                3 (r)
             24 LOAD_CONST               2 (1)
             26 BINARY_SUBTRACT
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_TRUE        60
             32 LOAD_FAST                2 (j)
             34 LOAD_FAST                4 (c)
             36 LOAD_CONST               2 (1)
             38 BINARY_SUBTRACT
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_TRUE        60
             44 LOAD_FAST                0 (m)
             46 LOAD_FAST                1 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (j)
             52 BINARY_SUBSCR
             54 LOAD_CONST               3 ('1')
             56 COMPARE_OP               3 (!=)
             58 POP_JUMP_IF_FALSE       64

  8     >>   60 LOAD_CONST               1 (0)
             62 RETURN_VALUE

  9     >>   64 LOAD_CONST               4 ('2')
             66 LOAD_FAST                0 (m)
             68 LOAD_FAST                1 (i)
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (j)
             74 STORE_SUBSCR

 11          76 LOAD_CONST               5 (((0, -1), (0, 1), (1, 0), (-1, 0)))
             78 GET_ITER
        >>   80 FOR_ITER                32 (to 114)
             82 UNPACK_SEQUENCE          2
             84 STORE_FAST               5 (di)
             86 STORE_FAST               6 (dj)

 12          88 LOAD_DEREF               0 (find)
             90 LOAD_FAST                0 (m)
             92 LOAD_FAST                1 (i)
             94 LOAD_FAST                5 (di)
             96 BINARY_ADD
             98 LOAD_FAST                2 (j)
            100 LOAD_FAST                6 (dj)
            102 BINARY_ADD
            104 LOAD_FAST                3 (r)
            106 LOAD_FAST                4 (c)
            108 CALL_FUNCTION            5
            110 POP_TOP
            112 JUMP_ABSOLUTE           80
        >>  114 LOAD_CONST               0 (None)
            116 RETURN_VALUE
None
"
numTrees,"class Solution:
	def numTrees(self, n: int) -> int:
			return self.count_bsts(1, n, {})
			
	def count_bsts(self, min_val: int, max_val: int, memo: dict) -> int:
		if min_val >= max_val:
			return 1

		elif (min_val, max_val) in memo:
			return memo[(min_val, max_val)]

		bsts_count = 0
		for val in range(min_val, max_val + 1):

			left_subtrees_count = self.count_bsts(min_val, val - 1, memo)
			right_subtrees_count = self.count_bsts(val + 1, max_val, memo)

			bsts_count += left_subtrees_count * right_subtrees_count

		memo[(min_val, max_val)] = bsts_count
			
		return bsts_count
	
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbeb8c652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbeb8c652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fbeb8c65240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  5          24 LOAD_NAME                3 (int)
             26 LOAD_NAME                3 (int)
             28 LOAD_NAME                5 (dict)
             30 LOAD_NAME                3 (int)
             32 LOAD_CONST               4 (('min_val', 'max_val', 'memo', 'return'))
             34 BUILD_CONST_KEY_MAP      4
             36 LOAD_CONST               5 (<code object count_bsts at 0x7fbeb8c653a0, file ""<ast>"", line 5>)
             38 LOAD_CONST               6 ('Solution.count_bsts')
             40 MAKE_FUNCTION            4 (annotations)
             42 STORE_NAME               6 (count_bsts)
             44 LOAD_CONST               7 (None)
             46 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fbeb8c65240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (count_bsts)
              4 LOAD_CONST               1 (1)
              6 LOAD_FAST                1 (n)
              8 BUILD_MAP                0
             10 CALL_METHOD              3
             12 RETURN_VALUE

Disassembly of <code object count_bsts at 0x7fbeb8c653a0, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                1 (min_val)
              2 LOAD_FAST                2 (max_val)
              4 COMPARE_OP               5 (>=)
              6 POP_JUMP_IF_FALSE       12

  7           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                1 (min_val)
             14 LOAD_FAST                2 (max_val)
             16 BUILD_TUPLE              2
             18 LOAD_FAST                3 (memo)
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE       36

 10          24 LOAD_FAST                3 (memo)
             26 LOAD_FAST                1 (min_val)
             28 LOAD_FAST                2 (max_val)
             30 BUILD_TUPLE              2
             32 BINARY_SUBSCR
             34 RETURN_VALUE

 12     >>   36 LOAD_CONST               2 (0)
             38 STORE_FAST               4 (bsts_count)

 13          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                1 (min_val)
             44 LOAD_FAST                2 (max_val)
             46 LOAD_CONST               1 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                52 (to 108)
             56 STORE_FAST               5 (val)

 15          58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              1 (count_bsts)
             62 LOAD_FAST                1 (min_val)
             64 LOAD_FAST                5 (val)
             66 LOAD_CONST               1 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                3 (memo)
             72 CALL_METHOD              3
             74 STORE_FAST               6 (left_subtrees_count)

 16          76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              1 (count_bsts)
             80 LOAD_FAST                5 (val)
             82 LOAD_CONST               1 (1)
             84 BINARY_ADD
             86 LOAD_FAST                2 (max_val)
             88 LOAD_FAST                3 (memo)
             90 CALL_METHOD              3
             92 STORE_FAST               7 (right_subtrees_count)

 18          94 LOAD_FAST                4 (bsts_count)
             96 LOAD_FAST                6 (left_subtrees_count)
             98 LOAD_FAST                7 (right_subtrees_count)
            100 BINARY_MULTIPLY
            102 INPLACE_ADD
            104 STORE_FAST               4 (bsts_count)
            106 JUMP_ABSOLUTE           54

 20     >>  108 LOAD_FAST                4 (bsts_count)
            110 LOAD_FAST                3 (memo)
            112 LOAD_FAST                1 (min_val)
            114 LOAD_FAST                2 (max_val)
            116 BUILD_TUPLE              2
            118 STORE_SUBSCR

 22         120 LOAD_FAST                4 (bsts_count)
            122 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        memo={}
        return self.sol(n,memo)
     
    def sol(self, n, memo):
        if(n not in memo):
            if(n==1 or n==0): return 1
            if(n==2): return 2
            if(n==3): return 5
            result=0
            mid=n//2
            if(n%2==0):
                for i in range(1,mid+1):
                    result += 2*self.sol(i-1,memo)*self.sol(n-i,memo)
            else:
                mid+=1
                for i in range(1,mid+1):
                    if(i!=mid):
                        result += 2*self.sol(i-1,memo)*self.sol(n-i,memo)
                    else:
                        result += self.sol(i-1,memo)*self.sol(n-i,memo)
            memo[n]=result
        return memo[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f49ff8353a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f49ff8353a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f49ff835240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  6          24 LOAD_CONST               4 (<code object sol at 0x7f49ff8352f0, file ""<ast>"", line 6>)
             26 LOAD_CONST               5 ('Solution.sol')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (sol)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f49ff835240, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (memo)

  4           4 LOAD_FAST                0 (self)
              6 LOAD_METHOD              0 (sol)
              8 LOAD_FAST                1 (n)
             10 LOAD_FAST                2 (memo)
             12 CALL_METHOD              2
             14 RETURN_VALUE

Disassembly of <code object sol at 0x7f49ff8352f0, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (n)
              2 LOAD_FAST                2 (memo)
              4 COMPARE_OP               7 (not in)
              6 EXTENDED_ARG             1
              8 POP_JUMP_IF_FALSE      262

  8          10 LOAD_FAST                1 (n)
             12 LOAD_CONST               1 (1)
             14 COMPARE_OP               2 (==)
             16 POP_JUMP_IF_TRUE        26
             18 LOAD_FAST                1 (n)
             20 LOAD_CONST               2 (0)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30
        >>   26 LOAD_CONST               1 (1)
             28 RETURN_VALUE

  9     >>   30 LOAD_FAST                1 (n)
             32 LOAD_CONST               3 (2)
             34 COMPARE_OP               2 (==)
             36 POP_JUMP_IF_FALSE       42
             38 LOAD_CONST               3 (2)
             40 RETURN_VALUE

 10     >>   42 LOAD_FAST                1 (n)
             44 LOAD_CONST               4 (3)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       54
             50 LOAD_CONST               5 (5)
             52 RETURN_VALUE

 11     >>   54 LOAD_CONST               2 (0)
             56 STORE_FAST               3 (result)

 12          58 LOAD_FAST                1 (n)
             60 LOAD_CONST               3 (2)
             62 BINARY_FLOOR_DIVIDE
             64 STORE_FAST               4 (mid)

 13          66 LOAD_FAST                1 (n)
             68 LOAD_CONST               3 (2)
             70 BINARY_MODULO
             72 LOAD_CONST               2 (0)
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE      140

 14          78 LOAD_GLOBAL              0 (range)
             80 LOAD_CONST               1 (1)
             82 LOAD_FAST                4 (mid)
             84 LOAD_CONST               1 (1)
             86 BINARY_ADD
             88 CALL_FUNCTION            2
             90 GET_ITER
        >>   92 FOR_ITER                44 (to 138)
             94 STORE_FAST               5 (i)

 15          96 LOAD_FAST                3 (result)
             98 LOAD_CONST               3 (2)
            100 LOAD_FAST                0 (self)
            102 LOAD_METHOD              1 (sol)
            104 LOAD_FAST                5 (i)
            106 LOAD_CONST               1 (1)
            108 BINARY_SUBTRACT
            110 LOAD_FAST                2 (memo)
            112 CALL_METHOD              2
            114 BINARY_MULTIPLY
            116 LOAD_FAST                0 (self)
            118 LOAD_METHOD              1 (sol)
            120 LOAD_FAST                1 (n)
            122 LOAD_FAST                5 (i)
            124 BINARY_SUBTRACT
            126 LOAD_FAST                2 (memo)
            128 CALL_METHOD              2
            130 BINARY_MULTIPLY
            132 INPLACE_ADD
            134 STORE_FAST               3 (result)
            136 JUMP_ABSOLUTE           92
        >>  138 JUMP_FORWARD           114 (to 254)

 17     >>  140 LOAD_FAST                4 (mid)
            142 LOAD_CONST               1 (1)
            144 INPLACE_ADD
            146 STORE_FAST               4 (mid)

 18         148 LOAD_GLOBAL              0 (range)
            150 LOAD_CONST               1 (1)
            152 LOAD_FAST                4 (mid)
            154 LOAD_CONST               1 (1)
            156 BINARY_ADD
            158 CALL_FUNCTION            2
            160 GET_ITER
        >>  162 FOR_ITER                90 (to 254)
            164 STORE_FAST               5 (i)

 19         166 LOAD_FAST                5 (i)
            168 LOAD_FAST                4 (mid)
            170 COMPARE_OP               3 (!=)
            172 POP_JUMP_IF_FALSE      216

 20         174 LOAD_FAST                3 (result)
            176 LOAD_CONST               3 (2)
            178 LOAD_FAST                0 (self)
            180 LOAD_METHOD              1 (sol)
            182 LOAD_FAST                5 (i)
            184 LOAD_CONST               1 (1)
            186 BINARY_SUBTRACT
            188 LOAD_FAST                2 (memo)
            190 CALL_METHOD              2
            192 BINARY_MULTIPLY
            194 LOAD_FAST                0 (self)
            196 LOAD_METHOD              1 (sol)
            198 LOAD_FAST                1 (n)
            200 LOAD_FAST                5 (i)
            202 BINARY_SUBTRACT
            204 LOAD_FAST                2 (memo)
            206 CALL_METHOD              2
            208 BINARY_MULTIPLY
            210 INPLACE_ADD
            212 STORE_FAST               3 (result)
            214 JUMP_ABSOLUTE          162

 22     >>  216 LOAD_FAST                3 (result)
            218 LOAD_FAST                0 (self)
            220 LOAD_METHOD              1 (sol)
            222 LOAD_FAST                5 (i)
            224 LOAD_CONST               1 (1)
            226 BINARY_SUBTRACT
            228 LOAD_FAST                2 (memo)
            230 CALL_METHOD              2
            232 LOAD_FAST                0 (self)
            234 LOAD_METHOD              1 (sol)
            236 LOAD_FAST                1 (n)
            238 LOAD_FAST                5 (i)
            240 BINARY_SUBTRACT
            242 LOAD_FAST                2 (memo)
            244 CALL_METHOD              2
            246 BINARY_MULTIPLY
            248 INPLACE_ADD
            250 STORE_FAST               3 (result)
            252 JUMP_ABSOLUTE          162

 23     >>  254 LOAD_FAST                3 (result)
            256 LOAD_FAST                2 (memo)
            258 LOAD_FAST                1 (n)
            260 STORE_SUBSCR

 24     >>  262 LOAD_FAST                2 (memo)
            264 LOAD_FAST                1 (n)
            266 BINARY_SUBSCR
            268 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        ar=[0]*(n+1)
        ar[0]=1
        for i in range(1,n+1):
            for j in range(i):
                ar[i]=ar[i]+(ar[j]*ar[i-j-1])
        return ar[n]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f43f3155240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f43f3155240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f43f31552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f43f31552f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (ar)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (ar)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (ar)
             54 LOAD_FAST                3 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (ar)
             60 LOAD_FAST                4 (j)
             62 BINARY_SUBSCR
             64 LOAD_FAST                2 (ar)
             66 LOAD_FAST                3 (i)
             68 LOAD_FAST                4 (j)
             70 BINARY_SUBTRACT
             72 LOAD_CONST               2 (1)
             74 BINARY_SUBTRACT
             76 BINARY_SUBSCR
             78 BINARY_MULTIPLY
             80 BINARY_ADD
             82 LOAD_FAST                2 (ar)
             84 LOAD_FAST                3 (i)
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (ar)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int, l = {}) -> int:
        if n==0 or n==1:
            return 1
        if n in l:
            return l[n]
        count = 0
        for i in range(1,n+1):
            count+=self.numTrees(i-1,l)*self.numTrees(n-i,l)
        l[n] = count
        return count
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6545875240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6545875240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 BUILD_TUPLE              1
             12 LOAD_NAME                3 (int)
             14 LOAD_NAME                3 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7f65458752f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            5 (defaults, annotations)
             26 STORE_NAME               4 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f65458752f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               2 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (1)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                1 (n)
             22 LOAD_FAST                2 (l)
             24 COMPARE_OP               6 (in)
             26 POP_JUMP_IF_FALSE       36

  6          28 LOAD_FAST                2 (l)
             30 LOAD_FAST                1 (n)
             32 BINARY_SUBSCR
             34 RETURN_VALUE

  7     >>   36 LOAD_CONST               1 (0)
             38 STORE_FAST               3 (count)

  8          40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               2 (1)
             44 LOAD_FAST                1 (n)
             46 LOAD_CONST               2 (1)
             48 BINARY_ADD
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                40 (to 96)
             56 STORE_FAST               4 (i)

  9          58 LOAD_FAST                3 (count)
             60 LOAD_FAST                0 (self)
             62 LOAD_METHOD              1 (numTrees)
             64 LOAD_FAST                4 (i)
             66 LOAD_CONST               2 (1)
             68 BINARY_SUBTRACT
             70 LOAD_FAST                2 (l)
             72 CALL_METHOD              2
             74 LOAD_FAST                0 (self)
             76 LOAD_METHOD              1 (numTrees)
             78 LOAD_FAST                1 (n)
             80 LOAD_FAST                4 (i)
             82 BINARY_SUBTRACT
             84 LOAD_FAST                2 (l)
             86 CALL_METHOD              2
             88 BINARY_MULTIPLY
             90 INPLACE_ADD
             92 STORE_FAST               3 (count)
             94 JUMP_ABSOLUTE           54

 10     >>   96 LOAD_FAST                3 (count)
             98 LOAD_FAST                2 (l)
            100 LOAD_FAST                1 (n)
            102 STORE_SUBSCR

 11         104 LOAD_FAST                3 (count)
            106 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        ans = {}
        ans[0] = 1  ### for the case where left side or right side no elements
        ans[1] = 1
        ans[2] = 2
        
        for i in range(3,n+1):   ###  to find numTrees() for elements before n..so we can use that in our DP
            cnt = 0    
            for j in range(1,i+1):  ###  split element on all possible index from index 1 to index last
                right = i-j      ### number of elements in right
                left = j-1       ### number of elements in left
                
                r_cnt=ans[right]  ###  number of combinations of right side
                l_cnt=ans[left]   ###  number of combinations of left side
                
                cnt += l_cnt*r_cnt  ###  total combination possbile from that tree is left*right
                
            ans[i] = cnt           ### add final ans to DP..so we can use later
            
        return ans[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f674cd95240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f674cd95240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f674cd953a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f674cd953a0, file ""<ast>"", line 2>:
  3           0 BUILD_MAP                0
              2 STORE_FAST               2 (ans)

  4           4 LOAD_CONST               1 (1)
              6 LOAD_FAST                2 (ans)
              8 LOAD_CONST               2 (0)
             10 STORE_SUBSCR

  5          12 LOAD_CONST               1 (1)
             14 LOAD_FAST                2 (ans)
             16 LOAD_CONST               1 (1)
             18 STORE_SUBSCR

  6          20 LOAD_CONST               3 (2)
             22 LOAD_FAST                2 (ans)
             24 LOAD_CONST               3 (2)
             26 STORE_SUBSCR

  8          28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               4 (3)
             32 LOAD_FAST                1 (n)
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 GET_ITER
        >>   42 FOR_ITER                80 (to 124)
             44 STORE_FAST               3 (i)

  9          46 LOAD_CONST               2 (0)
             48 STORE_FAST               4 (cnt)

 10          50 LOAD_GLOBAL              0 (range)
             52 LOAD_CONST               1 (1)
             54 LOAD_FAST                3 (i)
             56 LOAD_CONST               1 (1)
             58 BINARY_ADD
             60 CALL_FUNCTION            2
             62 GET_ITER
        >>   64 FOR_ITER                48 (to 114)
             66 STORE_FAST               5 (j)

 11          68 LOAD_FAST                3 (i)
             70 LOAD_FAST                5 (j)
             72 BINARY_SUBTRACT
             74 STORE_FAST               6 (right)

 12          76 LOAD_FAST                5 (j)
             78 LOAD_CONST               1 (1)
             80 BINARY_SUBTRACT
             82 STORE_FAST               7 (left)

 14          84 LOAD_FAST                2 (ans)
             86 LOAD_FAST                6 (right)
             88 BINARY_SUBSCR
             90 STORE_FAST               8 (r_cnt)

 15          92 LOAD_FAST                2 (ans)
             94 LOAD_FAST                7 (left)
             96 BINARY_SUBSCR
             98 STORE_FAST               9 (l_cnt)

 17         100 LOAD_FAST                4 (cnt)
            102 LOAD_FAST                9 (l_cnt)
            104 LOAD_FAST                8 (r_cnt)
            106 BINARY_MULTIPLY
            108 INPLACE_ADD
            110 STORE_FAST               4 (cnt)
            112 JUMP_ABSOLUTE           64

 19     >>  114 LOAD_FAST                4 (cnt)
            116 LOAD_FAST                2 (ans)
            118 LOAD_FAST                3 (i)
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           42

 21     >>  124 LOAD_FAST                2 (ans)
            126 LOAD_FAST                1 (n)
            128 BINARY_SUBSCR
            130 RETURN_VALUE
None
"
numTrees,"import math
class Solution:
    def numTrees(self, n: int) -> int:
        num = math.factorial(2*n)
        denom = math.factorial(n)*math.factorial(n+1)
        return num // denom
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f8905e05450, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8905e05450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f8905e053a0, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f8905e053a0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (math)
              2 LOAD_METHOD              1 (factorial)
              4 LOAD_CONST               1 (2)
              6 LOAD_FAST                1 (n)
              8 BINARY_MULTIPLY
             10 CALL_METHOD              1
             12 STORE_FAST               2 (num)

  5          14 LOAD_GLOBAL              0 (math)
             16 LOAD_METHOD              1 (factorial)
             18 LOAD_FAST                1 (n)
             20 CALL_METHOD              1
             22 LOAD_GLOBAL              0 (math)
             24 LOAD_METHOD              1 (factorial)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_METHOD              1
             34 BINARY_MULTIPLY
             36 STORE_FAST               3 (denom)

  6          38 LOAD_FAST                2 (num)
             40 LOAD_FAST                3 (denom)
             42 BINARY_FLOOR_DIVIDE
             44 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0]*(n+1)
        dp[0] = 1
        for i in range(1, n+1):
            for j in range(i):
                dp[i] += dp[j] * dp[i-1-j]
        return dp[-1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4b02d95240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4b02d95240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f4b02d952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f4b02d952f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (dp)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (dp)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 DUP_TOP_TWO
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (dp)
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                3 (i)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 LOAD_FAST                4 (j)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 BINARY_MULTIPLY
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_CONST               3 (-1)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        if n == 0:
            return 1
        numSubtrees = 0
        for leftSubtreeNodeCount in range(n):
            rightSubtreeNodeCount = n - 1 - leftSubtreeNodeCount
            leftSubtrees = self.numTrees(leftSubtreeNodeCount)
            rightSubtrees = self.numTrees(rightSubtreeNodeCount)
            numSubtrees += leftSubtrees * rightSubtrees
        return numSubtrees
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff6d84552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff6d84552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7ff6d8455240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7ff6d8455240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  5     >>   12 LOAD_CONST               1 (0)
             14 STORE_FAST               2 (numSubtrees)

  6          16 LOAD_GLOBAL              0 (range)
             18 LOAD_FAST                1 (n)
             20 CALL_FUNCTION            1
             22 GET_ITER
        >>   24 FOR_ITER                48 (to 74)
             26 STORE_FAST               3 (leftSubtreeNodeCount)

  7          28 LOAD_FAST                1 (n)
             30 LOAD_CONST               2 (1)
             32 BINARY_SUBTRACT
             34 LOAD_FAST                3 (leftSubtreeNodeCount)
             36 BINARY_SUBTRACT
             38 STORE_FAST               4 (rightSubtreeNodeCount)

  8          40 LOAD_FAST                0 (self)
             42 LOAD_METHOD              1 (numTrees)
             44 LOAD_FAST                3 (leftSubtreeNodeCount)
             46 CALL_METHOD              1
             48 STORE_FAST               5 (leftSubtrees)

  9          50 LOAD_FAST                0 (self)
             52 LOAD_METHOD              1 (numTrees)
             54 LOAD_FAST                4 (rightSubtreeNodeCount)
             56 CALL_METHOD              1
             58 STORE_FAST               6 (rightSubtrees)

 10          60 LOAD_FAST                2 (numSubtrees)
             62 LOAD_FAST                5 (leftSubtrees)
             64 LOAD_FAST                6 (rightSubtrees)
             66 BINARY_MULTIPLY
             68 INPLACE_ADD
             70 STORE_FAST               2 (numSubtrees)
             72 JUMP_ABSOLUTE           24

 11     >>   74 LOAD_FAST                2 (numSubtrees)
             76 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int, cache={}) -> int:
        if n == 0:
            return 1
        if n in cache:
            return cache[n]
        numSubtrees = 0
        for leftSubtreeNodeCount in range(n):
            rightSubtreeNodeCount = n - 1 - leftSubtreeNodeCount
            leftSubtrees = self.numTrees(leftSubtreeNodeCount, cache)
            rightSubtrees = self.numTrees(rightSubtreeNodeCount, cache)
            numSubtrees += leftSubtrees * rightSubtrees
        cache[n] = numSubtrees
        return numSubtrees
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc9a53e5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc9a53e5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 BUILD_TUPLE              1
             12 LOAD_NAME                3 (int)
             14 LOAD_NAME                3 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7fc9a53e52f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            5 (defaults, annotations)
             26 STORE_NAME               4 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fc9a53e52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (1)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                1 (n)
             14 LOAD_FAST                2 (cache)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       28

  6          20 LOAD_FAST                2 (cache)
             22 LOAD_FAST                1 (n)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  7     >>   28 LOAD_CONST               1 (0)
             30 STORE_FAST               3 (numSubtrees)

  8          32 LOAD_GLOBAL              0 (range)
             34 LOAD_FAST                1 (n)
             36 CALL_FUNCTION            1
             38 GET_ITER
        >>   40 FOR_ITER                52 (to 94)
             42 STORE_FAST               4 (leftSubtreeNodeCount)

  9          44 LOAD_FAST                1 (n)
             46 LOAD_CONST               2 (1)
             48 BINARY_SUBTRACT
             50 LOAD_FAST                4 (leftSubtreeNodeCount)
             52 BINARY_SUBTRACT
             54 STORE_FAST               5 (rightSubtreeNodeCount)

 10          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (numTrees)
             60 LOAD_FAST                4 (leftSubtreeNodeCount)
             62 LOAD_FAST                2 (cache)
             64 CALL_METHOD              2
             66 STORE_FAST               6 (leftSubtrees)

 11          68 LOAD_FAST                0 (self)
             70 LOAD_METHOD              1 (numTrees)
             72 LOAD_FAST                5 (rightSubtreeNodeCount)
             74 LOAD_FAST                2 (cache)
             76 CALL_METHOD              2
             78 STORE_FAST               7 (rightSubtrees)

 12          80 LOAD_FAST                3 (numSubtrees)
             82 LOAD_FAST                6 (leftSubtrees)
             84 LOAD_FAST                7 (rightSubtrees)
             86 BINARY_MULTIPLY
             88 INPLACE_ADD
             90 STORE_FAST               3 (numSubtrees)
             92 JUMP_ABSOLUTE           40

 13     >>   94 LOAD_FAST                3 (numSubtrees)
             96 LOAD_FAST                2 (cache)
             98 LOAD_FAST                1 (n)
            100 STORE_SUBSCR

 14         102 LOAD_FAST                3 (numSubtrees)
            104 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
                
        # G(n) = solutions for n elements
        # F(i,n) = element i as root, n elements
        
        
        # Pseudo Code
        #G(n) = Sum of all F(i,n)
        #F(i,n) = G(i-1)*G(n-i)
        
        
        # Example
        # n = 3
        
        # base cases
        # G(0) = 1
        # G(1) = 1
        
        # G(3) = F(1,3)+F(2,3)+F(3,3)
        
        
        # F(1,3) = G(0)*G(2) = 2
        # Explanation 
        # Ex: G(0) = no elements on the left branch
        # Ex: G(2) = 2 elements on the right branch
        
        # F(2,3) = G(1)*G(1) = 1
        # Explanation
        # Ex: G(1) = 1 element on the left branch
        # Ex: G(1) = 1 element on the right branch
        
        # F(3,3) = G(2)*G(0) = 2
        # Explanation 
        # Ex: G(2) = 2 elements on the left branch
        # Ex: G(0) = no elements on the right branch
        

        g_array = [1,1]
        
        for j in range(2,n+1):
            sum_g = 0
            for i in range(1,j+1):
                f_i = g_array[i-1]*g_array[j-i]
                sum_g += f_i
            g_array.append(sum_g)
                        
        return g_array[n]
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f66afbb5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f66afbb5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f66afbb52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f66afbb52f0, file ""<ast>"", line 2>:
 39           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 BUILD_LIST               2
              6 STORE_FAST               2 (g_array)

 41           8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               2 (2)
             12 LOAD_FAST                1 (n)
             14 LOAD_CONST               1 (1)
             16 BINARY_ADD
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                70 (to 94)
             24 STORE_FAST               3 (j)

 42          26 LOAD_CONST               3 (0)
             28 STORE_FAST               4 (sum_g)

 43          30 LOAD_GLOBAL              0 (range)
             32 LOAD_CONST               1 (1)
             34 LOAD_FAST                3 (j)
             36 LOAD_CONST               1 (1)
             38 BINARY_ADD
             40 CALL_FUNCTION            2
             42 GET_ITER
        >>   44 FOR_ITER                36 (to 82)
             46 STORE_FAST               5 (i)

 44          48 LOAD_FAST                2 (g_array)
             50 LOAD_FAST                5 (i)
             52 LOAD_CONST               1 (1)
             54 BINARY_SUBTRACT
             56 BINARY_SUBSCR
             58 LOAD_FAST                2 (g_array)
             60 LOAD_FAST                3 (j)
             62 LOAD_FAST                5 (i)
             64 BINARY_SUBTRACT
             66 BINARY_SUBSCR
             68 BINARY_MULTIPLY
             70 STORE_FAST               6 (f_i)

 45          72 LOAD_FAST                4 (sum_g)
             74 LOAD_FAST                6 (f_i)
             76 INPLACE_ADD
             78 STORE_FAST               4 (sum_g)
             80 JUMP_ABSOLUTE           44

 46     >>   82 LOAD_FAST                2 (g_array)
             84 LOAD_METHOD              1 (append)
             86 LOAD_FAST                4 (sum_g)
             88 CALL_METHOD              1
             90 POP_TOP
             92 JUMP_ABSOLUTE           22

 48     >>   94 LOAD_FAST                2 (g_array)
             96 LOAD_FAST                1 (n)
             98 BINARY_SUBSCR
            100 RETURN_VALUE
None
"
numTrees,"class Solution:
    dp = {}
    def numTrees(self, n: int) -> int:
        nodes = {}
        if n == 1 or n == 0:
            return 1
        elif n == 2:
            return 2
        elif n in self.dp:
            return self.dp[n]
        for i in range(1, n+1):
            nodes[i] = self.numTrees(i-1) * self.numTrees(n-i)

        self.dp[n] = sum(nodes[i] for i in nodes)
        return self.dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe0ff9253a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe0ff9253a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 BUILD_MAP                0
             10 STORE_NAME               3 (dp)

  3          12 LOAD_NAME                4 (int)
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (('n', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object numTrees at 0x7fe0ff9252f0, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.numTrees')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (numTrees)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fe0ff9252f0, file ""<ast>"", line 3>:
  4           0 BUILD_MAP                0
              2 STORE_DEREF              0 (nodes)

  5           4 LOAD_FAST                1 (n)
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_TRUE        20
             12 LOAD_FAST                1 (n)
             14 LOAD_CONST               2 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6     >>   20 LOAD_CONST               1 (1)
             22 RETURN_VALUE

  7     >>   24 LOAD_FAST                1 (n)
             26 LOAD_CONST               3 (2)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       36

  8          32 LOAD_CONST               3 (2)
             34 RETURN_VALUE

  9     >>   36 LOAD_FAST                1 (n)
             38 LOAD_FAST                0 (self)
             40 LOAD_ATTR                0 (dp)
             42 COMPARE_OP               6 (in)
             44 POP_JUMP_IF_FALSE       56

 10          46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                0 (dp)
             50 LOAD_FAST                1 (n)
             52 BINARY_SUBSCR
             54 RETURN_VALUE

 11     >>   56 LOAD_GLOBAL              1 (range)
             58 LOAD_CONST               1 (1)
             60 LOAD_FAST                1 (n)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 CALL_FUNCTION            2
             68 GET_ITER
        >>   70 FOR_ITER                36 (to 108)
             72 STORE_FAST               2 (i)

 12          74 LOAD_FAST                0 (self)
             76 LOAD_METHOD              2 (numTrees)
             78 LOAD_FAST                2 (i)
             80 LOAD_CONST               1 (1)
             82 BINARY_SUBTRACT
             84 CALL_METHOD              1
             86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (numTrees)
             90 LOAD_FAST                1 (n)
             92 LOAD_FAST                2 (i)
             94 BINARY_SUBTRACT
             96 CALL_METHOD              1
             98 BINARY_MULTIPLY
            100 LOAD_DEREF               0 (nodes)
            102 LOAD_FAST                2 (i)
            104 STORE_SUBSCR
            106 JUMP_ABSOLUTE           70

 14     >>  108 LOAD_GLOBAL              3 (sum)
            110 LOAD_CLOSURE             0 (nodes)
            112 BUILD_TUPLE              1
            114 LOAD_CONST               4 (<code object <genexpr> at 0x7fe0ff925240, file ""<ast>"", line 14>)
            116 LOAD_CONST               5 ('Solution.numTrees.<locals>.<genexpr>')
            118 MAKE_FUNCTION            8 (closure)
            120 LOAD_DEREF               0 (nodes)
            122 GET_ITER
            124 CALL_FUNCTION            1
            126 CALL_FUNCTION            1
            128 LOAD_FAST                0 (self)
            130 LOAD_ATTR                0 (dp)
            132 LOAD_FAST                1 (n)
            134 STORE_SUBSCR

 15         136 LOAD_FAST                0 (self)
            138 LOAD_ATTR                0 (dp)
            140 LOAD_FAST                1 (n)
            142 BINARY_SUBSCR
            144 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7fe0ff925240, file ""<ast>"", line 14>:
 14           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                14 (to 18)
              4 STORE_FAST               1 (i)
              6 LOAD_DEREF               0 (nodes)
              8 LOAD_FAST                1 (i)
             10 BINARY_SUBSCR
             12 YIELD_VALUE
             14 POP_TOP
             16 JUMP_ABSOLUTE            2
        >>   18 LOAD_CONST               0 (None)
             20 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
            dp = {0:1, 1:1, 2:2}
            if n < 3: return dp[n]
            for i in range(3, n+1):
                num = 0
                for j in range(i):
                    num += dp[j]*dp[i-j-1]
                dp[i] = num
            return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6db28f5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6db28f5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f6db28f52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f6db28f52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 ((0, 1, 2))
              8 BUILD_CONST_KEY_MAP      3
             10 STORE_FAST               2 (dp)

  4          12 LOAD_FAST                1 (n)
             14 LOAD_CONST               4 (3)
             16 COMPARE_OP               0 (<)
             18 POP_JUMP_IF_FALSE       28
             20 LOAD_FAST                2 (dp)
             22 LOAD_FAST                1 (n)
             24 BINARY_SUBSCR
             26 RETURN_VALUE

  5     >>   28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               4 (3)
             32 LOAD_FAST                1 (n)
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            2
             40 GET_ITER
        >>   42 FOR_ITER                58 (to 102)
             44 STORE_FAST               3 (i)

  6          46 LOAD_CONST               5 (0)
             48 STORE_FAST               4 (num)

  7          50 LOAD_GLOBAL              0 (range)
             52 LOAD_FAST                3 (i)
             54 CALL_FUNCTION            1
             56 GET_ITER
        >>   58 FOR_ITER                32 (to 92)
             60 STORE_FAST               5 (j)

  8          62 LOAD_FAST                4 (num)
             64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                5 (j)
             68 BINARY_SUBSCR
             70 LOAD_FAST                2 (dp)
             72 LOAD_FAST                3 (i)
             74 LOAD_FAST                5 (j)
             76 BINARY_SUBTRACT
             78 LOAD_CONST               1 (1)
             80 BINARY_SUBTRACT
             82 BINARY_SUBSCR
             84 BINARY_MULTIPLY
             86 INPLACE_ADD
             88 STORE_FAST               4 (num)
             90 JUMP_ABSOLUTE           58

  9     >>   92 LOAD_FAST                4 (num)
             94 LOAD_FAST                2 (dp)
             96 LOAD_FAST                3 (i)
             98 STORE_SUBSCR
            100 JUMP_ABSOLUTE           42

 10     >>  102 LOAD_FAST                2 (dp)
            104 LOAD_FAST                1 (n)
            106 BINARY_SUBSCR
            108 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        # Intuition:
        #   - For each n we try to build BST with node i from 1 -> n as root node
        #   - If n = 0 or 1 then only 1 way to form a BST tree
        #   - For each i we have i - 1 nodes on left subtree and n - i nodes on right subtree
        #   - The result is sum of all BST above. 
        #       G(n) = f(1, n) + f(2, n) + ... + f(n, n)
        #   - For each BST tree above we calculate number of left subtree * number of right subtree. We can see the sub problem here
        #       f(i, n) = G(i - 1) * G(n - i)
        #   - Final formula:
        #       G(n) = G(0) * G(n - 1) + G(1) * G(n - 2) + ... + G(n - 1) * G(0)
        
        # There is only one way to form BST with 0 or 1 node
        if n <= 1:
            return 1
        
        # Build up solution from 0 to n
        dp = [0] * (n + 1)
        # We already know the result for input = 1, input = 2
        dp[0], dp[1] = 1, 1
        
        # Continue calculate result for input from 2 -> n
        for i in range(2, n + 1):
            # For each i calculate all possible structurally BSTs that can form by j as root node
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
            
        return dp[n]
        
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa6b3625240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa6b3625240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fa6b36252f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fa6b36252f0, file ""<ast>"", line 2>:
 15           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

 16           8 LOAD_CONST               1 (1)
             10 RETURN_VALUE

 19     >>   12 LOAD_CONST               2 (0)
             14 BUILD_LIST               1
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 BINARY_MULTIPLY
             24 STORE_FAST               2 (dp)

 21          26 LOAD_CONST               3 ((1, 1))
             28 UNPACK_SEQUENCE          2
             30 LOAD_FAST                2 (dp)
             32 LOAD_CONST               2 (0)
             34 STORE_SUBSCR
             36 LOAD_FAST                2 (dp)
             38 LOAD_CONST               1 (1)
             40 STORE_SUBSCR

 24          42 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               4 (2)
             46 LOAD_FAST                1 (n)
             48 LOAD_CONST               1 (1)
             50 BINARY_ADD
             52 CALL_FUNCTION            2
             54 GET_ITER
        >>   56 FOR_ITER                60 (to 118)
             58 STORE_FAST               3 (i)

 26          60 LOAD_GLOBAL              0 (range)
             62 LOAD_CONST               1 (1)
             64 LOAD_FAST                3 (i)
             66 LOAD_CONST               1 (1)
             68 BINARY_ADD
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER                40 (to 116)
             76 STORE_FAST               4 (j)

 27          78 LOAD_FAST                2 (dp)
             80 LOAD_FAST                3 (i)
             82 DUP_TOP_TWO
             84 BINARY_SUBSCR
             86 LOAD_FAST                2 (dp)
             88 LOAD_FAST                4 (j)
             90 LOAD_CONST               1 (1)
             92 BINARY_SUBTRACT
             94 BINARY_SUBSCR
             96 LOAD_FAST                2 (dp)
             98 LOAD_FAST                3 (i)
            100 LOAD_FAST                4 (j)
            102 BINARY_SUBTRACT
            104 BINARY_SUBSCR
            106 BINARY_MULTIPLY
            108 INPLACE_ADD
            110 ROT_THREE
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE           74
        >>  116 JUMP_ABSOLUTE           56

 29     >>  118 LOAD_FAST                2 (dp)
            120 LOAD_FAST                1 (n)
            122 BINARY_SUBSCR
            124 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0 for i in range(n+1)]
        dp[0], i = 1, 1
        while i<=n:
            l, r = i-1, 0
            while l >= 0:
                dp[i] += (dp[l]*dp[r])
                l-=1
                r+=1
            i+=1
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f16cfc552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f16cfc552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f16cfc55450, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f16cfc55450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f16cfc55240, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.numTrees.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_FAST                1 (n)
             10 LOAD_CONST               3 (1)
             12 BINARY_ADD
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (dp)

  4          22 LOAD_CONST               4 ((1, 1))
             24 UNPACK_SEQUENCE          2
             26 LOAD_FAST                2 (dp)
             28 LOAD_CONST               5 (0)
             30 STORE_SUBSCR
             32 STORE_FAST               3 (i)

  5     >>   34 LOAD_FAST                3 (i)
             36 LOAD_FAST                1 (n)
             38 COMPARE_OP               1 (<=)
             40 POP_JUMP_IF_FALSE      120

  6          42 LOAD_FAST                3 (i)
             44 LOAD_CONST               3 (1)
             46 BINARY_SUBTRACT
             48 LOAD_CONST               5 (0)
             50 ROT_TWO
             52 STORE_FAST               4 (l)
             54 STORE_FAST               5 (r)

  7     >>   56 LOAD_FAST                4 (l)
             58 LOAD_CONST               5 (0)
             60 COMPARE_OP               5 (>=)
             62 POP_JUMP_IF_FALSE      110

  8          64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                3 (i)
             68 DUP_TOP_TWO
             70 BINARY_SUBSCR
             72 LOAD_FAST                2 (dp)
             74 LOAD_FAST                4 (l)
             76 BINARY_SUBSCR
             78 LOAD_FAST                2 (dp)
             80 LOAD_FAST                5 (r)
             82 BINARY_SUBSCR
             84 BINARY_MULTIPLY
             86 INPLACE_ADD
             88 ROT_THREE
             90 STORE_SUBSCR

  9          92 LOAD_FAST                4 (l)
             94 LOAD_CONST               3 (1)
             96 INPLACE_SUBTRACT
             98 STORE_FAST               4 (l)

 10         100 LOAD_FAST                5 (r)
            102 LOAD_CONST               3 (1)
            104 INPLACE_ADD
            106 STORE_FAST               5 (r)
            108 JUMP_ABSOLUTE           56

 11     >>  110 LOAD_FAST                3 (i)
            112 LOAD_CONST               3 (1)
            114 INPLACE_ADD
            116 STORE_FAST               3 (i)
            118 JUMP_ABSOLUTE           34

 12     >>  120 LOAD_FAST                2 (dp)
            122 LOAD_FAST                1 (n)
            124 BINARY_SUBSCR
            126 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f16cfc55240, file ""<ast>"", line 3>:
  3           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (i)
              8 LOAD_CONST               0 (0)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        if n <= 2:
            return n
        
        dp = {0: 1, 1: 1, 2: 2}
        for i in range(3, n+1): #n+1 so that N is also included
            #now assume every node as a root and then calculate
            #start from 1, because, I assume I take 1st node as the root
            sm = 0
            for j in range(1, i+1):
                sm += dp[j-1]*dp[i - j]
            dp[i] = sm
        return dp[n]","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4d42235240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4d42235240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f4d422352f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f4d422352f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (n)
              2 LOAD_CONST               1 (2)
              4 COMPARE_OP               1 (<=)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_FAST                1 (n)
             10 RETURN_VALUE

  6     >>   12 LOAD_CONST               2 (1)
             14 LOAD_CONST               2 (1)
             16 LOAD_CONST               1 (2)
             18 LOAD_CONST               3 ((0, 1, 2))
             20 BUILD_CONST_KEY_MAP      3
             22 STORE_FAST               2 (dp)

  7          24 LOAD_GLOBAL              0 (range)
             26 LOAD_CONST               4 (3)
             28 LOAD_FAST                1 (n)
             30 LOAD_CONST               2 (1)
             32 BINARY_ADD
             34 CALL_FUNCTION            2
             36 GET_ITER
        >>   38 FOR_ITER                64 (to 104)
             40 STORE_FAST               3 (i)

 10          42 LOAD_CONST               5 (0)
             44 STORE_FAST               4 (sm)

 11          46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST               2 (1)
             50 LOAD_FAST                3 (i)
             52 LOAD_CONST               2 (1)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER                32 (to 94)
             62 STORE_FAST               5 (j)

 12          64 LOAD_FAST                4 (sm)
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                5 (j)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 BINARY_SUBSCR
             76 LOAD_FAST                2 (dp)
             78 LOAD_FAST                3 (i)
             80 LOAD_FAST                5 (j)
             82 BINARY_SUBTRACT
             84 BINARY_SUBSCR
             86 BINARY_MULTIPLY
             88 INPLACE_ADD
             90 STORE_FAST               4 (sm)
             92 JUMP_ABSOLUTE           60

 13     >>   94 LOAD_FAST                4 (sm)
             96 LOAD_FAST                2 (dp)
             98 LOAD_FAST                3 (i)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           38

 14     >>  104 LOAD_FAST                2 (dp)
            106 LOAD_FAST                1 (n)
            108 BINARY_SUBSCR
            110 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n):
        dp = { 0:1, 1:1 }
        for x in range(2,n+1):
            dp[x] = sum([ dp[y]*dp[x-y-1] for y in range(x) ] )
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc6cef75450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc6cef75450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object numTrees at 0x7fc6cef753a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.numTrees')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numTrees)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fc6cef753a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 ((0, 1))
              6 BUILD_CONST_KEY_MAP      2
              8 STORE_DEREF              0 (dp)

  4          10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (2)
             14 LOAD_FAST                1 (n)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER                36 (to 62)
             26 STORE_DEREF              1 (x)

  5          28 LOAD_GLOBAL              1 (sum)
             30 LOAD_CLOSURE             0 (dp)
             32 LOAD_CLOSURE             1 (x)
             34 BUILD_TUPLE              2
             36 LOAD_CONST               4 (<code object <listcomp> at 0x7fc6cef752f0, file ""<ast>"", line 5>)
             38 LOAD_CONST               5 ('Solution.numTrees.<locals>.<listcomp>')
             40 MAKE_FUNCTION            8 (closure)
             42 LOAD_GLOBAL              0 (range)
             44 LOAD_DEREF               1 (x)
             46 CALL_FUNCTION            1
             48 GET_ITER
             50 CALL_FUNCTION            1
             52 CALL_FUNCTION            1
             54 LOAD_DEREF               0 (dp)
             56 LOAD_DEREF               1 (x)
             58 STORE_SUBSCR
             60 JUMP_ABSOLUTE           24

  6     >>   62 LOAD_DEREF               0 (dp)
             64 LOAD_FAST                1 (n)
             66 BINARY_SUBSCR
             68 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc6cef752f0, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (y)
              8 LOAD_DEREF               0 (dp)
             10 LOAD_FAST                1 (y)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (dp)
             16 LOAD_DEREF               1 (x)
             18 LOAD_FAST                1 (y)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               0 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 BINARY_MULTIPLY
             30 LIST_APPEND              2
             32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n):
        dp = { 0:1, 1:1 }
        for x in range(2,n+1):
            dp[x] = 2 * sum([ dp[y]*dp[x-y-1] for y in range(x//2) ] )
            if x%2:
                dp[x] += dp[x//2]**2
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f10e95052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f10e95052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object numTrees at 0x7f10e95053a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.numTrees')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (numTrees)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f10e95053a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 ((0, 1))
              6 BUILD_CONST_KEY_MAP      2
              8 STORE_DEREF              0 (dp)

  4          10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (2)
             14 LOAD_FAST                1 (n)
             16 LOAD_CONST               1 (1)
             18 BINARY_ADD
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER                80 (to 106)
             26 STORE_DEREF              1 (x)

  5          28 LOAD_CONST               3 (2)
             30 LOAD_GLOBAL              1 (sum)
             32 LOAD_CLOSURE             0 (dp)
             34 LOAD_CLOSURE             1 (x)
             36 BUILD_TUPLE              2
             38 LOAD_CONST               4 (<code object <listcomp> at 0x7f10e9505240, file ""<ast>"", line 5>)
             40 LOAD_CONST               5 ('Solution.numTrees.<locals>.<listcomp>')
             42 MAKE_FUNCTION            8 (closure)
             44 LOAD_GLOBAL              0 (range)
             46 LOAD_DEREF               1 (x)
             48 LOAD_CONST               3 (2)
             50 BINARY_FLOOR_DIVIDE
             52 CALL_FUNCTION            1
             54 GET_ITER
             56 CALL_FUNCTION            1
             58 CALL_FUNCTION            1
             60 BINARY_MULTIPLY
             62 LOAD_DEREF               0 (dp)
             64 LOAD_DEREF               1 (x)
             66 STORE_SUBSCR

  6          68 LOAD_DEREF               1 (x)
             70 LOAD_CONST               3 (2)
             72 BINARY_MODULO
             74 POP_JUMP_IF_FALSE       24

  7          76 LOAD_DEREF               0 (dp)
             78 LOAD_DEREF               1 (x)
             80 DUP_TOP_TWO
             82 BINARY_SUBSCR
             84 LOAD_DEREF               0 (dp)
             86 LOAD_DEREF               1 (x)
             88 LOAD_CONST               3 (2)
             90 BINARY_FLOOR_DIVIDE
             92 BINARY_SUBSCR
             94 LOAD_CONST               3 (2)
             96 BINARY_POWER
             98 INPLACE_ADD
            100 ROT_THREE
            102 STORE_SUBSCR
            104 JUMP_ABSOLUTE           24

  8     >>  106 LOAD_DEREF               0 (dp)
            108 LOAD_FAST                1 (n)
            110 BINARY_SUBSCR
            112 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f10e9505240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                28 (to 34)
              6 STORE_FAST               1 (y)
              8 LOAD_DEREF               0 (dp)
             10 LOAD_FAST                1 (y)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               0 (dp)
             16 LOAD_DEREF               1 (x)
             18 LOAD_FAST                1 (y)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               0 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 BINARY_MULTIPLY
             30 LIST_APPEND              2
             32 JUMP_ABSOLUTE            4
        >>   34 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
		# dp: store the result(status) in dictionary from the bottom, so we don't have to calculate every time
        dp = {}
        dp[0] = 1

        # num : every size of the tree in range(1, n + 1)
        for num in range(1, n + 1):
            res = 0
            
			# choose pivot i, the total result = left * right
            for i in range(1, num + 1): 
                res = res + dp[i - 1] * dp[num - i]
            dp[num] = res
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb353e95240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb353e95240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fb353e952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fb353e952f0, file ""<ast>"", line 2>:
  4           0 BUILD_MAP                0
              2 STORE_FAST               2 (dp)

  5           4 LOAD_CONST               1 (1)
              6 LOAD_FAST                2 (dp)
              8 LOAD_CONST               2 (0)
             10 STORE_SUBSCR

  8          12 LOAD_GLOBAL              0 (range)
             14 LOAD_CONST               1 (1)
             16 LOAD_FAST                1 (n)
             18 LOAD_CONST               1 (1)
             20 BINARY_ADD
             22 CALL_FUNCTION            2
             24 GET_ITER
        >>   26 FOR_ITER                64 (to 92)
             28 STORE_FAST               3 (num)

  9          30 LOAD_CONST               2 (0)
             32 STORE_FAST               4 (res)

 12          34 LOAD_GLOBAL              0 (range)
             36 LOAD_CONST               1 (1)
             38 LOAD_FAST                3 (num)
             40 LOAD_CONST               1 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                32 (to 82)
             50 STORE_FAST               5 (i)

 13          52 LOAD_FAST                4 (res)
             54 LOAD_FAST                2 (dp)
             56 LOAD_FAST                5 (i)
             58 LOAD_CONST               1 (1)
             60 BINARY_SUBTRACT
             62 BINARY_SUBSCR
             64 LOAD_FAST                2 (dp)
             66 LOAD_FAST                3 (num)
             68 LOAD_FAST                5 (i)
             70 BINARY_SUBTRACT
             72 BINARY_SUBSCR
             74 BINARY_MULTIPLY
             76 BINARY_ADD
             78 STORE_FAST               4 (res)
             80 JUMP_ABSOLUTE           48

 14     >>   82 LOAD_FAST                4 (res)
             84 LOAD_FAST                2 (dp)
             86 LOAD_FAST                3 (num)
             88 STORE_SUBSCR
             90 JUMP_ABSOLUTE           26

 15     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
numTrees,"from functools import reduce
class Solution:
    def numTrees(self, n: int) -> int:
        return int(round(reduce(lambda a, b: a * ((b + n) / b), list(range(2, n + 1)), 1)))
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('reduce',))
              4 IMPORT_NAME              0 (functools)
              6 IMPORT_FROM              1 (reduce)
              8 STORE_NAME               1 (reduce)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fd482b15710, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd482b15710, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fd482b15660, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fd482b15660, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (round)
              4 LOAD_GLOBAL              2 (reduce)
              6 LOAD_CLOSURE             0 (n)
              8 BUILD_TUPLE              1
             10 LOAD_CONST               1 (<code object <lambda> at 0x7fd482b155b0, file ""<ast>"", line 4>)
             12 LOAD_CONST               2 ('Solution.numTrees.<locals>.<lambda>')
             14 MAKE_FUNCTION            8 (closure)
             16 LOAD_GLOBAL              3 (list)
             18 LOAD_GLOBAL              4 (range)
             20 LOAD_CONST               3 (2)
             22 LOAD_DEREF               0 (n)
             24 LOAD_CONST               4 (1)
             26 BINARY_ADD
             28 CALL_FUNCTION            2
             30 CALL_FUNCTION            1
             32 LOAD_CONST               4 (1)
             34 CALL_FUNCTION            3
             36 CALL_FUNCTION            1
             38 CALL_FUNCTION            1
             40 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fd482b155b0, file ""<ast>"", line 4>:
  4           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 LOAD_DEREF               0 (n)
              6 BINARY_ADD
              8 LOAD_FAST                1 (b)
             10 BINARY_TRUE_DIVIDE
             12 BINARY_MULTIPLY
             14 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        self.table = [-1] * (n+1)
        self.table[0] = 1
        return self.numTreesRec(n)
        
    def numTreesRec(self, n):
        if self.table[n] != -1:
            return self.table[n]
        total = 0
        for m in range(n):
            total += (self.numTreesRec(n-1-m) * self.numTreesRec(m))
        self.table[n] = total
        return total
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa8e12e53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa8e12e53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7fa8e12e5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)

  7          24 LOAD_CONST               4 (<code object numTreesRec at 0x7fa8e12e52f0, file ""<ast>"", line 7>)
             26 LOAD_CONST               5 ('Solution.numTreesRec')
             28 MAKE_FUNCTION            0
             30 STORE_NAME               5 (numTreesRec)
             32 LOAD_CONST               6 (None)
             34 RETURN_VALUE

Disassembly of <code object numTrees at 0x7fa8e12e5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (-1)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 LOAD_FAST                0 (self)
             14 STORE_ATTR               0 (table)

  4          16 LOAD_CONST               2 (1)
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                0 (table)
             22 LOAD_CONST               3 (0)
             24 STORE_SUBSCR

  5          26 LOAD_FAST                0 (self)
             28 LOAD_METHOD              1 (numTreesRec)
             30 LOAD_FAST                1 (n)
             32 CALL_METHOD              1
             34 RETURN_VALUE

Disassembly of <code object numTreesRec at 0x7fa8e12e52f0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (table)
              4 LOAD_FAST                1 (n)
              6 BINARY_SUBSCR
              8 LOAD_CONST               1 (-1)
             10 COMPARE_OP               3 (!=)
             12 POP_JUMP_IF_FALSE       24

  9          14 LOAD_FAST                0 (self)
             16 LOAD_ATTR                0 (table)
             18 LOAD_FAST                1 (n)
             20 BINARY_SUBSCR
             22 RETURN_VALUE

 10     >>   24 LOAD_CONST               2 (0)
             26 STORE_FAST               2 (total)

 11          28 LOAD_GLOBAL              1 (range)
             30 LOAD_FAST                1 (n)
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                36 (to 74)
             38 STORE_FAST               3 (m)

 12          40 LOAD_FAST                2 (total)
             42 LOAD_FAST                0 (self)
             44 LOAD_METHOD              2 (numTreesRec)
             46 LOAD_FAST                1 (n)
             48 LOAD_CONST               3 (1)
             50 BINARY_SUBTRACT
             52 LOAD_FAST                3 (m)
             54 BINARY_SUBTRACT
             56 CALL_METHOD              1
             58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              2 (numTreesRec)
             62 LOAD_FAST                3 (m)
             64 CALL_METHOD              1
             66 BINARY_MULTIPLY
             68 INPLACE_ADD
             70 STORE_FAST               2 (total)
             72 JUMP_ABSOLUTE           36

 13     >>   74 LOAD_FAST                2 (total)
             76 LOAD_FAST                0 (self)
             78 LOAD_ATTR                0 (table)
             80 LOAD_FAST                1 (n)
             82 STORE_SUBSCR

 14          84 LOAD_FAST                2 (total)
             86 RETURN_VALUE
None
"
numTrees,"class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0] * (n+1)
        dp[0] = 1
        for i in range(1, n+1):
            for j in range(i):
                dp[i] += dp[j] * dp[i- 1 - j]
        return dp[n]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3300e75240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3300e75240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('n', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object numTrees at 0x7f3300e752f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.numTrees')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (numTrees)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object numTrees at 0x7f3300e752f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_FAST                1 (n)
              6 LOAD_CONST               2 (1)
              8 BINARY_ADD
             10 BINARY_MULTIPLY
             12 STORE_FAST               2 (dp)

  4          14 LOAD_CONST               2 (1)
             16 LOAD_FAST                2 (dp)
             18 LOAD_CONST               1 (0)
             20 STORE_SUBSCR

  5          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               2 (1)
             26 LOAD_FAST                1 (n)
             28 LOAD_CONST               2 (1)
             30 BINARY_ADD
             32 CALL_FUNCTION            2
             34 GET_ITER
        >>   36 FOR_ITER                54 (to 92)
             38 STORE_FAST               3 (i)

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_FAST                3 (i)
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                40 (to 90)
             50 STORE_FAST               4 (j)

  7          52 LOAD_FAST                2 (dp)
             54 LOAD_FAST                3 (i)
             56 DUP_TOP_TWO
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (dp)
             62 LOAD_FAST                4 (j)
             64 BINARY_SUBSCR
             66 LOAD_FAST                2 (dp)
             68 LOAD_FAST                3 (i)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 LOAD_FAST                4 (j)
             76 BINARY_SUBTRACT
             78 BINARY_SUBSCR
             80 BINARY_MULTIPLY
             82 INPLACE_ADD
             84 ROT_THREE
             86 STORE_SUBSCR
             88 JUMP_ABSOLUTE           48
        >>   90 JUMP_ABSOLUTE           36

  8     >>   92 LOAD_FAST                2 (dp)
             94 LOAD_FAST                1 (n)
             96 BINARY_SUBSCR
             98 RETURN_VALUE
None
"
restoreIpAddresses,"from typing import List
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:        
        def backtrack(ip, num_of_addr=4):
            if len(ip) < num_of_addr * 1 or len(ip) > num_of_addr * 3:
                return []
            
            if num_of_addr == 1:
                if (len(ip) == 1) or (len(ip) == 2 and ip[0] != '0') or \
                    (len(ip) == 3 and ip[0] != '0' and int(ip) <= 255):
                    return [ip]
                
                return []
            
            res = []
            for i in range(1, 3+1):
                init = backtrack(ip[:i], 1)
                if init:
                    after = backtrack(ip[i:], num_of_addr-1)
                    if after:
                        res.append(init + after)
            
            new_res = []
            for i in range(len(res)):
                for j in range(1, len(res[i])):
                    new_res.append(res[i][0] + '.' + res[i][j])
            
            return new_res
                    

        return backtrack(s)
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f0351b053a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0351b053a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f0351b052f0, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f0351b052f0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               4 ((4,))
              2 LOAD_CLOSURE             0 (backtrack)
              4 BUILD_TUPLE              1
              6 LOAD_CONST               2 (<code object backtrack at 0x7f0351b05240, file ""<ast>"", line 4>)
              8 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>.backtrack')
             10 MAKE_FUNCTION            9 (defaults, closure)
             12 STORE_DEREF              0 (backtrack)

 31          14 LOAD_DEREF               0 (backtrack)
             16 LOAD_FAST                1 (s)
             18 CALL_FUNCTION            1
             20 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f0351b05240, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (ip)
              4 CALL_FUNCTION            1
              6 LOAD_FAST                1 (num_of_addr)
              8 LOAD_CONST               1 (1)
             10 BINARY_MULTIPLY
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_TRUE        32
             16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                0 (ip)
             20 CALL_FUNCTION            1
             22 LOAD_FAST                1 (num_of_addr)
             24 LOAD_CONST               2 (3)
             26 BINARY_MULTIPLY
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_FALSE       36

  6     >>   32 BUILD_LIST               0
             34 RETURN_VALUE

  8     >>   36 LOAD_FAST                1 (num_of_addr)
             38 LOAD_CONST               1 (1)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE      126

  9          44 LOAD_GLOBAL              0 (len)
             46 LOAD_FAST                0 (ip)
             48 CALL_FUNCTION            1
             50 LOAD_CONST               1 (1)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_TRUE       116
             56 LOAD_GLOBAL              0 (len)
             58 LOAD_FAST                0 (ip)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               3 (2)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       80
             68 LOAD_FAST                0 (ip)
             70 LOAD_CONST               4 (0)
             72 BINARY_SUBSCR
             74 LOAD_CONST               5 ('0')
             76 COMPARE_OP               3 (!=)
             78 POP_JUMP_IF_TRUE       116

 10     >>   80 LOAD_GLOBAL              0 (len)
             82 LOAD_FAST                0 (ip)
             84 CALL_FUNCTION            1
             86 LOAD_CONST               2 (3)
             88 COMPARE_OP               2 (==)

  9          90 POP_JUMP_IF_FALSE      122

 10          92 LOAD_FAST                0 (ip)
             94 LOAD_CONST               4 (0)
             96 BINARY_SUBSCR
             98 LOAD_CONST               5 ('0')
            100 COMPARE_OP               3 (!=)

  9         102 POP_JUMP_IF_FALSE      122

 10         104 LOAD_GLOBAL              1 (int)
            106 LOAD_FAST                0 (ip)
            108 CALL_FUNCTION            1
            110 LOAD_CONST               6 (255)
            112 COMPARE_OP               1 (<=)

  9         114 POP_JUMP_IF_FALSE      122

 11     >>  116 LOAD_FAST                0 (ip)
            118 BUILD_LIST               1
            120 RETURN_VALUE

 13     >>  122 BUILD_LIST               0
            124 RETURN_VALUE

 15     >>  126 BUILD_LIST               0
            128 STORE_FAST               2 (res)

 16         130 LOAD_GLOBAL              2 (range)
            132 LOAD_CONST               1 (1)
            134 LOAD_CONST               7 (4)
            136 CALL_FUNCTION            2
            138 GET_ITER
        >>  140 FOR_ITER                66 (to 208)
            142 STORE_FAST               3 (i)

 17         144 LOAD_DEREF               0 (backtrack)
            146 LOAD_FAST                0 (ip)
            148 LOAD_CONST               0 (None)
            150 LOAD_FAST                3 (i)
            152 BUILD_SLICE              2
            154 BINARY_SUBSCR
            156 LOAD_CONST               1 (1)
            158 CALL_FUNCTION            2
            160 STORE_FAST               4 (init)

 18         162 LOAD_FAST                4 (init)
            164 POP_JUMP_IF_FALSE      140

 19         166 LOAD_DEREF               0 (backtrack)
            168 LOAD_FAST                0 (ip)
            170 LOAD_FAST                3 (i)
            172 LOAD_CONST               0 (None)
            174 BUILD_SLICE              2
            176 BINARY_SUBSCR
            178 LOAD_FAST                1 (num_of_addr)
            180 LOAD_CONST               1 (1)
            182 BINARY_SUBTRACT
            184 CALL_FUNCTION            2
            186 STORE_FAST               5 (after)

 20         188 LOAD_FAST                5 (after)
            190 POP_JUMP_IF_FALSE      140

 21         192 LOAD_FAST                2 (res)
            194 LOAD_METHOD              3 (append)
            196 LOAD_FAST                4 (init)
            198 LOAD_FAST                5 (after)
            200 BINARY_ADD
            202 CALL_METHOD              1
            204 POP_TOP
            206 JUMP_ABSOLUTE          140

 23     >>  208 BUILD_LIST               0
            210 STORE_FAST               6 (new_res)

 24         212 LOAD_GLOBAL              2 (range)
            214 LOAD_GLOBAL              0 (len)
            216 LOAD_FAST                2 (res)
            218 CALL_FUNCTION            1
            220 CALL_FUNCTION            1
            222 GET_ITER
        >>  224 FOR_ITER                62 (to 288)
            226 STORE_FAST               3 (i)

 25         228 LOAD_GLOBAL              2 (range)
            230 LOAD_CONST               1 (1)
            232 LOAD_GLOBAL              0 (len)
            234 LOAD_FAST                2 (res)
            236 LOAD_FAST                3 (i)
            238 BINARY_SUBSCR
            240 CALL_FUNCTION            1
            242 CALL_FUNCTION            2
            244 GET_ITER
        >>  246 FOR_ITER                38 (to 286)
            248 STORE_FAST               7 (j)

 26         250 LOAD_FAST                6 (new_res)
            252 LOAD_METHOD              3 (append)
            254 LOAD_FAST                2 (res)
            256 LOAD_FAST                3 (i)
            258 BINARY_SUBSCR
            260 LOAD_CONST               4 (0)
            262 BINARY_SUBSCR
            264 LOAD_CONST               8 ('.')
            266 BINARY_ADD
            268 LOAD_FAST                2 (res)
            270 LOAD_FAST                3 (i)
            272 BINARY_SUBSCR
            274 LOAD_FAST                7 (j)
            276 BINARY_SUBSCR
            278 BINARY_ADD
            280 CALL_METHOD              1
            282 POP_TOP
            284 JUMP_ABSOLUTE          246
        >>  286 JUMP_ABSOLUTE          224

 28     >>  288 LOAD_FAST                6 (new_res)
            290 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        if len(s) == 0:
            return []
        dp = [[] for _ in s]
        
        for i in range(1, len(s) + 1):
            for j in range(max(0, i - 3), i):
                ip = (s[j:i])
                if  0 <= int(ip) <= 255:
                    if str(int(ip)) == ip:
                        if j == 0 and i != len(s):
                            dp[i-1].append([ip])    
                        else:
                            if i != len(s):
                                for ips in dp[j-1]:
                                    if len(ips) < 3:
                                        dp[i-1].append(ips + [ip])
                            else:
                                for ips in dp[j-1]:
                                    if len(ips) == 3:
                                        dp[i-1].append(ips + [ip])
      
        return [""."".join(ips) for ips in dp[len(s) -1]]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f17854a5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f17854a5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f17854a53a0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f17854a53a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4          12 BUILD_LIST               0
             14 RETURN_VALUE

  5     >>   16 LOAD_CONST               2 (<code object <listcomp> at 0x7f17854a5240, file ""<ast>"", line 5>)
             18 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>.<listcomp>')
             20 MAKE_FUNCTION            0
             22 LOAD_FAST                1 (s)
             24 GET_ITER
             26 CALL_FUNCTION            1
             28 STORE_FAST               2 (dp)

  7          30 LOAD_GLOBAL              1 (range)
             32 LOAD_CONST               4 (1)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                1 (s)
             38 CALL_FUNCTION            1
             40 LOAD_CONST               4 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 EXTENDED_ARG             0
             50 FOR_ITER               254 (to 306)
             52 STORE_FAST               3 (i)

  8          54 LOAD_GLOBAL              1 (range)
             56 LOAD_GLOBAL              2 (max)
             58 LOAD_CONST               1 (0)
             60 LOAD_FAST                3 (i)
             62 LOAD_CONST               5 (3)
             64 BINARY_SUBTRACT
             66 CALL_FUNCTION            2
             68 LOAD_FAST                3 (i)
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER               228 (to 304)
             76 STORE_FAST               4 (j)

  9          78 LOAD_FAST                1 (s)
             80 LOAD_FAST                4 (j)
             82 LOAD_FAST                3 (i)
             84 BUILD_SLICE              2
             86 BINARY_SUBSCR
             88 STORE_FAST               5 (ip)

 10          90 LOAD_CONST               1 (0)
             92 LOAD_GLOBAL              3 (int)
             94 LOAD_FAST                5 (ip)
             96 CALL_FUNCTION            1
             98 DUP_TOP
            100 ROT_THREE
            102 COMPARE_OP               1 (<=)
            104 POP_JUMP_IF_FALSE      114
            106 LOAD_CONST               6 (255)
            108 COMPARE_OP               1 (<=)
            110 POP_JUMP_IF_FALSE       74
            112 JUMP_FORWARD             4 (to 118)
        >>  114 POP_TOP
            116 JUMP_ABSOLUTE           74

 11     >>  118 LOAD_GLOBAL              4 (str)
            120 LOAD_GLOBAL              3 (int)
            122 LOAD_FAST                5 (ip)
            124 CALL_FUNCTION            1
            126 CALL_FUNCTION            1
            128 LOAD_FAST                5 (ip)
            130 COMPARE_OP               2 (==)
            132 POP_JUMP_IF_FALSE       74

 12         134 LOAD_FAST                4 (j)
            136 LOAD_CONST               1 (0)
            138 COMPARE_OP               2 (==)
            140 POP_JUMP_IF_FALSE      176
            142 LOAD_FAST                3 (i)
            144 LOAD_GLOBAL              0 (len)
            146 LOAD_FAST                1 (s)
            148 CALL_FUNCTION            1
            150 COMPARE_OP               3 (!=)
            152 POP_JUMP_IF_FALSE      176

 13         154 LOAD_FAST                2 (dp)
            156 LOAD_FAST                3 (i)
            158 LOAD_CONST               4 (1)
            160 BINARY_SUBTRACT
            162 BINARY_SUBSCR
            164 LOAD_METHOD              5 (append)
            166 LOAD_FAST                5 (ip)
            168 BUILD_LIST               1
            170 CALL_METHOD              1
            172 POP_TOP
            174 JUMP_ABSOLUTE           74

 15     >>  176 LOAD_FAST                3 (i)
            178 LOAD_GLOBAL              0 (len)
            180 LOAD_FAST                1 (s)
            182 CALL_FUNCTION            1
            184 COMPARE_OP               3 (!=)
            186 POP_JUMP_IF_FALSE      244

 16         188 LOAD_FAST                2 (dp)
            190 LOAD_FAST                4 (j)
            192 LOAD_CONST               4 (1)
            194 BINARY_SUBTRACT
            196 BINARY_SUBSCR
            198 GET_ITER
        >>  200 FOR_ITER                40 (to 242)
            202 STORE_FAST               6 (ips)

 17         204 LOAD_GLOBAL              0 (len)
            206 LOAD_FAST                6 (ips)
            208 CALL_FUNCTION            1
            210 LOAD_CONST               5 (3)
            212 COMPARE_OP               0 (<)
            214 POP_JUMP_IF_FALSE      200

 18         216 LOAD_FAST                2 (dp)
            218 LOAD_FAST                3 (i)
            220 LOAD_CONST               4 (1)
            222 BINARY_SUBTRACT
            224 BINARY_SUBSCR
            226 LOAD_METHOD              5 (append)
            228 LOAD_FAST                6 (ips)
            230 LOAD_FAST                5 (ip)
            232 BUILD_LIST               1
            234 BINARY_ADD
            236 CALL_METHOD              1
            238 POP_TOP
            240 JUMP_ABSOLUTE          200
        >>  242 JUMP_ABSOLUTE           74

 20     >>  244 LOAD_FAST                2 (dp)
            246 LOAD_FAST                4 (j)
            248 LOAD_CONST               4 (1)
            250 BINARY_SUBTRACT
            252 BINARY_SUBSCR
            254 GET_ITER
        >>  256 FOR_ITER                44 (to 302)
            258 STORE_FAST               6 (ips)

 21         260 LOAD_GLOBAL              0 (len)
            262 LOAD_FAST                6 (ips)
            264 CALL_FUNCTION            1
            266 LOAD_CONST               5 (3)
            268 COMPARE_OP               2 (==)
            270 EXTENDED_ARG             1
            272 POP_JUMP_IF_FALSE      256

 22         274 LOAD_FAST                2 (dp)
            276 LOAD_FAST                3 (i)
            278 LOAD_CONST               4 (1)
            280 BINARY_SUBTRACT
            282 BINARY_SUBSCR
            284 LOAD_METHOD              5 (append)
            286 LOAD_FAST                6 (ips)
            288 LOAD_FAST                5 (ip)
            290 BUILD_LIST               1
            292 BINARY_ADD
            294 CALL_METHOD              1
            296 POP_TOP
            298 EXTENDED_ARG             1
            300 JUMP_ABSOLUTE          256
        >>  302 JUMP_ABSOLUTE           74
        >>  304 JUMP_ABSOLUTE           48

 24     >>  306 LOAD_CONST               7 (<code object <listcomp> at 0x7f17854a52f0, file ""<ast>"", line 24>)
            308 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>.<listcomp>')
            310 MAKE_FUNCTION            0
            312 LOAD_FAST                2 (dp)
            314 LOAD_GLOBAL              0 (len)
            316 LOAD_FAST                1 (s)
            318 CALL_FUNCTION            1
            320 LOAD_CONST               4 (1)
            322 BINARY_SUBTRACT
            324 BINARY_SUBSCR
            326 GET_ITER
            328 CALL_FUNCTION            1
            330 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f17854a5240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (_)
              8 BUILD_LIST               0
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f17854a52f0, file ""<ast>"", line 24>:
 24           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                14 (to 20)
              6 STORE_FAST               1 (ips)
              8 LOAD_CONST               0 ('.')
             10 LOAD_METHOD              0 (join)
             12 LOAD_FAST                1 (ips)
             14 CALL_METHOD              1
             16 LIST_APPEND              2
             18 JUMP_ABSOLUTE            4
        >>   20 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        res = []
        def restore(s,ip,start,end,c,result):
            if start == end and c == 4:
                result.append(ip)
                return 0
            
            if c >3:
                return
            if start < end:
                minIndex = min(start+(3 if s[start] != '0' else 1),end)
                res = 0

                for i in range(start,minIndex):
                    res = res*10 +int(s[i])
                    if res < 256:
                        restore(s,ip+str(res)+(""."" if c != 3 else """"),i+1,end,c+1,result)
                    else:
                        break
                    
        restore(s,"""",0,len(s),0,res)
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff4043853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff4043853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7ff4043852f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7ff4043852f0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (res)

  4           4 LOAD_CLOSURE             0 (restore)
              6 BUILD_TUPLE              1
              8 LOAD_CONST               1 (<code object restore at 0x7ff404385240, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.restore')
             12 MAKE_FUNCTION            8 (closure)
             14 STORE_DEREF              0 (restore)

 22          16 LOAD_DEREF               0 (restore)
             18 LOAD_FAST                1 (s)
             20 LOAD_CONST               3 ('')
             22 LOAD_CONST               4 (0)
             24 LOAD_GLOBAL              0 (len)
             26 LOAD_FAST                1 (s)
             28 CALL_FUNCTION            1
             30 LOAD_CONST               4 (0)
             32 LOAD_FAST                2 (res)
             34 CALL_FUNCTION            6
             36 POP_TOP

 23          38 LOAD_FAST                2 (res)
             40 RETURN_VALUE

Disassembly of <code object restore at 0x7ff404385240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                2 (start)
              2 LOAD_FAST                3 (end)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       30
              8 LOAD_FAST                4 (c)
             10 LOAD_CONST               1 (4)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       30

  6          16 LOAD_FAST                5 (result)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                1 (ip)
             22 CALL_METHOD              1
             24 POP_TOP

  7          26 LOAD_CONST               2 (0)
             28 RETURN_VALUE

  9     >>   30 LOAD_FAST                4 (c)
             32 LOAD_CONST               3 (3)
             34 COMPARE_OP               4 (>)
             36 POP_JUMP_IF_FALSE       42

 10          38 LOAD_CONST               0 (None)
             40 RETURN_VALUE

 11     >>   42 LOAD_FAST                2 (start)
             44 LOAD_FAST                3 (end)
             46 COMPARE_OP               0 (<)
             48 POP_JUMP_IF_FALSE      184

 12          50 LOAD_GLOBAL              1 (min)
             52 LOAD_FAST                2 (start)
             54 LOAD_FAST                0 (s)
             56 LOAD_FAST                2 (start)
             58 BINARY_SUBSCR
             60 LOAD_CONST               4 ('0')
             62 COMPARE_OP               3 (!=)
             64 POP_JUMP_IF_FALSE       70
             66 LOAD_CONST               3 (3)
             68 JUMP_FORWARD             2 (to 72)
        >>   70 LOAD_CONST               5 (1)
        >>   72 BINARY_ADD
             74 LOAD_FAST                3 (end)
             76 CALL_FUNCTION            2
             78 STORE_FAST               6 (minIndex)

 13          80 LOAD_CONST               2 (0)
             82 STORE_FAST               7 (res)

 15          84 LOAD_GLOBAL              2 (range)
             86 LOAD_FAST                2 (start)
             88 LOAD_FAST                6 (minIndex)
             90 CALL_FUNCTION            2
             92 GET_ITER
        >>   94 FOR_ITER                88 (to 184)
             96 STORE_FAST               8 (i)

 16          98 LOAD_FAST                7 (res)
            100 LOAD_CONST               6 (10)
            102 BINARY_MULTIPLY
            104 LOAD_GLOBAL              3 (int)
            106 LOAD_FAST                0 (s)
            108 LOAD_FAST                8 (i)
            110 BINARY_SUBSCR
            112 CALL_FUNCTION            1
            114 BINARY_ADD
            116 STORE_FAST               7 (res)

 17         118 LOAD_FAST                7 (res)
            120 LOAD_CONST               7 (256)
            122 COMPARE_OP               0 (<)
            124 POP_JUMP_IF_FALSE      178

 18         126 LOAD_DEREF               0 (restore)
            128 LOAD_FAST                0 (s)
            130 LOAD_FAST                1 (ip)
            132 LOAD_GLOBAL              4 (str)
            134 LOAD_FAST                7 (res)
            136 CALL_FUNCTION            1
            138 BINARY_ADD
            140 LOAD_FAST                4 (c)
            142 LOAD_CONST               3 (3)
            144 COMPARE_OP               3 (!=)
            146 POP_JUMP_IF_FALSE      152
            148 LOAD_CONST               8 ('.')
            150 JUMP_FORWARD             2 (to 154)
        >>  152 LOAD_CONST               9 ('')
        >>  154 BINARY_ADD
            156 LOAD_FAST                8 (i)
            158 LOAD_CONST               5 (1)
            160 BINARY_ADD
            162 LOAD_FAST                3 (end)
            164 LOAD_FAST                4 (c)
            166 LOAD_CONST               5 (1)
            168 BINARY_ADD
            170 LOAD_FAST                5 (result)
            172 CALL_FUNCTION            6
            174 POP_TOP
            176 JUMP_ABSOLUTE           94

 20     >>  178 POP_TOP
            180 JUMP_ABSOLUTE          184
            182 JUMP_ABSOLUTE           94
        >>  184 LOAD_CONST               0 (None)
            186 RETURN_VALUE
None
"
restoreIpAddresses,"import itertools
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def split(l, r, n):    # try to split s[l:r] in half
            if n == 1:         # when we cannot further split
                t = s[l:r]
                # check if the string is a valid element of an IP address
                return [] if int(t) > 255 or len(t) > 1 and t.startswith('0') else [[t]]
            L, n = r - l, n >> 1
            # further split the string at index `i` such that n <= len(s[l:i]) <= 3*n and n <= len(s[i:r]) <= 3*n
            return [a+b for i in range(max(n, L-3*n), min(3*n, L-n)+1) for a, b in itertools.product(split(l, l+i, n), split(l+i, r, n))]
        return ('.'.join(addr) for addr in split(0, len(s), 4))
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (itertools)
              6 STORE_NAME               0 (itertools)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7f87ac295500, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7f87ac295500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f87ac295450, file ""<ast>"", line 3>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f87ac295450, file ""<ast>"", line 3>:
  4           0 LOAD_CLOSURE             0 (s)
              2 LOAD_CLOSURE             1 (split)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object split at 0x7f87ac2952f0, file ""<ast>"", line 4>)
              8 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.split')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              1 (split)

 12          14 LOAD_CONST               3 (<code object <genexpr> at 0x7f87ac2953a0, file ""<ast>"", line 12>)
             16 LOAD_CONST               4 ('Solution.restoreIpAddresses.<locals>.<genexpr>')
             18 MAKE_FUNCTION            0
             20 LOAD_DEREF               1 (split)
             22 LOAD_CONST               5 (0)
             24 LOAD_GLOBAL              0 (len)
             26 LOAD_DEREF               0 (s)
             28 CALL_FUNCTION            1
             30 LOAD_CONST               6 (4)
             32 CALL_FUNCTION            3
             34 GET_ITER
             36 CALL_FUNCTION            1
             38 RETURN_VALUE

Disassembly of <code object split at 0x7f87ac2952f0, file ""<ast>"", line 4>:
  5           0 LOAD_DEREF               1 (n)
              2 LOAD_CONST               1 (1)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       66

  6           8 LOAD_DEREF               3 (s)
             10 LOAD_DEREF               0 (l)
             12 LOAD_DEREF               2 (r)
             14 BUILD_SLICE              2
             16 BINARY_SUBSCR
             18 STORE_FAST               3 (t)

  8          20 LOAD_GLOBAL              0 (int)
             22 LOAD_FAST                3 (t)
             24 CALL_FUNCTION            1
             26 LOAD_CONST               2 (255)
             28 COMPARE_OP               4 (>)
             30 POP_JUMP_IF_TRUE        54
             32 LOAD_GLOBAL              1 (len)
             34 LOAD_FAST                3 (t)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               1 (1)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       58
             44 LOAD_FAST                3 (t)
             46 LOAD_METHOD              2 (startswith)
             48 LOAD_CONST               3 ('0')
             50 CALL_METHOD              1
             52 POP_JUMP_IF_FALSE       58
        >>   54 BUILD_LIST               0
             56 RETURN_VALUE
        >>   58 LOAD_FAST                3 (t)
             60 BUILD_LIST               1
             62 BUILD_LIST               1
             64 RETURN_VALUE

  9     >>   66 LOAD_DEREF               2 (r)
             68 LOAD_DEREF               0 (l)
             70 BINARY_SUBTRACT
             72 LOAD_DEREF               1 (n)
             74 LOAD_CONST               1 (1)
             76 BINARY_RSHIFT
             78 ROT_TWO
             80 STORE_FAST               4 (L)
             82 STORE_DEREF              1 (n)

 11          84 LOAD_CLOSURE             0 (l)
             86 LOAD_CLOSURE             1 (n)
             88 LOAD_CLOSURE             2 (r)
             90 LOAD_CLOSURE             4 (split)
             92 BUILD_TUPLE              4
             94 LOAD_CONST               4 (<code object <listcomp> at 0x7f87ac295240, file ""<ast>"", line 11>)
             96 LOAD_CONST               5 ('Solution.restoreIpAddresses.<locals>.split.<locals>.<listcomp>')
             98 MAKE_FUNCTION            8 (closure)
            100 LOAD_GLOBAL              3 (range)
            102 LOAD_GLOBAL              4 (max)
            104 LOAD_DEREF               1 (n)
            106 LOAD_FAST                4 (L)
            108 LOAD_CONST               6 (3)
            110 LOAD_DEREF               1 (n)
            112 BINARY_MULTIPLY
            114 BINARY_SUBTRACT
            116 CALL_FUNCTION            2
            118 LOAD_GLOBAL              5 (min)
            120 LOAD_CONST               6 (3)
            122 LOAD_DEREF               1 (n)
            124 BINARY_MULTIPLY
            126 LOAD_FAST                4 (L)
            128 LOAD_DEREF               1 (n)
            130 BINARY_SUBTRACT
            132 CALL_FUNCTION            2
            134 LOAD_CONST               1 (1)
            136 BINARY_ADD
            138 CALL_FUNCTION            2
            140 GET_ITER
            142 CALL_FUNCTION            1
            144 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f87ac295240, file ""<ast>"", line 11>:
 11           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                58 (to 64)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (itertools)
             10 LOAD_METHOD              1 (product)
             12 LOAD_DEREF               3 (split)
             14 LOAD_DEREF               0 (l)
             16 LOAD_DEREF               0 (l)
             18 LOAD_FAST                1 (i)
             20 BINARY_ADD
             22 LOAD_DEREF               1 (n)
             24 CALL_FUNCTION            3
             26 LOAD_DEREF               3 (split)
             28 LOAD_DEREF               0 (l)
             30 LOAD_FAST                1 (i)
             32 BINARY_ADD
             34 LOAD_DEREF               2 (r)
             36 LOAD_DEREF               1 (n)
             38 CALL_FUNCTION            3
             40 CALL_METHOD              2
             42 GET_ITER
        >>   44 FOR_ITER                16 (to 62)
             46 UNPACK_SEQUENCE          2
             48 STORE_FAST               2 (a)
             50 STORE_FAST               3 (b)
             52 LOAD_FAST                2 (a)
             54 LOAD_FAST                3 (b)
             56 BINARY_ADD
             58 LIST_APPEND              3
             60 JUMP_ABSOLUTE           44
        >>   62 JUMP_ABSOLUTE            4
        >>   64 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f87ac2953a0, file ""<ast>"", line 12>:
 12           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                16 (to 20)
              4 STORE_FAST               1 (addr)
              6 LOAD_CONST               0 ('.')
              8 LOAD_METHOD              0 (join)
             10 LOAD_FAST                1 (addr)
             12 CALL_METHOD              1
             14 YIELD_VALUE
             16 POP_TOP
             18 JUMP_ABSOLUTE            2
        >>   20 LOAD_CONST               1 (None)
             22 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        n = len(s)
        ans = []
        
        for i in range(1, min(n-2, 4)):
            for j in range(i+1, min(i+1+3,n-1)):
                for k in range(j+1, min(j+1+3,n)):
                    
                    if int(s[:i]) < 256 and int(s[i:j]) < 256 and int(s[j:k]) < 256 and int(s[k:]) < 256:
                        
                        if (s[:i]==""0"" or s[:i][0] != ""0"") and (s[i:j]==""0"" or s[i:j][0] != ""0"") and (s[j:k]==""0"" or s[j:k][0] != ""0"") and (s[k:]==""0"" or s[k:][0] != ""0""):
                            
                            ans.append( s[:i] + ""."" +s[i:j] + ""."" + s[j:k] + ""."" + s[k:] )
        
        return ans","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fae12cf52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fae12cf52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7fae12cf5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fae12cf5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (n)

  4           8 BUILD_LIST               0
             10 STORE_FAST               3 (ans)

  6          12 LOAD_GLOBAL              1 (range)
             14 LOAD_CONST               1 (1)
             16 LOAD_GLOBAL              2 (min)
             18 LOAD_FAST                2 (n)
             20 LOAD_CONST               2 (2)
             22 BINARY_SUBTRACT
             24 LOAD_CONST               3 (4)
             26 CALL_FUNCTION            2
             28 CALL_FUNCTION            2
             30 GET_ITER
        >>   32 EXTENDED_ARG             1
             34 FOR_ITER               376 (to 412)
             36 STORE_FAST               4 (i)

  7          38 LOAD_GLOBAL              1 (range)
             40 LOAD_FAST                4 (i)
             42 LOAD_CONST               1 (1)
             44 BINARY_ADD
             46 LOAD_GLOBAL              2 (min)
             48 LOAD_FAST                4 (i)
             50 LOAD_CONST               1 (1)
             52 BINARY_ADD
             54 LOAD_CONST               4 (3)
             56 BINARY_ADD
             58 LOAD_FAST                2 (n)
             60 LOAD_CONST               1 (1)
             62 BINARY_SUBTRACT
             64 CALL_FUNCTION            2
             66 CALL_FUNCTION            2
             68 GET_ITER
        >>   70 EXTENDED_ARG             1
             72 FOR_ITER               336 (to 410)
             74 STORE_FAST               5 (j)

  8          76 LOAD_GLOBAL              1 (range)
             78 LOAD_FAST                5 (j)
             80 LOAD_CONST               1 (1)
             82 BINARY_ADD
             84 LOAD_GLOBAL              2 (min)
             86 LOAD_FAST                5 (j)
             88 LOAD_CONST               1 (1)
             90 BINARY_ADD
             92 LOAD_CONST               4 (3)
             94 BINARY_ADD
             96 LOAD_FAST                2 (n)
             98 CALL_FUNCTION            2
            100 CALL_FUNCTION            2
            102 GET_ITER
        >>  104 EXTENDED_ARG             1
            106 FOR_ITER               300 (to 408)
            108 STORE_FAST               6 (k)

 10         110 LOAD_GLOBAL              3 (int)
            112 LOAD_FAST                1 (s)
            114 LOAD_CONST               0 (None)
            116 LOAD_FAST                4 (i)
            118 BUILD_SLICE              2
            120 BINARY_SUBSCR
            122 CALL_FUNCTION            1
            124 LOAD_CONST               5 (256)
            126 COMPARE_OP               0 (<)
            128 POP_JUMP_IF_FALSE      104
            130 LOAD_GLOBAL              3 (int)
            132 LOAD_FAST                1 (s)
            134 LOAD_FAST                4 (i)
            136 LOAD_FAST                5 (j)
            138 BUILD_SLICE              2
            140 BINARY_SUBSCR
            142 CALL_FUNCTION            1
            144 LOAD_CONST               5 (256)
            146 COMPARE_OP               0 (<)
            148 POP_JUMP_IF_FALSE      104
            150 LOAD_GLOBAL              3 (int)
            152 LOAD_FAST                1 (s)
            154 LOAD_FAST                5 (j)
            156 LOAD_FAST                6 (k)
            158 BUILD_SLICE              2
            160 BINARY_SUBSCR
            162 CALL_FUNCTION            1
            164 LOAD_CONST               5 (256)
            166 COMPARE_OP               0 (<)
            168 POP_JUMP_IF_FALSE      104
            170 LOAD_GLOBAL              3 (int)
            172 LOAD_FAST                1 (s)
            174 LOAD_FAST                6 (k)
            176 LOAD_CONST               0 (None)
            178 BUILD_SLICE              2
            180 BINARY_SUBSCR
            182 CALL_FUNCTION            1
            184 LOAD_CONST               5 (256)
            186 COMPARE_OP               0 (<)
            188 POP_JUMP_IF_FALSE      104

 12         190 LOAD_FAST                1 (s)
            192 LOAD_CONST               0 (None)
            194 LOAD_FAST                4 (i)
            196 BUILD_SLICE              2
            198 BINARY_SUBSCR
            200 LOAD_CONST               6 ('0')
            202 COMPARE_OP               2 (==)
            204 POP_JUMP_IF_TRUE       226
            206 LOAD_FAST                1 (s)
            208 LOAD_CONST               0 (None)
            210 LOAD_FAST                4 (i)
            212 BUILD_SLICE              2
            214 BINARY_SUBSCR
            216 LOAD_CONST               7 (0)
            218 BINARY_SUBSCR
            220 LOAD_CONST               6 ('0')
            222 COMPARE_OP               3 (!=)
            224 POP_JUMP_IF_FALSE      104
        >>  226 LOAD_FAST                1 (s)
            228 LOAD_FAST                4 (i)
            230 LOAD_FAST                5 (j)
            232 BUILD_SLICE              2
            234 BINARY_SUBSCR
            236 LOAD_CONST               6 ('0')
            238 COMPARE_OP               2 (==)
            240 EXTENDED_ARG             1
            242 POP_JUMP_IF_TRUE       264
            244 LOAD_FAST                1 (s)
            246 LOAD_FAST                4 (i)
            248 LOAD_FAST                5 (j)
            250 BUILD_SLICE              2
            252 BINARY_SUBSCR
            254 LOAD_CONST               7 (0)
            256 BINARY_SUBSCR
            258 LOAD_CONST               6 ('0')
            260 COMPARE_OP               3 (!=)
            262 POP_JUMP_IF_FALSE      104
        >>  264 LOAD_FAST                1 (s)
            266 LOAD_FAST                5 (j)
            268 LOAD_FAST                6 (k)
            270 BUILD_SLICE              2
            272 BINARY_SUBSCR
            274 LOAD_CONST               6 ('0')
            276 COMPARE_OP               2 (==)
            278 EXTENDED_ARG             1
            280 POP_JUMP_IF_TRUE       302
            282 LOAD_FAST                1 (s)
            284 LOAD_FAST                5 (j)
            286 LOAD_FAST                6 (k)
            288 BUILD_SLICE              2
            290 BINARY_SUBSCR
            292 LOAD_CONST               7 (0)
            294 BINARY_SUBSCR
            296 LOAD_CONST               6 ('0')
            298 COMPARE_OP               3 (!=)
            300 POP_JUMP_IF_FALSE      104
        >>  302 LOAD_FAST                1 (s)
            304 LOAD_FAST                6 (k)
            306 LOAD_CONST               0 (None)
            308 BUILD_SLICE              2
            310 BINARY_SUBSCR
            312 LOAD_CONST               6 ('0')
            314 COMPARE_OP               2 (==)
            316 EXTENDED_ARG             1
            318 POP_JUMP_IF_TRUE       340
            320 LOAD_FAST                1 (s)
            322 LOAD_FAST                6 (k)
            324 LOAD_CONST               0 (None)
            326 BUILD_SLICE              2
            328 BINARY_SUBSCR
            330 LOAD_CONST               7 (0)
            332 BINARY_SUBSCR
            334 LOAD_CONST               6 ('0')
            336 COMPARE_OP               3 (!=)
            338 POP_JUMP_IF_FALSE      104

 14     >>  340 LOAD_FAST                3 (ans)
            342 LOAD_METHOD              4 (append)
            344 LOAD_FAST                1 (s)
            346 LOAD_CONST               0 (None)
            348 LOAD_FAST                4 (i)
            350 BUILD_SLICE              2
            352 BINARY_SUBSCR
            354 LOAD_CONST               8 ('.')
            356 BINARY_ADD
            358 LOAD_FAST                1 (s)
            360 LOAD_FAST                4 (i)
            362 LOAD_FAST                5 (j)
            364 BUILD_SLICE              2
            366 BINARY_SUBSCR
            368 BINARY_ADD
            370 LOAD_CONST               8 ('.')
            372 BINARY_ADD
            374 LOAD_FAST                1 (s)
            376 LOAD_FAST                5 (j)
            378 LOAD_FAST                6 (k)
            380 BUILD_SLICE              2
            382 BINARY_SUBSCR
            384 BINARY_ADD
            386 LOAD_CONST               8 ('.')
            388 BINARY_ADD
            390 LOAD_FAST                1 (s)
            392 LOAD_FAST                6 (k)
            394 LOAD_CONST               0 (None)
            396 BUILD_SLICE              2
            398 BINARY_SUBSCR
            400 BINARY_ADD
            402 CALL_METHOD              1
            404 POP_TOP
            406 JUMP_ABSOLUTE          104
        >>  408 JUMP_ABSOLUTE           70
        >>  410 JUMP_ABSOLUTE           32

 16     >>  412 LOAD_FAST                3 (ans)
            414 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def backtracking(tmpList: [int], start: int):
            if len(tmpList) == 4:
                if start != l: return # not ending with s
                res.append([x for x in tmpList])
            else:
                for i in range(start, start+lenIP):
                    # avoid out of range / less than 256 / '0*' can't pass
                    if i >= l or int(s[start: i+1]) > rangeIP or (s[start] == '0' and i > start): break # filter
                    tmpList.append(s[start: i+1])
                    backtracking(tmpList, i+1)
                    tmpList.pop()
        
        res = []
        l = len(s)
        lenIP = 3
        rangeIP = 255
        lenAddress = 4

        # special case
        if l < lenAddress: return []

        backtracking([], 0)

        return list(map(lambda x: '.'.join(x), res))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd124ff5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd124ff5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7fd124ff5450, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fd124ff5450, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 BUILD_LIST               1
              4 LOAD_GLOBAL              0 (int)
              6 LOAD_CONST               1 (('tmpList', 'start'))
              8 BUILD_CONST_KEY_MAP      2
             10 LOAD_CLOSURE             0 (backtracking)
             12 LOAD_CLOSURE             1 (l)
             14 LOAD_CLOSURE             2 (lenIP)
             16 LOAD_CLOSURE             3 (rangeIP)
             18 LOAD_CLOSURE             4 (res)
             20 LOAD_CLOSURE             5 (s)
             22 BUILD_TUPLE              6
             24 LOAD_CONST               2 (<code object backtracking at 0x7fd124ff52f0, file ""<ast>"", line 3>)
             26 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>.backtracking')
             28 MAKE_FUNCTION           12 (annotations, closure)
             30 STORE_DEREF              0 (backtracking)

 15          32 BUILD_LIST               0
             34 STORE_DEREF              4 (res)

 16          36 LOAD_GLOBAL              1 (len)
             38 LOAD_DEREF               5 (s)
             40 CALL_FUNCTION            1
             42 STORE_DEREF              1 (l)

 17          44 LOAD_CONST               4 (3)
             46 STORE_DEREF              2 (lenIP)

 18          48 LOAD_CONST               5 (255)
             50 STORE_DEREF              3 (rangeIP)

 19          52 LOAD_CONST               6 (4)
             54 STORE_FAST               2 (lenAddress)

 22          56 LOAD_DEREF               1 (l)
             58 LOAD_FAST                2 (lenAddress)
             60 COMPARE_OP               0 (<)
             62 POP_JUMP_IF_FALSE       68
             64 BUILD_LIST               0
             66 RETURN_VALUE

 24     >>   68 LOAD_DEREF               0 (backtracking)
             70 BUILD_LIST               0
             72 LOAD_CONST               7 (0)
             74 CALL_FUNCTION            2
             76 POP_TOP

 26          78 LOAD_GLOBAL              2 (list)
             80 LOAD_GLOBAL              3 (map)
             82 LOAD_CONST               8 (<code object <lambda> at 0x7fd124ff53a0, file ""<ast>"", line 26>)
             84 LOAD_CONST               9 ('Solution.restoreIpAddresses.<locals>.<lambda>')
             86 MAKE_FUNCTION            0
             88 LOAD_DEREF               4 (res)
             90 CALL_FUNCTION            2
             92 CALL_FUNCTION            1
             94 RETURN_VALUE

Disassembly of <code object backtracking at 0x7fd124ff52f0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (tmpList)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       46

  5          12 LOAD_FAST                1 (start)
             14 LOAD_DEREF               1 (l)
             16 COMPARE_OP               3 (!=)
             18 POP_JUMP_IF_FALSE       24
             20 LOAD_CONST               0 (None)
             22 RETURN_VALUE

  6     >>   24 LOAD_DEREF               4 (res)
             26 LOAD_METHOD              1 (append)
             28 LOAD_CONST               2 (<code object <listcomp> at 0x7fd124ff5240, file ""<ast>"", line 6>)
             30 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>.backtracking.<locals>.<listcomp>')
             32 MAKE_FUNCTION            0
             34 LOAD_FAST                0 (tmpList)
             36 GET_ITER
             38 CALL_FUNCTION            1
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_FORWARD           120 (to 166)

  8     >>   46 LOAD_GLOBAL              2 (range)
             48 LOAD_FAST                1 (start)
             50 LOAD_FAST                1 (start)
             52 LOAD_DEREF               2 (lenIP)
             54 BINARY_ADD
             56 CALL_FUNCTION            2
             58 GET_ITER
        >>   60 FOR_ITER               104 (to 166)
             62 STORE_FAST               2 (i)

 10          64 LOAD_FAST                2 (i)
             66 LOAD_DEREF               1 (l)
             68 COMPARE_OP               5 (>=)
             70 POP_JUMP_IF_TRUE       116
             72 LOAD_GLOBAL              3 (int)
             74 LOAD_DEREF               5 (s)
             76 LOAD_FAST                1 (start)
             78 LOAD_FAST                2 (i)
             80 LOAD_CONST               4 (1)
             82 BINARY_ADD
             84 BUILD_SLICE              2
             86 BINARY_SUBSCR
             88 CALL_FUNCTION            1
             90 LOAD_DEREF               3 (rangeIP)
             92 COMPARE_OP               4 (>)
             94 POP_JUMP_IF_TRUE       116
             96 LOAD_DEREF               5 (s)
             98 LOAD_FAST                1 (start)
            100 BINARY_SUBSCR
            102 LOAD_CONST               5 ('0')
            104 COMPARE_OP               2 (==)
            106 POP_JUMP_IF_FALSE      120
            108 LOAD_FAST                2 (i)
            110 LOAD_FAST                1 (start)
            112 COMPARE_OP               4 (>)
            114 POP_JUMP_IF_FALSE      120
        >>  116 POP_TOP
            118 JUMP_ABSOLUTE          166

 11     >>  120 LOAD_FAST                0 (tmpList)
            122 LOAD_METHOD              1 (append)
            124 LOAD_DEREF               5 (s)
            126 LOAD_FAST                1 (start)
            128 LOAD_FAST                2 (i)
            130 LOAD_CONST               4 (1)
            132 BINARY_ADD
            134 BUILD_SLICE              2
            136 BINARY_SUBSCR
            138 CALL_METHOD              1
            140 POP_TOP

 12         142 LOAD_DEREF               0 (backtracking)
            144 LOAD_FAST                0 (tmpList)
            146 LOAD_FAST                2 (i)
            148 LOAD_CONST               4 (1)
            150 BINARY_ADD
            152 CALL_FUNCTION            2
            154 POP_TOP

 13         156 LOAD_FAST                0 (tmpList)
            158 LOAD_METHOD              4 (pop)
            160 CALL_METHOD              0
            162 POP_TOP
            164 JUMP_ABSOLUTE           60
        >>  166 LOAD_CONST               0 (None)
            168 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fd124ff5240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                 8 (to 14)
              6 STORE_FAST               1 (x)
              8 LOAD_FAST                1 (x)
             10 LIST_APPEND              2
             12 JUMP_ABSOLUTE            4
        >>   14 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fd124ff53a0, file ""<ast>"", line 26>:
 26           0 LOAD_CONST               1 ('.')
              2 LOAD_METHOD              0 (join)
              4 LOAD_FAST                0 (x)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s:str, parts=4)->List[str]:
        
        if s == '':
            return []
        
        if parts == 1:
            if int(s) <= 255 and str(int(s)) == s:
                return [s]
            else:
                return []
            
        combs = []
        
        for section in [1, 2, 3]:
            if s[0:section] == str(int(s[0:section])) and int(s[0:section]) <= 255:
                for i in self.restoreIpAddresses(s[section:], parts - 1):
                    combs.append(s[0:section] + ""."" + i)
            
            
        return combs
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fac5fb052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fac5fb052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               6 ((4,))
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (List)
             14 LOAD_NAME                3 (str)
             16 BINARY_SUBSCR
             18 LOAD_CONST               2 (('s', 'return'))
             20 BUILD_CONST_KEY_MAP      2
             22 LOAD_CONST               3 (<code object restoreIpAddresses at 0x7fac5fb05240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.restoreIpAddresses')
             26 MAKE_FUNCTION            5 (defaults, annotations)
             28 STORE_NAME               5 (restoreIpAddresses)
             30 LOAD_CONST               5 (None)
             32 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fac5fb05240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (s)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  5           8 BUILD_LIST               0
             10 RETURN_VALUE

  7     >>   12 LOAD_FAST                2 (parts)
             14 LOAD_CONST               2 (1)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       58

  8          20 LOAD_GLOBAL              0 (int)
             22 LOAD_FAST                1 (s)
             24 CALL_FUNCTION            1
             26 LOAD_CONST               3 (255)
             28 COMPARE_OP               1 (<=)
             30 POP_JUMP_IF_FALSE       54
             32 LOAD_GLOBAL              1 (str)
             34 LOAD_GLOBAL              0 (int)
             36 LOAD_FAST                1 (s)
             38 CALL_FUNCTION            1
             40 CALL_FUNCTION            1
             42 LOAD_FAST                1 (s)
             44 COMPARE_OP               2 (==)
             46 POP_JUMP_IF_FALSE       54

  9          48 LOAD_FAST                1 (s)
             50 BUILD_LIST               1
             52 RETURN_VALUE

 11     >>   54 BUILD_LIST               0
             56 RETURN_VALUE

 13     >>   58 BUILD_LIST               0
             60 STORE_FAST               3 (combs)

 15          62 LOAD_CONST               4 ((1, 2, 3))
             64 GET_ITER
        >>   66 FOR_ITER               112 (to 180)
             68 STORE_FAST               4 (section)

 16          70 LOAD_FAST                1 (s)
             72 LOAD_CONST               5 (0)
             74 LOAD_FAST                4 (section)
             76 BUILD_SLICE              2
             78 BINARY_SUBSCR
             80 LOAD_GLOBAL              1 (str)
             82 LOAD_GLOBAL              0 (int)
             84 LOAD_FAST                1 (s)
             86 LOAD_CONST               5 (0)
             88 LOAD_FAST                4 (section)
             90 BUILD_SLICE              2
             92 BINARY_SUBSCR
             94 CALL_FUNCTION            1
             96 CALL_FUNCTION            1
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE       66
            102 LOAD_GLOBAL              0 (int)
            104 LOAD_FAST                1 (s)
            106 LOAD_CONST               5 (0)
            108 LOAD_FAST                4 (section)
            110 BUILD_SLICE              2
            112 BINARY_SUBSCR
            114 CALL_FUNCTION            1
            116 LOAD_CONST               3 (255)
            118 COMPARE_OP               1 (<=)
            120 POP_JUMP_IF_FALSE       66

 17         122 LOAD_FAST                0 (self)
            124 LOAD_METHOD              2 (restoreIpAddresses)
            126 LOAD_FAST                1 (s)
            128 LOAD_FAST                4 (section)
            130 LOAD_CONST               0 (None)
            132 BUILD_SLICE              2
            134 BINARY_SUBSCR
            136 LOAD_FAST                2 (parts)
            138 LOAD_CONST               2 (1)
            140 BINARY_SUBTRACT
            142 CALL_METHOD              2
            144 GET_ITER
        >>  146 FOR_ITER                30 (to 178)
            148 STORE_FAST               5 (i)

 18         150 LOAD_FAST                3 (combs)
            152 LOAD_METHOD              3 (append)
            154 LOAD_FAST                1 (s)
            156 LOAD_CONST               5 (0)
            158 LOAD_FAST                4 (section)
            160 BUILD_SLICE              2
            162 BINARY_SUBSCR
            164 LOAD_CONST               6 ('.')
            166 BINARY_ADD
            168 LOAD_FAST                5 (i)
            170 BINARY_ADD
            172 CALL_METHOD              1
            174 POP_TOP
            176 JUMP_ABSOLUTE          146
        >>  178 JUMP_ABSOLUTE           66

 21     >>  180 LOAD_FAST                3 (combs)
            182 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        if len(s) < 4 or len(s) > 12:
            return []
        res = []
        self.dfs(s, 0, '', 0, res)
        return res
    
    def dfs(self, s, index, temp, count, res):
        if index == len(s) and count == 4:
            res.append(temp[:-1])
            return
        elif index == len(s) or count == 4:
            return
        else:
            self.dfs(s, index+1, temp+s[index]+'.', count+1, res)
            if index + 1 < len(s) and s[index] != '0': 
                self.dfs(s, index+2, temp+s[index]+s[index+1]+'.', count+1, res)
                if index + 2 < len(s) and int(s[index:index+3]) < 256:
                    self.dfs(s, index+3, temp+s[index:index+3]+'.', count+1, res)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f901d8d53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f901d8d53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f901d8d5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

  9          28 LOAD_CONST               4 (<code object dfs at 0x7f901d8d52f0, file ""<ast>"", line 9>)
             30 LOAD_CONST               5 ('Solution.dfs')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               6 (dfs)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f901d8d5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_TRUE        24
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (s)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               2 (12)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       28

  4     >>   24 BUILD_LIST               0
             26 RETURN_VALUE

  5     >>   28 BUILD_LIST               0
             30 STORE_FAST               2 (res)

  6          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              1 (dfs)
             36 LOAD_FAST                1 (s)
             38 LOAD_CONST               3 (0)
             40 LOAD_CONST               4 ('')
             42 LOAD_CONST               3 (0)
             44 LOAD_FAST                2 (res)
             46 CALL_METHOD              5
             48 POP_TOP

  7          50 LOAD_FAST                2 (res)
             52 RETURN_VALUE

Disassembly of <code object dfs at 0x7f901d8d52f0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                2 (index)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (s)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       42
             12 LOAD_FAST                4 (count)
             14 LOAD_CONST               1 (4)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       42

 11          20 LOAD_FAST                5 (res)
             22 LOAD_METHOD              1 (append)
             24 LOAD_FAST                3 (temp)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               2 (-1)
             30 BUILD_SLICE              2
             32 BINARY_SUBSCR
             34 CALL_METHOD              1
             36 POP_TOP

 12          38 LOAD_CONST               0 (None)
             40 RETURN_VALUE

 13     >>   42 LOAD_FAST                2 (index)
             44 LOAD_GLOBAL              0 (len)
             46 LOAD_FAST                1 (s)
             48 CALL_FUNCTION            1
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_TRUE        62
             54 LOAD_FAST                4 (count)
             56 LOAD_CONST               1 (4)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

 14     >>   62 LOAD_CONST               0 (None)
             64 RETURN_VALUE

 16     >>   66 LOAD_FAST                0 (self)
             68 LOAD_METHOD              2 (dfs)
             70 LOAD_FAST                1 (s)
             72 LOAD_FAST                2 (index)
             74 LOAD_CONST               3 (1)
             76 BINARY_ADD
             78 LOAD_FAST                3 (temp)
             80 LOAD_FAST                1 (s)
             82 LOAD_FAST                2 (index)
             84 BINARY_SUBSCR
             86 BINARY_ADD
             88 LOAD_CONST               4 ('.')
             90 BINARY_ADD
             92 LOAD_FAST                4 (count)
             94 LOAD_CONST               3 (1)
             96 BINARY_ADD
             98 LOAD_FAST                5 (res)
            100 CALL_METHOD              5
            102 POP_TOP

 17         104 LOAD_FAST                2 (index)
            106 LOAD_CONST               3 (1)
            108 BINARY_ADD
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                1 (s)
            114 CALL_FUNCTION            1
            116 COMPARE_OP               0 (<)
            118 EXTENDED_ARG             1
            120 POP_JUMP_IF_FALSE      276
            122 LOAD_FAST                1 (s)
            124 LOAD_FAST                2 (index)
            126 BINARY_SUBSCR
            128 LOAD_CONST               5 ('0')
            130 COMPARE_OP               3 (!=)
            132 EXTENDED_ARG             1
            134 POP_JUMP_IF_FALSE      276

 18         136 LOAD_FAST                0 (self)
            138 LOAD_METHOD              2 (dfs)
            140 LOAD_FAST                1 (s)
            142 LOAD_FAST                2 (index)
            144 LOAD_CONST               6 (2)
            146 BINARY_ADD
            148 LOAD_FAST                3 (temp)
            150 LOAD_FAST                1 (s)
            152 LOAD_FAST                2 (index)
            154 BINARY_SUBSCR
            156 BINARY_ADD
            158 LOAD_FAST                1 (s)
            160 LOAD_FAST                2 (index)
            162 LOAD_CONST               3 (1)
            164 BINARY_ADD
            166 BINARY_SUBSCR
            168 BINARY_ADD
            170 LOAD_CONST               4 ('.')
            172 BINARY_ADD
            174 LOAD_FAST                4 (count)
            176 LOAD_CONST               3 (1)
            178 BINARY_ADD
            180 LOAD_FAST                5 (res)
            182 CALL_METHOD              5
            184 POP_TOP

 19         186 LOAD_FAST                2 (index)
            188 LOAD_CONST               6 (2)
            190 BINARY_ADD
            192 LOAD_GLOBAL              0 (len)
            194 LOAD_FAST                1 (s)
            196 CALL_FUNCTION            1
            198 COMPARE_OP               0 (<)
            200 EXTENDED_ARG             1
            202 POP_JUMP_IF_FALSE      276
            204 LOAD_GLOBAL              3 (int)
            206 LOAD_FAST                1 (s)
            208 LOAD_FAST                2 (index)
            210 LOAD_FAST                2 (index)
            212 LOAD_CONST               7 (3)
            214 BINARY_ADD
            216 BUILD_SLICE              2
            218 BINARY_SUBSCR
            220 CALL_FUNCTION            1
            222 LOAD_CONST               8 (256)
            224 COMPARE_OP               0 (<)
            226 EXTENDED_ARG             1
            228 POP_JUMP_IF_FALSE      276

 20         230 LOAD_FAST                0 (self)
            232 LOAD_METHOD              2 (dfs)
            234 LOAD_FAST                1 (s)
            236 LOAD_FAST                2 (index)
            238 LOAD_CONST               7 (3)
            240 BINARY_ADD
            242 LOAD_FAST                3 (temp)
            244 LOAD_FAST                1 (s)
            246 LOAD_FAST                2 (index)
            248 LOAD_FAST                2 (index)
            250 LOAD_CONST               7 (3)
            252 BINARY_ADD
            254 BUILD_SLICE              2
            256 BINARY_SUBSCR
            258 BINARY_ADD
            260 LOAD_CONST               4 ('.')
            262 BINARY_ADD
            264 LOAD_FAST                4 (count)
            266 LOAD_CONST               3 (1)
            268 BINARY_ADD
            270 LOAD_FAST                5 (res)
            272 CALL_METHOD              5
            274 POP_TOP
        >>  276 LOAD_CONST               0 (None)
            278 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        if len(s) < 4 or len(s) > 12:
            return []
        
        res = []
        self.dfs(s, '', 0, res)
        return res
    
    def dfs(self, s, temp, count, res):
        if len(s) == 0 and count == 4:
            res.append(temp[:-1])
            return
        elif len(s) == 0 or count == 4:
            return
        else:
            self.dfs(s[1:], temp+s[0]+'.', count+1, res)
            if s[0] != '0' and len(s) > 1:
                self.dfs(s[2:], temp+s[0:2]+'.', count+1, res)
                if len(s) > 2 and int(s[0:3]) < 256:
                    self.dfs(s[3:], temp+s[0:3]+'.', count+1, res)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb908c453a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb908c453a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7fb908c45240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

 10          28 LOAD_CONST               4 (<code object dfs at 0x7fb908c452f0, file ""<ast>"", line 10>)
             30 LOAD_CONST               5 ('Solution.dfs')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               6 (dfs)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fb908c45240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_TRUE        24
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (s)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               2 (12)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       28

  4     >>   24 BUILD_LIST               0
             26 RETURN_VALUE

  6     >>   28 BUILD_LIST               0
             30 STORE_FAST               2 (res)

  7          32 LOAD_FAST                0 (self)
             34 LOAD_METHOD              1 (dfs)
             36 LOAD_FAST                1 (s)
             38 LOAD_CONST               3 ('')
             40 LOAD_CONST               4 (0)
             42 LOAD_FAST                2 (res)
             44 CALL_METHOD              4
             46 POP_TOP

  8          48 LOAD_FAST                2 (res)
             50 RETURN_VALUE

Disassembly of <code object dfs at 0x7fb908c452f0, file ""<ast>"", line 10>:
 11           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (s)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       42
             12 LOAD_FAST                3 (count)
             14 LOAD_CONST               2 (4)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       42

 12          20 LOAD_FAST                4 (res)
             22 LOAD_METHOD              1 (append)
             24 LOAD_FAST                2 (temp)
             26 LOAD_CONST               0 (None)
             28 LOAD_CONST               3 (-1)
             30 BUILD_SLICE              2
             32 BINARY_SUBSCR
             34 CALL_METHOD              1
             36 POP_TOP

 13          38 LOAD_CONST               0 (None)
             40 RETURN_VALUE

 14     >>   42 LOAD_GLOBAL              0 (len)
             44 LOAD_FAST                1 (s)
             46 CALL_FUNCTION            1
             48 LOAD_CONST               1 (0)
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_TRUE        62
             54 LOAD_FAST                3 (count)
             56 LOAD_CONST               2 (4)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66

 15     >>   62 LOAD_CONST               0 (None)
             64 RETURN_VALUE

 17     >>   66 LOAD_FAST                0 (self)
             68 LOAD_METHOD              2 (dfs)
             70 LOAD_FAST                1 (s)
             72 LOAD_CONST               4 (1)
             74 LOAD_CONST               0 (None)
             76 BUILD_SLICE              2
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (temp)
             82 LOAD_FAST                1 (s)
             84 LOAD_CONST               1 (0)
             86 BINARY_SUBSCR
             88 BINARY_ADD
             90 LOAD_CONST               5 ('.')
             92 BINARY_ADD
             94 LOAD_FAST                3 (count)
             96 LOAD_CONST               4 (1)
             98 BINARY_ADD
            100 LOAD_FAST                4 (res)
            102 CALL_METHOD              4
            104 POP_TOP

 18         106 LOAD_FAST                1 (s)
            108 LOAD_CONST               1 (0)
            110 BINARY_SUBSCR
            112 LOAD_CONST               6 ('0')
            114 COMPARE_OP               3 (!=)
            116 POP_JUMP_IF_FALSE      250
            118 LOAD_GLOBAL              0 (len)
            120 LOAD_FAST                1 (s)
            122 CALL_FUNCTION            1
            124 LOAD_CONST               4 (1)
            126 COMPARE_OP               4 (>)
            128 POP_JUMP_IF_FALSE      250

 19         130 LOAD_FAST                0 (self)
            132 LOAD_METHOD              2 (dfs)
            134 LOAD_FAST                1 (s)
            136 LOAD_CONST               7 (2)
            138 LOAD_CONST               0 (None)
            140 BUILD_SLICE              2
            142 BINARY_SUBSCR
            144 LOAD_FAST                2 (temp)
            146 LOAD_FAST                1 (s)
            148 LOAD_CONST               1 (0)
            150 LOAD_CONST               7 (2)
            152 BUILD_SLICE              2
            154 BINARY_SUBSCR
            156 BINARY_ADD
            158 LOAD_CONST               5 ('.')
            160 BINARY_ADD
            162 LOAD_FAST                3 (count)
            164 LOAD_CONST               4 (1)
            166 BINARY_ADD
            168 LOAD_FAST                4 (res)
            170 CALL_METHOD              4
            172 POP_TOP

 20         174 LOAD_GLOBAL              0 (len)
            176 LOAD_FAST                1 (s)
            178 CALL_FUNCTION            1
            180 LOAD_CONST               7 (2)
            182 COMPARE_OP               4 (>)
            184 POP_JUMP_IF_FALSE      250
            186 LOAD_GLOBAL              3 (int)
            188 LOAD_FAST                1 (s)
            190 LOAD_CONST               1 (0)
            192 LOAD_CONST               8 (3)
            194 BUILD_SLICE              2
            196 BINARY_SUBSCR
            198 CALL_FUNCTION            1
            200 LOAD_CONST               9 (256)
            202 COMPARE_OP               0 (<)
            204 POP_JUMP_IF_FALSE      250

 21         206 LOAD_FAST                0 (self)
            208 LOAD_METHOD              2 (dfs)
            210 LOAD_FAST                1 (s)
            212 LOAD_CONST               8 (3)
            214 LOAD_CONST               0 (None)
            216 BUILD_SLICE              2
            218 BINARY_SUBSCR
            220 LOAD_FAST                2 (temp)
            222 LOAD_FAST                1 (s)
            224 LOAD_CONST               1 (0)
            226 LOAD_CONST               8 (3)
            228 BUILD_SLICE              2
            230 BINARY_SUBSCR
            232 BINARY_ADD
            234 LOAD_CONST               5 ('.')
            236 BINARY_ADD
            238 LOAD_FAST                3 (count)
            240 LOAD_CONST               4 (1)
            242 BINARY_ADD
            244 LOAD_FAST                4 (res)
            246 CALL_METHOD              4
            248 POP_TOP
        >>  250 LOAD_CONST               0 (None)
            252 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        if s == """":
            return []
        self.rs = []
        self.ln = len(s)
        self.s = s
        self.helper(0, 0, """")
        
        return self.rs

    # part tell which part I am filling now, I have to fill 4 parts between three dots
    # idx tells which index of s I am currently at
    def helper(self, part, idx, tmp):
        if part < 4 and idx < self.ln:
            for i in range(idx, min(idx+3, self.ln)):
                nm = self.s[idx: i+1]
                if 0 <= int(nm) <= 255 and (i == idx or nm[0] != '0'):
                    self.helper(part+1, i+1, tmp + nm + ""."")
        elif part == 4 and idx == self.ln:
            self.rs.append(tmp[:-1]) #remove extra dot","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe62aac53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe62aac53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7fe62aac5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

 14          28 LOAD_CONST               4 (<code object helper at 0x7fe62aac52f0, file ""<ast>"", line 14>)
             30 LOAD_CONST               5 ('Solution.helper')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               6 (helper)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fe62aac5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (s)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 BUILD_LIST               0
             10 RETURN_VALUE

  5     >>   12 BUILD_LIST               0
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               0 (rs)

  6          18 LOAD_GLOBAL              1 (len)
             20 LOAD_FAST                1 (s)
             22 CALL_FUNCTION            1
             24 LOAD_FAST                0 (self)
             26 STORE_ATTR               2 (ln)

  7          28 LOAD_FAST                1 (s)
             30 LOAD_FAST                0 (self)
             32 STORE_ATTR               3 (s)

  8          34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              4 (helper)
             38 LOAD_CONST               2 (0)
             40 LOAD_CONST               2 (0)
             42 LOAD_CONST               1 ('')
             44 CALL_METHOD              3
             46 POP_TOP

 10          48 LOAD_FAST                0 (self)
             50 LOAD_ATTR                0 (rs)
             52 RETURN_VALUE

Disassembly of <code object helper at 0x7fe62aac52f0, file ""<ast>"", line 14>:
 15           0 LOAD_FAST                1 (part)
              2 LOAD_CONST               1 (4)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE      144
              8 LOAD_FAST                2 (idx)
             10 LOAD_FAST                0 (self)
             12 LOAD_ATTR                0 (ln)
             14 COMPARE_OP               0 (<)
             16 POP_JUMP_IF_FALSE      144

 16          18 LOAD_GLOBAL              1 (range)
             20 LOAD_FAST                2 (idx)
             22 LOAD_GLOBAL              2 (min)
             24 LOAD_FAST                2 (idx)
             26 LOAD_CONST               2 (3)
             28 BINARY_ADD
             30 LOAD_FAST                0 (self)
             32 LOAD_ATTR                0 (ln)
             34 CALL_FUNCTION            2
             36 CALL_FUNCTION            2
             38 GET_ITER
        >>   40 FOR_ITER               100 (to 142)
             42 STORE_FAST               4 (i)

 17          44 LOAD_FAST                0 (self)
             46 LOAD_ATTR                3 (s)
             48 LOAD_FAST                2 (idx)
             50 LOAD_FAST                4 (i)
             52 LOAD_CONST               3 (1)
             54 BINARY_ADD
             56 BUILD_SLICE              2
             58 BINARY_SUBSCR
             60 STORE_FAST               5 (nm)

 18          62 LOAD_CONST               4 (0)
             64 LOAD_GLOBAL              4 (int)
             66 LOAD_FAST                5 (nm)
             68 CALL_FUNCTION            1
             70 DUP_TOP
             72 ROT_THREE
             74 COMPARE_OP               1 (<=)
             76 POP_JUMP_IF_FALSE       86
             78 LOAD_CONST               5 (255)
             80 COMPARE_OP               1 (<=)
             82 POP_JUMP_IF_FALSE       40
             84 JUMP_FORWARD             4 (to 90)
        >>   86 POP_TOP
             88 JUMP_ABSOLUTE           40
        >>   90 LOAD_FAST                4 (i)
             92 LOAD_FAST                2 (idx)
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_TRUE       110
             98 LOAD_FAST                5 (nm)
            100 LOAD_CONST               4 (0)
            102 BINARY_SUBSCR
            104 LOAD_CONST               6 ('0')
            106 COMPARE_OP               3 (!=)
            108 POP_JUMP_IF_FALSE       40

 19     >>  110 LOAD_FAST                0 (self)
            112 LOAD_METHOD              5 (helper)
            114 LOAD_FAST                1 (part)
            116 LOAD_CONST               3 (1)
            118 BINARY_ADD
            120 LOAD_FAST                4 (i)
            122 LOAD_CONST               3 (1)
            124 BINARY_ADD
            126 LOAD_FAST                3 (tmp)
            128 LOAD_FAST                5 (nm)
            130 BINARY_ADD
            132 LOAD_CONST               7 ('.')
            134 BINARY_ADD
            136 CALL_METHOD              3
            138 POP_TOP
            140 JUMP_ABSOLUTE           40
        >>  142 JUMP_FORWARD            38 (to 182)

 20     >>  144 LOAD_FAST                1 (part)
            146 LOAD_CONST               1 (4)
            148 COMPARE_OP               2 (==)
            150 POP_JUMP_IF_FALSE      182
            152 LOAD_FAST                2 (idx)
            154 LOAD_FAST                0 (self)
            156 LOAD_ATTR                0 (ln)
            158 COMPARE_OP               2 (==)
            160 POP_JUMP_IF_FALSE      182

 21         162 LOAD_FAST                0 (self)
            164 LOAD_ATTR                6 (rs)
            166 LOAD_METHOD              7 (append)
            168 LOAD_FAST                3 (tmp)
            170 LOAD_CONST               0 (None)
            172 LOAD_CONST               8 (-1)
            174 BUILD_SLICE              2
            176 BINARY_SUBSCR
            178 CALL_METHOD              1
            180 POP_TOP
        >>  182 LOAD_CONST               0 (None)
            184 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def _solve(cur, rem, depth=0):
            
            if depth == 4:
                if len(cur) == len(s)+3:
                    sol.append(cur[:])
                return
            
            for i in range(1, min(len(rem)+1, 4)):
                new = rem[0:i]
                if 0 <= int(new) < 256 and not (int(new[0]) == 0 and len(new) > 1):
                    if not cur:
                        _solve(new, rem[i:], depth+1)
                    else:
                        _solve(cur + '.' + new, rem[i:], depth+1)
        
        sol = []
        _solve([], s)
        return sol
                
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe5a59a53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe5a59a53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7fe5a59a52f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7fe5a59a52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               4 ((0,))
              2 LOAD_CLOSURE             0 (_solve)
              4 LOAD_CLOSURE             1 (s)
              6 LOAD_CLOSURE             2 (sol)
              8 BUILD_TUPLE              3
             10 LOAD_CONST               2 (<code object _solve at 0x7fe5a59a5240, file ""<ast>"", line 3>)
             12 LOAD_CONST               3 ('Solution.restoreIpAddresses.<locals>._solve')
             14 MAKE_FUNCTION            9 (defaults, closure)
             16 STORE_DEREF              0 (_solve)

 18          18 BUILD_LIST               0
             20 STORE_DEREF              2 (sol)

 19          22 LOAD_DEREF               0 (_solve)
             24 BUILD_LIST               0
             26 LOAD_DEREF               1 (s)
             28 CALL_FUNCTION            2
             30 POP_TOP

 20          32 LOAD_DEREF               2 (sol)
             34 RETURN_VALUE

Disassembly of <code object _solve at 0x7fe5a59a5240, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                2 (depth)
              2 LOAD_CONST               1 (4)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       50

  6           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                0 (cur)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               1 (s)
             18 CALL_FUNCTION            1
             20 LOAD_CONST               2 (3)
             22 BINARY_ADD
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       46

  7          28 LOAD_DEREF               2 (sol)
             30 LOAD_METHOD              1 (append)
             32 LOAD_FAST                0 (cur)
             34 LOAD_CONST               0 (None)
             36 LOAD_CONST               0 (None)
             38 BUILD_SLICE              2
             40 BINARY_SUBSCR
             42 CALL_METHOD              1
             44 POP_TOP

  8     >>   46 LOAD_CONST               0 (None)
             48 RETURN_VALUE

 10     >>   50 LOAD_GLOBAL              2 (range)
             52 LOAD_CONST               3 (1)
             54 LOAD_GLOBAL              3 (min)
             56 LOAD_GLOBAL              0 (len)
             58 LOAD_FAST                1 (rem)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               3 (1)
             64 BINARY_ADD
             66 LOAD_CONST               1 (4)
             68 CALL_FUNCTION            2
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER               134 (to 210)
             76 STORE_FAST               3 (i)

 11          78 LOAD_FAST                1 (rem)
             80 LOAD_CONST               4 (0)
             82 LOAD_FAST                3 (i)
             84 BUILD_SLICE              2
             86 BINARY_SUBSCR
             88 STORE_FAST               4 (new)

 12          90 LOAD_CONST               4 (0)
             92 LOAD_GLOBAL              4 (int)
             94 LOAD_FAST                4 (new)
             96 CALL_FUNCTION            1
             98 DUP_TOP
            100 ROT_THREE
            102 COMPARE_OP               1 (<=)
            104 POP_JUMP_IF_FALSE      114
            106 LOAD_CONST               5 (256)
            108 COMPARE_OP               0 (<)
            110 POP_JUMP_IF_FALSE       74
            112 JUMP_FORWARD             4 (to 118)
        >>  114 POP_TOP
            116 JUMP_ABSOLUTE           74
        >>  118 LOAD_GLOBAL              4 (int)
            120 LOAD_FAST                4 (new)
            122 LOAD_CONST               4 (0)
            124 BINARY_SUBSCR
            126 CALL_FUNCTION            1
            128 LOAD_CONST               4 (0)
            130 COMPARE_OP               2 (==)
            132 POP_JUMP_IF_FALSE      146
            134 LOAD_GLOBAL              0 (len)
            136 LOAD_FAST                4 (new)
            138 CALL_FUNCTION            1
            140 LOAD_CONST               3 (1)
            142 COMPARE_OP               4 (>)
            144 POP_JUMP_IF_TRUE        74

 13     >>  146 LOAD_FAST                0 (cur)
            148 POP_JUMP_IF_TRUE       176

 14         150 LOAD_DEREF               0 (_solve)
            152 LOAD_FAST                4 (new)
            154 LOAD_FAST                1 (rem)
            156 LOAD_FAST                3 (i)
            158 LOAD_CONST               0 (None)
            160 BUILD_SLICE              2
            162 BINARY_SUBSCR
            164 LOAD_FAST                2 (depth)
            166 LOAD_CONST               3 (1)
            168 BINARY_ADD
            170 CALL_FUNCTION            3
            172 POP_TOP
            174 JUMP_ABSOLUTE           74

 16     >>  176 LOAD_DEREF               0 (_solve)
            178 LOAD_FAST                0 (cur)
            180 LOAD_CONST               6 ('.')
            182 BINARY_ADD
            184 LOAD_FAST                4 (new)
            186 BINARY_ADD
            188 LOAD_FAST                1 (rem)
            190 LOAD_FAST                3 (i)
            192 LOAD_CONST               0 (None)
            194 BUILD_SLICE              2
            196 BINARY_SUBSCR
            198 LOAD_FAST                2 (depth)
            200 LOAD_CONST               3 (1)
            202 BINARY_ADD
            204 CALL_FUNCTION            3
            206 POP_TOP
            208 JUMP_ABSOLUTE           74
        >>  210 LOAD_CONST               0 (None)
            212 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        path = []
        result = []
        self.dfs(s, path, result)
        return result
    
    def dfs(self, s: str, path: List, result: List):
        
        if not s and len(path) == 4:
            s = '.'.join(path[::-1])
            result.append(s)
            return
        elif len(path) == 4: return 
        else:
            for i in range(1, min(3, len(s))+1):
                if int(s[:i]) >= 0 and int(s[:i]) <= 255:
                    if i > 1 and s[0]=='0': continue
                    else: self.dfs(s[i:], [s[:i]]+path, result)
            return
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0e40c853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0e40c853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f0e40c85240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

  8          28 LOAD_NAME                3 (str)
             30 LOAD_NAME                4 (List)
             32 LOAD_NAME                4 (List)
             34 LOAD_CONST               4 (('s', 'path', 'result'))
             36 BUILD_CONST_KEY_MAP      3
             38 LOAD_CONST               5 (<code object dfs at 0x7f0e40c852f0, file ""<ast>"", line 8>)
             40 LOAD_CONST               6 ('Solution.dfs')
             42 MAKE_FUNCTION            4 (annotations)
             44 STORE_NAME               6 (dfs)
             46 LOAD_CONST               7 (None)
             48 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f0e40c85240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (path)

  4           4 BUILD_LIST               0
              6 STORE_FAST               3 (result)

  5           8 LOAD_FAST                0 (self)
             10 LOAD_METHOD              0 (dfs)
             12 LOAD_FAST                1 (s)
             14 LOAD_FAST                2 (path)
             16 LOAD_FAST                3 (result)
             18 CALL_METHOD              3
             20 POP_TOP

  6          22 LOAD_FAST                3 (result)
             24 RETURN_VALUE

Disassembly of <code object dfs at 0x7f0e40c852f0, file ""<ast>"", line 8>:
 10           0 LOAD_FAST                1 (s)
              2 POP_JUMP_IF_TRUE        50
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                2 (path)
              8 CALL_FUNCTION            1
             10 LOAD_CONST               1 (4)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       50

 11          16 LOAD_CONST               2 ('.')
             18 LOAD_METHOD              1 (join)
             20 LOAD_FAST                2 (path)
             22 LOAD_CONST               0 (None)
             24 LOAD_CONST               0 (None)
             26 LOAD_CONST               3 (-1)
             28 BUILD_SLICE              3
             30 BINARY_SUBSCR
             32 CALL_METHOD              1
             34 STORE_FAST               1 (s)

 12          36 LOAD_FAST                3 (result)
             38 LOAD_METHOD              2 (append)
             40 LOAD_FAST                1 (s)
             42 CALL_METHOD              1
             44 POP_TOP

 13          46 LOAD_CONST               0 (None)
             48 RETURN_VALUE

 14     >>   50 LOAD_GLOBAL              0 (len)
             52 LOAD_FAST                2 (path)
             54 CALL_FUNCTION            1
             56 LOAD_CONST               1 (4)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_FALSE       66
             62 LOAD_CONST               0 (None)
             64 RETURN_VALUE

 16     >>   66 LOAD_GLOBAL              3 (range)
             68 LOAD_CONST               4 (1)
             70 LOAD_GLOBAL              4 (min)
             72 LOAD_CONST               5 (3)
             74 LOAD_GLOBAL              0 (len)
             76 LOAD_FAST                1 (s)
             78 CALL_FUNCTION            1
             80 CALL_FUNCTION            2
             82 LOAD_CONST               4 (1)
             84 BINARY_ADD
             86 CALL_FUNCTION            2
             88 GET_ITER
        >>   90 FOR_ITER               104 (to 196)
             92 STORE_FAST               4 (i)

 17          94 LOAD_GLOBAL              5 (int)
             96 LOAD_FAST                1 (s)
             98 LOAD_CONST               0 (None)
            100 LOAD_FAST                4 (i)
            102 BUILD_SLICE              2
            104 BINARY_SUBSCR
            106 CALL_FUNCTION            1
            108 LOAD_CONST               6 (0)
            110 COMPARE_OP               5 (>=)
            112 POP_JUMP_IF_FALSE       90
            114 LOAD_GLOBAL              5 (int)
            116 LOAD_FAST                1 (s)
            118 LOAD_CONST               0 (None)
            120 LOAD_FAST                4 (i)
            122 BUILD_SLICE              2
            124 BINARY_SUBSCR
            126 CALL_FUNCTION            1
            128 LOAD_CONST               7 (255)
            130 COMPARE_OP               1 (<=)
            132 POP_JUMP_IF_FALSE       90

 18         134 LOAD_FAST                4 (i)
            136 LOAD_CONST               4 (1)
            138 COMPARE_OP               4 (>)
            140 POP_JUMP_IF_FALSE      158
            142 LOAD_FAST                1 (s)
            144 LOAD_CONST               6 (0)
            146 BINARY_SUBSCR
            148 LOAD_CONST               8 ('0')
            150 COMPARE_OP               2 (==)
            152 POP_JUMP_IF_FALSE      158
            154 JUMP_ABSOLUTE           90
            156 JUMP_ABSOLUTE           90

 19     >>  158 LOAD_FAST                0 (self)
            160 LOAD_METHOD              6 (dfs)
            162 LOAD_FAST                1 (s)
            164 LOAD_FAST                4 (i)
            166 LOAD_CONST               0 (None)
            168 BUILD_SLICE              2
            170 BINARY_SUBSCR
            172 LOAD_FAST                1 (s)
            174 LOAD_CONST               0 (None)
            176 LOAD_FAST                4 (i)
            178 BUILD_SLICE              2
            180 BINARY_SUBSCR
            182 BUILD_LIST               1
            184 LOAD_FAST                2 (path)
            186 BINARY_ADD
            188 LOAD_FAST                3 (result)
            190 CALL_METHOD              3
            192 POP_TOP
            194 JUMP_ABSOLUTE           90

 20     >>  196 LOAD_CONST               0 (None)
            198 RETURN_VALUE
            200 LOAD_CONST               0 (None)
            202 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        res = []
        
        def backtrack(comb, s, level):
            if (level == 0) and (s == """"):
                res.append(comb[:-1])
            elif (level != 0):
                for i in range(1,min(3+1, len(s)+1)):
                    if (i > 1) and (s[0] == '0'): # cannot start with '0', i.e. '1.001.0.1'
                        continue
                    if ( 0<= int(s[0:i]) <=255 ) :
                        backtrack(comb+s[0:i]+'.', s[i:], level-1)
        
        backtrack("""", s, 4)
        return res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f02d28753a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f02d28753a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f02d28752f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f02d28752f0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_DEREF              1 (res)

  5           4 LOAD_CLOSURE             0 (backtrack)
              6 LOAD_CLOSURE             1 (res)
              8 BUILD_TUPLE              2
             10 LOAD_CONST               1 (<code object backtrack at 0x7f02d2875240, file ""<ast>"", line 5>)
             12 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.backtrack')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              0 (backtrack)

 15          18 LOAD_DEREF               0 (backtrack)
             20 LOAD_CONST               3 ('')
             22 LOAD_FAST                1 (s)
             24 LOAD_CONST               4 (4)
             26 CALL_FUNCTION            3
             28 POP_TOP

 16          30 LOAD_DEREF               1 (res)
             32 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f02d2875240, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                2 (level)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       36
              8 LOAD_FAST                1 (s)
             10 LOAD_CONST               2 ('')
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       36

  7          16 LOAD_DEREF               1 (res)
             18 LOAD_METHOD              0 (append)
             20 LOAD_FAST                0 (comb)
             22 LOAD_CONST               0 (None)
             24 LOAD_CONST               3 (-1)
             26 BUILD_SLICE              2
             28 BINARY_SUBSCR
             30 CALL_METHOD              1
             32 POP_TOP
             34 JUMP_FORWARD           136 (to 172)

  8     >>   36 LOAD_FAST                2 (level)
             38 LOAD_CONST               1 (0)
             40 COMPARE_OP               3 (!=)
             42 POP_JUMP_IF_FALSE      172

  9          44 LOAD_GLOBAL              1 (range)
             46 LOAD_CONST               4 (1)
             48 LOAD_GLOBAL              2 (min)
             50 LOAD_CONST               5 (4)
             52 LOAD_GLOBAL              3 (len)
             54 LOAD_FAST                1 (s)
             56 CALL_FUNCTION            1
             58 LOAD_CONST               4 (1)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 CALL_FUNCTION            2
             66 GET_ITER
        >>   68 FOR_ITER               102 (to 172)
             70 STORE_FAST               3 (i)

 10          72 LOAD_FAST                3 (i)
             74 LOAD_CONST               4 (1)
             76 COMPARE_OP               4 (>)
             78 POP_JUMP_IF_FALSE       94
             80 LOAD_FAST                1 (s)
             82 LOAD_CONST               1 (0)
             84 BINARY_SUBSCR
             86 LOAD_CONST               6 ('0')
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE       94

 11          92 JUMP_ABSOLUTE           68

 12     >>   94 LOAD_CONST               1 (0)
             96 LOAD_GLOBAL              4 (int)
             98 LOAD_FAST                1 (s)
            100 LOAD_CONST               1 (0)
            102 LOAD_FAST                3 (i)
            104 BUILD_SLICE              2
            106 BINARY_SUBSCR
            108 CALL_FUNCTION            1
            110 DUP_TOP
            112 ROT_THREE
            114 COMPARE_OP               1 (<=)
            116 POP_JUMP_IF_FALSE      126
            118 LOAD_CONST               7 (255)
            120 COMPARE_OP               1 (<=)
            122 POP_JUMP_IF_FALSE       68
            124 JUMP_FORWARD             4 (to 130)
        >>  126 POP_TOP
            128 JUMP_ABSOLUTE           68

 13     >>  130 LOAD_DEREF               0 (backtrack)
            132 LOAD_FAST                0 (comb)
            134 LOAD_FAST                1 (s)
            136 LOAD_CONST               1 (0)
            138 LOAD_FAST                3 (i)
            140 BUILD_SLICE              2
            142 BINARY_SUBSCR
            144 BINARY_ADD
            146 LOAD_CONST               8 ('.')
            148 BINARY_ADD
            150 LOAD_FAST                1 (s)
            152 LOAD_FAST                3 (i)
            154 LOAD_CONST               0 (None)
            156 BUILD_SLICE              2
            158 BINARY_SUBSCR
            160 LOAD_FAST                2 (level)
            162 LOAD_CONST               4 (1)
            164 BINARY_SUBTRACT
            166 CALL_FUNCTION            3
            168 POP_TOP
            170 JUMP_ABSOLUTE           68
        >>  172 LOAD_CONST               0 (None)
            174 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str):
        ret = []
        self.dfs(ret, s, [])
        return ret

    def dfs(self, ret, s, path_list):
        if len(path_list) == 4:
            if s == '':
                ret.append('.'.join(path_list))
            return
        if not s:
            return
        if s[0] == '0':
            temp_path_list = path_list[::]
            temp_path_list.append('0')
            self.dfs(ret, s[1:], temp_path_list)
            return
        for i in range(len(s)):
            if i >= 3:
                break
            if int(s[:i + 1]) <= 255:
                temp_path_list = path_list[::]
                temp_path_list.append(s[:i + 1])
                self.dfs(ret, s[i + 1:], temp_path_list)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3cbf9053a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3cbf9053a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_CONST               1 (('s',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f3cbf905240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (restoreIpAddresses)

  7          22 LOAD_CONST               4 (<code object dfs at 0x7f3cbf9052f0, file ""<ast>"", line 7>)
             24 LOAD_CONST               5 ('Solution.dfs')
             26 MAKE_FUNCTION            0
             28 STORE_NAME               5 (dfs)
             30 LOAD_CONST               6 (None)
             32 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f3cbf905240, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               2 (ret)

  4           4 LOAD_FAST                0 (self)
              6 LOAD_METHOD              0 (dfs)
              8 LOAD_FAST                2 (ret)
             10 LOAD_FAST                1 (s)
             12 BUILD_LIST               0
             14 CALL_METHOD              3
             16 POP_TOP

  5          18 LOAD_FAST                2 (ret)
             20 RETURN_VALUE

Disassembly of <code object dfs at 0x7f3cbf9052f0, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                3 (path_list)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       40

  9          12 LOAD_FAST                2 (s)
             14 LOAD_CONST               2 ('')
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       36

 10          20 LOAD_FAST                1 (ret)
             22 LOAD_METHOD              1 (append)
             24 LOAD_CONST               3 ('.')
             26 LOAD_METHOD              2 (join)
             28 LOAD_FAST                3 (path_list)
             30 CALL_METHOD              1
             32 CALL_METHOD              1
             34 POP_TOP

 11     >>   36 LOAD_CONST               0 (None)
             38 RETURN_VALUE

 12     >>   40 LOAD_FAST                2 (s)
             42 POP_JUMP_IF_TRUE        48

 13          44 LOAD_CONST               0 (None)
             46 RETURN_VALUE

 14     >>   48 LOAD_FAST                2 (s)
             50 LOAD_CONST               4 (0)
             52 BINARY_SUBSCR
             54 LOAD_CONST               5 ('0')
             56 COMPARE_OP               2 (==)
             58 POP_JUMP_IF_FALSE      108

 15          60 LOAD_FAST                3 (path_list)
             62 LOAD_CONST               0 (None)
             64 LOAD_CONST               0 (None)
             66 BUILD_SLICE              2
             68 BINARY_SUBSCR
             70 STORE_FAST               4 (temp_path_list)

 16          72 LOAD_FAST                4 (temp_path_list)
             74 LOAD_METHOD              1 (append)
             76 LOAD_CONST               5 ('0')
             78 CALL_METHOD              1
             80 POP_TOP

 17          82 LOAD_FAST                0 (self)
             84 LOAD_METHOD              3 (dfs)
             86 LOAD_FAST                1 (ret)
             88 LOAD_FAST                2 (s)
             90 LOAD_CONST               6 (1)
             92 LOAD_CONST               0 (None)
             94 BUILD_SLICE              2
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (temp_path_list)
            100 CALL_METHOD              3
            102 POP_TOP

 18         104 LOAD_CONST               0 (None)
            106 RETURN_VALUE

 19     >>  108 LOAD_GLOBAL              4 (range)
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                2 (s)
            114 CALL_FUNCTION            1
            116 CALL_FUNCTION            1
            118 GET_ITER
        >>  120 FOR_ITER               100 (to 222)
            122 STORE_FAST               5 (i)

 20         124 LOAD_FAST                5 (i)
            126 LOAD_CONST               7 (3)
            128 COMPARE_OP               5 (>=)
            130 POP_JUMP_IF_FALSE      136

 21         132 POP_TOP
            134 JUMP_ABSOLUTE          222

 22     >>  136 LOAD_GLOBAL              5 (int)
            138 LOAD_FAST                2 (s)
            140 LOAD_CONST               0 (None)
            142 LOAD_FAST                5 (i)
            144 LOAD_CONST               6 (1)
            146 BINARY_ADD
            148 BUILD_SLICE              2
            150 BINARY_SUBSCR
            152 CALL_FUNCTION            1
            154 LOAD_CONST               8 (255)
            156 COMPARE_OP               1 (<=)
            158 POP_JUMP_IF_FALSE      120

 23         160 LOAD_FAST                3 (path_list)
            162 LOAD_CONST               0 (None)
            164 LOAD_CONST               0 (None)
            166 BUILD_SLICE              2
            168 BINARY_SUBSCR
            170 STORE_FAST               4 (temp_path_list)

 24         172 LOAD_FAST                4 (temp_path_list)
            174 LOAD_METHOD              1 (append)
            176 LOAD_FAST                2 (s)
            178 LOAD_CONST               0 (None)
            180 LOAD_FAST                5 (i)
            182 LOAD_CONST               6 (1)
            184 BINARY_ADD
            186 BUILD_SLICE              2
            188 BINARY_SUBSCR
            190 CALL_METHOD              1
            192 POP_TOP

 25         194 LOAD_FAST                0 (self)
            196 LOAD_METHOD              3 (dfs)
            198 LOAD_FAST                1 (ret)
            200 LOAD_FAST                2 (s)
            202 LOAD_FAST                5 (i)
            204 LOAD_CONST               6 (1)
            206 BINARY_ADD
            208 LOAD_CONST               0 (None)
            210 BUILD_SLICE              2
            212 BINARY_SUBSCR
            214 LOAD_FAST                4 (temp_path_list)
            216 CALL_METHOD              3
            218 POP_TOP
            220 JUMP_ABSOLUTE          120
        >>  222 LOAD_CONST               0 (None)
            224 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        ans=[]

        def recur(start_index,prev_string,count):
            if count>4:
                return
            # print(prev_string)
            if (start_index==len(s)):
                if count<4:
                    return
                ans.append(prev_string[:-1])
                # print(prev_string[:-1])

            else:
                for i in range(start_index,start_index+3):
                    if (i<len(s)):
                        to_attach=s[start_index:i+1]

                        # print(to_attach)
                        if to_attach[0]==""0"":
                            if len(to_attach)==1:
                                # print(""here"")
                                recur(i+1,prev_string+to_attach+""."",count+1)
                            else:
                                continue
                        elif int(to_attach)<=255:
                            recur(i+1,prev_string+to_attach+""."",count+1)






        recur(0,"""",0)
        return ans
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4b3ded53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4b3ded53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f4b3ded52f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f4b3ded52f0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_DEREF              0 (ans)

  5           4 LOAD_CLOSURE             0 (ans)
              6 LOAD_CLOSURE             1 (recur)
              8 LOAD_CLOSURE             2 (s)
             10 BUILD_TUPLE              3
             12 LOAD_CONST               1 (<code object recur at 0x7f4b3ded5240, file ""<ast>"", line 5>)
             14 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.recur')
             16 MAKE_FUNCTION            8 (closure)
             18 STORE_DEREF              1 (recur)

 35          20 LOAD_DEREF               1 (recur)
             22 LOAD_CONST               3 (0)
             24 LOAD_CONST               4 ('')
             26 LOAD_CONST               3 (0)
             28 CALL_FUNCTION            3
             30 POP_TOP

 36          32 LOAD_DEREF               0 (ans)
             34 RETURN_VALUE

Disassembly of <code object recur at 0x7f4b3ded5240, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                2 (count)
              2 LOAD_CONST               1 (4)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12

  7           8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

  9     >>   12 LOAD_FAST                0 (start_index)
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               2 (s)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       56

 10          24 LOAD_FAST                2 (count)
             26 LOAD_CONST               1 (4)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_FALSE       36

 11          32 LOAD_CONST               0 (None)
             34 RETURN_VALUE

 12     >>   36 LOAD_DEREF               0 (ans)
             38 LOAD_METHOD              1 (append)
             40 LOAD_FAST                1 (prev_string)
             42 LOAD_CONST               0 (None)
             44 LOAD_CONST               2 (-1)
             46 BUILD_SLICE              2
             48 BINARY_SUBSCR
             50 CALL_METHOD              1
             52 POP_TOP
             54 JUMP_FORWARD           146 (to 202)

 16     >>   56 LOAD_GLOBAL              2 (range)
             58 LOAD_FAST                0 (start_index)
             60 LOAD_FAST                0 (start_index)
             62 LOAD_CONST               3 (3)
             64 BINARY_ADD
             66 CALL_FUNCTION            2
             68 GET_ITER
        >>   70 FOR_ITER               130 (to 202)
             72 STORE_FAST               3 (i)

 17          74 LOAD_FAST                3 (i)
             76 LOAD_GLOBAL              0 (len)
             78 LOAD_DEREF               2 (s)
             80 CALL_FUNCTION            1
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE       70

 18          86 LOAD_DEREF               2 (s)
             88 LOAD_FAST                0 (start_index)
             90 LOAD_FAST                3 (i)
             92 LOAD_CONST               4 (1)
             94 BINARY_ADD
             96 BUILD_SLICE              2
             98 BINARY_SUBSCR
            100 STORE_FAST               4 (to_attach)

 21         102 LOAD_FAST                4 (to_attach)
            104 LOAD_CONST               5 (0)
            106 BINARY_SUBSCR
            108 LOAD_CONST               6 ('0')
            110 COMPARE_OP               2 (==)
            112 POP_JUMP_IF_FALSE      160

 22         114 LOAD_GLOBAL              0 (len)
            116 LOAD_FAST                4 (to_attach)
            118 CALL_FUNCTION            1
            120 LOAD_CONST               4 (1)
            122 COMPARE_OP               2 (==)
            124 POP_JUMP_IF_FALSE       70

 24         126 LOAD_DEREF               1 (recur)
            128 LOAD_FAST                3 (i)
            130 LOAD_CONST               4 (1)
            132 BINARY_ADD
            134 LOAD_FAST                1 (prev_string)
            136 LOAD_FAST                4 (to_attach)
            138 BINARY_ADD
            140 LOAD_CONST               7 ('.')
            142 BINARY_ADD
            144 LOAD_FAST                2 (count)
            146 LOAD_CONST               4 (1)
            148 BINARY_ADD
            150 CALL_FUNCTION            3
            152 POP_TOP
            154 JUMP_ABSOLUTE          200

 26         156 JUMP_ABSOLUTE           70
            158 JUMP_ABSOLUTE           70

 27     >>  160 LOAD_GLOBAL              3 (int)
            162 LOAD_FAST                4 (to_attach)
            164 CALL_FUNCTION            1
            166 LOAD_CONST               8 (255)
            168 COMPARE_OP               1 (<=)
            170 POP_JUMP_IF_FALSE       70

 28         172 LOAD_DEREF               1 (recur)
            174 LOAD_FAST                3 (i)
            176 LOAD_CONST               4 (1)
            178 BINARY_ADD
            180 LOAD_FAST                1 (prev_string)
            182 LOAD_FAST                4 (to_attach)
            184 BINARY_ADD
            186 LOAD_CONST               7 ('.')
            188 BINARY_ADD
            190 LOAD_FAST                2 (count)
            192 LOAD_CONST               4 (1)
            194 BINARY_ADD
            196 CALL_FUNCTION            3
            198 POP_TOP
        >>  200 JUMP_ABSOLUTE           70
        >>  202 LOAD_CONST               0 (None)
            204 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        if not 4 <= len(s) <= 12:
            return []
        res = []
        self.backtrack(s, 0, '', res, 0)
        return res

    def backtrack(self, s, start, path, res, count):
        if count == 4:
            if start == len(s):
                res.append(path[1:])
            return

        for end in [start + 1, start + 2, start + 3]:
			# number between 0 and 255 and does not start with 0
            if end <= len(s) and 0 <= int(s[start: end]) <= 255 and str(int(s[start: end])) == s[start: end]:
                self.backtrack(s, end, path + '.' + s[start: end], res, count + 1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7b100c53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7b100c53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f7b100c5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

  9          28 LOAD_CONST               4 (<code object backtrack at 0x7f7b100c52f0, file ""<ast>"", line 9>)
             30 LOAD_CONST               5 ('Solution.backtrack')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               6 (backtrack)
             36 LOAD_CONST               6 (None)
             38 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f7b100c5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (4)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (s)
              6 CALL_FUNCTION            1
              8 DUP_TOP
             10 ROT_THREE
             12 COMPARE_OP               1 (<=)
             14 POP_JUMP_IF_FALSE       24
             16 LOAD_CONST               2 (12)
             18 COMPARE_OP               1 (<=)
             20 POP_JUMP_IF_TRUE        30
             22 JUMP_FORWARD             2 (to 26)
        >>   24 POP_TOP

  4     >>   26 BUILD_LIST               0
             28 RETURN_VALUE

  5     >>   30 BUILD_LIST               0
             32 STORE_FAST               2 (res)

  6          34 LOAD_FAST                0 (self)
             36 LOAD_METHOD              1 (backtrack)
             38 LOAD_FAST                1 (s)
             40 LOAD_CONST               3 (0)
             42 LOAD_CONST               4 ('')
             44 LOAD_FAST                2 (res)
             46 LOAD_CONST               3 (0)
             48 CALL_METHOD              5
             50 POP_TOP

  7          52 LOAD_FAST                2 (res)
             54 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f7b100c52f0, file ""<ast>"", line 9>:
 10           0 LOAD_FAST                5 (count)
              2 LOAD_CONST               1 (4)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       42

 11           8 LOAD_FAST                2 (start)
             10 LOAD_GLOBAL              0 (len)
             12 LOAD_FAST                1 (s)
             14 CALL_FUNCTION            1
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       38

 12          20 LOAD_FAST                4 (res)
             22 LOAD_METHOD              1 (append)
             24 LOAD_FAST                3 (path)
             26 LOAD_CONST               2 (1)
             28 LOAD_CONST               0 (None)
             30 BUILD_SLICE              2
             32 BINARY_SUBSCR
             34 CALL_METHOD              1
             36 POP_TOP

 13     >>   38 LOAD_CONST               0 (None)
             40 RETURN_VALUE

 15     >>   42 LOAD_FAST                2 (start)
             44 LOAD_CONST               2 (1)
             46 BINARY_ADD
             48 LOAD_FAST                2 (start)
             50 LOAD_CONST               3 (2)
             52 BINARY_ADD
             54 LOAD_FAST                2 (start)
             56 LOAD_CONST               4 (3)
             58 BINARY_ADD
             60 BUILD_TUPLE              3
             62 GET_ITER
        >>   64 FOR_ITER               122 (to 188)
             66 STORE_FAST               6 (end)

 17          68 LOAD_FAST                6 (end)
             70 LOAD_GLOBAL              0 (len)
             72 LOAD_FAST                1 (s)
             74 CALL_FUNCTION            1
             76 COMPARE_OP               1 (<=)
             78 POP_JUMP_IF_FALSE       64
             80 LOAD_CONST               5 (0)
             82 LOAD_GLOBAL              2 (int)
             84 LOAD_FAST                1 (s)
             86 LOAD_FAST                2 (start)
             88 LOAD_FAST                6 (end)
             90 BUILD_SLICE              2
             92 BINARY_SUBSCR
             94 CALL_FUNCTION            1
             96 DUP_TOP
             98 ROT_THREE
            100 COMPARE_OP               1 (<=)
            102 POP_JUMP_IF_FALSE      112
            104 LOAD_CONST               6 (255)
            106 COMPARE_OP               1 (<=)
            108 POP_JUMP_IF_FALSE       64
            110 JUMP_FORWARD             4 (to 116)
        >>  112 POP_TOP
            114 JUMP_ABSOLUTE           64
        >>  116 LOAD_GLOBAL              3 (str)
            118 LOAD_GLOBAL              2 (int)
            120 LOAD_FAST                1 (s)
            122 LOAD_FAST                2 (start)
            124 LOAD_FAST                6 (end)
            126 BUILD_SLICE              2
            128 BINARY_SUBSCR
            130 CALL_FUNCTION            1
            132 CALL_FUNCTION            1
            134 LOAD_FAST                1 (s)
            136 LOAD_FAST                2 (start)
            138 LOAD_FAST                6 (end)
            140 BUILD_SLICE              2
            142 BINARY_SUBSCR
            144 COMPARE_OP               2 (==)
            146 POP_JUMP_IF_FALSE       64

 18         148 LOAD_FAST                0 (self)
            150 LOAD_METHOD              4 (backtrack)
            152 LOAD_FAST                1 (s)
            154 LOAD_FAST                6 (end)
            156 LOAD_FAST                3 (path)
            158 LOAD_CONST               7 ('.')
            160 BINARY_ADD
            162 LOAD_FAST                1 (s)
            164 LOAD_FAST                2 (start)
            166 LOAD_FAST                6 (end)
            168 BUILD_SLICE              2
            170 BINARY_SUBSCR
            172 BINARY_ADD
            174 LOAD_FAST                4 (res)
            176 LOAD_FAST                5 (count)
            178 LOAD_CONST               2 (1)
            180 BINARY_ADD
            182 CALL_METHOD              5
            184 POP_TOP
            186 JUMP_ABSOLUTE           64
        >>  188 LOAD_CONST               0 (None)
            190 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
            
            self.res = []
            
            self.buildIp(s, '', 0)
            
            return self.res
        
    def buildIp(self, s: str, prefix: str, integers: int) -> None:
        
        if not s:
            if integers == 4: self.res.append(prefix)
            return
        
        if integers > 3:
            return
        
        period = '.' if integers < 3 else ''
        
        self.buildIp(s[1:], prefix + s[0] + period, integers + 1)
            
        if 9 < int(s[0:2]) < 100:
            self.buildIp(s[2:], prefix + s[0:2] + period, integers + 1)
        
        if 99 < int(s[0:3]) < 256:
            self.buildIp(s[3:], prefix + s[0:3] +  period, integers + 1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0853a653a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0853a653a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f0853a65240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)

 10          28 LOAD_NAME                3 (str)
             30 LOAD_NAME                3 (str)
             32 LOAD_NAME                6 (int)
             34 LOAD_CONST               4 (None)
             36 LOAD_CONST               5 (('s', 'prefix', 'integers', 'return'))
             38 BUILD_CONST_KEY_MAP      4
             40 LOAD_CONST               6 (<code object buildIp at 0x7f0853a652f0, file ""<ast>"", line 10>)
             42 LOAD_CONST               7 ('Solution.buildIp')
             44 MAKE_FUNCTION            4 (annotations)
             46 STORE_NAME               7 (buildIp)
             48 LOAD_CONST               4 (None)
             50 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f0853a65240, file ""<ast>"", line 2>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (res)

  6           6 LOAD_FAST                0 (self)
              8 LOAD_METHOD              1 (buildIp)
             10 LOAD_FAST                1 (s)
             12 LOAD_CONST               1 ('')
             14 LOAD_CONST               2 (0)
             16 CALL_METHOD              3
             18 POP_TOP

  8          20 LOAD_FAST                0 (self)
             22 LOAD_ATTR                0 (res)
             24 RETURN_VALUE

Disassembly of <code object buildIp at 0x7f0853a652f0, file ""<ast>"", line 10>:
 12           0 LOAD_FAST                1 (s)
              2 POP_JUMP_IF_TRUE        28

 13           4 LOAD_FAST                3 (integers)
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       24
             12 LOAD_FAST                0 (self)
             14 LOAD_ATTR                0 (res)
             16 LOAD_METHOD              1 (append)
             18 LOAD_FAST                2 (prefix)
             20 CALL_METHOD              1
             22 POP_TOP

 14     >>   24 LOAD_CONST               0 (None)
             26 RETURN_VALUE

 16     >>   28 LOAD_FAST                3 (integers)
             30 LOAD_CONST               2 (3)
             32 COMPARE_OP               4 (>)
             34 POP_JUMP_IF_FALSE       40

 17          36 LOAD_CONST               0 (None)
             38 RETURN_VALUE

 19     >>   40 LOAD_FAST                3 (integers)
             42 LOAD_CONST               2 (3)
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       52
             48 LOAD_CONST               3 ('.')
             50 JUMP_FORWARD             2 (to 54)
        >>   52 LOAD_CONST               4 ('')
        >>   54 STORE_FAST               4 (period)

 21          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              2 (buildIp)
             60 LOAD_FAST                1 (s)
             62 LOAD_CONST               5 (1)
             64 LOAD_CONST               0 (None)
             66 BUILD_SLICE              2
             68 BINARY_SUBSCR
             70 LOAD_FAST                2 (prefix)
             72 LOAD_FAST                1 (s)
             74 LOAD_CONST               6 (0)
             76 BINARY_SUBSCR
             78 BINARY_ADD
             80 LOAD_FAST                4 (period)
             82 BINARY_ADD
             84 LOAD_FAST                3 (integers)
             86 LOAD_CONST               5 (1)
             88 BINARY_ADD
             90 CALL_METHOD              3
             92 POP_TOP

 23          94 LOAD_CONST               7 (9)
             96 LOAD_GLOBAL              3 (int)
             98 LOAD_FAST                1 (s)
            100 LOAD_CONST               6 (0)
            102 LOAD_CONST               8 (2)
            104 BUILD_SLICE              2
            106 BINARY_SUBSCR
            108 CALL_FUNCTION            1
            110 DUP_TOP
            112 ROT_THREE
            114 COMPARE_OP               0 (<)
            116 POP_JUMP_IF_FALSE      126
            118 LOAD_CONST               9 (100)
            120 COMPARE_OP               0 (<)
            122 POP_JUMP_IF_FALSE      172
            124 JUMP_FORWARD             4 (to 130)
        >>  126 POP_TOP
            128 JUMP_FORWARD            42 (to 172)

 24     >>  130 LOAD_FAST                0 (self)
            132 LOAD_METHOD              2 (buildIp)
            134 LOAD_FAST                1 (s)
            136 LOAD_CONST               8 (2)
            138 LOAD_CONST               0 (None)
            140 BUILD_SLICE              2
            142 BINARY_SUBSCR
            144 LOAD_FAST                2 (prefix)
            146 LOAD_FAST                1 (s)
            148 LOAD_CONST               6 (0)
            150 LOAD_CONST               8 (2)
            152 BUILD_SLICE              2
            154 BINARY_SUBSCR
            156 BINARY_ADD
            158 LOAD_FAST                4 (period)
            160 BINARY_ADD
            162 LOAD_FAST                3 (integers)
            164 LOAD_CONST               5 (1)
            166 BINARY_ADD
            168 CALL_METHOD              3
            170 POP_TOP

 26     >>  172 LOAD_CONST              10 (99)
            174 LOAD_GLOBAL              3 (int)
            176 LOAD_FAST                1 (s)
            178 LOAD_CONST               6 (0)
            180 LOAD_CONST               2 (3)
            182 BUILD_SLICE              2
            184 BINARY_SUBSCR
            186 CALL_FUNCTION            1
            188 DUP_TOP
            190 ROT_THREE
            192 COMPARE_OP               0 (<)
            194 POP_JUMP_IF_FALSE      204
            196 LOAD_CONST              11 (256)
            198 COMPARE_OP               0 (<)
            200 POP_JUMP_IF_FALSE      250
            202 JUMP_FORWARD             4 (to 208)
        >>  204 POP_TOP
            206 JUMP_FORWARD            42 (to 250)

 27     >>  208 LOAD_FAST                0 (self)
            210 LOAD_METHOD              2 (buildIp)
            212 LOAD_FAST                1 (s)
            214 LOAD_CONST               2 (3)
            216 LOAD_CONST               0 (None)
            218 BUILD_SLICE              2
            220 BINARY_SUBSCR
            222 LOAD_FAST                2 (prefix)
            224 LOAD_FAST                1 (s)
            226 LOAD_CONST               6 (0)
            228 LOAD_CONST               2 (3)
            230 BUILD_SLICE              2
            232 BINARY_SUBSCR
            234 BINARY_ADD
            236 LOAD_FAST                4 (period)
            238 BINARY_ADD
            240 LOAD_FAST                3 (integers)
            242 LOAD_CONST               5 (1)
            244 BINARY_ADD
            246 CALL_METHOD              3
            248 POP_TOP
        >>  250 LOAD_CONST               0 (None)
            252 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        ## RC ##
        ## APPROACH : BACKTRACKING ##
        ## EDGE CASE : zeros 00 ## ( case : ""010010"")
		
        ## TIME COMPLEXICITY : O(1) ##
		## SPACE COMPLEXICITY : O(1) ##
        
        """"""
        one already put a dot that leaves only 3 possibilities for the next dot to be placed : after one digit, after two digits, or after three digits. The first dot has only 3 available slots as well.
        it's enough to check just 3×3×3=27. ==> O(1)
        """"""
	
        def backtrack( curr, s, k ):
            if( k < 0 ):
                return
            
            if(not s and k == 0):
                self.res.append(""."".join(curr[:]))
                return
            
            if( len(s) > 3 * (4 - len(curr)) ):             # optimization early pruning, when we have too many dgitis for next slots
                return
            
            num = 0
            for i in range(min(3,len(s))):                  # max size 3
                num = num * 10 + int(s[i])
                if( i > 0 and s[0] == ""0"" or num > 255 ):   # edge case, when we are filling a slot starting 0, donot consider later numbers
                    break                                   # break, (not continue)
                if( 0 <= num <= 255 ):
                    backtrack( curr+[str(num)], s[i+1:], k-1 )
        
        self.res = []
        backtrack( [], s, 4 )
        return self.res
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9c96a653a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9c96a653a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f9c96a652f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f9c96a652f0, file ""<ast>"", line 2>:
 15           0 LOAD_CLOSURE             0 (backtrack)
              2 LOAD_CLOSURE             1 (self)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object backtrack at 0x7f9c96a65240, file ""<ast>"", line 15>)
              8 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.backtrack')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              0 (backtrack)

 34          14 BUILD_LIST               0
             16 LOAD_DEREF               1 (self)
             18 STORE_ATTR               0 (res)

 35          20 LOAD_DEREF               0 (backtrack)
             22 BUILD_LIST               0
             24 LOAD_FAST                1 (s)
             26 LOAD_CONST               3 (4)
             28 CALL_FUNCTION            3
             30 POP_TOP

 36          32 LOAD_DEREF               1 (self)
             34 LOAD_ATTR                0 (res)
             36 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f9c96a65240, file ""<ast>"", line 15>:
 16           0 LOAD_FAST                2 (k)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12

 17           8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 19     >>   12 LOAD_FAST                1 (s)
             14 POP_JUMP_IF_TRUE        54
             16 LOAD_FAST                2 (k)
             18 LOAD_CONST               1 (0)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       54

 20          24 LOAD_DEREF               1 (self)
             26 LOAD_ATTR                0 (res)
             28 LOAD_METHOD              1 (append)
             30 LOAD_CONST               2 ('.')
             32 LOAD_METHOD              2 (join)
             34 LOAD_FAST                0 (curr)
             36 LOAD_CONST               0 (None)
             38 LOAD_CONST               0 (None)
             40 BUILD_SLICE              2
             42 BINARY_SUBSCR
             44 CALL_METHOD              1
             46 CALL_METHOD              1
             48 POP_TOP

 21          50 LOAD_CONST               0 (None)
             52 RETURN_VALUE

 23     >>   54 LOAD_GLOBAL              3 (len)
             56 LOAD_FAST                1 (s)
             58 CALL_FUNCTION            1
             60 LOAD_CONST               3 (3)
             62 LOAD_CONST               4 (4)
             64 LOAD_GLOBAL              3 (len)
             66 LOAD_FAST                0 (curr)
             68 CALL_FUNCTION            1
             70 BINARY_SUBTRACT
             72 BINARY_MULTIPLY
             74 COMPARE_OP               4 (>)
             76 POP_JUMP_IF_FALSE       82

 24          78 LOAD_CONST               0 (None)
             80 RETURN_VALUE

 26     >>   82 LOAD_CONST               1 (0)
             84 STORE_FAST               3 (num)

 27          86 LOAD_GLOBAL              4 (range)
             88 LOAD_GLOBAL              5 (min)
             90 LOAD_CONST               3 (3)
             92 LOAD_GLOBAL              3 (len)
             94 LOAD_FAST                1 (s)
             96 CALL_FUNCTION            1
             98 CALL_FUNCTION            2
            100 CALL_FUNCTION            1
            102 GET_ITER
        >>  104 FOR_ITER               118 (to 224)
            106 STORE_FAST               4 (i)

 28         108 LOAD_FAST                3 (num)
            110 LOAD_CONST               5 (10)
            112 BINARY_MULTIPLY
            114 LOAD_GLOBAL              6 (int)
            116 LOAD_FAST                1 (s)
            118 LOAD_FAST                4 (i)
            120 BINARY_SUBSCR
            122 CALL_FUNCTION            1
            124 BINARY_ADD
            126 STORE_FAST               3 (num)

 29         128 LOAD_FAST                4 (i)
            130 LOAD_CONST               1 (0)
            132 COMPARE_OP               4 (>)
            134 POP_JUMP_IF_FALSE      148
            136 LOAD_FAST                1 (s)
            138 LOAD_CONST               1 (0)
            140 BINARY_SUBSCR
            142 LOAD_CONST               6 ('0')
            144 COMPARE_OP               2 (==)
            146 POP_JUMP_IF_TRUE       156
        >>  148 LOAD_FAST                3 (num)
            150 LOAD_CONST               7 (255)
            152 COMPARE_OP               4 (>)
            154 POP_JUMP_IF_FALSE      160

 30     >>  156 POP_TOP
            158 JUMP_ABSOLUTE          224

 31     >>  160 LOAD_CONST               1 (0)
            162 LOAD_FAST                3 (num)
            164 DUP_TOP
            166 ROT_THREE
            168 COMPARE_OP               1 (<=)
            170 POP_JUMP_IF_FALSE      180
            172 LOAD_CONST               7 (255)
            174 COMPARE_OP               1 (<=)
            176 POP_JUMP_IF_FALSE      104
            178 JUMP_FORWARD             4 (to 184)
        >>  180 POP_TOP
            182 JUMP_ABSOLUTE          104

 32     >>  184 LOAD_DEREF               0 (backtrack)
            186 LOAD_FAST                0 (curr)
            188 LOAD_GLOBAL              7 (str)
            190 LOAD_FAST                3 (num)
            192 CALL_FUNCTION            1
            194 BUILD_LIST               1
            196 BINARY_ADD
            198 LOAD_FAST                1 (s)
            200 LOAD_FAST                4 (i)
            202 LOAD_CONST               8 (1)
            204 BINARY_ADD
            206 LOAD_CONST               0 (None)
            208 BUILD_SLICE              2
            210 BINARY_SUBSCR
            212 LOAD_FAST                2 (k)
            214 LOAD_CONST               8 (1)
            216 BINARY_SUBTRACT
            218 CALL_FUNCTION            3
            220 POP_TOP
            222 JUMP_ABSOLUTE          104
        >>  224 LOAD_CONST               0 (None)
            226 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        length = len(s)
        nums = set(map(str, range(256)))
        def dfs(start: int, prefix: List[int]):
            if prefix and prefix[-1] not in nums:
                return
            if len(prefix) == 4:
                if start == length:
                    yield '.'.join(prefix)
                return
            for i in range(1, min(4, length-start+1)):
                yield from dfs(start + i, prefix + [s[start:start+i]])
        return list(dfs(0, []))
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f30049e5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f30049e5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f30049e5240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f30049e5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF               3 (s)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              1 (length)

  4           8 LOAD_GLOBAL              1 (set)
             10 LOAD_GLOBAL              2 (map)
             12 LOAD_GLOBAL              3 (str)
             14 LOAD_GLOBAL              4 (range)
             16 LOAD_CONST               1 (256)
             18 CALL_FUNCTION            1
             20 CALL_FUNCTION            2
             22 CALL_FUNCTION            1
             24 STORE_DEREF              2 (nums)

  5          26 LOAD_GLOBAL              5 (int)
             28 LOAD_GLOBAL              6 (List)
             30 LOAD_GLOBAL              5 (int)
             32 BINARY_SUBSCR
             34 LOAD_CONST               2 (('start', 'prefix'))
             36 BUILD_CONST_KEY_MAP      2
             38 LOAD_CLOSURE             0 (dfs)
             40 LOAD_CLOSURE             1 (length)
             42 LOAD_CLOSURE             2 (nums)
             44 LOAD_CLOSURE             3 (s)
             46 BUILD_TUPLE              4
             48 LOAD_CONST               3 (<code object dfs at 0x7f30049e53a0, file ""<ast>"", line 5>)
             50 LOAD_CONST               4 ('Solution.restoreIpAddresses.<locals>.dfs')
             52 MAKE_FUNCTION           12 (annotations, closure)
             54 STORE_DEREF              0 (dfs)

 14          56 LOAD_GLOBAL              7 (list)
             58 LOAD_DEREF               0 (dfs)
             60 LOAD_CONST               5 (0)
             62 BUILD_LIST               0
             64 CALL_FUNCTION            2
             66 CALL_FUNCTION            1
             68 RETURN_VALUE

Disassembly of <code object dfs at 0x7f30049e53a0, file ""<ast>"", line 5>:
  6           0 LOAD_FAST                1 (prefix)
              2 POP_JUMP_IF_FALSE       20
              4 LOAD_FAST                1 (prefix)
              6 LOAD_CONST               1 (-1)
              8 BINARY_SUBSCR
             10 LOAD_DEREF               2 (nums)
             12 COMPARE_OP               7 (not in)
             14 POP_JUMP_IF_FALSE       20

  7          16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

  8     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                1 (prefix)
             24 CALL_FUNCTION            1
             26 LOAD_CONST               2 (4)
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       56

  9          32 LOAD_FAST                0 (start)
             34 LOAD_DEREF               1 (length)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       52

 10          40 LOAD_CONST               3 ('.')
             42 LOAD_METHOD              1 (join)
             44 LOAD_FAST                1 (prefix)
             46 CALL_METHOD              1
             48 YIELD_VALUE
             50 POP_TOP

 11     >>   52 LOAD_CONST               0 (None)
             54 RETURN_VALUE

 12     >>   56 LOAD_GLOBAL              2 (range)
             58 LOAD_CONST               4 (1)
             60 LOAD_GLOBAL              3 (min)
             62 LOAD_CONST               2 (4)
             64 LOAD_DEREF               1 (length)
             66 LOAD_FAST                0 (start)
             68 BINARY_SUBTRACT
             70 LOAD_CONST               4 (1)
             72 BINARY_ADD
             74 CALL_FUNCTION            2
             76 CALL_FUNCTION            2
             78 GET_ITER
        >>   80 FOR_ITER                42 (to 124)
             82 STORE_FAST               2 (i)

 13          84 LOAD_DEREF               0 (dfs)
             86 LOAD_FAST                0 (start)
             88 LOAD_FAST                2 (i)
             90 BINARY_ADD
             92 LOAD_FAST                1 (prefix)
             94 LOAD_DEREF               3 (s)
             96 LOAD_FAST                0 (start)
             98 LOAD_FAST                0 (start)
            100 LOAD_FAST                2 (i)
            102 BINARY_ADD
            104 BUILD_SLICE              2
            106 BINARY_SUBSCR
            108 BUILD_LIST               1
            110 BINARY_ADD
            112 CALL_FUNCTION            2
            114 GET_YIELD_FROM_ITER
            116 LOAD_CONST               0 (None)
            118 YIELD_FROM
            120 POP_TOP
            122 JUMP_ABSOLUTE           80
        >>  124 LOAD_CONST               0 (None)
            126 RETURN_VALUE
None
"
restoreIpAddresses,"class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        
        def backtrack(idx, ip):
            if len(ip)==4 and idx==len(s):
                self.res.append(""."".join(ip))
        
            elif len(ip)<4:
                if idx<=len(s)-1:
                    backtrack(idx+1, ip+[s[idx]])
                    
                if idx<=len(s)-2 and int(s[idx:idx+2])>=10:
                    backtrack(idx+2, ip+[s[idx:idx+2]])
                    
                if idx<=len(s)-3 and int(s[idx:idx+3])>=100 and int(s[idx:idx+3])<=255:
                    backtrack(idx+3, ip+[s[idx:idx+3]])
        
        
        self.res=[]
        backtrack(0, [])
        return(self.res)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f55b24553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f55b24553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                4 (List)
             12 LOAD_NAME                3 (str)
             14 BINARY_SUBSCR
             16 LOAD_CONST               1 (('s', 'return'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object restoreIpAddresses at 0x7f55b24552f0, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.restoreIpAddresses')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (restoreIpAddresses)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object restoreIpAddresses at 0x7f55b24552f0, file ""<ast>"", line 2>:
  4           0 LOAD_CLOSURE             0 (backtrack)
              2 LOAD_CLOSURE             1 (s)
              4 LOAD_CLOSURE             2 (self)
              6 BUILD_TUPLE              3
              8 LOAD_CONST               1 (<code object backtrack at 0x7f55b2455240, file ""<ast>"", line 4>)
             10 LOAD_CONST               2 ('Solution.restoreIpAddresses.<locals>.backtrack')
             12 MAKE_FUNCTION            8 (closure)
             14 STORE_DEREF              0 (backtrack)

 19          16 BUILD_LIST               0
             18 LOAD_DEREF               2 (self)
             20 STORE_ATTR               0 (res)

 20          22 LOAD_DEREF               0 (backtrack)
             24 LOAD_CONST               3 (0)
             26 BUILD_LIST               0
             28 CALL_FUNCTION            2
             30 POP_TOP

 21          32 LOAD_DEREF               2 (self)
             34 LOAD_ATTR                0 (res)
             36 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f55b2455240, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (ip)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (4)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       44
             12 LOAD_FAST                0 (idx)
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_DEREF               1 (s)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       44

  6          24 LOAD_DEREF               2 (self)
             26 LOAD_ATTR                1 (res)
             28 LOAD_METHOD              2 (append)
             30 LOAD_CONST               2 ('.')
             32 LOAD_METHOD              3 (join)
             34 LOAD_FAST                1 (ip)
             36 CALL_METHOD              1
             38 CALL_METHOD              1
             40 POP_TOP
             42 JUMP_FORWARD           228 (to 272)

  8     >>   44 LOAD_GLOBAL              0 (len)
             46 LOAD_FAST                1 (ip)
             48 CALL_FUNCTION            1
             50 LOAD_CONST               1 (4)
             52 COMPARE_OP               0 (<)
             54 EXTENDED_ARG             1
             56 POP_JUMP_IF_FALSE      272

  9          58 LOAD_FAST                0 (idx)
             60 LOAD_GLOBAL              0 (len)
             62 LOAD_DEREF               1 (s)
             64 CALL_FUNCTION            1
             66 LOAD_CONST               3 (1)
             68 BINARY_SUBTRACT
             70 COMPARE_OP               1 (<=)
             72 POP_JUMP_IF_FALSE       98

 10          74 LOAD_DEREF               0 (backtrack)
             76 LOAD_FAST                0 (idx)
             78 LOAD_CONST               3 (1)
             80 BINARY_ADD
             82 LOAD_FAST                1 (ip)
             84 LOAD_DEREF               1 (s)
             86 LOAD_FAST                0 (idx)
             88 BINARY_SUBSCR
             90 BUILD_LIST               1
             92 BINARY_ADD
             94 CALL_FUNCTION            2
             96 POP_TOP

 12     >>   98 LOAD_FAST                0 (idx)
            100 LOAD_GLOBAL              0 (len)
            102 LOAD_DEREF               1 (s)
            104 CALL_FUNCTION            1
            106 LOAD_CONST               4 (2)
            108 BINARY_SUBTRACT
            110 COMPARE_OP               1 (<=)
            112 POP_JUMP_IF_FALSE      170
            114 LOAD_GLOBAL              4 (int)
            116 LOAD_DEREF               1 (s)
            118 LOAD_FAST                0 (idx)
            120 LOAD_FAST                0 (idx)
            122 LOAD_CONST               4 (2)
            124 BINARY_ADD
            126 BUILD_SLICE              2
            128 BINARY_SUBSCR
            130 CALL_FUNCTION            1
            132 LOAD_CONST               5 (10)
            134 COMPARE_OP               5 (>=)
            136 POP_JUMP_IF_FALSE      170

 13         138 LOAD_DEREF               0 (backtrack)
            140 LOAD_FAST                0 (idx)
            142 LOAD_CONST               4 (2)
            144 BINARY_ADD
            146 LOAD_FAST                1 (ip)
            148 LOAD_DEREF               1 (s)
            150 LOAD_FAST                0 (idx)
            152 LOAD_FAST                0 (idx)
            154 LOAD_CONST               4 (2)
            156 BINARY_ADD
            158 BUILD_SLICE              2
            160 BINARY_SUBSCR
            162 BUILD_LIST               1
            164 BINARY_ADD
            166 CALL_FUNCTION            2
            168 POP_TOP

 15     >>  170 LOAD_FAST                0 (idx)
            172 LOAD_GLOBAL              0 (len)
            174 LOAD_DEREF               1 (s)
            176 CALL_FUNCTION            1
            178 LOAD_CONST               6 (3)
            180 BINARY_SUBTRACT
            182 COMPARE_OP               1 (<=)
            184 EXTENDED_ARG             1
            186 POP_JUMP_IF_FALSE      272
            188 LOAD_GLOBAL              4 (int)
            190 LOAD_DEREF               1 (s)
            192 LOAD_FAST                0 (idx)
            194 LOAD_FAST                0 (idx)
            196 LOAD_CONST               6 (3)
            198 BINARY_ADD
            200 BUILD_SLICE              2
            202 BINARY_SUBSCR
            204 CALL_FUNCTION            1
            206 LOAD_CONST               7 (100)
            208 COMPARE_OP               5 (>=)
            210 EXTENDED_ARG             1
            212 POP_JUMP_IF_FALSE      272
            214 LOAD_GLOBAL              4 (int)
            216 LOAD_DEREF               1 (s)
            218 LOAD_FAST                0 (idx)
            220 LOAD_FAST                0 (idx)
            222 LOAD_CONST               6 (3)
            224 BINARY_ADD
            226 BUILD_SLICE              2
            228 BINARY_SUBSCR
            230 CALL_FUNCTION            1
            232 LOAD_CONST               8 (255)
            234 COMPARE_OP               1 (<=)
            236 EXTENDED_ARG             1
            238 POP_JUMP_IF_FALSE      272

 16         240 LOAD_DEREF               0 (backtrack)
            242 LOAD_FAST                0 (idx)
            244 LOAD_CONST               6 (3)
            246 BINARY_ADD
            248 LOAD_FAST                1 (ip)
            250 LOAD_DEREF               1 (s)
            252 LOAD_FAST                0 (idx)
            254 LOAD_FAST                0 (idx)
            256 LOAD_CONST               6 (3)
            258 BINARY_ADD
            260 BUILD_SLICE              2
            262 BINARY_SUBSCR
            264 BUILD_LIST               1
            266 BINARY_ADD
            268 CALL_FUNCTION            2
            270 POP_TOP
        >>  272 LOAD_CONST               0 (None)
            274 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
            minLimit = -2**31
            maxLimit = 2**31
            
            numStr = str(x) #Conversion
            numStr = numStr[::-1] #Reverse digits
            
            if numStr.endswith(""-""):
                numStr = ""-"" + numStr[:-1] #Remove ""-"" sign from the end and add it to the beginning

            number = int(numStr)
            if number not in range(minLimit,maxLimit): #Overflow
                return 0
            
            return number
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f42716352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f42716352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f4271635240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f4271635240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (-2147483648)
              2 STORE_FAST               2 (minLimit)

  4           4 LOAD_CONST               2 (2147483648)
              6 STORE_FAST               3 (maxLimit)

  6           8 LOAD_GLOBAL              0 (str)
             10 LOAD_FAST                1 (x)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (numStr)

  7          16 LOAD_FAST                4 (numStr)
             18 LOAD_CONST               0 (None)
             20 LOAD_CONST               0 (None)
             22 LOAD_CONST               3 (-1)
             24 BUILD_SLICE              3
             26 BINARY_SUBSCR
             28 STORE_FAST               4 (numStr)

  9          30 LOAD_FAST                4 (numStr)
             32 LOAD_METHOD              1 (endswith)
             34 LOAD_CONST               4 ('-')
             36 CALL_METHOD              1
             38 POP_JUMP_IF_FALSE       56

 10          40 LOAD_CONST               4 ('-')
             42 LOAD_FAST                4 (numStr)
             44 LOAD_CONST               0 (None)
             46 LOAD_CONST               3 (-1)
             48 BUILD_SLICE              2
             50 BINARY_SUBSCR
             52 BINARY_ADD
             54 STORE_FAST               4 (numStr)

 12     >>   56 LOAD_GLOBAL              2 (int)
             58 LOAD_FAST                4 (numStr)
             60 CALL_FUNCTION            1
             62 STORE_FAST               5 (number)

 13          64 LOAD_FAST                5 (number)
             66 LOAD_GLOBAL              3 (range)
             68 LOAD_FAST                2 (minLimit)
             70 LOAD_FAST                3 (maxLimit)
             72 CALL_FUNCTION            2
             74 COMPARE_OP               7 (not in)
             76 POP_JUMP_IF_FALSE       82

 14          78 LOAD_CONST               5 (0)
             80 RETURN_VALUE

 16     >>   82 LOAD_FAST                5 (number)
             84 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        if not x:
            return x
        x = list(str(x))
        while x[-1] == '0' and len(x) > 1:
            x.pop()
        left,right = 0,len(x)-1
        if x[left] == '-':
            left += 1
        while left < right:
            x[left],x[right] = x[right],x[left]
            left += 1
            right -= 1
        x = """".join(x)
        return 0 if int(x).bit_length() > 31 else int(x)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1dca4f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1dca4f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f1dca4f5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f1dca4f5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_FAST                1 (x)
              6 RETURN_VALUE

  5     >>    8 LOAD_GLOBAL              0 (list)
             10 LOAD_GLOBAL              1 (str)
             12 LOAD_FAST                1 (x)
             14 CALL_FUNCTION            1
             16 CALL_FUNCTION            1
             18 STORE_FAST               1 (x)

  6     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (-1)
             24 BINARY_SUBSCR
             26 LOAD_CONST               2 ('0')
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       54
             32 LOAD_GLOBAL              2 (len)
             34 LOAD_FAST                1 (x)
             36 CALL_FUNCTION            1
             38 LOAD_CONST               3 (1)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       54

  7          44 LOAD_FAST                1 (x)
             46 LOAD_METHOD              3 (pop)
             48 CALL_METHOD              0
             50 POP_TOP
             52 JUMP_ABSOLUTE           20

  8     >>   54 LOAD_CONST               4 (0)
             56 LOAD_GLOBAL              2 (len)
             58 LOAD_FAST                1 (x)
             60 CALL_FUNCTION            1
             62 LOAD_CONST               3 (1)
             64 BINARY_SUBTRACT
             66 ROT_TWO
             68 STORE_FAST               2 (left)
             70 STORE_FAST               3 (right)

  9          72 LOAD_FAST                1 (x)
             74 LOAD_FAST                2 (left)
             76 BINARY_SUBSCR
             78 LOAD_CONST               5 ('-')
             80 COMPARE_OP               2 (==)
             82 POP_JUMP_IF_FALSE       92

 10          84 LOAD_FAST                2 (left)
             86 LOAD_CONST               3 (1)
             88 INPLACE_ADD
             90 STORE_FAST               2 (left)

 11     >>   92 LOAD_FAST                2 (left)
             94 LOAD_FAST                3 (right)
             96 COMPARE_OP               0 (<)
             98 POP_JUMP_IF_FALSE      144

 12         100 LOAD_FAST                1 (x)
            102 LOAD_FAST                3 (right)
            104 BINARY_SUBSCR
            106 LOAD_FAST                1 (x)
            108 LOAD_FAST                2 (left)
            110 BINARY_SUBSCR
            112 ROT_TWO
            114 LOAD_FAST                1 (x)
            116 LOAD_FAST                2 (left)
            118 STORE_SUBSCR
            120 LOAD_FAST                1 (x)
            122 LOAD_FAST                3 (right)
            124 STORE_SUBSCR

 13         126 LOAD_FAST                2 (left)
            128 LOAD_CONST               3 (1)
            130 INPLACE_ADD
            132 STORE_FAST               2 (left)

 14         134 LOAD_FAST                3 (right)
            136 LOAD_CONST               3 (1)
            138 INPLACE_SUBTRACT
            140 STORE_FAST               3 (right)
            142 JUMP_ABSOLUTE           92

 15     >>  144 LOAD_CONST               6 ('')
            146 LOAD_METHOD              4 (join)
            148 LOAD_FAST                1 (x)
            150 CALL_METHOD              1
            152 STORE_FAST               1 (x)

 16         154 LOAD_GLOBAL              5 (int)
            156 LOAD_FAST                1 (x)
            158 CALL_FUNCTION            1
            160 LOAD_METHOD              6 (bit_length)
            162 CALL_METHOD              0
            164 LOAD_CONST               7 (31)
            166 COMPARE_OP               4 (>)
            168 POP_JUMP_IF_FALSE      174
            170 LOAD_CONST               4 (0)
            172 RETURN_VALUE
        >>  174 LOAD_GLOBAL              5 (int)
            176 LOAD_FAST                1 (x)
            178 CALL_FUNCTION            1
            180 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        if(x<0):
            s=-int((str(-1*x)[::-1]))
            return s if(s>-2**31) else 0
        s=int((str(x)[::-1]))
        return s if (s<2**31-1) else 0","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f47f95852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f47f95852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f47f9585240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f47f9585240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       52

  4           8 LOAD_GLOBAL              0 (int)
             10 LOAD_GLOBAL              1 (str)
             12 LOAD_CONST               2 (-1)
             14 LOAD_FAST                1 (x)
             16 BINARY_MULTIPLY
             18 CALL_FUNCTION            1
             20 LOAD_CONST               0 (None)
             22 LOAD_CONST               0 (None)
             24 LOAD_CONST               2 (-1)
             26 BUILD_SLICE              3
             28 BINARY_SUBSCR
             30 CALL_FUNCTION            1
             32 UNARY_NEGATIVE
             34 STORE_FAST               2 (s)

  5          36 LOAD_FAST                2 (s)
             38 LOAD_CONST               3 (-2147483648)
             40 COMPARE_OP               4 (>)
             42 POP_JUMP_IF_FALSE       48
             44 LOAD_FAST                2 (s)
             46 RETURN_VALUE
        >>   48 LOAD_CONST               1 (0)
             50 RETURN_VALUE

  6     >>   52 LOAD_GLOBAL              0 (int)
             54 LOAD_GLOBAL              1 (str)
             56 LOAD_FAST                1 (x)
             58 CALL_FUNCTION            1
             60 LOAD_CONST               0 (None)
             62 LOAD_CONST               0 (None)
             64 LOAD_CONST               2 (-1)
             66 BUILD_SLICE              3
             68 BINARY_SUBSCR
             70 CALL_FUNCTION            1
             72 STORE_FAST               2 (s)

  7          74 LOAD_FAST                2 (s)
             76 LOAD_CONST               4 (2147483647)
             78 COMPARE_OP               0 (<)
             80 POP_JUMP_IF_FALSE       86
             82 LOAD_FAST                2 (s)
             84 RETURN_VALUE
        >>   86 LOAD_CONST               1 (0)
             88 RETURN_VALUE
None
"
reverse,"class Solution:
	def reverse(self, x: int) -> int:
		if x > 0:
			ans = int(str(x)[:: -1])
			return ans if ans < 2**31 else 0
		ans = - int(str(- x)[:: -1])
		return ans if ans > - 2**31 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f08d20952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f08d20952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f08d2095240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f08d2095240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       46

  4           8 LOAD_GLOBAL              0 (int)
             10 LOAD_GLOBAL              1 (str)
             12 LOAD_FAST                1 (x)
             14 CALL_FUNCTION            1
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               0 (None)
             20 LOAD_CONST               2 (-1)
             22 BUILD_SLICE              3
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 STORE_FAST               2 (ans)

  5          30 LOAD_FAST                2 (ans)
             32 LOAD_CONST               3 (2147483648)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       42
             38 LOAD_FAST                2 (ans)
             40 RETURN_VALUE
        >>   42 LOAD_CONST               1 (0)
             44 RETURN_VALUE

  6     >>   46 LOAD_GLOBAL              0 (int)
             48 LOAD_GLOBAL              1 (str)
             50 LOAD_FAST                1 (x)
             52 UNARY_NEGATIVE
             54 CALL_FUNCTION            1
             56 LOAD_CONST               0 (None)
             58 LOAD_CONST               0 (None)
             60 LOAD_CONST               2 (-1)
             62 BUILD_SLICE              3
             64 BINARY_SUBSCR
             66 CALL_FUNCTION            1
             68 UNARY_NEGATIVE
             70 STORE_FAST               2 (ans)

  7          72 LOAD_FAST                2 (ans)
             74 LOAD_CONST               4 (-2147483648)
             76 COMPARE_OP               4 (>)
             78 POP_JUMP_IF_FALSE       84
             80 LOAD_FAST                2 (ans)
             82 RETURN_VALUE
        >>   84 LOAD_CONST               1 (0)
             86 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        # initialize variable ""result"" as a reversed string of the characters
        result = str(x)[::-1]
        # if the number was negative, the last character will be ""-""
        # remove the ""-"" from the end of the string and turn into negative int of the characters
        if result[-1] == ""-"":
            result = -int(result[:-1])
        # if the number was not negative, turn into an int
        else:
            result = int(result)
        # if the result is larger than a 32-bit int, return 0
        if result > 2**31 or result < -2**31:
            return 0
        return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcf5ba652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcf5ba652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7fcf5ba65240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7fcf5ba65240, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               0 (None)
              8 LOAD_CONST               0 (None)
             10 LOAD_CONST               1 (-1)
             12 BUILD_SLICE              3
             14 BINARY_SUBSCR
             16 STORE_FAST               2 (result)

  7          18 LOAD_FAST                2 (result)
             20 LOAD_CONST               1 (-1)
             22 BINARY_SUBSCR
             24 LOAD_CONST               2 ('-')
             26 COMPARE_OP               2 (==)
             28 POP_JUMP_IF_FALSE       50

  8          30 LOAD_GLOBAL              1 (int)
             32 LOAD_FAST                2 (result)
             34 LOAD_CONST               0 (None)
             36 LOAD_CONST               1 (-1)
             38 BUILD_SLICE              2
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 UNARY_NEGATIVE
             46 STORE_FAST               2 (result)
             48 JUMP_FORWARD             8 (to 58)

 11     >>   50 LOAD_GLOBAL              1 (int)
             52 LOAD_FAST                2 (result)
             54 CALL_FUNCTION            1
             56 STORE_FAST               2 (result)

 13     >>   58 LOAD_FAST                2 (result)
             60 LOAD_CONST               3 (2147483648)
             62 COMPARE_OP               4 (>)
             64 POP_JUMP_IF_TRUE        74
             66 LOAD_FAST                2 (result)
             68 LOAD_CONST               4 (-2147483648)
             70 COMPARE_OP               0 (<)
             72 POP_JUMP_IF_FALSE       78

 14     >>   74 LOAD_CONST               5 (0)
             76 RETURN_VALUE

 15     >>   78 LOAD_FAST                2 (result)
             80 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        
        result = 0
        limit = 2147483647 if x>=0 else -2147483648
        sign = 1 if x>=0 else -1

        for i, s in enumerate(str(abs(x))):
            if x > 0:
                if result+int(s)*pow(10, i) > limit:
                    return 0
                
            elif x < 0:
                if result-int(s)*pow(10, i) < limit:
                    return 0
            
			# Addition is guaranteed to be in the range: [-2147483648,  2147483647]
            result = result + sign*int(s)*pow(10, i)
            
        return result
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f86aef052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f86aef052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f86aef05240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f86aef05240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (result)

  5           4 LOAD_FAST                1 (x)
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               5 (>=)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               2 (2147483647)
             14 JUMP_FORWARD             2 (to 18)
        >>   16 LOAD_CONST               3 (-2147483648)
        >>   18 STORE_FAST               3 (limit)

  6          20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               5 (>=)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               4 (1)
             30 JUMP_FORWARD             2 (to 34)
        >>   32 LOAD_CONST               5 (-1)
        >>   34 STORE_FAST               4 (sign)

  8          36 LOAD_GLOBAL              0 (enumerate)
             38 LOAD_GLOBAL              1 (str)
             40 LOAD_GLOBAL              2 (abs)
             42 LOAD_FAST                1 (x)
             44 CALL_FUNCTION            1
             46 CALL_FUNCTION            1
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER               116 (to 170)
             54 UNPACK_SEQUENCE          2
             56 STORE_FAST               5 (i)
             58 STORE_FAST               6 (s)

  9          60 LOAD_FAST                1 (x)
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               4 (>)
             66 POP_JUMP_IF_FALSE      102

 10          68 LOAD_FAST                2 (result)
             70 LOAD_GLOBAL              3 (int)
             72 LOAD_FAST                6 (s)
             74 CALL_FUNCTION            1
             76 LOAD_GLOBAL              4 (pow)
             78 LOAD_CONST               6 (10)
             80 LOAD_FAST                5 (i)
             82 CALL_FUNCTION            2
             84 BINARY_MULTIPLY
             86 BINARY_ADD
             88 LOAD_FAST                3 (limit)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE      142

 11          94 POP_TOP
             96 LOAD_CONST               1 (0)
             98 RETURN_VALUE
            100 JUMP_FORWARD            40 (to 142)

 13     >>  102 LOAD_FAST                1 (x)
            104 LOAD_CONST               1 (0)
            106 COMPARE_OP               0 (<)
            108 POP_JUMP_IF_FALSE      142

 14         110 LOAD_FAST                2 (result)
            112 LOAD_GLOBAL              3 (int)
            114 LOAD_FAST                6 (s)
            116 CALL_FUNCTION            1
            118 LOAD_GLOBAL              4 (pow)
            120 LOAD_CONST               6 (10)
            122 LOAD_FAST                5 (i)
            124 CALL_FUNCTION            2
            126 BINARY_MULTIPLY
            128 BINARY_SUBTRACT
            130 LOAD_FAST                3 (limit)
            132 COMPARE_OP               0 (<)
            134 POP_JUMP_IF_FALSE      142

 15         136 POP_TOP
            138 LOAD_CONST               1 (0)
            140 RETURN_VALUE

 18     >>  142 LOAD_FAST                2 (result)
            144 LOAD_FAST                4 (sign)
            146 LOAD_GLOBAL              3 (int)
            148 LOAD_FAST                6 (s)
            150 CALL_FUNCTION            1
            152 BINARY_MULTIPLY
            154 LOAD_GLOBAL              4 (pow)
            156 LOAD_CONST               6 (10)
            158 LOAD_FAST                5 (i)
            160 CALL_FUNCTION            2
            162 BINARY_MULTIPLY
            164 BINARY_ADD
            166 STORE_FAST               2 (result)
            168 JUMP_ABSOLUTE           52

 20     >>  170 LOAD_FAST                2 (result)
            172 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            s =- 1
        else:
            s = 1
        ans = s * int(str(abs(x))[::-1])
            # negative value can make a copy of the list in reverse order
            # also works for tuples, arrays, and strings
        if -2**31 <= ans <= 2**31-1:
            return ans
        else:
            return 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe63d1852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe63d1852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7fe63d185240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7fe63d185240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       14

  4           8 LOAD_CONST               2 (-1)
             10 STORE_FAST               2 (s)
             12 JUMP_FORWARD             4 (to 18)

  6     >>   14 LOAD_CONST               3 (1)
             16 STORE_FAST               2 (s)

  7     >>   18 LOAD_FAST                2 (s)
             20 LOAD_GLOBAL              0 (int)
             22 LOAD_GLOBAL              1 (str)
             24 LOAD_GLOBAL              2 (abs)
             26 LOAD_FAST                1 (x)
             28 CALL_FUNCTION            1
             30 CALL_FUNCTION            1
             32 LOAD_CONST               0 (None)
             34 LOAD_CONST               0 (None)
             36 LOAD_CONST               2 (-1)
             38 BUILD_SLICE              3
             40 BINARY_SUBSCR
             42 CALL_FUNCTION            1
             44 BINARY_MULTIPLY
             46 STORE_FAST               3 (ans)

 10          48 LOAD_CONST               4 (-2147483648)
             50 LOAD_FAST                3 (ans)
             52 DUP_TOP
             54 ROT_THREE
             56 COMPARE_OP               1 (<=)
             58 POP_JUMP_IF_FALSE       68
             60 LOAD_CONST               5 (2147483647)
             62 COMPARE_OP               1 (<=)
             64 POP_JUMP_IF_FALSE       76
             66 JUMP_FORWARD             4 (to 72)
        >>   68 POP_TOP
             70 JUMP_FORWARD             4 (to 76)

 11     >>   72 LOAD_FAST                3 (ans)
             74 RETURN_VALUE

 13     >>   76 LOAD_CONST               1 (0)
             78 RETURN_VALUE
             80 LOAD_CONST               0 (None)
             82 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        res=str(x)
        if (x<0):
            res=int(""-"" + res[1:][::-1] )
            return res if -2147483648 < res else 0    
        else:
            res=int(res[::-1])
            return res if res < 2147483647 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9078d85240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9078d85240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f9078d852f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f9078d852f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (res)

  4           8 LOAD_FAST                1 (x)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       62

  5          16 LOAD_GLOBAL              1 (int)
             18 LOAD_CONST               2 ('-')
             20 LOAD_FAST                2 (res)
             22 LOAD_CONST               3 (1)
             24 LOAD_CONST               0 (None)
             26 BUILD_SLICE              2
             28 BINARY_SUBSCR
             30 LOAD_CONST               0 (None)
             32 LOAD_CONST               0 (None)
             34 LOAD_CONST               4 (-1)
             36 BUILD_SLICE              3
             38 BINARY_SUBSCR
             40 BINARY_ADD
             42 CALL_FUNCTION            1
             44 STORE_FAST               2 (res)

  6          46 LOAD_CONST               5 (-2147483648)
             48 LOAD_FAST                2 (res)
             50 COMPARE_OP               0 (<)
             52 POP_JUMP_IF_FALSE       58
             54 LOAD_FAST                2 (res)
             56 RETURN_VALUE
        >>   58 LOAD_CONST               1 (0)
             60 RETURN_VALUE

  8     >>   62 LOAD_GLOBAL              1 (int)
             64 LOAD_FAST                2 (res)
             66 LOAD_CONST               0 (None)
             68 LOAD_CONST               0 (None)
             70 LOAD_CONST               4 (-1)
             72 BUILD_SLICE              3
             74 BINARY_SUBSCR
             76 CALL_FUNCTION            1
             78 STORE_FAST               2 (res)

  9          80 LOAD_FAST                2 (res)
             82 LOAD_CONST               6 (2147483647)
             84 COMPARE_OP               0 (<)
             86 POP_JUMP_IF_FALSE       92
             88 LOAD_FAST                2 (res)
             90 RETURN_VALUE
        >>   92 LOAD_CONST               1 (0)
             94 RETURN_VALUE
             96 LOAD_CONST               0 (None)
             98 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        x, digit= str(x), str()
        if int(x) < 0:
            x += ""-""
            x = x[1:]
        for i in reversed(x): digit += i
        if int(digit)<(-2**31) or int(digit)>((2**31)-1): return 0
        else: return int(digit)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f032fcd5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f032fcd5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f032fcd52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f032fcd52f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (str)
              8 CALL_FUNCTION            0
             10 ROT_TWO
             12 STORE_FAST               1 (x)
             14 STORE_FAST               2 (digit)

  4          16 LOAD_GLOBAL              1 (int)
             18 LOAD_FAST                1 (x)
             20 CALL_FUNCTION            1
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       48

  5          28 LOAD_FAST                1 (x)
             30 LOAD_CONST               2 ('-')
             32 INPLACE_ADD
             34 STORE_FAST               1 (x)

  6          36 LOAD_FAST                1 (x)
             38 LOAD_CONST               3 (1)
             40 LOAD_CONST               0 (None)
             42 BUILD_SLICE              2
             44 BINARY_SUBSCR
             46 STORE_FAST               1 (x)

  7     >>   48 LOAD_GLOBAL              2 (reversed)
             50 LOAD_FAST                1 (x)
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                12 (to 70)
             58 STORE_FAST               3 (i)
             60 LOAD_FAST                2 (digit)
             62 LOAD_FAST                3 (i)
             64 INPLACE_ADD
             66 STORE_FAST               2 (digit)
             68 JUMP_ABSOLUTE           56

  8     >>   70 LOAD_GLOBAL              1 (int)
             72 LOAD_FAST                2 (digit)
             74 CALL_FUNCTION            1
             76 LOAD_CONST               4 (-2147483648)
             78 COMPARE_OP               0 (<)
             80 POP_JUMP_IF_TRUE        94
             82 LOAD_GLOBAL              1 (int)
             84 LOAD_FAST                2 (digit)
             86 CALL_FUNCTION            1
             88 LOAD_CONST               5 (2147483647)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE       98
        >>   94 LOAD_CONST               1 (0)
             96 RETURN_VALUE

  9     >>   98 LOAD_GLOBAL              1 (int)
            100 LOAD_FAST                2 (digit)
            102 CALL_FUNCTION            1
            104 RETURN_VALUE
            106 LOAD_CONST               0 (None)
            108 RETURN_VALUE
None
"
reverse,"class Solution:
	def reverse(self, x: int) -> int:
		rev = int(str(abs(x))[::-1])
		
		if (rev.bit_length() < 32):
			if x < 0:
				return -rev
			else:
				return rev
		else:
			return 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1d8b6952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1d8b6952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f1d8b695240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f1d8b695240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_GLOBAL              2 (abs)
              6 LOAD_FAST                1 (x)
              8 CALL_FUNCTION            1
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (rev)

  5          26 LOAD_FAST                2 (rev)
             28 LOAD_METHOD              3 (bit_length)
             30 CALL_METHOD              0
             32 LOAD_CONST               2 (32)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       58

  6          38 LOAD_FAST                1 (x)
             40 LOAD_CONST               3 (0)
             42 COMPARE_OP               0 (<)
             44 POP_JUMP_IF_FALSE       52

  7          46 LOAD_FAST                2 (rev)
             48 UNARY_NEGATIVE
             50 RETURN_VALUE

  9     >>   52 LOAD_FAST                2 (rev)
             54 RETURN_VALUE
             56 JUMP_FORWARD             4 (to 62)

 11     >>   58 LOAD_CONST               3 (0)
             60 RETURN_VALUE
        >>   62 LOAD_CONST               0 (None)
             64 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        rev = int(str(abs(x))[::-1])
        return (-rev if x < 0 else rev) if rev.bit_length() < 32 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7cf47952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7cf47952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f7cf4795240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f7cf4795240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_GLOBAL              2 (abs)
              6 LOAD_FAST                1 (x)
              8 CALL_FUNCTION            1
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (rev)

  4          26 LOAD_FAST                2 (rev)
             28 LOAD_METHOD              3 (bit_length)
             30 CALL_METHOD              0
             32 LOAD_CONST               2 (32)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       56
             38 LOAD_FAST                1 (x)
             40 LOAD_CONST               3 (0)
             42 COMPARE_OP               0 (<)
             44 POP_JUMP_IF_FALSE       52
             46 LOAD_FAST                2 (rev)
             48 UNARY_NEGATIVE
             50 JUMP_ABSOLUTE           58
        >>   52 LOAD_FAST                2 (rev)
             54 RETURN_VALUE
        >>   56 LOAD_CONST               3 (0)
        >>   58 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        s = -1 if x < 0 else 1
        x_ = str(x)[-1::-1] if s == 1 else str(x)[-1:0:-1]
        ans = s*int(x_)
        return ans if abs(ans) < 2**31 else 0
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7feeb89752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7feeb89752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7feeb8975240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7feeb8975240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (-1)
             10 JUMP_FORWARD             2 (to 14)
        >>   12 LOAD_CONST               3 (1)
        >>   14 STORE_FAST               2 (s)

  4          16 LOAD_FAST                2 (s)
             18 LOAD_CONST               3 (1)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       42
             24 LOAD_GLOBAL              0 (str)
             26 LOAD_FAST                1 (x)
             28 CALL_FUNCTION            1
             30 LOAD_CONST               2 (-1)
             32 LOAD_CONST               0 (None)
             34 LOAD_CONST               2 (-1)
             36 BUILD_SLICE              3
             38 BINARY_SUBSCR
             40 JUMP_FORWARD            16 (to 58)
        >>   42 LOAD_GLOBAL              0 (str)
             44 LOAD_FAST                1 (x)
             46 CALL_FUNCTION            1
             48 LOAD_CONST               2 (-1)
             50 LOAD_CONST               1 (0)
             52 LOAD_CONST               2 (-1)
             54 BUILD_SLICE              3
             56 BINARY_SUBSCR
        >>   58 STORE_FAST               3 (x_)

  5          60 LOAD_FAST                2 (s)
             62 LOAD_GLOBAL              1 (int)
             64 LOAD_FAST                3 (x_)
             66 CALL_FUNCTION            1
             68 BINARY_MULTIPLY
             70 STORE_FAST               4 (ans)

  6          72 LOAD_GLOBAL              2 (abs)
             74 LOAD_FAST                4 (ans)
             76 CALL_FUNCTION            1
             78 LOAD_CONST               4 (2147483648)
             80 COMPARE_OP               0 (<)
             82 POP_JUMP_IF_FALSE       88
             84 LOAD_FAST                4 (ans)
             86 RETURN_VALUE
        >>   88 LOAD_CONST               1 (0)
             90 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        
        d=abs(x)
        newNum=0
    
        while d>0:
            d,m=divmod(d,10)
            newNum=(newNum*10)+m
        
        if newNum>=(2**31)-1:
            return 0
        return newNum if x>0 else newNum*-1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f9ed05052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f9ed05052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f9ed0505240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f9ed0505240, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (abs)
              2 LOAD_FAST                1 (x)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (d)

  5           8 LOAD_CONST               1 (0)
             10 STORE_FAST               3 (newNum)

  7     >>   12 LOAD_FAST                2 (d)
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               4 (>)
             18 POP_JUMP_IF_FALSE       48

  8          20 LOAD_GLOBAL              1 (divmod)
             22 LOAD_FAST                2 (d)
             24 LOAD_CONST               2 (10)
             26 CALL_FUNCTION            2
             28 UNPACK_SEQUENCE          2
             30 STORE_FAST               2 (d)
             32 STORE_FAST               4 (m)

  9          34 LOAD_FAST                3 (newNum)
             36 LOAD_CONST               2 (10)
             38 BINARY_MULTIPLY
             40 LOAD_FAST                4 (m)
             42 BINARY_ADD
             44 STORE_FAST               3 (newNum)
             46 JUMP_ABSOLUTE           12

 11     >>   48 LOAD_FAST                3 (newNum)
             50 LOAD_CONST               3 (2147483647)
             52 COMPARE_OP               5 (>=)
             54 POP_JUMP_IF_FALSE       60

 12          56 LOAD_CONST               1 (0)
             58 RETURN_VALUE

 13     >>   60 LOAD_FAST                1 (x)
             62 LOAD_CONST               1 (0)
             64 COMPARE_OP               4 (>)
             66 POP_JUMP_IF_FALSE       72
             68 LOAD_FAST                3 (newNum)
             70 RETURN_VALUE
        >>   72 LOAD_FAST                3 (newNum)
             74 LOAD_CONST               4 (-1)
             76 BINARY_MULTIPLY
             78 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        a = list(str(abs(x)))
        b = 0
        for i in range(len(a)):
            b += int(a[i]) * (10 ** i)
        
        if b < -(2**31) or b > ((2**31) - 1):
            return 0
        
        if x < 0:
            return (-1) * b
        else:
            return b","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f23e49d5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f23e49d5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f23e49d52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f23e49d52f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (list)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_GLOBAL              2 (abs)
              6 LOAD_FAST                1 (x)
              8 CALL_FUNCTION            1
             10 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             14 STORE_FAST               2 (a)

  4          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (b)

  5          20 LOAD_GLOBAL              3 (range)
             22 LOAD_GLOBAL              4 (len)
             24 LOAD_FAST                2 (a)
             26 CALL_FUNCTION            1
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                28 (to 62)
             34 STORE_FAST               4 (i)

  6          36 LOAD_FAST                3 (b)
             38 LOAD_GLOBAL              5 (int)
             40 LOAD_FAST                2 (a)
             42 LOAD_FAST                4 (i)
             44 BINARY_SUBSCR
             46 CALL_FUNCTION            1
             48 LOAD_CONST               2 (10)
             50 LOAD_FAST                4 (i)
             52 BINARY_POWER
             54 BINARY_MULTIPLY
             56 INPLACE_ADD
             58 STORE_FAST               3 (b)
             60 JUMP_ABSOLUTE           32

  8     >>   62 LOAD_FAST                3 (b)
             64 LOAD_CONST               3 (-2147483648)
             66 COMPARE_OP               0 (<)
             68 POP_JUMP_IF_TRUE        78
             70 LOAD_FAST                3 (b)
             72 LOAD_CONST               4 (2147483647)
             74 COMPARE_OP               4 (>)
             76 POP_JUMP_IF_FALSE       82

  9     >>   78 LOAD_CONST               1 (0)
             80 RETURN_VALUE

 11     >>   82 LOAD_FAST                1 (x)
             84 LOAD_CONST               1 (0)
             86 COMPARE_OP               0 (<)
             88 POP_JUMP_IF_FALSE       98

 12          90 LOAD_CONST               5 (-1)
             92 LOAD_FAST                3 (b)
             94 BINARY_MULTIPLY
             96 RETURN_VALUE

 14     >>   98 LOAD_FAST                3 (b)
            100 RETURN_VALUE
            102 LOAD_CONST               0 (None)
            104 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        rev = int(str(abs(x))[::-1])
        i = -rev if x < 0 else rev
        if i < -2**31 or i > 2**31-1:
            return 0
        return i
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f28639e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f28639e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f28639e5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f28639e5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              1 (str)
              4 LOAD_GLOBAL              2 (abs)
              6 LOAD_FAST                1 (x)
              8 CALL_FUNCTION            1
             10 CALL_FUNCTION            1
             12 LOAD_CONST               0 (None)
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               1 (-1)
             18 BUILD_SLICE              3
             20 BINARY_SUBSCR
             22 CALL_FUNCTION            1
             24 STORE_FAST               2 (rev)

  4          26 LOAD_FAST                1 (x)
             28 LOAD_CONST               2 (0)
             30 COMPARE_OP               0 (<)
             32 POP_JUMP_IF_FALSE       40
             34 LOAD_FAST                2 (rev)
             36 UNARY_NEGATIVE
             38 JUMP_FORWARD             2 (to 42)
        >>   40 LOAD_FAST                2 (rev)
        >>   42 STORE_FAST               3 (i)

  5          44 LOAD_FAST                3 (i)
             46 LOAD_CONST               3 (-2147483648)
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_TRUE        60
             52 LOAD_FAST                3 (i)
             54 LOAD_CONST               4 (2147483647)
             56 COMPARE_OP               4 (>)
             58 POP_JUMP_IF_FALSE       64

  6     >>   60 LOAD_CONST               2 (0)
             62 RETURN_VALUE

  7     >>   64 LOAD_FAST                3 (i)
             66 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        reversed_number_string = """"
        largest_integer_32_bit = pow(2, 31)
        is_negative = False
        if x == 0:
            return 0
        if x < 0:
            x = abs(x)
            is_negative = True
        while x != 0:
            reversed_number_string += str(x % 10)
            x = int(x / 10)
        reversed_number = int(reversed_number_string)
        if reversed_number > largest_integer_32_bit:
            return 0
        if is_negative:
            return reversed_number * -1
        return reversed_number
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fcbb1795240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fcbb1795240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7fcbb17952f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7fcbb17952f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ('')
              2 STORE_FAST               2 (reversed_number_string)

  4           4 LOAD_GLOBAL              0 (pow)
              6 LOAD_CONST               2 (2)
              8 LOAD_CONST               3 (31)
             10 CALL_FUNCTION            2
             12 STORE_FAST               3 (largest_integer_32_bit)

  5          14 LOAD_CONST               4 (False)
             16 STORE_FAST               4 (is_negative)

  6          18 LOAD_FAST                1 (x)
             20 LOAD_CONST               5 (0)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30

  7          26 LOAD_CONST               5 (0)
             28 RETURN_VALUE

  8     >>   30 LOAD_FAST                1 (x)
             32 LOAD_CONST               5 (0)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE       50

  9          38 LOAD_GLOBAL              1 (abs)
             40 LOAD_FAST                1 (x)
             42 CALL_FUNCTION            1
             44 STORE_FAST               1 (x)

 10          46 LOAD_CONST               6 (True)
             48 STORE_FAST               4 (is_negative)

 11     >>   50 LOAD_FAST                1 (x)
             52 LOAD_CONST               5 (0)
             54 COMPARE_OP               3 (!=)
             56 POP_JUMP_IF_FALSE       88

 12          58 LOAD_FAST                2 (reversed_number_string)
             60 LOAD_GLOBAL              2 (str)
             62 LOAD_FAST                1 (x)
             64 LOAD_CONST               7 (10)
             66 BINARY_MODULO
             68 CALL_FUNCTION            1
             70 INPLACE_ADD
             72 STORE_FAST               2 (reversed_number_string)

 13          74 LOAD_GLOBAL              3 (int)
             76 LOAD_FAST                1 (x)
             78 LOAD_CONST               7 (10)
             80 BINARY_TRUE_DIVIDE
             82 CALL_FUNCTION            1
             84 STORE_FAST               1 (x)
             86 JUMP_ABSOLUTE           50

 14     >>   88 LOAD_GLOBAL              3 (int)
             90 LOAD_FAST                2 (reversed_number_string)
             92 CALL_FUNCTION            1
             94 STORE_FAST               5 (reversed_number)

 15          96 LOAD_FAST                5 (reversed_number)
             98 LOAD_FAST                3 (largest_integer_32_bit)
            100 COMPARE_OP               4 (>)
            102 POP_JUMP_IF_FALSE      108

 16         104 LOAD_CONST               5 (0)
            106 RETURN_VALUE

 17     >>  108 LOAD_FAST                4 (is_negative)
            110 POP_JUMP_IF_FALSE      120

 18         112 LOAD_FAST                5 (reversed_number)
            114 LOAD_CONST               8 (-1)
            116 BINARY_MULTIPLY
            118 RETURN_VALUE

 19     >>  120 LOAD_FAST                5 (reversed_number)
            122 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        
        sign = 1
        if x < 0:
            sign = -1
            x = -x
        num = str(x)[::-1]
        num = int(num)
        if num < -(2**31) or num > 2**31 - 1:
            return 0
        return -num if sign is -1 else num
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1ad5e45a80, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1ad5e45a80, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f1ad5e457c0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f1ad5e457c0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (sign)

  5           4 LOAD_FAST                1 (x)
              6 LOAD_CONST               2 (0)
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_FALSE       22

  6          12 LOAD_CONST               3 (-1)
             14 STORE_FAST               2 (sign)

  7          16 LOAD_FAST                1 (x)
             18 UNARY_NEGATIVE
             20 STORE_FAST               1 (x)

  8     >>   22 LOAD_GLOBAL              0 (str)
             24 LOAD_FAST                1 (x)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               0 (None)
             30 LOAD_CONST               0 (None)
             32 LOAD_CONST               3 (-1)
             34 BUILD_SLICE              3
             36 BINARY_SUBSCR
             38 STORE_FAST               3 (num)

  9          40 LOAD_GLOBAL              1 (int)
             42 LOAD_FAST                3 (num)
             44 CALL_FUNCTION            1
             46 STORE_FAST               3 (num)

 10          48 LOAD_FAST                3 (num)
             50 LOAD_CONST               4 (-2147483648)
             52 COMPARE_OP               0 (<)
             54 POP_JUMP_IF_TRUE        64
             56 LOAD_FAST                3 (num)
             58 LOAD_CONST               5 (2147483647)
             60 COMPARE_OP               4 (>)
             62 POP_JUMP_IF_FALSE       68

 11     >>   64 LOAD_CONST               2 (0)
             66 RETURN_VALUE

 12     >>   68 LOAD_FAST                2 (sign)
             70 LOAD_CONST               3 (-1)
             72 COMPARE_OP               8 (is)
             74 POP_JUMP_IF_FALSE       82
             76 LOAD_FAST                3 (num)
             78 UNARY_NEGATIVE
             80 RETURN_VALUE
        >>   82 LOAD_FAST                3 (num)
             84 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        output = ''
        str_x = str(x)
        if str_x[0] == '-':
            output+='-'
            for i in range(len(str_x)-1,0,-1):
                output+=str_x[i]
        else:
            for j in range(len(str_x)-1,-1,-1):
                output+=str_x[j]
        if int(output) not in range(-2147483648,2147483648):
            return 0
        return int(output)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f08fa325240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f08fa325240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7f08fa3253a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7f08fa3253a0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 ('')
              2 STORE_FAST               2 (output)

  4           4 LOAD_GLOBAL              0 (str)
              6 LOAD_FAST                1 (x)
              8 CALL_FUNCTION            1
             10 STORE_FAST               3 (str_x)

  5          12 LOAD_FAST                3 (str_x)
             14 LOAD_CONST               2 (0)
             16 BINARY_SUBSCR
             18 LOAD_CONST               3 ('-')
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       72

  6          24 LOAD_FAST                2 (output)
             26 LOAD_CONST               3 ('-')
             28 INPLACE_ADD
             30 STORE_FAST               2 (output)

  7          32 LOAD_GLOBAL              1 (range)
             34 LOAD_GLOBAL              2 (len)
             36 LOAD_FAST                3 (str_x)
             38 CALL_FUNCTION            1
             40 LOAD_CONST               4 (1)
             42 BINARY_SUBTRACT
             44 LOAD_CONST               2 (0)
             46 LOAD_CONST               5 (-1)
             48 CALL_FUNCTION            3
             50 GET_ITER
        >>   52 FOR_ITER                16 (to 70)
             54 STORE_FAST               4 (i)

  8          56 LOAD_FAST                2 (output)
             58 LOAD_FAST                3 (str_x)
             60 LOAD_FAST                4 (i)
             62 BINARY_SUBSCR
             64 INPLACE_ADD
             66 STORE_FAST               2 (output)
             68 JUMP_ABSOLUTE           52
        >>   70 JUMP_FORWARD            38 (to 110)

 10     >>   72 LOAD_GLOBAL              1 (range)
             74 LOAD_GLOBAL              2 (len)
             76 LOAD_FAST                3 (str_x)
             78 CALL_FUNCTION            1
             80 LOAD_CONST               4 (1)
             82 BINARY_SUBTRACT
             84 LOAD_CONST               5 (-1)
             86 LOAD_CONST               5 (-1)
             88 CALL_FUNCTION            3
             90 GET_ITER
        >>   92 FOR_ITER                16 (to 110)
             94 STORE_FAST               5 (j)

 11          96 LOAD_FAST                2 (output)
             98 LOAD_FAST                3 (str_x)
            100 LOAD_FAST                5 (j)
            102 BINARY_SUBSCR
            104 INPLACE_ADD
            106 STORE_FAST               2 (output)
            108 JUMP_ABSOLUTE           92

 12     >>  110 LOAD_GLOBAL              3 (int)
            112 LOAD_FAST                2 (output)
            114 CALL_FUNCTION            1
            116 LOAD_GLOBAL              1 (range)
            118 LOAD_CONST               6 (-2147483648)
            120 LOAD_CONST               7 (2147483648)
            122 CALL_FUNCTION            2
            124 COMPARE_OP               7 (not in)
            126 POP_JUMP_IF_FALSE      132

 13         128 LOAD_CONST               2 (0)
            130 RETURN_VALUE

 14     >>  132 LOAD_GLOBAL              3 (int)
            134 LOAD_FAST                2 (output)
            136 CALL_FUNCTION            1
            138 RETURN_VALUE
None
"
reverse,"class Solution:
    def reverse(self, x: int) -> int:
        isneg = x<0
        x = abs(x)
        rev = 0
        while(x>0):
            rem = x%10
            rev = rev*10+rem
            x = x//10
        
        if rev >= 2** 31 -1 or rev <= -2** 31:
            return 0

        elif isneg:
            return 0-rev
        else:
            return rev 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa15d1a5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa15d1a5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (int)
             10 LOAD_NAME                3 (int)
             12 LOAD_CONST               1 (('x', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverse at 0x7fa15d1a52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverse')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverse)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverse at 0x7fa15d1a52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (x)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 STORE_FAST               2 (isneg)

  4           8 LOAD_GLOBAL              0 (abs)
             10 LOAD_FAST                1 (x)
             12 CALL_FUNCTION            1
             14 STORE_FAST               1 (x)

  5          16 LOAD_CONST               1 (0)
             18 STORE_FAST               3 (rev)

  6     >>   20 LOAD_FAST                1 (x)
             22 LOAD_CONST               1 (0)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       58

  7          28 LOAD_FAST                1 (x)
             30 LOAD_CONST               2 (10)
             32 BINARY_MODULO
             34 STORE_FAST               4 (rem)

  8          36 LOAD_FAST                3 (rev)
             38 LOAD_CONST               2 (10)
             40 BINARY_MULTIPLY
             42 LOAD_FAST                4 (rem)
             44 BINARY_ADD
             46 STORE_FAST               3 (rev)

  9          48 LOAD_FAST                1 (x)
             50 LOAD_CONST               2 (10)
             52 BINARY_FLOOR_DIVIDE
             54 STORE_FAST               1 (x)
             56 JUMP_ABSOLUTE           20

 11     >>   58 LOAD_FAST                3 (rev)
             60 LOAD_CONST               3 (2147483647)
             62 COMPARE_OP               5 (>=)
             64 POP_JUMP_IF_TRUE        74
             66 LOAD_FAST                3 (rev)
             68 LOAD_CONST               4 (-2147483648)
             70 COMPARE_OP               1 (<=)
             72 POP_JUMP_IF_FALSE       78

 12     >>   74 LOAD_CONST               1 (0)
             76 RETURN_VALUE

 14     >>   78 LOAD_FAST                2 (isneg)
             80 POP_JUMP_IF_FALSE       90

 15          82 LOAD_CONST               1 (0)
             84 LOAD_FAST                3 (rev)
             86 BINARY_SUBTRACT
             88 RETURN_VALUE

 17     >>   90 LOAD_FAST                3 (rev)
             92 RETURN_VALUE
             94 LOAD_CONST               0 (None)
             96 RETURN_VALUE
None
"
reverseList,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None or head.next is None :
            return head 
        if head.next is not None:
            last = None
            point = head
			
            while point is not None:
                point.next, point, last = last, point.next, point
                
            return last
	
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object ListNode at 0x7f09fbe452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('ListNode')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('ListNode')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (ListNode)

  6          14 LOAD_BUILD_CLASS
             16 LOAD_CONST               2 (<code object Solution at 0x7f09fbe45450, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution')
             20 MAKE_FUNCTION            0
             22 LOAD_CONST               3 ('Solution')
             24 CALL_FUNCTION            2
             26 STORE_NAME               1 (Solution)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object ListNode at 0x7f09fbe452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('ListNode')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               5 ((0, None))
             10 LOAD_CONST               3 (<code object __init__ at 0x7f09fbe45240, file ""<ast>"", line 2>)
             12 LOAD_CONST               4 ('ListNode.__init__')
             14 MAKE_FUNCTION            1 (defaults)
             16 STORE_NAME               3 (__init__)
             18 LOAD_CONST               2 (None)
             20 RETURN_VALUE

Disassembly of <code object __init__ at 0x7f09fbe45240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (val)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (val)

  4           6 LOAD_FAST                2 (next)
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (next)
             12 LOAD_CONST               0 (None)
             14 RETURN_VALUE

Disassembly of <code object Solution at 0x7f09fbe45450, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f09fbe453a0, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f09fbe453a0, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               8 (is)
             16 POP_JUMP_IF_FALSE       22

  9     >>   18 LOAD_FAST                1 (head)
             20 RETURN_VALUE

 10     >>   22 LOAD_FAST                1 (head)
             24 LOAD_ATTR                0 (next)
             26 LOAD_CONST               0 (None)
             28 COMPARE_OP               9 (is not)
             30 POP_JUMP_IF_FALSE       74

 11          32 LOAD_CONST               0 (None)
             34 STORE_FAST               2 (last)

 12          36 LOAD_FAST                1 (head)
             38 STORE_FAST               3 (point)

 14     >>   40 LOAD_FAST                3 (point)
             42 LOAD_CONST               0 (None)
             44 COMPARE_OP               9 (is not)
             46 POP_JUMP_IF_FALSE       70

 15          48 LOAD_FAST                2 (last)
             50 LOAD_FAST                3 (point)
             52 LOAD_ATTR                0 (next)
             54 LOAD_FAST                3 (point)
             56 ROT_THREE
             58 ROT_TWO
             60 LOAD_FAST                3 (point)
             62 STORE_ATTR               0 (next)
             64 STORE_FAST               3 (point)
             66 STORE_FAST               2 (last)
             68 JUMP_ABSOLUTE           40

 17     >>   70 LOAD_FAST                2 (last)
             72 RETURN_VALUE
        >>   74 LOAD_CONST               0 (None)
             76 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        v_head = head
        prev = None
        while v_head:
            temp = v_head.next
            v_head.next = prev
            prev = v_head
            v_head = temp
        return prev
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f29dd9553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f29dd9553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f29dd9552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f29dd9552f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (v_head)

  4           4 LOAD_CONST               0 (None)
              6 STORE_FAST               3 (prev)

  5     >>    8 LOAD_FAST                2 (v_head)
             10 POP_JUMP_IF_FALSE       34

  6          12 LOAD_FAST                2 (v_head)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               4 (temp)

  7          18 LOAD_FAST                3 (prev)
             20 LOAD_FAST                2 (v_head)
             22 STORE_ATTR               0 (next)

  8          24 LOAD_FAST                2 (v_head)
             26 STORE_FAST               3 (prev)

  9          28 LOAD_FAST                4 (temp)
             30 STORE_FAST               2 (v_head)
             32 JUMP_ABSOLUTE            8

 10     >>   34 LOAD_FAST                3 (prev)
             36 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None or head.next is None:
            return head
        p = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return p

","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f698cb852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f698cb852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f698cb85240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f698cb85240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               8 (is)
             16 POP_JUMP_IF_FALSE       22

  4     >>   18 LOAD_FAST                1 (head)
             20 RETURN_VALUE

  5     >>   22 LOAD_FAST                0 (self)
             24 LOAD_METHOD              1 (reverseList)
             26 LOAD_FAST                1 (head)
             28 LOAD_ATTR                0 (next)
             30 CALL_METHOD              1
             32 STORE_FAST               2 (p)

  6          34 LOAD_FAST                1 (head)
             36 LOAD_FAST                1 (head)
             38 LOAD_ATTR                0 (next)
             40 STORE_ATTR               0 (next)

  7          42 LOAD_CONST               0 (None)
             44 LOAD_FAST                1 (head)
             46 STORE_ATTR               0 (next)

  8          48 LOAD_FAST                2 (p)
             50 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head:
            v_head = head        
            while v_head.next:
                temp = v_head.next
                v_head.next = v_head.next.next
                temp.next = head
                head = temp
            return head
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f14f48b53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f14f48b53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f14f48b52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f14f48b52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_FALSE       46

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               2 (v_head)

  5     >>    8 LOAD_FAST                2 (v_head)
             10 LOAD_ATTR                0 (next)
             12 POP_JUMP_IF_FALSE       42

  6          14 LOAD_FAST                2 (v_head)
             16 LOAD_ATTR                0 (next)
             18 STORE_FAST               3 (temp)

  7          20 LOAD_FAST                2 (v_head)
             22 LOAD_ATTR                0 (next)
             24 LOAD_ATTR                0 (next)
             26 LOAD_FAST                2 (v_head)
             28 STORE_ATTR               0 (next)

  8          30 LOAD_FAST                1 (head)
             32 LOAD_FAST                3 (temp)
             34 STORE_ATTR               0 (next)

  9          36 LOAD_FAST                3 (temp)
             38 STORE_FAST               1 (head)
             40 JUMP_ABSOLUTE            8

 10     >>   42 LOAD_FAST                1 (head)
             44 RETURN_VALUE
        >>   46 LOAD_CONST               0 (None)
             48 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head:
            return head
        
        nums = []
        curr = head
        while curr:
            nums.append(curr.val)
            curr = curr.next
            
        nums[:] = nums[::-1]
        head = ListNode()
        curr = head
        for x in nums:
            curr.next = ListNode(x)
            curr = curr.next
            
        return head.next
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc46ac05240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc46ac05240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fc46ac052f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fc46ac052f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_FAST                1 (head)
              6 RETURN_VALUE

  6     >>    8 BUILD_LIST               0
             10 STORE_FAST               2 (nums)

  7          12 LOAD_FAST                1 (head)
             14 STORE_FAST               3 (curr)

  8     >>   16 LOAD_FAST                3 (curr)
             18 POP_JUMP_IF_FALSE       40

  9          20 LOAD_FAST                2 (nums)
             22 LOAD_METHOD              0 (append)
             24 LOAD_FAST                3 (curr)
             26 LOAD_ATTR                1 (val)
             28 CALL_METHOD              1
             30 POP_TOP

 10          32 LOAD_FAST                3 (curr)
             34 LOAD_ATTR                2 (next)
             36 STORE_FAST               3 (curr)
             38 JUMP_ABSOLUTE           16

 12     >>   40 LOAD_FAST                2 (nums)
             42 LOAD_CONST               0 (None)
             44 LOAD_CONST               0 (None)
             46 LOAD_CONST               1 (-1)
             48 BUILD_SLICE              3
             50 BINARY_SUBSCR
             52 LOAD_FAST                2 (nums)
             54 LOAD_CONST               0 (None)
             56 LOAD_CONST               0 (None)
             58 BUILD_SLICE              2
             60 STORE_SUBSCR

 13          62 LOAD_GLOBAL              3 (ListNode)
             64 CALL_FUNCTION            0
             66 STORE_FAST               1 (head)

 14          68 LOAD_FAST                1 (head)
             70 STORE_FAST               3 (curr)

 15          72 LOAD_FAST                2 (nums)
             74 GET_ITER
        >>   76 FOR_ITER                20 (to 98)
             78 STORE_FAST               4 (x)

 16          80 LOAD_GLOBAL              3 (ListNode)
             82 LOAD_FAST                4 (x)
             84 CALL_FUNCTION            1
             86 LOAD_FAST                3 (curr)
             88 STORE_ATTR               2 (next)

 17          90 LOAD_FAST                3 (curr)
             92 LOAD_ATTR                2 (next)
             94 STORE_FAST               3 (curr)
             96 JUMP_ABSOLUTE           76

 19     >>   98 LOAD_FAST                1 (head)
            100 LOAD_ATTR                2 (next)
            102 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head:
            return head
        
        curr = head        
        while curr.next:
            temp = curr.next
            curr.next = temp.next
            temp.next = head
            head = temp
            
        return head
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f5d4f4652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f5d4f4652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f5d4f465240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f5d4f465240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_FAST                1 (head)
              6 RETURN_VALUE

  6     >>    8 LOAD_FAST                1 (head)
             10 STORE_FAST               2 (curr)

  7     >>   12 LOAD_FAST                2 (curr)
             14 LOAD_ATTR                0 (next)
             16 POP_JUMP_IF_FALSE       44

  8          18 LOAD_FAST                2 (curr)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               3 (temp)

  9          24 LOAD_FAST                3 (temp)
             26 LOAD_ATTR                0 (next)
             28 LOAD_FAST                2 (curr)
             30 STORE_ATTR               0 (next)

 10          32 LOAD_FAST                1 (head)
             34 LOAD_FAST                3 (temp)
             36 STORE_ATTR               0 (next)

 11          38 LOAD_FAST                3 (temp)
             40 STORE_FAST               1 (head)
             42 JUMP_ABSOLUTE           12

 13     >>   44 LOAD_FAST                1 (head)
             46 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode, prev=None) -> ListNode:
            prev , curr = None , head
            while curr is not None:
                next = curr.next
                curr.next = prev
                prev = curr
                curr = next
            
            head = prev
            return head
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f42fdc552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f42fdc552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               5 ((None,))
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_NAME                3 (ListNode)
             14 LOAD_CONST               2 (('head', 'return'))
             16 BUILD_CONST_KEY_MAP      2
             18 LOAD_CONST               3 (<code object reverseList at 0x7f42fdc55240, file ""<ast>"", line 2>)
             20 LOAD_CONST               4 ('Solution.reverseList')
             22 MAKE_FUNCTION            5 (defaults, annotations)
             24 STORE_NAME               4 (reverseList)
             26 LOAD_CONST               1 (None)
             28 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f42fdc55240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               0 (None)
              2 LOAD_FAST                1 (head)
              4 ROT_TWO
              6 STORE_FAST               2 (prev)
              8 STORE_FAST               3 (curr)

  4     >>   10 LOAD_FAST                3 (curr)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               9 (is not)
             16 POP_JUMP_IF_FALSE       40

  5          18 LOAD_FAST                3 (curr)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               4 (next)

  6          24 LOAD_FAST                2 (prev)
             26 LOAD_FAST                3 (curr)
             28 STORE_ATTR               0 (next)

  7          30 LOAD_FAST                3 (curr)
             32 STORE_FAST               2 (prev)

  8          34 LOAD_FAST                4 (next)
             36 STORE_FAST               3 (curr)
             38 JUMP_ABSOLUTE           10

 10     >>   40 LOAD_FAST                2 (prev)
             42 STORE_FAST               1 (head)

 11          44 LOAD_FAST                1 (head)
             46 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode, prev=None) -> ListNode:
            if head is None or head.next is None:
                return head
            smallHead = self.reverseList(head.next)
            tail = head.next
            tail.next = head
            head.next = None
            return smallHead
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f93ff9a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f93ff9a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               5 ((None,))
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_NAME                3 (ListNode)
             14 LOAD_CONST               2 (('head', 'return'))
             16 BUILD_CONST_KEY_MAP      2
             18 LOAD_CONST               3 (<code object reverseList at 0x7f93ff9a5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               4 ('Solution.reverseList')
             22 MAKE_FUNCTION            5 (defaults, annotations)
             24 STORE_NAME               4 (reverseList)
             26 LOAD_CONST               1 (None)
             28 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f93ff9a5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               8 (is)
             16 POP_JUMP_IF_FALSE       22

  4     >>   18 LOAD_FAST                1 (head)
             20 RETURN_VALUE

  5     >>   22 LOAD_FAST                0 (self)
             24 LOAD_METHOD              1 (reverseList)
             26 LOAD_FAST                1 (head)
             28 LOAD_ATTR                0 (next)
             30 CALL_METHOD              1
             32 STORE_FAST               3 (smallHead)

  6          34 LOAD_FAST                1 (head)
             36 LOAD_ATTR                0 (next)
             38 STORE_FAST               4 (tail)

  7          40 LOAD_FAST                1 (head)
             42 LOAD_FAST                4 (tail)
             44 STORE_ATTR               0 (next)

  8          46 LOAD_CONST               0 (None)
             48 LOAD_FAST                1 (head)
             50 STORE_ATTR               0 (next)

  9          52 LOAD_FAST                3 (smallHead)
             54 RETURN_VALUE
None
"
reverseList,"class Solution:
	def reverseList(self, head:ListNode)->ListNode:
		""""""
		:type head: ListNode
		:rtype: ListNode
		""""""

		p1, p2 = None, head

		while p2 is not None:
			p3 = p2.next
			p2.next = p1
			p1 = p2
			p2 = p3
		return p1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f52c75b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f52c75b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f52c75b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f52c75b5240, file ""<ast>"", line 2>:
  8           0 LOAD_CONST               1 (None)
              2 LOAD_FAST                1 (head)
              4 ROT_TWO
              6 STORE_FAST               2 (p1)
              8 STORE_FAST               3 (p2)

 10     >>   10 LOAD_FAST                3 (p2)
             12 LOAD_CONST               1 (None)
             14 COMPARE_OP               9 (is not)
             16 POP_JUMP_IF_FALSE       40

 11          18 LOAD_FAST                3 (p2)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               4 (p3)

 12          24 LOAD_FAST                2 (p1)
             26 LOAD_FAST                3 (p2)
             28 STORE_ATTR               0 (next)

 13          30 LOAD_FAST                3 (p2)
             32 STORE_FAST               2 (p1)

 14          34 LOAD_FAST                4 (p3)
             36 STORE_FAST               3 (p2)
             38 JUMP_ABSOLUTE           10

 15     >>   40 LOAD_FAST                2 (p1)
             42 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head:
            return head
        first = head
        second = first.next
        while(second):
            temp = second.next
            second.next = first
            first = second
            second = temp
            
        head.next = None
        head = first
        return head
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f79957d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f79957d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f79957d5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f79957d5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_FAST                1 (head)
              6 RETURN_VALUE

  5     >>    8 LOAD_FAST                1 (head)
             10 STORE_FAST               2 (first)

  6          12 LOAD_FAST                2 (first)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               3 (second)

  7     >>   18 LOAD_FAST                3 (second)
             20 POP_JUMP_IF_FALSE       44

  8          22 LOAD_FAST                3 (second)
             24 LOAD_ATTR                0 (next)
             26 STORE_FAST               4 (temp)

  9          28 LOAD_FAST                2 (first)
             30 LOAD_FAST                3 (second)
             32 STORE_ATTR               0 (next)

 10          34 LOAD_FAST                3 (second)
             36 STORE_FAST               2 (first)

 11          38 LOAD_FAST                4 (temp)
             40 STORE_FAST               3 (second)
             42 JUMP_ABSOLUTE           18

 13     >>   44 LOAD_CONST               0 (None)
             46 LOAD_FAST                1 (head)
             48 STORE_ATTR               0 (next)

 14          50 LOAD_FAST                2 (first)
             52 STORE_FAST               1 (head)

 15          54 LOAD_FAST                1 (head)
             56 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = prev
            cur, prev = temp, cur
        return prev
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fda0a1b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fda0a1b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fda0a1b5240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fda0a1b5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               0 (None)
              2 STORE_FAST               2 (prev)

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (cur)

  5     >>    8 LOAD_FAST                3 (cur)
             10 POP_JUMP_IF_FALSE       36

  6          12 LOAD_FAST                3 (cur)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               4 (temp)

  7          18 LOAD_FAST                2 (prev)
             20 LOAD_FAST                3 (cur)
             22 STORE_ATTR               0 (next)

  8          24 LOAD_FAST                4 (temp)
             26 LOAD_FAST                3 (cur)
             28 ROT_TWO
             30 STORE_FAST               3 (cur)
             32 STORE_FAST               2 (prev)
             34 JUMP_ABSOLUTE            8

  9     >>   36 LOAD_FAST                2 (prev)
             38 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        ## RC ##
        ## APPROACH : ITERATIVE ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(1) ##
        
        prev = None             # None
        curr = head             # curr always holds elements left to be reversed, (initially it is all elements i.e head)
        while(curr):
            temp = curr.next    # copy all expect 1st element 
            curr.next = prev    # replace all with previous, makes list reversed.
            prev = curr         # copy current reversed list into prev. prev( always holds reversed previous linked list)
            curr = temp
        return prev
        
        ## APPROACH : RECURSIVE ##
		## TIME COMPLEXITY : O(N) ##
		## SPACE COMPLEXITY : O(N) ##

        def helper(prev, curr):
            if not curr:
                return prev
            temp = curr.next
            curr.next = prev
            return helper(curr, temp)
        return helper(None, head)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb5ec5155b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb5ec5155b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fb5ec515500, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fb5ec515500, file ""<ast>"", line 2>:
  8           0 LOAD_CONST               0 (None)
              2 STORE_FAST               2 (prev)

  9           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (curr)

 10     >>    8 LOAD_FAST                3 (curr)
             10 POP_JUMP_IF_FALSE       34

 11          12 LOAD_FAST                3 (curr)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               4 (temp)

 12          18 LOAD_FAST                2 (prev)
             20 LOAD_FAST                3 (curr)
             22 STORE_ATTR               0 (next)

 13          24 LOAD_FAST                3 (curr)
             26 STORE_FAST               2 (prev)

 14          28 LOAD_FAST                4 (temp)
             30 STORE_FAST               3 (curr)
             32 JUMP_ABSOLUTE            8

 15     >>   34 LOAD_FAST                2 (prev)
             36 RETURN_VALUE

Disassembly of <code object helper at 0x7fb5ec515450, file ""<ast>"", line 21>:
 22           0 LOAD_FAST                1 (curr)
              2 POP_JUMP_IF_TRUE         8

 23           4 LOAD_FAST                0 (prev)
              6 RETURN_VALUE

 24     >>    8 LOAD_FAST                1 (curr)
             10 LOAD_ATTR                0 (next)
             12 STORE_FAST               2 (temp)

 25          14 LOAD_FAST                0 (prev)
             16 LOAD_FAST                1 (curr)
             18 STORE_ATTR               0 (next)

 26          20 LOAD_DEREF               0 (helper)
             22 LOAD_FAST                1 (curr)
             24 LOAD_FAST                2 (temp)
             26 CALL_FUNCTION            2
             28 RETURN_VALUE
None
"
reverseList,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head:
            return None
        if not head.next:
            return head
        
        root = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return root
","  6           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd4515552f0, file ""<ast>"", line 6>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd4515552f0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fd451555240, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fd451555240, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  9           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

 10     >>    8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 POP_JUMP_IF_TRUE        18

 11          14 LOAD_FAST                1 (head)
             16 RETURN_VALUE

 13     >>   18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              1 (reverseList)
             22 LOAD_FAST                1 (head)
             24 LOAD_ATTR                0 (next)
             26 CALL_METHOD              1
             28 STORE_FAST               2 (root)

 14          30 LOAD_FAST                1 (head)
             32 LOAD_FAST                1 (head)
             34 LOAD_ATTR                0 (next)
             36 STORE_ATTR               0 (next)

 15          38 LOAD_CONST               0 (None)
             40 LOAD_FAST                1 (head)
             42 STORE_ATTR               0 (next)

 16          44 LOAD_FAST                2 (root)
             46 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev = None
        current = head
        while current is not None:
            n = current.next
            current.next = prev
            prev = current
            current = n
        head = prev
        return head
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fdbcb8352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fdbcb8352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fdbcb835240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fdbcb835240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               0 (None)
              2 STORE_FAST               2 (prev)

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (current)

  5     >>    8 LOAD_FAST                3 (current)
             10 LOAD_CONST               0 (None)
             12 COMPARE_OP               9 (is not)
             14 POP_JUMP_IF_FALSE       38

  6          16 LOAD_FAST                3 (current)
             18 LOAD_ATTR                0 (next)
             20 STORE_FAST               4 (n)

  7          22 LOAD_FAST                2 (prev)
             24 LOAD_FAST                3 (current)
             26 STORE_ATTR               0 (next)

  8          28 LOAD_FAST                3 (current)
             30 STORE_FAST               2 (prev)

  9          32 LOAD_FAST                4 (n)
             34 STORE_FAST               3 (current)
             36 JUMP_ABSOLUTE            8

 10     >>   38 LOAD_FAST                2 (prev)
             40 STORE_FAST               1 (head)

 11          42 LOAD_FAST                1 (head)
             44 RETURN_VALUE
None
"
reverseList,"class Solution:
	def reverseList(self, head: ListNode) -> ListNode:
		if not head:
			return None
		node = None
		while head:
			n = ListNode(head.val)
			n.next = node
			node = n
			head = head.next
		return node
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f251b3252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f251b3252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f251b325240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f251b325240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  5     >>    8 LOAD_CONST               0 (None)
             10 STORE_FAST               2 (node)

  6     >>   12 LOAD_FAST                1 (head)
             14 POP_JUMP_IF_FALSE       44

  7          16 LOAD_GLOBAL              0 (ListNode)
             18 LOAD_FAST                1 (head)
             20 LOAD_ATTR                1 (val)
             22 CALL_FUNCTION            1
             24 STORE_FAST               3 (n)

  8          26 LOAD_FAST                2 (node)
             28 LOAD_FAST                3 (n)
             30 STORE_ATTR               2 (next)

  9          32 LOAD_FAST                3 (n)
             34 STORE_FAST               2 (node)

 10          36 LOAD_FAST                1 (head)
             38 LOAD_ATTR                2 (next)
             40 STORE_FAST               1 (head)
             42 JUMP_ABSOLUTE           12

 11     >>   44 LOAD_FAST                2 (node)
             46 RETURN_VALUE
None
"
reverseList,"class Solution:
	def reverseList(self, head: ListNode) -> ListNode:
		if not head:
			return None
		pre = None

		while head:
			next_node = head.next
			head.next = pre
			pre = head
			head = next_node
		return pre
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f80deb952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f80deb952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f80deb95240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f80deb95240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               0 (None)
              6 RETURN_VALUE

  5     >>    8 LOAD_CONST               0 (None)
             10 STORE_FAST               2 (pre)

  7     >>   12 LOAD_FAST                1 (head)
             14 POP_JUMP_IF_FALSE       38

  8          16 LOAD_FAST                1 (head)
             18 LOAD_ATTR                0 (next)
             20 STORE_FAST               3 (next_node)

  9          22 LOAD_FAST                2 (pre)
             24 LOAD_FAST                1 (head)
             26 STORE_ATTR               0 (next)

 10          28 LOAD_FAST                1 (head)
             30 STORE_FAST               2 (pre)

 11          32 LOAD_FAST                3 (next_node)
             34 STORE_FAST               1 (head)
             36 JUMP_ABSOLUTE           12

 12     >>   38 LOAD_FAST                2 (pre)
             40 RETURN_VALUE
None
"
reverseList,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = Noneb=[]
class Solution:
    
    def reverseList(self, head: ListNode) -> ListNode:
    
        prev:ListNode = None #created an Empty Node
        curr = head # The Head Node is now current(curr) node
        while curr!= None: #Iterate until the Node is None
            nexttemp: ListNode = curr.next #created a temp Node to remember the next Node
            curr.next = prev # assigning the next Node of current as Prev (for first iteration it will be None)
            prev = curr # Now the prev become current
            curr = nexttemp # current become the node which we stored in the temp Node(nexttemp)
        return prev
            
","  6           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f1ece2c52f0, file ""<ast>"", line 6>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1ece2c52f0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  8           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f1ece2c5240, file ""<ast>"", line 8>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f1ece2c5240, file ""<ast>"", line 8>:
 10           0 LOAD_CONST               0 (None)
              2 STORE_FAST               2 (prev)

 11           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (curr)

 12     >>    8 LOAD_FAST                3 (curr)
             10 LOAD_CONST               0 (None)
             12 COMPARE_OP               3 (!=)
             14 POP_JUMP_IF_FALSE       38

 13          16 LOAD_FAST                3 (curr)
             18 LOAD_ATTR                0 (next)
             20 STORE_FAST               4 (nexttemp)

 14          22 LOAD_FAST                2 (prev)
             24 LOAD_FAST                3 (curr)
             26 STORE_ATTR               0 (next)

 15          28 LOAD_FAST                3 (curr)
             30 STORE_FAST               2 (prev)

 16          32 LOAD_FAST                4 (nexttemp)
             34 STORE_FAST               3 (curr)
             36 JUMP_ABSOLUTE            8

 17     >>   38 LOAD_FAST                2 (prev)
             40 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        first = head
        if (not first) or (not first.next): return first

        first.next, curr, prev = None, first.next, first
        
        #1. Reverse  (curr.next = prev)
        #2. Update Current
        #3. Update previous
        
        while curr.next:
            curr.next, curr, prev = prev, curr.next, curr

        curr.next = prev
        return curr
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f4a72b752f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f4a72b752f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f4a72b75240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f4a72b75240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (first)

  4           4 LOAD_FAST                2 (first)
              6 POP_JUMP_IF_FALSE       14
              8 LOAD_FAST                2 (first)
             10 LOAD_ATTR                0 (next)
             12 POP_JUMP_IF_TRUE        18
        >>   14 LOAD_FAST                2 (first)
             16 RETURN_VALUE

  6     >>   18 LOAD_CONST               0 (None)
             20 LOAD_FAST                2 (first)
             22 LOAD_ATTR                0 (next)
             24 LOAD_FAST                2 (first)
             26 ROT_THREE
             28 ROT_TWO
             30 LOAD_FAST                2 (first)
             32 STORE_ATTR               0 (next)
             34 STORE_FAST               3 (curr)
             36 STORE_FAST               4 (prev)

 12     >>   38 LOAD_FAST                3 (curr)
             40 LOAD_ATTR                0 (next)
             42 POP_JUMP_IF_FALSE       66

 13          44 LOAD_FAST                4 (prev)
             46 LOAD_FAST                3 (curr)
             48 LOAD_ATTR                0 (next)
             50 LOAD_FAST                3 (curr)
             52 ROT_THREE
             54 ROT_TWO
             56 LOAD_FAST                3 (curr)
             58 STORE_ATTR               0 (next)
             60 STORE_FAST               3 (curr)
             62 STORE_FAST               4 (prev)
             64 JUMP_ABSOLUTE           38

 15     >>   66 LOAD_FAST                4 (prev)
             68 LOAD_FAST                3 (curr)
             70 STORE_ATTR               0 (next)

 16          72 LOAD_FAST                3 (curr)
             74 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        curr = head
        while curr:
            temp = curr.next #取出原list里的下一个元素，防止弄丢

            curr.next = pre #将当前指针的下一个指向之前的元素，在第一次运行时之前的元素为None
            pre = curr #这一次的当前元素就是下一次的之前的元素
        
            curr = temp #把指向当前元素的指针指到最开始存到temp里的下一个元素上
        return pre #跳出循环时，curr是none，上一个循环里的curr即pre才是新链表的头
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f43a25b53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f43a25b53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f43a25b52f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f43a25b52f0, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               0 (None)
              2 STORE_FAST               2 (pre)

  4           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (curr)

  5     >>    8 LOAD_FAST                3 (curr)
             10 POP_JUMP_IF_FALSE       34

  6          12 LOAD_FAST                3 (curr)
             14 LOAD_ATTR                0 (next)
             16 STORE_FAST               4 (temp)

  8          18 LOAD_FAST                2 (pre)
             20 LOAD_FAST                3 (curr)
             22 STORE_ATTR               0 (next)

  9          24 LOAD_FAST                3 (curr)
             26 STORE_FAST               2 (pre)

 11          28 LOAD_FAST                4 (temp)
             30 STORE_FAST               3 (curr)
             32 JUMP_ABSOLUTE            8

 12     >>   34 LOAD_FAST                2 (pre)
             36 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        current = head
        previous = None
        nextNode = None

        while current:
            nextNode = current.next
            current.next = previous
            
            previous = current
            current = nextNode

        return previous","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f21921553a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f21921553a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f21921552f0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f21921552f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (head)
              2 STORE_FAST               2 (current)

  4           4 LOAD_CONST               0 (None)
              6 STORE_FAST               3 (previous)

  5           8 LOAD_CONST               0 (None)
             10 STORE_FAST               4 (nextNode)

  7     >>   12 LOAD_FAST                2 (current)
             14 POP_JUMP_IF_FALSE       38

  8          16 LOAD_FAST                2 (current)
             18 LOAD_ATTR                0 (next)
             20 STORE_FAST               4 (nextNode)

  9          22 LOAD_FAST                3 (previous)
             24 LOAD_FAST                2 (current)
             26 STORE_ATTR               0 (next)

 11          28 LOAD_FAST                2 (current)
             30 STORE_FAST               3 (previous)

 12          32 LOAD_FAST                4 (nextNode)
             34 STORE_FAST               2 (current)
             36 JUMP_ABSOLUTE           12

 14     >>   38 LOAD_FAST                3 (previous)
             40 RETURN_VALUE
None
"
reverseList,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None or head.next is None:
            return head
        
        curr_node = head
        
        next_node = head.next
        
        prev_node = None
        
        while True:
            
            curr_node.next = prev_node
            
            if next_node is None:
                head = curr_node
                break
            
            prev_node = curr_node
            
            curr_node = next_node
            
            next_node = next_node.next
            
        
        return head
","  6           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff39de852f0, file ""<ast>"", line 6>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff39de852f0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7ff39de85240, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7ff39de85240, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               8 (is)
             16 POP_JUMP_IF_FALSE       22

  9     >>   18 LOAD_FAST                1 (head)
             20 RETURN_VALUE

 11     >>   22 LOAD_FAST                1 (head)
             24 STORE_FAST               2 (curr_node)

 13          26 LOAD_FAST                1 (head)
             28 LOAD_ATTR                0 (next)
             30 STORE_FAST               3 (next_node)

 15          32 LOAD_CONST               0 (None)
             34 STORE_FAST               4 (prev_node)

 19     >>   36 LOAD_FAST                4 (prev_node)
             38 LOAD_FAST                2 (curr_node)
             40 STORE_ATTR               0 (next)

 21          42 LOAD_FAST                3 (next_node)
             44 LOAD_CONST               0 (None)
             46 COMPARE_OP               8 (is)
             48 POP_JUMP_IF_FALSE       56

 22          50 LOAD_FAST                2 (curr_node)
             52 STORE_FAST               1 (head)

 23          54 JUMP_ABSOLUTE           72

 25     >>   56 LOAD_FAST                2 (curr_node)
             58 STORE_FAST               4 (prev_node)

 27          60 LOAD_FAST                3 (next_node)
             62 STORE_FAST               2 (curr_node)

 29          64 LOAD_FAST                3 (next_node)
             66 LOAD_ATTR                0 (next)
             68 STORE_FAST               3 (next_node)
             70 JUMP_ABSOLUTE           36

 32     >>   72 LOAD_FAST                1 (head)
             74 RETURN_VALUE
None
"
reverseList,"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head:ListNode)->ListNode:
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""
		
		# if sll is empty or ends after one
        if head is None or head.next is None:
		    #then return
            return head
        
		#previous node is set to none
		#current node is set to head
		#next node is set to current.next
        p_node, c_node, n_node = None, head, head.next
        
		#while next node is not equal to none
        while n_node is not None:
		
		    # current nodes pointer is set to the previous node
            c_node.next = p_node
			# previous node is set to current node
            p_node = c_node
			#current node is now set to next node
            c_node = n_node
			#next node is set to current node .next
            n_node = c_node.next
           
		#finish final iteration by redirecting last pointer
        c_node.next = p_node
		#declare new head
        head = c_node
		
		#return head of sll
        return head
","  6           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fca24d352f0, file ""<ast>"", line 6>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fca24d352f0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7fca24d35240, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7fca24d35240, file ""<ast>"", line 7>:
 14           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               1 (None)
              4 COMPARE_OP               8 (is)
              6 POP_JUMP_IF_TRUE        18
              8 LOAD_FAST                1 (head)
             10 LOAD_ATTR                0 (next)
             12 LOAD_CONST               1 (None)
             14 COMPARE_OP               8 (is)
             16 POP_JUMP_IF_FALSE       22

 16     >>   18 LOAD_FAST                1 (head)
             20 RETURN_VALUE

 21     >>   22 LOAD_CONST               1 (None)
             24 LOAD_FAST                1 (head)
             26 LOAD_FAST                1 (head)
             28 LOAD_ATTR                0 (next)
             30 ROT_THREE
             32 ROT_TWO
             34 STORE_FAST               2 (p_node)
             36 STORE_FAST               3 (c_node)
             38 STORE_FAST               4 (n_node)

 24     >>   40 LOAD_FAST                4 (n_node)
             42 LOAD_CONST               1 (None)
             44 COMPARE_OP               9 (is not)
             46 POP_JUMP_IF_FALSE       70

 27          48 LOAD_FAST                2 (p_node)
             50 LOAD_FAST                3 (c_node)
             52 STORE_ATTR               0 (next)

 29          54 LOAD_FAST                3 (c_node)
             56 STORE_FAST               2 (p_node)

 31          58 LOAD_FAST                4 (n_node)
             60 STORE_FAST               3 (c_node)

 33          62 LOAD_FAST                3 (c_node)
             64 LOAD_ATTR                0 (next)
             66 STORE_FAST               4 (n_node)
             68 JUMP_ABSOLUTE           40

 36     >>   70 LOAD_FAST                2 (p_node)
             72 LOAD_FAST                3 (c_node)
             74 STORE_ATTR               0 (next)

 38          76 LOAD_FAST                3 (c_node)
             78 STORE_FAST               1 (head)

 41          80 LOAD_FAST                1 (head)
             82 RETURN_VALUE
None
"
reverseList,"# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head:ListNode)->ListNode:
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""
        node_values = []
        
        current_node = head
        
        while current_node is not None:
            node_values.insert(0, current_node.val)
            current_node = current_node.next
        
        c_n = head
        idx = 0
        
        while c_n is not None:
            c_n.val = node_values[idx]
            c_n = c_n.next
            idx+=1
                
        return head
","  6           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f19633052f0, file ""<ast>"", line 6>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f19633052f0, file ""<ast>"", line 6>:
  6           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  7           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f1963305240, file ""<ast>"", line 7>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f1963305240, file ""<ast>"", line 7>:
 12           0 BUILD_LIST               0
              2 STORE_FAST               2 (node_values)

 14           4 LOAD_FAST                1 (head)
              6 STORE_FAST               3 (current_node)

 16     >>    8 LOAD_FAST                3 (current_node)
             10 LOAD_CONST               1 (None)
             12 COMPARE_OP               9 (is not)
             14 POP_JUMP_IF_FALSE       38

 17          16 LOAD_FAST                2 (node_values)
             18 LOAD_METHOD              0 (insert)
             20 LOAD_CONST               2 (0)
             22 LOAD_FAST                3 (current_node)
             24 LOAD_ATTR                1 (val)
             26 CALL_METHOD              2
             28 POP_TOP

 18          30 LOAD_FAST                3 (current_node)
             32 LOAD_ATTR                2 (next)
             34 STORE_FAST               3 (current_node)
             36 JUMP_ABSOLUTE            8

 20     >>   38 LOAD_FAST                1 (head)
             40 STORE_FAST               4 (c_n)

 21          42 LOAD_CONST               2 (0)
             44 STORE_FAST               5 (idx)

 23     >>   46 LOAD_FAST                4 (c_n)
             48 LOAD_CONST               1 (None)
             50 COMPARE_OP               9 (is not)
             52 POP_JUMP_IF_FALSE       80

 24          54 LOAD_FAST                2 (node_values)
             56 LOAD_FAST                5 (idx)
             58 BINARY_SUBSCR
             60 LOAD_FAST                4 (c_n)
             62 STORE_ATTR               1 (val)

 25          64 LOAD_FAST                4 (c_n)
             66 LOAD_ATTR                2 (next)
             68 STORE_FAST               4 (c_n)

 26          70 LOAD_FAST                5 (idx)
             72 LOAD_CONST               3 (1)
             74 INPLACE_ADD
             76 STORE_FAST               5 (idx)
             78 JUMP_ABSOLUTE           46

 28     >>   80 LOAD_FAST                1 (head)
             82 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        
        p1, p2 = None, head
        while p2 is not None:
            p3 = p2.next
            p2.next = p1
            p1 = p2
            p2 = p3
            
        return p1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f338b1052f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f338b1052f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f338b105240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f338b105240, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               0 (None)
              2 LOAD_FAST                1 (head)
              4 ROT_TWO
              6 STORE_FAST               2 (p1)
              8 STORE_FAST               3 (p2)

  5     >>   10 LOAD_FAST                3 (p2)
             12 LOAD_CONST               0 (None)
             14 COMPARE_OP               9 (is not)
             16 POP_JUMP_IF_FALSE       40

  6          18 LOAD_FAST                3 (p2)
             20 LOAD_ATTR                0 (next)
             22 STORE_FAST               4 (p3)

  7          24 LOAD_FAST                2 (p1)
             26 LOAD_FAST                3 (p2)
             28 STORE_ATTR               0 (next)

  8          30 LOAD_FAST                3 (p2)
             32 STORE_FAST               2 (p1)

  9          34 LOAD_FAST                4 (p3)
             36 STORE_FAST               3 (p2)
             38 JUMP_ABSOLUTE           10

 11     >>   40 LOAD_FAST                2 (p1)
             42 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        
        node, prev = head, None
        
        while node:
            next, node.next = node.next, prev
            prev, node = node, next
            
        return prev
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6653d252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6653d252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f6653d25240, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f6653d25240, file ""<ast>"", line 2>:
  4           0 LOAD_FAST                1 (head)
              2 LOAD_CONST               0 (None)
              4 ROT_TWO
              6 STORE_FAST               2 (node)
              8 STORE_FAST               3 (prev)

  6     >>   10 LOAD_FAST                2 (node)
             12 POP_JUMP_IF_FALSE       40

  7          14 LOAD_FAST                2 (node)
             16 LOAD_ATTR                0 (next)
             18 LOAD_FAST                3 (prev)
             20 ROT_TWO
             22 STORE_FAST               4 (next)
             24 LOAD_FAST                2 (node)
             26 STORE_ATTR               0 (next)

  8          28 LOAD_FAST                2 (node)
             30 LOAD_FAST                4 (next)
             32 ROT_TWO
             34 STORE_FAST               3 (prev)
             36 STORE_FAST               2 (node)
             38 JUMP_ABSOLUTE           10

 10     >>   40 LOAD_FAST                3 (prev)
             42 RETURN_VALUE
None
"
reverseList,"class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        def reverse(node: ListNode, prev: ListNode = None) -> ListNode:
            
            if not node:
                return prev
            
            next, node.next = node.next, prev
            
            return reverse(next,node)
            
        return reverse(head)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f15540655b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f15540655b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (ListNode)
             10 LOAD_NAME                3 (ListNode)
             12 LOAD_CONST               1 (('head', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object reverseList at 0x7f1554065500, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.reverseList')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (reverseList)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object reverseList at 0x7f1554065500, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               4 ((None,))
              2 LOAD_GLOBAL              0 (ListNode)
              4 LOAD_GLOBAL              0 (ListNode)
              6 LOAD_GLOBAL              0 (ListNode)
              8 LOAD_CONST               1 (('node', 'prev', 'return'))
             10 BUILD_CONST_KEY_MAP      3
             12 LOAD_CLOSURE             0 (reverse)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               2 (<code object reverse at 0x7f1554065450, file ""<ast>"", line 3>)
             18 LOAD_CONST               3 ('Solution.reverseList.<locals>.reverse')
             20 MAKE_FUNCTION           13 (defaults, annotations, closure)
             22 STORE_DEREF              0 (reverse)

 12          24 LOAD_DEREF               0 (reverse)
             26 LOAD_FAST                1 (head)
             28 CALL_FUNCTION            1
             30 RETURN_VALUE

Disassembly of <code object reverse at 0x7f1554065450, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                0 (node)
              2 POP_JUMP_IF_TRUE         8

  6           4 LOAD_FAST                1 (prev)
              6 RETURN_VALUE

  8     >>    8 LOAD_FAST                0 (node)
             10 LOAD_ATTR                0 (next)
             12 LOAD_FAST                1 (prev)
             14 ROT_TWO
             16 STORE_FAST               2 (next)
             18 LOAD_FAST                0 (node)
             20 STORE_ATTR               0 (next)

 10          22 LOAD_DEREF               0 (reverse)
             24 LOAD_FAST                2 (next)
             26 LOAD_FAST                0 (node)
             28 CALL_FUNCTION            2
             30 RETURN_VALUE
None
"
rotate,"from typing import List
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        
        nums[:] = nums[len(nums)-k:] + nums[0:len(nums)-k]
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f96dc8952f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f96dc8952f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f96dc895240, file ""<ast>"", line 3>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f96dc895240, file ""<ast>"", line 3>:
  8           0 LOAD_FAST                1 (nums)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 LOAD_FAST                2 (k)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               1 (None)
             14 BUILD_SLICE              2
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (nums)
             20 LOAD_CONST               2 (0)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (k)
             30 BINARY_SUBTRACT
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 BINARY_ADD
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               1 (None)
             42 LOAD_CONST               1 (None)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
            """"""
            Do not return anything, modify nums in-place instead.
            """"""
            k = k%len(nums)
            if k==0:
                return
            for i in range(k):
                nums.insert(0,nums.pop())
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f49ce8852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f49ce8852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f49ce885240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f49ce885240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                2 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 BINARY_MODULO
             10 STORE_FAST               2 (k)

  7          12 LOAD_FAST                2 (k)
             14 LOAD_CONST               1 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  8          20 LOAD_CONST               2 (None)
             22 RETURN_VALUE

  9     >>   24 LOAD_GLOBAL              1 (range)
             26 LOAD_FAST                2 (k)
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                20 (to 54)
             34 STORE_FAST               3 (i)

 10          36 LOAD_FAST                1 (nums)
             38 LOAD_METHOD              2 (insert)
             40 LOAD_CONST               1 (0)
             42 LOAD_FAST                1 (nums)
             44 LOAD_METHOD              3 (pop)
             46 CALL_METHOD              0
             48 CALL_METHOD              2
             50 POP_TOP
             52 JUMP_ABSOLUTE           32
        >>   54 LOAD_CONST               2 (None)
             56 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums:List[int], k:int)->None:
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        """"""
        nums1 = nums[:len(nums)-k]
        nums2 = nums[ len(nums)-k: ]
        
        k=k%len(nums)
        
        for i in range(len(nums2)):
            nums[i] =  nums2[i]
        for i in range(len(nums1)):
            nums[ k+i ] = nums1[i] 
        
        return nums
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffe77665240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffe77665240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7ffe776652f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7ffe776652f0, file ""<ast>"", line 2>:
  8           0 LOAD_FAST                1 (nums)
              2 LOAD_CONST               1 (None)
              4 LOAD_GLOBAL              0 (len)
              6 LOAD_FAST                1 (nums)
              8 CALL_FUNCTION            1
             10 LOAD_FAST                2 (k)
             12 BINARY_SUBTRACT
             14 BUILD_SLICE              2
             16 BINARY_SUBSCR
             18 STORE_FAST               3 (nums1)

  9          20 LOAD_FAST                1 (nums)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (k)
             30 BINARY_SUBTRACT
             32 LOAD_CONST               1 (None)
             34 BUILD_SLICE              2
             36 BINARY_SUBSCR
             38 STORE_FAST               4 (nums2)

 11          40 LOAD_FAST                2 (k)
             42 LOAD_GLOBAL              0 (len)
             44 LOAD_FAST                1 (nums)
             46 CALL_FUNCTION            1
             48 BINARY_MODULO
             50 STORE_FAST               2 (k)

 13          52 LOAD_GLOBAL              1 (range)
             54 LOAD_GLOBAL              0 (len)
             56 LOAD_FAST                4 (nums2)
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                16 (to 82)
             66 STORE_FAST               5 (i)

 14          68 LOAD_FAST                4 (nums2)
             70 LOAD_FAST                5 (i)
             72 BINARY_SUBSCR
             74 LOAD_FAST                1 (nums)
             76 LOAD_FAST                5 (i)
             78 STORE_SUBSCR
             80 JUMP_ABSOLUTE           64

 15     >>   82 LOAD_GLOBAL              1 (range)
             84 LOAD_GLOBAL              0 (len)
             86 LOAD_FAST                3 (nums1)
             88 CALL_FUNCTION            1
             90 CALL_FUNCTION            1
             92 GET_ITER
        >>   94 FOR_ITER                20 (to 116)
             96 STORE_FAST               5 (i)

 16          98 LOAD_FAST                3 (nums1)
            100 LOAD_FAST                5 (i)
            102 BINARY_SUBSCR
            104 LOAD_FAST                1 (nums)
            106 LOAD_FAST                2 (k)
            108 LOAD_FAST                5 (i)
            110 BINARY_ADD
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE           94

 18     >>  116 LOAD_FAST                1 (nums)
            118 RETURN_VALUE
None
"
rotate,"class Solution:
    def reverse(self,A,i,j):
        while i<j:
            A[i],A[j] = A[j],A[i]
            i += 1
            j -= 1
    def rotate(self, A:List[int], k:int)->None:
        L  = len(A)
        k %= L
        if k:
            self.reverse( A , 0 , L-1 )
            self.reverse( A , 0 , k-1 )
            self.reverse( A , k , L-1 )
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbb583b53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbb583b53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object reverse at 0x7fbb583b5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.reverse')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (reverse)

  7          16 LOAD_NAME                4 (List)
             18 LOAD_NAME                5 (int)
             20 BINARY_SUBSCR
             22 LOAD_NAME                5 (int)
             24 LOAD_CONST               3 (None)
             26 LOAD_CONST               4 (('A', 'k', 'return'))
             28 BUILD_CONST_KEY_MAP      3
             30 LOAD_CONST               5 (<code object rotate at 0x7fbb583b52f0, file ""<ast>"", line 7>)
             32 LOAD_CONST               6 ('Solution.rotate')
             34 MAKE_FUNCTION            4 (annotations)
             36 STORE_NAME               6 (rotate)
             38 LOAD_CONST               3 (None)
             40 RETURN_VALUE

Disassembly of <code object reverse at 0x7fbb583b5240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                2 (i)
              2 LOAD_FAST                3 (j)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       52

  4           8 LOAD_FAST                1 (A)
             10 LOAD_FAST                3 (j)
             12 BINARY_SUBSCR
             14 LOAD_FAST                1 (A)
             16 LOAD_FAST                2 (i)
             18 BINARY_SUBSCR
             20 ROT_TWO
             22 LOAD_FAST                1 (A)
             24 LOAD_FAST                2 (i)
             26 STORE_SUBSCR
             28 LOAD_FAST                1 (A)
             30 LOAD_FAST                3 (j)
             32 STORE_SUBSCR

  5          34 LOAD_FAST                2 (i)
             36 LOAD_CONST               1 (1)
             38 INPLACE_ADD
             40 STORE_FAST               2 (i)

  6          42 LOAD_FAST                3 (j)
             44 LOAD_CONST               1 (1)
             46 INPLACE_SUBTRACT
             48 STORE_FAST               3 (j)
             50 JUMP_ABSOLUTE            0
        >>   52 LOAD_CONST               0 (None)
             54 RETURN_VALUE

Disassembly of <code object rotate at 0x7fbb583b52f0, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (A)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (L)

  9           8 LOAD_FAST                2 (k)
             10 LOAD_FAST                3 (L)
             12 INPLACE_MODULO
             14 STORE_FAST               2 (k)

 10          16 LOAD_FAST                2 (k)
             18 POP_JUMP_IF_FALSE       74

 11          20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              1 (reverse)
             24 LOAD_FAST                1 (A)
             26 LOAD_CONST               1 (0)
             28 LOAD_FAST                3 (L)
             30 LOAD_CONST               2 (1)
             32 BINARY_SUBTRACT
             34 CALL_METHOD              3
             36 POP_TOP

 12          38 LOAD_FAST                0 (self)
             40 LOAD_METHOD              1 (reverse)
             42 LOAD_FAST                1 (A)
             44 LOAD_CONST               1 (0)
             46 LOAD_FAST                2 (k)
             48 LOAD_CONST               2 (1)
             50 BINARY_SUBTRACT
             52 CALL_METHOD              3
             54 POP_TOP

 13          56 LOAD_FAST                0 (self)
             58 LOAD_METHOD              1 (reverse)
             60 LOAD_FAST                1 (A)
             62 LOAD_FAST                2 (k)
             64 LOAD_FAST                3 (L)
             66 LOAD_CONST               2 (1)
             68 BINARY_SUBTRACT
             70 CALL_METHOD              3
             72 POP_TOP
        >>   74 LOAD_CONST               0 (None)
             76 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        k %= len(nums)
        nums[k:], nums[:k] = nums[:-k], nums[-k:]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f01866b52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f01866b52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f01866b5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f01866b5240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                2 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 INPLACE_MODULO
             10 STORE_FAST               2 (k)

  7          12 LOAD_FAST                1 (nums)
             14 LOAD_CONST               1 (None)
             16 LOAD_FAST                2 (k)
             18 UNARY_NEGATIVE
             20 BUILD_SLICE              2
             22 BINARY_SUBSCR
             24 LOAD_FAST                1 (nums)
             26 LOAD_FAST                2 (k)
             28 UNARY_NEGATIVE
             30 LOAD_CONST               1 (None)
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 ROT_TWO
             38 LOAD_FAST                1 (nums)
             40 LOAD_FAST                2 (k)
             42 LOAD_CONST               1 (None)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR
             48 LOAD_FAST                1 (nums)
             50 LOAD_CONST               1 (None)
             52 LOAD_FAST                2 (k)
             54 BUILD_SLICE              2
             56 STORE_SUBSCR
             58 LOAD_CONST               1 (None)
             60 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        n=len(nums)
        k=k%n
        nums.reverse()
        nums[0:k]=reversed(nums[0:k])
        nums[k:]=reversed(nums[k:])
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f13a7f952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f13a7f952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f13a7f95240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f13a7f95240, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (n)

  7           8 LOAD_FAST                2 (k)
             10 LOAD_FAST                3 (n)
             12 BINARY_MODULO
             14 STORE_FAST               2 (k)

  8          16 LOAD_FAST                1 (nums)
             18 LOAD_METHOD              1 (reverse)
             20 CALL_METHOD              0
             22 POP_TOP

  9          24 LOAD_GLOBAL              2 (reversed)
             26 LOAD_FAST                1 (nums)
             28 LOAD_CONST               1 (0)
             30 LOAD_FAST                2 (k)
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            1
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               1 (0)
             42 LOAD_FAST                2 (k)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR

 10          48 LOAD_GLOBAL              2 (reversed)
             50 LOAD_FAST                1 (nums)
             52 LOAD_FAST                2 (k)
             54 LOAD_CONST               2 (None)
             56 BUILD_SLICE              2
             58 BINARY_SUBSCR
             60 CALL_FUNCTION            1
             62 LOAD_FAST                1 (nums)
             64 LOAD_FAST                2 (k)
             66 LOAD_CONST               2 (None)
             68 BUILD_SLICE              2
             70 STORE_SUBSCR
             72 LOAD_CONST               2 (None)
             74 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        n=len(nums)
        k=k%n
        nums.reverse()
        a=reversed(nums[k:])
        b=reversed(nums[:k])
        nums.clear()
        nums.extend(b)
        nums.extend(a)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f26baf952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f26baf952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f26baf95240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f26baf95240, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (n)

  7           8 LOAD_FAST                2 (k)
             10 LOAD_FAST                3 (n)
             12 BINARY_MODULO
             14 STORE_FAST               2 (k)

  8          16 LOAD_FAST                1 (nums)
             18 LOAD_METHOD              1 (reverse)
             20 CALL_METHOD              0
             22 POP_TOP

  9          24 LOAD_GLOBAL              2 (reversed)
             26 LOAD_FAST                1 (nums)
             28 LOAD_FAST                2 (k)
             30 LOAD_CONST               1 (None)
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            1
             38 STORE_FAST               4 (a)

 10          40 LOAD_GLOBAL              2 (reversed)
             42 LOAD_FAST                1 (nums)
             44 LOAD_CONST               1 (None)
             46 LOAD_FAST                2 (k)
             48 BUILD_SLICE              2
             50 BINARY_SUBSCR
             52 CALL_FUNCTION            1
             54 STORE_FAST               5 (b)

 11          56 LOAD_FAST                1 (nums)
             58 LOAD_METHOD              3 (clear)
             60 CALL_METHOD              0
             62 POP_TOP

 12          64 LOAD_FAST                1 (nums)
             66 LOAD_METHOD              4 (extend)
             68 LOAD_FAST                5 (b)
             70 CALL_METHOD              1
             72 POP_TOP

 13          74 LOAD_FAST                1 (nums)
             76 LOAD_METHOD              4 (extend)
             78 LOAD_FAST                4 (a)
             80 CALL_METHOD              1
             82 POP_TOP
             84 LOAD_CONST               1 (None)
             86 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        n = len(nums)
        if n == 0 : return
        if k>n : k = k%n
        
        # extend the list
        for i in range(n-k):
            nums.append(0)
        
        #fill the extension
        for i in range(n-k):
            nums[i+n] = nums[i]
        
        #rotate
        for i in range(n):
            nums[i] = nums[i+n-k]
        
        #cut down the list
        i = n-k
        while(i>0):
            nums.pop()
            i -= 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7d3e6852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7d3e6852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f7d3e685240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f7d3e685240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (n)

  4           8 LOAD_FAST                3 (n)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_CONST               0 (None)
             18 RETURN_VALUE

  5     >>   20 LOAD_FAST                2 (k)
             22 LOAD_FAST                3 (n)
             24 COMPARE_OP               4 (>)
             26 POP_JUMP_IF_FALSE       36
             28 LOAD_FAST                2 (k)
             30 LOAD_FAST                3 (n)
             32 BINARY_MODULO
             34 STORE_FAST               2 (k)

  8     >>   36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                3 (n)
             40 LOAD_FAST                2 (k)
             42 BINARY_SUBTRACT
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                14 (to 64)
             50 STORE_FAST               4 (i)

  9          52 LOAD_FAST                1 (nums)
             54 LOAD_METHOD              2 (append)
             56 LOAD_CONST               1 (0)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           48

 12     >>   64 LOAD_GLOBAL              1 (range)
             66 LOAD_FAST                3 (n)
             68 LOAD_FAST                2 (k)
             70 BINARY_SUBTRACT
             72 CALL_FUNCTION            1
             74 GET_ITER
        >>   76 FOR_ITER                20 (to 98)
             78 STORE_FAST               4 (i)

 13          80 LOAD_FAST                1 (nums)
             82 LOAD_FAST                4 (i)
             84 BINARY_SUBSCR
             86 LOAD_FAST                1 (nums)
             88 LOAD_FAST                4 (i)
             90 LOAD_FAST                3 (n)
             92 BINARY_ADD
             94 STORE_SUBSCR
             96 JUMP_ABSOLUTE           76

 16     >>   98 LOAD_GLOBAL              1 (range)
            100 LOAD_FAST                3 (n)
            102 CALL_FUNCTION            1
            104 GET_ITER
        >>  106 FOR_ITER                24 (to 132)
            108 STORE_FAST               4 (i)

 17         110 LOAD_FAST                1 (nums)
            112 LOAD_FAST                4 (i)
            114 LOAD_FAST                3 (n)
            116 BINARY_ADD
            118 LOAD_FAST                2 (k)
            120 BINARY_SUBTRACT
            122 BINARY_SUBSCR
            124 LOAD_FAST                1 (nums)
            126 LOAD_FAST                4 (i)
            128 STORE_SUBSCR
            130 JUMP_ABSOLUTE          106

 20     >>  132 LOAD_FAST                3 (n)
            134 LOAD_FAST                2 (k)
            136 BINARY_SUBTRACT
            138 STORE_FAST               4 (i)

 21     >>  140 LOAD_FAST                4 (i)
            142 LOAD_CONST               1 (0)
            144 COMPARE_OP               4 (>)
            146 POP_JUMP_IF_FALSE      166

 22         148 LOAD_FAST                1 (nums)
            150 LOAD_METHOD              3 (pop)
            152 CALL_METHOD              0
            154 POP_TOP

 23         156 LOAD_FAST                4 (i)
            158 LOAD_CONST               2 (1)
            160 INPLACE_SUBTRACT
            162 STORE_FAST               4 (i)
            164 JUMP_ABSOLUTE          140
        >>  166 LOAD_CONST               0 (None)
            168 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        for i in range(0, k):
            nums.insert(0, nums.pop())
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa1680852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa1680852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7fa168085240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7fa168085240, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (0)
              4 LOAD_FAST                2 (k)
              6 CALL_FUNCTION            2
              8 GET_ITER
        >>   10 FOR_ITER                20 (to 32)
             12 STORE_FAST               3 (i)

  7          14 LOAD_FAST                1 (nums)
             16 LOAD_METHOD              1 (insert)
             18 LOAD_CONST               1 (0)
             20 LOAD_FAST                1 (nums)
             22 LOAD_METHOD              2 (pop)
             24 CALL_METHOD              0
             26 CALL_METHOD              2
             28 POP_TOP
             30 JUMP_ABSOLUTE           10
        >>   32 LOAD_CONST               2 (None)
             34 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        for _ in range(k):
            nums.insert(0, nums.pop())","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f07b96c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f07b96c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f07b96c5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f07b96c5240, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (range)
              2 LOAD_FAST                2 (k)
              4 CALL_FUNCTION            1
              6 GET_ITER
        >>    8 FOR_ITER                20 (to 30)
             10 STORE_FAST               3 (_)

  7          12 LOAD_FAST                1 (nums)
             14 LOAD_METHOD              1 (insert)
             16 LOAD_CONST               1 (0)
             18 LOAD_FAST                1 (nums)
             20 LOAD_METHOD              2 (pop)
             22 CALL_METHOD              0
             24 CALL_METHOD              2
             26 POP_TOP
             28 JUMP_ABSOLUTE            8
        >>   30 LOAD_CONST               2 (None)
             32 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        nums[:] = nums[(len(nums) - k):] + nums[:(len(nums) - k)]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2b041d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2b041d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f2b041d5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f2b041d5240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                1 (nums)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 LOAD_FAST                2 (k)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               1 (None)
             14 BUILD_SLICE              2
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (nums)
             20 LOAD_CONST               1 (None)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (k)
             30 BINARY_SUBTRACT
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 BINARY_ADD
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               1 (None)
             42 LOAD_CONST               1 (None)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE
None
"
rotate,"class Solution:
        def rotate(self, nums: List[int], k: int) -> None:
                nums[:]=nums[-k%len(nums):]+nums[:-k%len(nums)]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffd7ed452f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffd7ed452f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7ffd7ed45240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7ffd7ed45240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (nums)
              2 LOAD_FAST                2 (k)
              4 UNARY_NEGATIVE
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 BINARY_MODULO
             14 LOAD_CONST               0 (None)
             16 BUILD_SLICE              2
             18 BINARY_SUBSCR
             20 LOAD_FAST                1 (nums)
             22 LOAD_CONST               0 (None)
             24 LOAD_FAST                2 (k)
             26 UNARY_NEGATIVE
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (nums)
             32 CALL_FUNCTION            1
             34 BINARY_MODULO
             36 BUILD_SLICE              2
             38 BINARY_SUBSCR
             40 BINARY_ADD
             42 LOAD_FAST                1 (nums)
             44 LOAD_CONST               0 (None)
             46 LOAD_CONST               0 (None)
             48 BUILD_SLICE              2
             50 STORE_SUBSCR
             52 LOAD_CONST               0 (None)
             54 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        if k<len(nums):
            for i in range(0,k):
                e=nums.pop()
                nums.insert(0,e)
        elif k>len(nums):
            k=k%len(nums)
            for i in range(0,k):
                e=nums.pop()
                nums.insert(0,e)
        else:
            pass
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fae58245240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fae58245240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7fae582452f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7fae582452f0, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                2 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               0 (<)
             10 POP_JUMP_IF_FALSE       50

  7          12 LOAD_GLOBAL              1 (range)
             14 LOAD_CONST               1 (0)
             16 LOAD_FAST                2 (k)
             18 CALL_FUNCTION            2
             20 GET_ITER
        >>   22 FOR_ITER                24 (to 48)
             24 STORE_FAST               3 (i)

  8          26 LOAD_FAST                1 (nums)
             28 LOAD_METHOD              2 (pop)
             30 CALL_METHOD              0
             32 STORE_FAST               4 (e)

  9          34 LOAD_FAST                1 (nums)
             36 LOAD_METHOD              3 (insert)
             38 LOAD_CONST               1 (0)
             40 LOAD_FAST                4 (e)
             42 CALL_METHOD              2
             44 POP_TOP
             46 JUMP_ABSOLUTE           22
        >>   48 JUMP_FORWARD            62 (to 112)

 10     >>   50 LOAD_FAST                2 (k)
             52 LOAD_GLOBAL              0 (len)
             54 LOAD_FAST                1 (nums)
             56 CALL_FUNCTION            1
             58 COMPARE_OP               4 (>)
             60 POP_JUMP_IF_FALSE      112

 11          62 LOAD_FAST                2 (k)
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (nums)
             68 CALL_FUNCTION            1
             70 BINARY_MODULO
             72 STORE_FAST               2 (k)

 12          74 LOAD_GLOBAL              1 (range)
             76 LOAD_CONST               1 (0)
             78 LOAD_FAST                2 (k)
             80 CALL_FUNCTION            2
             82 GET_ITER
        >>   84 FOR_ITER                24 (to 110)
             86 STORE_FAST               3 (i)

 13          88 LOAD_FAST                1 (nums)
             90 LOAD_METHOD              2 (pop)
             92 CALL_METHOD              0
             94 STORE_FAST               4 (e)

 14          96 LOAD_FAST                1 (nums)
             98 LOAD_METHOD              3 (insert)
            100 LOAD_CONST               1 (0)
            102 LOAD_FAST                4 (e)
            104 CALL_METHOD              2
            106 POP_TOP
            108 JUMP_ABSOLUTE           84
        >>  110 JUMP_FORWARD             0 (to 112)

 16     >>  112 LOAD_CONST               2 (None)
            114 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:       
        while k > 0:
            nums.insert(0, nums.pop())
            k -= 1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe54ba252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe54ba252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7fe54ba25240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7fe54ba25240, file ""<ast>"", line 2>:
  3     >>    0 LOAD_FAST                2 (k)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       34

  4           8 LOAD_FAST                1 (nums)
             10 LOAD_METHOD              0 (insert)
             12 LOAD_CONST               1 (0)
             14 LOAD_FAST                1 (nums)
             16 LOAD_METHOD              1 (pop)
             18 CALL_METHOD              0
             20 CALL_METHOD              2
             22 POP_TOP

  5          24 LOAD_FAST                2 (k)
             26 LOAD_CONST               2 (1)
             28 INPLACE_SUBTRACT
             30 STORE_FAST               2 (k)
             32 JUMP_ABSOLUTE            0
        >>   34 LOAD_CONST               0 (None)
             36 RETURN_VALUE
None
"
rotate,"from collections import deque 
class Solution:
	def rotate(self, nums: List[int], k: int) -> None:
		""""""
		Do not return anything, modify nums in-place instead.
		""""""
		d = deque(nums)
		d.rotate(k)
		nums.clear()
		while d:
			nums.append(d.popleft())
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('deque',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (deque)
              8 STORE_NAME               1 (deque)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f80ddb052f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f80ddb052f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f80ddb05240, file ""<ast>"", line 3>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f80ddb05240, file ""<ast>"", line 3>:
  7           0 LOAD_GLOBAL              0 (deque)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (d)

  8           8 LOAD_FAST                3 (d)
             10 LOAD_METHOD              1 (rotate)
             12 LOAD_FAST                2 (k)
             14 CALL_METHOD              1
             16 POP_TOP

  9          18 LOAD_FAST                1 (nums)
             20 LOAD_METHOD              2 (clear)
             22 CALL_METHOD              0
             24 POP_TOP

 10     >>   26 LOAD_FAST                3 (d)
             28 POP_JUMP_IF_FALSE       46

 11          30 LOAD_FAST                1 (nums)
             32 LOAD_METHOD              3 (append)
             34 LOAD_FAST                3 (d)
             36 LOAD_METHOD              4 (popleft)
             38 CALL_METHOD              0
             40 CALL_METHOD              1
             42 POP_TOP
             44 JUMP_ABSOLUTE           26
        >>   46 LOAD_CONST               1 (None)
             48 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums:List[int], k: int):
        """"""
        Do not return anything, modify nums in-place instead.
        """"""

        
        if len(nums) in [0, 1] or k in [0, len(nums)]:
            return
        k_mod = k % len(nums)
        if len(nums[:-k_mod]) >= len(nums[:k_mod]):
            nums[:] = nums[-k_mod:] + nums[:k_mod] + nums[k_mod:-k_mod]            
        else:
            nums[:] = nums[-k_mod:] + nums[:-k_mod]
        return
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f83d3e952f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f83d3e952f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (('nums', 'k'))
             18 BUILD_CONST_KEY_MAP      2
             20 LOAD_CONST               2 (<code object rotate at 0x7f83d3e95240, file ""<ast>"", line 2>)
             22 LOAD_CONST               3 ('Solution.rotate')
             24 MAKE_FUNCTION            4 (annotations)
             26 STORE_NAME               5 (rotate)
             28 LOAD_CONST               4 (None)
             30 RETURN_VALUE

Disassembly of <code object rotate at 0x7f83d3e95240, file ""<ast>"", line 2>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 ((0, 1))
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_TRUE        28
             12 LOAD_FAST                2 (k)
             14 LOAD_CONST               2 (0)
             16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                1 (nums)
             20 CALL_FUNCTION            1
             22 BUILD_TUPLE              2
             24 COMPARE_OP               6 (in)
             26 POP_JUMP_IF_FALSE       32

  9     >>   28 LOAD_CONST               3 (None)
             30 RETURN_VALUE

 10     >>   32 LOAD_FAST                2 (k)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                1 (nums)
             38 CALL_FUNCTION            1
             40 BINARY_MODULO
             42 STORE_FAST               3 (k_mod)

 11          44 LOAD_GLOBAL              0 (len)
             46 LOAD_FAST                1 (nums)
             48 LOAD_CONST               3 (None)
             50 LOAD_FAST                3 (k_mod)
             52 UNARY_NEGATIVE
             54 BUILD_SLICE              2
             56 BINARY_SUBSCR
             58 CALL_FUNCTION            1
             60 LOAD_GLOBAL              0 (len)
             62 LOAD_FAST                1 (nums)
             64 LOAD_CONST               3 (None)
             66 LOAD_FAST                3 (k_mod)
             68 BUILD_SLICE              2
             70 BINARY_SUBSCR
             72 CALL_FUNCTION            1
             74 COMPARE_OP               5 (>=)
             76 POP_JUMP_IF_FALSE      128

 12          78 LOAD_FAST                1 (nums)
             80 LOAD_FAST                3 (k_mod)
             82 UNARY_NEGATIVE
             84 LOAD_CONST               3 (None)
             86 BUILD_SLICE              2
             88 BINARY_SUBSCR
             90 LOAD_FAST                1 (nums)
             92 LOAD_CONST               3 (None)
             94 LOAD_FAST                3 (k_mod)
             96 BUILD_SLICE              2
             98 BINARY_SUBSCR
            100 BINARY_ADD
            102 LOAD_FAST                1 (nums)
            104 LOAD_FAST                3 (k_mod)
            106 LOAD_FAST                3 (k_mod)
            108 UNARY_NEGATIVE
            110 BUILD_SLICE              2
            112 BINARY_SUBSCR
            114 BINARY_ADD
            116 LOAD_FAST                1 (nums)
            118 LOAD_CONST               3 (None)
            120 LOAD_CONST               3 (None)
            122 BUILD_SLICE              2
            124 STORE_SUBSCR
            126 JUMP_FORWARD            36 (to 164)

 14     >>  128 LOAD_FAST                1 (nums)
            130 LOAD_FAST                3 (k_mod)
            132 UNARY_NEGATIVE
            134 LOAD_CONST               3 (None)
            136 BUILD_SLICE              2
            138 BINARY_SUBSCR
            140 LOAD_FAST                1 (nums)
            142 LOAD_CONST               3 (None)
            144 LOAD_FAST                3 (k_mod)
            146 UNARY_NEGATIVE
            148 BUILD_SLICE              2
            150 BINARY_SUBSCR
            152 BINARY_ADD
            154 LOAD_FAST                1 (nums)
            156 LOAD_CONST               3 (None)
            158 LOAD_CONST               3 (None)
            160 BUILD_SLICE              2
            162 STORE_SUBSCR

 15     >>  164 LOAD_CONST               3 (None)
            166 RETURN_VALUE
None
"
rotate,"class Solution:
    # reverses the array arr in place from index s to e
    def reverse_arr_in_place(self, arr, s, e):
        while e > s:
            arr[s], arr[e] = arr[e], arr[s]
            s += 1
            e -= 1
    
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""        
        if k > len(nums):
            k = k % len(nums) 
        self.reverse_arr_in_place(nums, len(nums) - k, len(nums) - 1)        
        self.reverse_arr_in_place(nums, 0, len(nums) - k - 1)
        self.reverse_arr_in_place(nums, 0, len(nums) - 1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc6604c52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc6604c52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object reverse_arr_in_place at 0x7fc6604c5240, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.reverse_arr_in_place')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (reverse_arr_in_place)

  9          16 LOAD_NAME                4 (List)
             18 LOAD_NAME                5 (int)
             20 BINARY_SUBSCR
             22 LOAD_NAME                5 (int)
             24 LOAD_CONST               3 (None)
             26 LOAD_CONST               4 (('nums', 'k', 'return'))
             28 BUILD_CONST_KEY_MAP      3
             30 LOAD_CONST               5 (<code object rotate at 0x7fc6604c53a0, file ""<ast>"", line 9>)
             32 LOAD_CONST               6 ('Solution.rotate')
             34 MAKE_FUNCTION            4 (annotations)
             36 STORE_NAME               6 (rotate)
             38 LOAD_CONST               3 (None)
             40 RETURN_VALUE

Disassembly of <code object reverse_arr_in_place at 0x7fc6604c5240, file ""<ast>"", line 3>:
  4     >>    0 LOAD_FAST                3 (e)
              2 LOAD_FAST                2 (s)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       52

  5           8 LOAD_FAST                1 (arr)
             10 LOAD_FAST                3 (e)
             12 BINARY_SUBSCR
             14 LOAD_FAST                1 (arr)
             16 LOAD_FAST                2 (s)
             18 BINARY_SUBSCR
             20 ROT_TWO
             22 LOAD_FAST                1 (arr)
             24 LOAD_FAST                2 (s)
             26 STORE_SUBSCR
             28 LOAD_FAST                1 (arr)
             30 LOAD_FAST                3 (e)
             32 STORE_SUBSCR

  6          34 LOAD_FAST                2 (s)
             36 LOAD_CONST               1 (1)
             38 INPLACE_ADD
             40 STORE_FAST               2 (s)

  7          42 LOAD_FAST                3 (e)
             44 LOAD_CONST               1 (1)
             46 INPLACE_SUBTRACT
             48 STORE_FAST               3 (e)
             50 JUMP_ABSOLUTE            0
        >>   52 LOAD_CONST               0 (None)
             54 RETURN_VALUE

Disassembly of <code object rotate at 0x7fc6604c53a0, file ""<ast>"", line 9>:
 13           0 LOAD_FAST                2 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               4 (>)
             10 POP_JUMP_IF_FALSE       24

 14          12 LOAD_FAST                2 (k)
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (nums)
             18 CALL_FUNCTION            1
             20 BINARY_MODULO
             22 STORE_FAST               2 (k)

 15     >>   24 LOAD_FAST                0 (self)
             26 LOAD_METHOD              1 (reverse_arr_in_place)
             28 LOAD_FAST                1 (nums)
             30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (nums)
             34 CALL_FUNCTION            1
             36 LOAD_FAST                2 (k)
             38 BINARY_SUBTRACT
             40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                1 (nums)
             44 CALL_FUNCTION            1
             46 LOAD_CONST               1 (1)
             48 BINARY_SUBTRACT
             50 CALL_METHOD              3
             52 POP_TOP

 16          54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              1 (reverse_arr_in_place)
             58 LOAD_FAST                1 (nums)
             60 LOAD_CONST               2 (0)
             62 LOAD_GLOBAL              0 (len)
             64 LOAD_FAST                1 (nums)
             66 CALL_FUNCTION            1
             68 LOAD_FAST                2 (k)
             70 BINARY_SUBTRACT
             72 LOAD_CONST               1 (1)
             74 BINARY_SUBTRACT
             76 CALL_METHOD              3
             78 POP_TOP

 17          80 LOAD_FAST                0 (self)
             82 LOAD_METHOD              1 (reverse_arr_in_place)
             84 LOAD_FAST                1 (nums)
             86 LOAD_CONST               2 (0)
             88 LOAD_GLOBAL              0 (len)
             90 LOAD_FAST                1 (nums)
             92 CALL_FUNCTION            1
             94 LOAD_CONST               1 (1)
             96 BINARY_SUBTRACT
             98 CALL_METHOD              3
            100 POP_TOP
            102 LOAD_CONST               3 (None)
            104 RETURN_VALUE
None
"
rotate,"class Solution:
   def rotate(self, nums: List[int], k: int) -> None:
       """"""
       Do not return anything, modify nums in-place instead.
       """"""
       n = len(nums)
       k %= n
       count = 0
       curr = 0
       while count < n:
           prev = nums[curr]
           next_ind = curr + k   
           next_ind %= n            
           while True:                
               nums[next_ind], prev = prev, nums[next_ind]
               count += 1
               if next_ind == curr:
                   break
               next_ind += k                
               next_ind %= n                
           curr += 1			
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb7f92a5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb7f92a5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7fb7f92a52f0, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7fb7f92a52f0, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (n)

  7           8 LOAD_FAST                2 (k)
             10 LOAD_FAST                3 (n)
             12 INPLACE_MODULO
             14 STORE_FAST               2 (k)

  8          16 LOAD_CONST               1 (0)
             18 STORE_FAST               4 (count)

  9          20 LOAD_CONST               1 (0)
             22 STORE_FAST               5 (curr)

 10     >>   24 LOAD_FAST                4 (count)
             26 LOAD_FAST                3 (n)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_FALSE      120

 11          32 LOAD_FAST                1 (nums)
             34 LOAD_FAST                5 (curr)
             36 BINARY_SUBSCR
             38 STORE_FAST               6 (prev)

 12          40 LOAD_FAST                5 (curr)
             42 LOAD_FAST                2 (k)
             44 BINARY_ADD
             46 STORE_FAST               7 (next_ind)

 13          48 LOAD_FAST                7 (next_ind)
             50 LOAD_FAST                3 (n)
             52 INPLACE_MODULO
             54 STORE_FAST               7 (next_ind)

 15     >>   56 LOAD_FAST                6 (prev)
             58 LOAD_FAST                1 (nums)
             60 LOAD_FAST                7 (next_ind)
             62 BINARY_SUBSCR
             64 ROT_TWO
             66 LOAD_FAST                1 (nums)
             68 LOAD_FAST                7 (next_ind)
             70 STORE_SUBSCR
             72 STORE_FAST               6 (prev)

 16          74 LOAD_FAST                4 (count)
             76 LOAD_CONST               2 (1)
             78 INPLACE_ADD
             80 STORE_FAST               4 (count)

 17          82 LOAD_FAST                7 (next_ind)
             84 LOAD_FAST                5 (curr)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       92

 18          90 JUMP_ABSOLUTE          110

 19     >>   92 LOAD_FAST                7 (next_ind)
             94 LOAD_FAST                2 (k)
             96 INPLACE_ADD
             98 STORE_FAST               7 (next_ind)

 20         100 LOAD_FAST                7 (next_ind)
            102 LOAD_FAST                3 (n)
            104 INPLACE_MODULO
            106 STORE_FAST               7 (next_ind)
            108 JUMP_ABSOLUTE           56

 21     >>  110 LOAD_FAST                5 (curr)
            112 LOAD_CONST               2 (1)
            114 INPLACE_ADD
            116 STORE_FAST               5 (curr)
            118 JUMP_ABSOLUTE           24
        >>  120 LOAD_CONST               3 (None)
            122 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        
        k=k%len(nums)
        nums[:]=nums[-k:]+nums[:-k]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0c1ddf52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0c1ddf52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f0c1ddf5240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f0c1ddf5240, file ""<ast>"", line 2>:
  7           0 LOAD_FAST                2 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 BINARY_MODULO
             10 STORE_FAST               2 (k)

  8          12 LOAD_FAST                1 (nums)
             14 LOAD_FAST                2 (k)
             16 UNARY_NEGATIVE
             18 LOAD_CONST               1 (None)
             20 BUILD_SLICE              2
             22 BINARY_SUBSCR
             24 LOAD_FAST                1 (nums)
             26 LOAD_CONST               1 (None)
             28 LOAD_FAST                2 (k)
             30 UNARY_NEGATIVE
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 BINARY_ADD
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               1 (None)
             42 LOAD_CONST               1 (None)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE
None
"
rotate,"class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        nums[:] = nums[len(nums) - k :] + nums[:len(nums) - k]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f78cb4252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f78cb4252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7f78cb425240, file ""<ast>"", line 2>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7f78cb425240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (nums)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                1 (nums)
              6 CALL_FUNCTION            1
              8 LOAD_FAST                2 (k)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               0 (None)
             14 BUILD_SLICE              2
             16 BINARY_SUBSCR
             18 LOAD_FAST                1 (nums)
             20 LOAD_CONST               0 (None)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (k)
             30 BINARY_SUBTRACT
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 BINARY_ADD
             38 LOAD_FAST                1 (nums)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               0 (None)
             44 BUILD_SLICE              2
             46 STORE_SUBSCR
             48 LOAD_CONST               0 (None)
             50 RETURN_VALUE
None
"
rotate,"import math

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        n = len(nums)
		
		# Remove redundant passes
        shift = k % n
        gcd = math.gcd(shift, n)
        
        for j in range(gcd):
            i, temp = shift + j, nums[j]
            while i != j:
                nums[i], temp, i = temp, nums[i], (i + shift) % n

            nums[i] = temp
        
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (math)
              6 STORE_NAME               0 (math)

  3           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7fbc30a65240, file ""<ast>"", line 3>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbc30a65240, file ""<ast>"", line 3>:
  3           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  4           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                4 (int)
             12 BINARY_SUBSCR
             14 LOAD_NAME                4 (int)
             16 LOAD_CONST               1 (None)
             18 LOAD_CONST               2 (('nums', 'k', 'return'))
             20 BUILD_CONST_KEY_MAP      3
             22 LOAD_CONST               3 (<code object rotate at 0x7fbc30a652f0, file ""<ast>"", line 4>)
             24 LOAD_CONST               4 ('Solution.rotate')
             26 MAKE_FUNCTION            4 (annotations)
             28 STORE_NAME               5 (rotate)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object rotate at 0x7fbc30a652f0, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (n)

  8           8 LOAD_FAST                2 (k)
             10 LOAD_FAST                3 (n)
             12 BINARY_MODULO
             14 STORE_FAST               4 (shift)

  9          16 LOAD_GLOBAL              1 (math)
             18 LOAD_METHOD              2 (gcd)
             20 LOAD_FAST                4 (shift)
             22 LOAD_FAST                3 (n)
             24 CALL_METHOD              2
             26 STORE_FAST               5 (gcd)

 11          28 LOAD_GLOBAL              3 (range)
             30 LOAD_FAST                5 (gcd)
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                72 (to 110)
             38 STORE_FAST               6 (j)

 12          40 LOAD_FAST                4 (shift)
             42 LOAD_FAST                6 (j)
             44 BINARY_ADD
             46 LOAD_FAST                1 (nums)
             48 LOAD_FAST                6 (j)
             50 BINARY_SUBSCR
             52 ROT_TWO
             54 STORE_FAST               7 (i)
             56 STORE_FAST               8 (temp)

 13     >>   58 LOAD_FAST                7 (i)
             60 LOAD_FAST                6 (j)
             62 COMPARE_OP               3 (!=)
             64 POP_JUMP_IF_FALSE      100

 14          66 LOAD_FAST                8 (temp)
             68 LOAD_FAST                1 (nums)
             70 LOAD_FAST                7 (i)
             72 BINARY_SUBSCR
             74 LOAD_FAST                7 (i)
             76 LOAD_FAST                4 (shift)
             78 BINARY_ADD
             80 LOAD_FAST                3 (n)
             82 BINARY_MODULO
             84 ROT_THREE
             86 ROT_TWO
             88 LOAD_FAST                1 (nums)
             90 LOAD_FAST                7 (i)
             92 STORE_SUBSCR
             94 STORE_FAST               8 (temp)
             96 STORE_FAST               7 (i)
             98 JUMP_ABSOLUTE           58

 16     >>  100 LOAD_FAST                8 (temp)
            102 LOAD_FAST                1 (nums)
            104 LOAD_FAST                7 (i)
            106 STORE_SUBSCR
            108 JUMP_ABSOLUTE           36
        >>  110 LOAD_CONST               0 (None)
            112 RETURN_VALUE
None
"
solveSudoku,"from typing import List
class Solution:
	def __init__(self):
		self.size = 9
		
		self.sudoku_values = {'1', '2', '3', '4', '5', '6', '7', '8', '9'}
		self.empty = '.'
		
		self.row_no = lambda cell_no: cell_no // self.size # Get row from cell. no
		self.col_no = lambda cell_no: cell_no % self.size  # Get col from cell. no
		self.box_no = lambda r, c: 3 * (r // 3) + c // 3   # Get box from row and column
		
		self.rows_values = {}  # {row: sudoku values set}
		self.cols_values = {}  # {col: sudoku values set}
		self.boxs_values = {}  # {box: sudoku values set}

	def solveSudoku(self, board: List[List[str]]) -> None:
		
		# 1. Initialization: Store all board values
		for i in range(self.size):
			self.rows_values[i] = set()
			self.cols_values[i] = set()
			self.boxs_values[i] = set()

		for r in range(self.size):
			for c in range(self.size):
				if board[r][c] != self.empty:
					self.rows_values[r].add(board[r][c])
					self.cols_values[c].add(board[r][c])
					self.boxs_values[self.box_no(r, c)].add(board[r][c])
		
		# 2. Backtrack from cell no: 0
		self.backtrack(0, board)

		return board

	def backtrack(self, cell_no, board):
		# Base case: we filled all empty cells
		if cell_no == 81: 
			return True

		r, c = self.row_no(cell_no), self.col_no(cell_no)

		if board[r][c] != self.empty:
			return self.backtrack(cell_no + 1, board)

		for val in self.sudoku_values:
			# could_place? Is valid?
			if val in self.rows_values[r] or val in self.cols_values[c] or val in self.boxs_values[self.box_no(r, c)]:
				continue

			# place:
			board[r][c] = val
			self.rows_values[r].add(val)
			self.cols_values[c].add(val)
			self.boxs_values[self.box_no(r, c)].add(val)
			
			# next:
			if self.backtrack(cell_no + 1, board):
				return True

			# remove:
			board[r][c] = self.empty
			self.rows_values[r].remove(val)
			self.cols_values[c].remove(val)
			self.boxs_values[self.box_no(r, c)].remove(val)

		return False
		
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List',))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7fe098705710, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe098705710, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object __init__ at 0x7fe098705500, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.__init__')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (__init__)

 17          16 LOAD_NAME                4 (List)
             18 LOAD_NAME                4 (List)
             20 LOAD_NAME                5 (str)
             22 BINARY_SUBSCR
             24 BINARY_SUBSCR
             26 LOAD_CONST               3 (None)
             28 LOAD_CONST               4 (('board', 'return'))
             30 BUILD_CONST_KEY_MAP      2
             32 LOAD_CONST               5 (<code object solveSudoku at 0x7fe0987055b0, file ""<ast>"", line 17>)
             34 LOAD_CONST               6 ('Solution.solveSudoku')
             36 MAKE_FUNCTION            4 (annotations)
             38 STORE_NAME               6 (solveSudoku)

 37          40 LOAD_CONST               7 (<code object backtrack at 0x7fe098705660, file ""<ast>"", line 37>)
             42 LOAD_CONST               8 ('Solution.backtrack')
             44 MAKE_FUNCTION            0
             46 STORE_NAME               7 (backtrack)
             48 LOAD_CONST               3 (None)
             50 RETURN_VALUE

Disassembly of <code object __init__ at 0x7fe098705500, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (9)
              2 LOAD_DEREF               0 (self)
              4 STORE_ATTR               0 (size)

  6           6 LOAD_CONST               2 ('1')
              8 LOAD_CONST               3 ('2')
             10 LOAD_CONST               4 ('3')
             12 LOAD_CONST               5 ('4')
             14 LOAD_CONST               6 ('5')
             16 LOAD_CONST               7 ('6')
             18 LOAD_CONST               8 ('7')
             20 LOAD_CONST               9 ('8')
             22 LOAD_CONST              10 ('9')
             24 BUILD_SET                9
             26 LOAD_DEREF               0 (self)
             28 STORE_ATTR               1 (sudoku_values)

  7          30 LOAD_CONST              11 ('.')
             32 LOAD_DEREF               0 (self)
             34 STORE_ATTR               2 (empty)

  9          36 LOAD_CLOSURE             0 (self)
             38 BUILD_TUPLE              1
             40 LOAD_CONST              12 (<code object <lambda> at 0x7fe098705240, file ""<ast>"", line 9>)
             42 LOAD_CONST              13 ('Solution.__init__.<locals>.<lambda>')
             44 MAKE_FUNCTION            8 (closure)
             46 LOAD_DEREF               0 (self)
             48 STORE_ATTR               3 (row_no)

 10          50 LOAD_CLOSURE             0 (self)
             52 BUILD_TUPLE              1
             54 LOAD_CONST              14 (<code object <lambda> at 0x7fe0987052f0, file ""<ast>"", line 10>)
             56 LOAD_CONST              13 ('Solution.__init__.<locals>.<lambda>')
             58 MAKE_FUNCTION            8 (closure)
             60 LOAD_DEREF               0 (self)
             62 STORE_ATTR               4 (col_no)

 11          64 LOAD_CONST              15 (<code object <lambda> at 0x7fe0987053a0, file ""<ast>"", line 11>)
             66 LOAD_CONST              13 ('Solution.__init__.<locals>.<lambda>')
             68 MAKE_FUNCTION            0
             70 LOAD_DEREF               0 (self)
             72 STORE_ATTR               5 (box_no)

 13          74 BUILD_MAP                0
             76 LOAD_DEREF               0 (self)
             78 STORE_ATTR               6 (rows_values)

 14          80 BUILD_MAP                0
             82 LOAD_DEREF               0 (self)
             84 STORE_ATTR               7 (cols_values)

 15          86 BUILD_MAP                0
             88 LOAD_DEREF               0 (self)
             90 STORE_ATTR               8 (boxs_values)
             92 LOAD_CONST               0 (None)
             94 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fe098705240, file ""<ast>"", line 9>:
  9           0 LOAD_FAST                0 (cell_no)
              2 LOAD_DEREF               0 (self)
              4 LOAD_ATTR                0 (size)
              6 BINARY_FLOOR_DIVIDE
              8 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fe0987052f0, file ""<ast>"", line 10>:
 10           0 LOAD_FAST                0 (cell_no)
              2 LOAD_DEREF               0 (self)
              4 LOAD_ATTR                0 (size)
              6 BINARY_MODULO
              8 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fe0987053a0, file ""<ast>"", line 11>:
 11           0 LOAD_CONST               1 (3)
              2 LOAD_FAST                0 (r)
              4 LOAD_CONST               1 (3)
              6 BINARY_FLOOR_DIVIDE
              8 BINARY_MULTIPLY
             10 LOAD_FAST                1 (c)
             12 LOAD_CONST               1 (3)
             14 BINARY_FLOOR_DIVIDE
             16 BINARY_ADD
             18 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fe0987055b0, file ""<ast>"", line 17>:
 20           0 LOAD_GLOBAL              0 (range)
              2 LOAD_FAST                0 (self)
              4 LOAD_ATTR                1 (size)
              6 CALL_FUNCTION            1
              8 GET_ITER
        >>   10 FOR_ITER                40 (to 52)
             12 STORE_FAST               2 (i)

 21          14 LOAD_GLOBAL              2 (set)
             16 CALL_FUNCTION            0
             18 LOAD_FAST                0 (self)
             20 LOAD_ATTR                3 (rows_values)
             22 LOAD_FAST                2 (i)
             24 STORE_SUBSCR

 22          26 LOAD_GLOBAL              2 (set)
             28 CALL_FUNCTION            0
             30 LOAD_FAST                0 (self)
             32 LOAD_ATTR                4 (cols_values)
             34 LOAD_FAST                2 (i)
             36 STORE_SUBSCR

 23          38 LOAD_GLOBAL              2 (set)
             40 CALL_FUNCTION            0
             42 LOAD_FAST                0 (self)
             44 LOAD_ATTR                5 (boxs_values)
             46 LOAD_FAST                2 (i)
             48 STORE_SUBSCR
             50 JUMP_ABSOLUTE           10

 25     >>   52 LOAD_GLOBAL              0 (range)
             54 LOAD_FAST                0 (self)
             56 LOAD_ATTR                1 (size)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER               118 (to 182)
             64 STORE_FAST               3 (r)

 26          66 LOAD_GLOBAL              0 (range)
             68 LOAD_FAST                0 (self)
             70 LOAD_ATTR                1 (size)
             72 CALL_FUNCTION            1
             74 GET_ITER
        >>   76 FOR_ITER               102 (to 180)
             78 STORE_FAST               4 (c)

 27          80 LOAD_FAST                1 (board)
             82 LOAD_FAST                3 (r)
             84 BINARY_SUBSCR
             86 LOAD_FAST                4 (c)
             88 BINARY_SUBSCR
             90 LOAD_FAST                0 (self)
             92 LOAD_ATTR                6 (empty)
             94 COMPARE_OP               3 (!=)
             96 POP_JUMP_IF_FALSE       76

 28          98 LOAD_FAST                0 (self)
            100 LOAD_ATTR                3 (rows_values)
            102 LOAD_FAST                3 (r)
            104 BINARY_SUBSCR
            106 LOAD_METHOD              7 (add)
            108 LOAD_FAST                1 (board)
            110 LOAD_FAST                3 (r)
            112 BINARY_SUBSCR
            114 LOAD_FAST                4 (c)
            116 BINARY_SUBSCR
            118 CALL_METHOD              1
            120 POP_TOP

 29         122 LOAD_FAST                0 (self)
            124 LOAD_ATTR                4 (cols_values)
            126 LOAD_FAST                4 (c)
            128 BINARY_SUBSCR
            130 LOAD_METHOD              7 (add)
            132 LOAD_FAST                1 (board)
            134 LOAD_FAST                3 (r)
            136 BINARY_SUBSCR
            138 LOAD_FAST                4 (c)
            140 BINARY_SUBSCR
            142 CALL_METHOD              1
            144 POP_TOP

 30         146 LOAD_FAST                0 (self)
            148 LOAD_ATTR                5 (boxs_values)
            150 LOAD_FAST                0 (self)
            152 LOAD_METHOD              8 (box_no)
            154 LOAD_FAST                3 (r)
            156 LOAD_FAST                4 (c)
            158 CALL_METHOD              2
            160 BINARY_SUBSCR
            162 LOAD_METHOD              7 (add)
            164 LOAD_FAST                1 (board)
            166 LOAD_FAST                3 (r)
            168 BINARY_SUBSCR
            170 LOAD_FAST                4 (c)
            172 BINARY_SUBSCR
            174 CALL_METHOD              1
            176 POP_TOP
            178 JUMP_ABSOLUTE           76
        >>  180 JUMP_ABSOLUTE           62

 33     >>  182 LOAD_FAST                0 (self)
            184 LOAD_METHOD              9 (backtrack)
            186 LOAD_CONST               1 (0)
            188 LOAD_FAST                1 (board)
            190 CALL_METHOD              2
            192 POP_TOP

 35         194 LOAD_FAST                1 (board)
            196 RETURN_VALUE

Disassembly of <code object backtrack at 0x7fe098705660, file ""<ast>"", line 37>:
 39           0 LOAD_FAST                1 (cell_no)
              2 LOAD_CONST               1 (81)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

 40           8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

 42     >>   12 LOAD_FAST                0 (self)
             14 LOAD_METHOD              0 (row_no)
             16 LOAD_FAST                1 (cell_no)
             18 CALL_METHOD              1
             20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              1 (col_no)
             24 LOAD_FAST                1 (cell_no)
             26 CALL_METHOD              1
             28 ROT_TWO
             30 STORE_FAST               3 (r)
             32 STORE_FAST               4 (c)

 44          34 LOAD_FAST                2 (board)
             36 LOAD_FAST                3 (r)
             38 BINARY_SUBSCR
             40 LOAD_FAST                4 (c)
             42 BINARY_SUBSCR
             44 LOAD_FAST                0 (self)
             46 LOAD_ATTR                2 (empty)
             48 COMPARE_OP               3 (!=)
             50 POP_JUMP_IF_FALSE       68

 45          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              3 (backtrack)
             56 LOAD_FAST                1 (cell_no)
             58 LOAD_CONST               3 (1)
             60 BINARY_ADD
             62 LOAD_FAST                2 (board)
             64 CALL_METHOD              2
             66 RETURN_VALUE

 47     >>   68 LOAD_FAST                0 (self)
             70 LOAD_ATTR                4 (sudoku_values)
             72 GET_ITER
        >>   74 FOR_ITER               216 (to 292)
             76 STORE_FAST               5 (val)

 49          78 LOAD_FAST                5 (val)
             80 LOAD_FAST                0 (self)
             82 LOAD_ATTR                5 (rows_values)
             84 LOAD_FAST                3 (r)
             86 BINARY_SUBSCR
             88 COMPARE_OP               6 (in)
             90 POP_JUMP_IF_TRUE        74
             92 LOAD_FAST                5 (val)
             94 LOAD_FAST                0 (self)
             96 LOAD_ATTR                6 (cols_values)
             98 LOAD_FAST                4 (c)
            100 BINARY_SUBSCR
            102 COMPARE_OP               6 (in)
            104 POP_JUMP_IF_TRUE        74
            106 LOAD_FAST                5 (val)
            108 LOAD_FAST                0 (self)
            110 LOAD_ATTR                7 (boxs_values)
            112 LOAD_FAST                0 (self)
            114 LOAD_METHOD              8 (box_no)
            116 LOAD_FAST                3 (r)
            118 LOAD_FAST                4 (c)
            120 CALL_METHOD              2
            122 BINARY_SUBSCR
            124 COMPARE_OP               6 (in)
            126 POP_JUMP_IF_FALSE      130

 50         128 JUMP_ABSOLUTE           74

 53     >>  130 LOAD_FAST                5 (val)
            132 LOAD_FAST                2 (board)
            134 LOAD_FAST                3 (r)
            136 BINARY_SUBSCR
            138 LOAD_FAST                4 (c)
            140 STORE_SUBSCR

 54         142 LOAD_FAST                0 (self)
            144 LOAD_ATTR                5 (rows_values)
            146 LOAD_FAST                3 (r)
            148 BINARY_SUBSCR
            150 LOAD_METHOD              9 (add)
            152 LOAD_FAST                5 (val)
            154 CALL_METHOD              1
            156 POP_TOP

 55         158 LOAD_FAST                0 (self)
            160 LOAD_ATTR                6 (cols_values)
            162 LOAD_FAST                4 (c)
            164 BINARY_SUBSCR
            166 LOAD_METHOD              9 (add)
            168 LOAD_FAST                5 (val)
            170 CALL_METHOD              1
            172 POP_TOP

 56         174 LOAD_FAST                0 (self)
            176 LOAD_ATTR                7 (boxs_values)
            178 LOAD_FAST                0 (self)
            180 LOAD_METHOD              8 (box_no)
            182 LOAD_FAST                3 (r)
            184 LOAD_FAST                4 (c)
            186 CALL_METHOD              2
            188 BINARY_SUBSCR
            190 LOAD_METHOD              9 (add)
            192 LOAD_FAST                5 (val)
            194 CALL_METHOD              1
            196 POP_TOP

 59         198 LOAD_FAST                0 (self)
            200 LOAD_METHOD              3 (backtrack)
            202 LOAD_FAST                1 (cell_no)
            204 LOAD_CONST               3 (1)
            206 BINARY_ADD
            208 LOAD_FAST                2 (board)
            210 CALL_METHOD              2
            212 POP_JUMP_IF_FALSE      220

 60         214 POP_TOP
            216 LOAD_CONST               2 (True)
            218 RETURN_VALUE

 63     >>  220 LOAD_FAST                0 (self)
            222 LOAD_ATTR                2 (empty)
            224 LOAD_FAST                2 (board)
            226 LOAD_FAST                3 (r)
            228 BINARY_SUBSCR
            230 LOAD_FAST                4 (c)
            232 STORE_SUBSCR

 64         234 LOAD_FAST                0 (self)
            236 LOAD_ATTR                5 (rows_values)
            238 LOAD_FAST                3 (r)
            240 BINARY_SUBSCR
            242 LOAD_METHOD             10 (remove)
            244 LOAD_FAST                5 (val)
            246 CALL_METHOD              1
            248 POP_TOP

 65         250 LOAD_FAST                0 (self)
            252 LOAD_ATTR                6 (cols_values)
            254 LOAD_FAST                4 (c)
            256 BINARY_SUBSCR
            258 LOAD_METHOD             10 (remove)
            260 LOAD_FAST                5 (val)
            262 CALL_METHOD              1
            264 POP_TOP

 66         266 LOAD_FAST                0 (self)
            268 LOAD_ATTR                7 (boxs_values)
            270 LOAD_FAST                0 (self)
            272 LOAD_METHOD              8 (box_no)
            274 LOAD_FAST                3 (r)
            276 LOAD_FAST                4 (c)
            278 CALL_METHOD              2
            280 BINARY_SUBSCR
            282 LOAD_METHOD             10 (remove)
            284 LOAD_FAST                5 (val)
            286 CALL_METHOD              1
            288 POP_TOP
            290 JUMP_ABSOLUTE           74

 68     >>  292 LOAD_CONST               4 (False)
            294 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        ## RC ##
		## APPROACH : BACKTRACKING ##
		## Similar to Leetcode : 51. N Queens, 36. Valid Sudoku ##
		## Time Complexity: O(9^(m * n))
        ## Space Complexity: O(m*n)
	
        n = len(board)        
        rows= [set() for _ in range(n)]
        cols = [set() for _ in range(n)]
        grids = [set() for _ in range(n)]
        
        def add_val_to_board(row, col, val):
            rows[row].add( val )
            cols[col].add( val )
            grids[(row//3)*3+ (col//3)].add( val )
            board[row][col] = str(val)
            
        def remove_val_from_board(row, col, val):
            rows[row].remove( val )
            cols[col].remove( val )
            grids[(row//3)*3+ (col//3)].remove( val )
            board[row][col] = "".""
        
        def fill_board(row, col, val, board):
            
            if( row < 0 or col < 0 or row >= n or col >= n ):
                return
            
            ## GIST, incrementing row and col here
            while not board[row][col] == '.':
                col += 1
                if col == 9: 
                    col, row = 0, row+1
                if row == 9: 
                    return True
                
            for val in range( 1, n+1 ):
                if( val in rows[row] or val in cols[col] or val in grids[(row//3)*3+ (col//3)]):
                    continue
                    
                add_val_to_board(row, col, val)

                if( fill_board(row, col, val, board) ):
                    return board
                
                remove_val_from_board(row, col, val)

        for i in range(n):
            for j in range(n):
                if( not board[i][j] == ""."" ):
                    add_val_to_board( i, j, int(board[i][j]) )
        
        return fill_board(0, 0, board[0][0], board)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fc776585710, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fc776585710, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fc776585660, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fc776585660, file ""<ast>"", line 2>:
 12           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF               1 (board)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              5 (n)

 13           8 LOAD_CONST               1 (<code object <listcomp> at 0x7fc776585240, file ""<ast>"", line 13>)
             10 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_GLOBAL              1 (range)
             16 LOAD_DEREF               5 (n)
             18 CALL_FUNCTION            1
             20 GET_ITER
             22 CALL_FUNCTION            1
             24 STORE_DEREF              7 (rows)

 14          26 LOAD_CONST               3 (<code object <listcomp> at 0x7fc7765852f0, file ""<ast>"", line 14>)
             28 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             30 MAKE_FUNCTION            0
             32 LOAD_GLOBAL              1 (range)
             34 LOAD_DEREF               5 (n)
             36 CALL_FUNCTION            1
             38 GET_ITER
             40 CALL_FUNCTION            1
             42 STORE_DEREF              2 (cols)

 15          44 LOAD_CONST               4 (<code object <listcomp> at 0x7fc7765853a0, file ""<ast>"", line 15>)
             46 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             48 MAKE_FUNCTION            0
             50 LOAD_GLOBAL              1 (range)
             52 LOAD_DEREF               5 (n)
             54 CALL_FUNCTION            1
             56 GET_ITER
             58 CALL_FUNCTION            1
             60 STORE_DEREF              4 (grids)

 17          62 LOAD_CLOSURE             1 (board)
             64 LOAD_CLOSURE             2 (cols)
             66 LOAD_CLOSURE             4 (grids)
             68 LOAD_CLOSURE             7 (rows)
             70 BUILD_TUPLE              4
             72 LOAD_CONST               5 (<code object add_val_to_board at 0x7fc776585450, file ""<ast>"", line 17>)
             74 LOAD_CONST               6 ('Solution.solveSudoku.<locals>.add_val_to_board')
             76 MAKE_FUNCTION            8 (closure)
             78 STORE_DEREF              0 (add_val_to_board)

 23          80 LOAD_CLOSURE             1 (board)
             82 LOAD_CLOSURE             2 (cols)
             84 LOAD_CLOSURE             4 (grids)
             86 LOAD_CLOSURE             7 (rows)
             88 BUILD_TUPLE              4
             90 LOAD_CONST               7 (<code object remove_val_from_board at 0x7fc776585500, file ""<ast>"", line 23>)
             92 LOAD_CONST               8 ('Solution.solveSudoku.<locals>.remove_val_from_board')
             94 MAKE_FUNCTION            8 (closure)
             96 STORE_DEREF              6 (remove_val_from_board)

 29          98 LOAD_CLOSURE             0 (add_val_to_board)
            100 LOAD_CLOSURE             2 (cols)
            102 LOAD_CLOSURE             3 (fill_board)
            104 LOAD_CLOSURE             4 (grids)
            106 LOAD_CLOSURE             5 (n)
            108 LOAD_CLOSURE             6 (remove_val_from_board)
            110 LOAD_CLOSURE             7 (rows)
            112 BUILD_TUPLE              7
            114 LOAD_CONST               9 (<code object fill_board at 0x7fc7765855b0, file ""<ast>"", line 29>)
            116 LOAD_CONST              10 ('Solution.solveSudoku.<locals>.fill_board')
            118 MAKE_FUNCTION            8 (closure)
            120 STORE_DEREF              3 (fill_board)

 53         122 LOAD_GLOBAL              1 (range)
            124 LOAD_DEREF               5 (n)
            126 CALL_FUNCTION            1
            128 GET_ITER
        >>  130 FOR_ITER                58 (to 190)
            132 STORE_FAST               2 (i)

 54         134 LOAD_GLOBAL              1 (range)
            136 LOAD_DEREF               5 (n)
            138 CALL_FUNCTION            1
            140 GET_ITER
        >>  142 FOR_ITER                44 (to 188)
            144 STORE_FAST               3 (j)

 55         146 LOAD_DEREF               1 (board)
            148 LOAD_FAST                2 (i)
            150 BINARY_SUBSCR
            152 LOAD_FAST                3 (j)
            154 BINARY_SUBSCR
            156 LOAD_CONST              11 ('.')
            158 COMPARE_OP               2 (==)
            160 POP_JUMP_IF_TRUE       142

 56         162 LOAD_DEREF               0 (add_val_to_board)
            164 LOAD_FAST                2 (i)
            166 LOAD_FAST                3 (j)
            168 LOAD_GLOBAL              2 (int)
            170 LOAD_DEREF               1 (board)
            172 LOAD_FAST                2 (i)
            174 BINARY_SUBSCR
            176 LOAD_FAST                3 (j)
            178 BINARY_SUBSCR
            180 CALL_FUNCTION            1
            182 CALL_FUNCTION            3
            184 POP_TOP
            186 JUMP_ABSOLUTE          142
        >>  188 JUMP_ABSOLUTE          130

 58     >>  190 LOAD_DEREF               3 (fill_board)
            192 LOAD_CONST              12 (0)
            194 LOAD_CONST              12 (0)
            196 LOAD_DEREF               1 (board)
            198 LOAD_CONST              12 (0)
            200 BINARY_SUBSCR
            202 LOAD_CONST              12 (0)
            204 BINARY_SUBSCR
            206 LOAD_DEREF               1 (board)
            208 CALL_FUNCTION            4
            210 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc776585240, file ""<ast>"", line 13>:
 13           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc7765852f0, file ""<ast>"", line 14>:
 14           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fc7765853a0, file ""<ast>"", line 15>:
 15           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object add_val_to_board at 0x7fc776585450, file ""<ast>"", line 17>:
 18           0 LOAD_DEREF               3 (rows)
              2 LOAD_FAST                0 (row)
              4 BINARY_SUBSCR
              6 LOAD_METHOD              0 (add)
              8 LOAD_FAST                2 (val)
             10 CALL_METHOD              1
             12 POP_TOP

 19          14 LOAD_DEREF               1 (cols)
             16 LOAD_FAST                1 (col)
             18 BINARY_SUBSCR
             20 LOAD_METHOD              0 (add)
             22 LOAD_FAST                2 (val)
             24 CALL_METHOD              1
             26 POP_TOP

 20          28 LOAD_DEREF               2 (grids)
             30 LOAD_FAST                0 (row)
             32 LOAD_CONST               1 (3)
             34 BINARY_FLOOR_DIVIDE
             36 LOAD_CONST               1 (3)
             38 BINARY_MULTIPLY
             40 LOAD_FAST                1 (col)
             42 LOAD_CONST               1 (3)
             44 BINARY_FLOOR_DIVIDE
             46 BINARY_ADD
             48 BINARY_SUBSCR
             50 LOAD_METHOD              0 (add)
             52 LOAD_FAST                2 (val)
             54 CALL_METHOD              1
             56 POP_TOP

 21          58 LOAD_GLOBAL              1 (str)
             60 LOAD_FAST                2 (val)
             62 CALL_FUNCTION            1
             64 LOAD_DEREF               0 (board)
             66 LOAD_FAST                0 (row)
             68 BINARY_SUBSCR
             70 LOAD_FAST                1 (col)
             72 STORE_SUBSCR
             74 LOAD_CONST               0 (None)
             76 RETURN_VALUE

Disassembly of <code object remove_val_from_board at 0x7fc776585500, file ""<ast>"", line 23>:
 24           0 LOAD_DEREF               3 (rows)
              2 LOAD_FAST                0 (row)
              4 BINARY_SUBSCR
              6 LOAD_METHOD              0 (remove)
              8 LOAD_FAST                2 (val)
             10 CALL_METHOD              1
             12 POP_TOP

 25          14 LOAD_DEREF               1 (cols)
             16 LOAD_FAST                1 (col)
             18 BINARY_SUBSCR
             20 LOAD_METHOD              0 (remove)
             22 LOAD_FAST                2 (val)
             24 CALL_METHOD              1
             26 POP_TOP

 26          28 LOAD_DEREF               2 (grids)
             30 LOAD_FAST                0 (row)
             32 LOAD_CONST               1 (3)
             34 BINARY_FLOOR_DIVIDE
             36 LOAD_CONST               1 (3)
             38 BINARY_MULTIPLY
             40 LOAD_FAST                1 (col)
             42 LOAD_CONST               1 (3)
             44 BINARY_FLOOR_DIVIDE
             46 BINARY_ADD
             48 BINARY_SUBSCR
             50 LOAD_METHOD              0 (remove)
             52 LOAD_FAST                2 (val)
             54 CALL_METHOD              1
             56 POP_TOP

 27          58 LOAD_CONST               2 ('.')
             60 LOAD_DEREF               0 (board)
             62 LOAD_FAST                0 (row)
             64 BINARY_SUBSCR
             66 LOAD_FAST                1 (col)
             68 STORE_SUBSCR
             70 LOAD_CONST               0 (None)
             72 RETURN_VALUE

Disassembly of <code object fill_board at 0x7fc7765855b0, file ""<ast>"", line 29>:
 31           0 LOAD_FAST                0 (row)
              2 LOAD_CONST               1 (0)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_TRUE        32
              8 LOAD_FAST                1 (col)
             10 LOAD_CONST               1 (0)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_TRUE        32
             16 LOAD_FAST                0 (row)
             18 LOAD_DEREF               4 (n)
             20 COMPARE_OP               5 (>=)
             22 POP_JUMP_IF_TRUE        32
             24 LOAD_FAST                1 (col)
             26 LOAD_DEREF               4 (n)
             28 COMPARE_OP               5 (>=)
             30 POP_JUMP_IF_FALSE       36

 32     >>   32 LOAD_CONST               0 (None)
             34 RETURN_VALUE

 35     >>   36 LOAD_FAST                3 (board)
             38 LOAD_FAST                0 (row)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (col)
             44 BINARY_SUBSCR
             46 LOAD_CONST               2 ('.')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_TRUE        96

 36          52 LOAD_FAST                1 (col)
             54 LOAD_CONST               3 (1)
             56 INPLACE_ADD
             58 STORE_FAST               1 (col)

 37          60 LOAD_FAST                1 (col)
             62 LOAD_CONST               4 (9)
             64 COMPARE_OP               2 (==)
             66 POP_JUMP_IF_FALSE       82

 38          68 LOAD_CONST               1 (0)
             70 LOAD_FAST                0 (row)
             72 LOAD_CONST               3 (1)
             74 BINARY_ADD
             76 ROT_TWO
             78 STORE_FAST               1 (col)
             80 STORE_FAST               0 (row)

 39     >>   82 LOAD_FAST                0 (row)
             84 LOAD_CONST               4 (9)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       36

 40          90 LOAD_CONST               5 (True)
             92 RETURN_VALUE
             94 JUMP_ABSOLUTE           36

 42     >>   96 LOAD_GLOBAL              0 (range)
             98 LOAD_CONST               3 (1)
            100 LOAD_DEREF               4 (n)
            102 LOAD_CONST               3 (1)
            104 BINARY_ADD
            106 CALL_FUNCTION            2
            108 GET_ITER
        >>  110 FOR_ITER               104 (to 216)
            112 STORE_FAST               2 (val)

 43         114 LOAD_FAST                2 (val)
            116 LOAD_DEREF               6 (rows)
            118 LOAD_FAST                0 (row)
            120 BINARY_SUBSCR
            122 COMPARE_OP               6 (in)
            124 POP_JUMP_IF_TRUE       110
            126 LOAD_FAST                2 (val)
            128 LOAD_DEREF               1 (cols)
            130 LOAD_FAST                1 (col)
            132 BINARY_SUBSCR
            134 COMPARE_OP               6 (in)
            136 POP_JUMP_IF_TRUE       110
            138 LOAD_FAST                2 (val)
            140 LOAD_DEREF               3 (grids)
            142 LOAD_FAST                0 (row)
            144 LOAD_CONST               6 (3)
            146 BINARY_FLOOR_DIVIDE
            148 LOAD_CONST               6 (3)
            150 BINARY_MULTIPLY
            152 LOAD_FAST                1 (col)
            154 LOAD_CONST               6 (3)
            156 BINARY_FLOOR_DIVIDE
            158 BINARY_ADD
            160 BINARY_SUBSCR
            162 COMPARE_OP               6 (in)
            164 POP_JUMP_IF_FALSE      168

 44         166 JUMP_ABSOLUTE          110

 46     >>  168 LOAD_DEREF               0 (add_val_to_board)
            170 LOAD_FAST                0 (row)
            172 LOAD_FAST                1 (col)
            174 LOAD_FAST                2 (val)
            176 CALL_FUNCTION            3
            178 POP_TOP

 48         180 LOAD_DEREF               2 (fill_board)
            182 LOAD_FAST                0 (row)
            184 LOAD_FAST                1 (col)
            186 LOAD_FAST                2 (val)
            188 LOAD_FAST                3 (board)
            190 CALL_FUNCTION            4
            192 POP_JUMP_IF_FALSE      202

 49         194 LOAD_FAST                3 (board)
            196 ROT_TWO
            198 POP_TOP
            200 RETURN_VALUE

 51     >>  202 LOAD_DEREF               5 (remove_val_from_board)
            204 LOAD_FAST                0 (row)
            206 LOAD_FAST                1 (col)
            208 LOAD_FAST                2 (val)
            210 CALL_FUNCTION            3
            212 POP_TOP
            214 JUMP_ABSOLUTE          110
        >>  216 LOAD_CONST               0 (None)
            218 RETURN_VALUE
None
"
solveSudoku,"class Solution1:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]
        for i in range(9):
            for j in range(9):
                if board[i][j] !='.':
                    num = int(board[i][j])
                    rows[i].add(num)
                    cols[j].add(num)
                    boxes[(i//3)*3 +j//3].add(num)
        self.bt(board, 0 ,0, rows, cols, boxes)
        
    def bt(self, board, i, j, rows, cols, boxes):
        if i == 9: return True
        if j >=9: return self.bt(board, i+1, 0, rows, cols, boxes)
        if board[i][j] != '.':
            return self.bt(board, i, j+1, rows, cols, boxes)
        
        for k in range(1,10):
            if self.isValid(board, i, j, k, rows, cols, boxes):
                board[i][j] = str(k)
                rows[i].add(k)
                cols[j].add(k)
                boxes[(i//3)*3 +j//3].add(k)
                if self.bt(board, i, j+1, rows, cols, boxes):
                    return True
                rows[i].remove(k)
                cols[j].remove(k)
                boxes[(i//3)*3 +j//3].remove(k)
                board[i][j] = '.'

        return False
    
    def isValid(self, board, x, y, v, rows, cols, boxes):
        if v in rows[x] or v in cols[y] or v in boxes[(x//3)*3+y//3]:
            return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution1 at 0x7f078fae5660, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution1')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution1')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution1)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution1 at 0x7f078fae5660, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution1')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7f078fae5450, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution1.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)

 18          32 LOAD_CONST               5 (<code object bt at 0x7f078fae5500, file ""<ast>"", line 18>)
             34 LOAD_CONST               6 ('Solution1.bt')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               6 (bt)

 39          40 LOAD_CONST               7 (<code object isValid at 0x7f078fae55b0, file ""<ast>"", line 39>)
             42 LOAD_CONST               8 ('Solution1.isValid')
             44 MAKE_FUNCTION            0
             46 STORE_NAME               7 (isValid)
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f078fae5450, file ""<ast>"", line 2>:
  6           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f078fae5240, file ""<ast>"", line 6>)
              2 LOAD_CONST               2 ('Solution1.solveSudoku.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_GLOBAL              0 (range)
              8 LOAD_CONST               3 (9)
             10 CALL_FUNCTION            1
             12 GET_ITER
             14 CALL_FUNCTION            1
             16 STORE_FAST               2 (rows)

  7          18 LOAD_CONST               4 (<code object <listcomp> at 0x7f078fae52f0, file ""<ast>"", line 7>)
             20 LOAD_CONST               2 ('Solution1.solveSudoku.<locals>.<listcomp>')
             22 MAKE_FUNCTION            0
             24 LOAD_GLOBAL              0 (range)
             26 LOAD_CONST               3 (9)
             28 CALL_FUNCTION            1
             30 GET_ITER
             32 CALL_FUNCTION            1
             34 STORE_FAST               3 (cols)

  8          36 LOAD_CONST               5 (<code object <listcomp> at 0x7f078fae53a0, file ""<ast>"", line 8>)
             38 LOAD_CONST               2 ('Solution1.solveSudoku.<locals>.<listcomp>')
             40 MAKE_FUNCTION            0
             42 LOAD_GLOBAL              0 (range)
             44 LOAD_CONST               3 (9)
             46 CALL_FUNCTION            1
             48 GET_ITER
             50 CALL_FUNCTION            1
             52 STORE_FAST               4 (boxes)

  9          54 LOAD_GLOBAL              0 (range)
             56 LOAD_CONST               3 (9)
             58 CALL_FUNCTION            1
             60 GET_ITER
        >>   62 FOR_ITER               108 (to 172)
             64 STORE_FAST               5 (i)

 10          66 LOAD_GLOBAL              0 (range)
             68 LOAD_CONST               3 (9)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                94 (to 170)
             76 STORE_FAST               6 (j)

 11          78 LOAD_FAST                1 (board)
             80 LOAD_FAST                5 (i)
             82 BINARY_SUBSCR
             84 LOAD_FAST                6 (j)
             86 BINARY_SUBSCR
             88 LOAD_CONST               6 ('.')
             90 COMPARE_OP               3 (!=)
             92 POP_JUMP_IF_FALSE       74

 12          94 LOAD_GLOBAL              1 (int)
             96 LOAD_FAST                1 (board)
             98 LOAD_FAST                5 (i)
            100 BINARY_SUBSCR
            102 LOAD_FAST                6 (j)
            104 BINARY_SUBSCR
            106 CALL_FUNCTION            1
            108 STORE_FAST               7 (num)

 13         110 LOAD_FAST                2 (rows)
            112 LOAD_FAST                5 (i)
            114 BINARY_SUBSCR
            116 LOAD_METHOD              2 (add)
            118 LOAD_FAST                7 (num)
            120 CALL_METHOD              1
            122 POP_TOP

 14         124 LOAD_FAST                3 (cols)
            126 LOAD_FAST                6 (j)
            128 BINARY_SUBSCR
            130 LOAD_METHOD              2 (add)
            132 LOAD_FAST                7 (num)
            134 CALL_METHOD              1
            136 POP_TOP

 15         138 LOAD_FAST                4 (boxes)
            140 LOAD_FAST                5 (i)
            142 LOAD_CONST               7 (3)
            144 BINARY_FLOOR_DIVIDE
            146 LOAD_CONST               7 (3)
            148 BINARY_MULTIPLY
            150 LOAD_FAST                6 (j)
            152 LOAD_CONST               7 (3)
            154 BINARY_FLOOR_DIVIDE
            156 BINARY_ADD
            158 BINARY_SUBSCR
            160 LOAD_METHOD              2 (add)
            162 LOAD_FAST                7 (num)
            164 CALL_METHOD              1
            166 POP_TOP
            168 JUMP_ABSOLUTE           74
        >>  170 JUMP_ABSOLUTE           62

 16     >>  172 LOAD_FAST                0 (self)
            174 LOAD_METHOD              3 (bt)
            176 LOAD_FAST                1 (board)
            178 LOAD_CONST               8 (0)
            180 LOAD_CONST               8 (0)
            182 LOAD_FAST                2 (rows)
            184 LOAD_FAST                3 (cols)
            186 LOAD_FAST                4 (boxes)
            188 CALL_METHOD              6
            190 POP_TOP
            192 LOAD_CONST               9 (None)
            194 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f078fae5240, file ""<ast>"", line 6>:
  6           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f078fae52f0, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f078fae53a0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object bt at 0x7f078fae5500, file ""<ast>"", line 18>:
 19           0 LOAD_FAST                2 (i)
              2 LOAD_CONST               1 (9)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

 20     >>   12 LOAD_FAST                3 (j)
             14 LOAD_CONST               1 (9)
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       44
             20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              0 (bt)
             24 LOAD_FAST                1 (board)
             26 LOAD_FAST                2 (i)
             28 LOAD_CONST               3 (1)
             30 BINARY_ADD
             32 LOAD_CONST               4 (0)
             34 LOAD_FAST                4 (rows)
             36 LOAD_FAST                5 (cols)
             38 LOAD_FAST                6 (boxes)
             40 CALL_METHOD              6
             42 RETURN_VALUE

 21     >>   44 LOAD_FAST                1 (board)
             46 LOAD_FAST                2 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                3 (j)
             52 BINARY_SUBSCR
             54 LOAD_CONST               5 ('.')
             56 COMPARE_OP               3 (!=)
             58 POP_JUMP_IF_FALSE       84

 22          60 LOAD_FAST                0 (self)
             62 LOAD_METHOD              0 (bt)
             64 LOAD_FAST                1 (board)
             66 LOAD_FAST                2 (i)
             68 LOAD_FAST                3 (j)
             70 LOAD_CONST               3 (1)
             72 BINARY_ADD
             74 LOAD_FAST                4 (rows)
             76 LOAD_FAST                5 (cols)
             78 LOAD_FAST                6 (boxes)
             80 CALL_METHOD              6
             82 RETURN_VALUE

 24     >>   84 LOAD_GLOBAL              1 (range)
             86 LOAD_CONST               3 (1)
             88 LOAD_CONST               6 (10)
             90 CALL_FUNCTION            2
             92 GET_ITER
        >>   94 FOR_ITER               200 (to 296)
             96 STORE_FAST               7 (k)

 25          98 LOAD_FAST                0 (self)
            100 LOAD_METHOD              2 (isValid)
            102 LOAD_FAST                1 (board)
            104 LOAD_FAST                2 (i)
            106 LOAD_FAST                3 (j)
            108 LOAD_FAST                7 (k)
            110 LOAD_FAST                4 (rows)
            112 LOAD_FAST                5 (cols)
            114 LOAD_FAST                6 (boxes)
            116 CALL_METHOD              7
            118 POP_JUMP_IF_FALSE       94

 26         120 LOAD_GLOBAL              3 (str)
            122 LOAD_FAST                7 (k)
            124 CALL_FUNCTION            1
            126 LOAD_FAST                1 (board)
            128 LOAD_FAST                2 (i)
            130 BINARY_SUBSCR
            132 LOAD_FAST                3 (j)
            134 STORE_SUBSCR

 27         136 LOAD_FAST                4 (rows)
            138 LOAD_FAST                2 (i)
            140 BINARY_SUBSCR
            142 LOAD_METHOD              4 (add)
            144 LOAD_FAST                7 (k)
            146 CALL_METHOD              1
            148 POP_TOP

 28         150 LOAD_FAST                5 (cols)
            152 LOAD_FAST                3 (j)
            154 BINARY_SUBSCR
            156 LOAD_METHOD              4 (add)
            158 LOAD_FAST                7 (k)
            160 CALL_METHOD              1
            162 POP_TOP

 29         164 LOAD_FAST                6 (boxes)
            166 LOAD_FAST                2 (i)
            168 LOAD_CONST               7 (3)
            170 BINARY_FLOOR_DIVIDE
            172 LOAD_CONST               7 (3)
            174 BINARY_MULTIPLY
            176 LOAD_FAST                3 (j)
            178 LOAD_CONST               7 (3)
            180 BINARY_FLOOR_DIVIDE
            182 BINARY_ADD
            184 BINARY_SUBSCR
            186 LOAD_METHOD              4 (add)
            188 LOAD_FAST                7 (k)
            190 CALL_METHOD              1
            192 POP_TOP

 30         194 LOAD_FAST                0 (self)
            196 LOAD_METHOD              0 (bt)
            198 LOAD_FAST                1 (board)
            200 LOAD_FAST                2 (i)
            202 LOAD_FAST                3 (j)
            204 LOAD_CONST               3 (1)
            206 BINARY_ADD
            208 LOAD_FAST                4 (rows)
            210 LOAD_FAST                5 (cols)
            212 LOAD_FAST                6 (boxes)
            214 CALL_METHOD              6
            216 POP_JUMP_IF_FALSE      224

 31         218 POP_TOP
            220 LOAD_CONST               2 (True)
            222 RETURN_VALUE

 32     >>  224 LOAD_FAST                4 (rows)
            226 LOAD_FAST                2 (i)
            228 BINARY_SUBSCR
            230 LOAD_METHOD              5 (remove)
            232 LOAD_FAST                7 (k)
            234 CALL_METHOD              1
            236 POP_TOP

 33         238 LOAD_FAST                5 (cols)
            240 LOAD_FAST                3 (j)
            242 BINARY_SUBSCR
            244 LOAD_METHOD              5 (remove)
            246 LOAD_FAST                7 (k)
            248 CALL_METHOD              1
            250 POP_TOP

 34         252 LOAD_FAST                6 (boxes)
            254 LOAD_FAST                2 (i)
            256 LOAD_CONST               7 (3)
            258 BINARY_FLOOR_DIVIDE
            260 LOAD_CONST               7 (3)
            262 BINARY_MULTIPLY
            264 LOAD_FAST                3 (j)
            266 LOAD_CONST               7 (3)
            268 BINARY_FLOOR_DIVIDE
            270 BINARY_ADD
            272 BINARY_SUBSCR
            274 LOAD_METHOD              5 (remove)
            276 LOAD_FAST                7 (k)
            278 CALL_METHOD              1
            280 POP_TOP

 35         282 LOAD_CONST               5 ('.')
            284 LOAD_FAST                1 (board)
            286 LOAD_FAST                2 (i)
            288 BINARY_SUBSCR
            290 LOAD_FAST                3 (j)
            292 STORE_SUBSCR
            294 JUMP_ABSOLUTE           94

 37     >>  296 LOAD_CONST               8 (False)
            298 RETURN_VALUE

Disassembly of <code object isValid at 0x7f078fae55b0, file ""<ast>"", line 39>:
 40           0 LOAD_FAST                4 (v)
              2 LOAD_FAST                5 (rows)
              4 LOAD_FAST                2 (x)
              6 BINARY_SUBSCR
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_TRUE        52
             12 LOAD_FAST                4 (v)
             14 LOAD_FAST                6 (cols)
             16 LOAD_FAST                3 (y)
             18 BINARY_SUBSCR
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_TRUE        52
             24 LOAD_FAST                4 (v)
             26 LOAD_FAST                7 (boxes)
             28 LOAD_FAST                2 (x)
             30 LOAD_CONST               1 (3)
             32 BINARY_FLOOR_DIVIDE
             34 LOAD_CONST               1 (3)
             36 BINARY_MULTIPLY
             38 LOAD_FAST                3 (y)
             40 LOAD_CONST               1 (3)
             42 BINARY_FLOOR_DIVIDE
             44 BINARY_ADD
             46 BINARY_SUBSCR
             48 COMPARE_OP               6 (in)
             50 POP_JUMP_IF_FALSE       56

 41     >>   52 LOAD_CONST               2 (False)
             54 RETURN_VALUE

 42     >>   56 LOAD_CONST               3 (True)
             58 RETURN_VALUE
None
"
solveSudoku,"class Solution2:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        self.bt(board, 0 ,0)
        
    def bt(self, board, i, j):
        if i == 9: return True
        if j >=9: return self.bt(board, i+1, 0)
        if board[i][j] != '.':
            return self.bt(board, i, j+1)
        
        for k in range(1,10):
            if self.isValid(board, i, j, str(k)):
                board[i][j] = str(k)
                if self.bt(board, i, j+1):
                    return True
                board[i][j] = '.'

        return False
    
    def isValid(self, board, x, y, v):
        for i in range(9):
            if board[x][i] == v:
                return False
        for i in range(9):
            if board[i][y] == v:
                return False
        
        #top-left corner in subboxes
        nx = 3*(x//3)
        ny = 3*(y//3)
        for i in range(3):
            for j in range(3):
                if board[nx+i][ny+j] == v:
                    return False
        return True
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution2 at 0x7fc5cc0e5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution2')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution2')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution2)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution2 at 0x7fc5cc0e5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution2')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fc5cc0e5240, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution2.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)

  8          32 LOAD_CONST               5 (<code object bt at 0x7fc5cc0e52f0, file ""<ast>"", line 8>)
             34 LOAD_CONST               6 ('Solution2.bt')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               6 (bt)

 23          40 LOAD_CONST               7 (<code object isValid at 0x7fc5cc0e53a0, file ""<ast>"", line 23>)
             42 LOAD_CONST               8 ('Solution2.isValid')
             44 MAKE_FUNCTION            0
             46 STORE_NAME               7 (isValid)
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fc5cc0e5240, file ""<ast>"", line 2>:
  6           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (bt)
              4 LOAD_FAST                1 (board)
              6 LOAD_CONST               1 (0)
              8 LOAD_CONST               1 (0)
             10 CALL_METHOD              3
             12 POP_TOP
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object bt at 0x7fc5cc0e52f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                2 (i)
              2 LOAD_CONST               1 (9)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (True)
             10 RETURN_VALUE

 10     >>   12 LOAD_FAST                3 (j)
             14 LOAD_CONST               1 (9)
             16 COMPARE_OP               5 (>=)
             18 POP_JUMP_IF_FALSE       38
             20 LOAD_FAST                0 (self)
             22 LOAD_METHOD              0 (bt)
             24 LOAD_FAST                1 (board)
             26 LOAD_FAST                2 (i)
             28 LOAD_CONST               3 (1)
             30 BINARY_ADD
             32 LOAD_CONST               4 (0)
             34 CALL_METHOD              3
             36 RETURN_VALUE

 11     >>   38 LOAD_FAST                1 (board)
             40 LOAD_FAST                2 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                3 (j)
             46 BINARY_SUBSCR
             48 LOAD_CONST               5 ('.')
             50 COMPARE_OP               3 (!=)
             52 POP_JUMP_IF_FALSE       72

 12          54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              0 (bt)
             58 LOAD_FAST                1 (board)
             60 LOAD_FAST                2 (i)
             62 LOAD_FAST                3 (j)
             64 LOAD_CONST               3 (1)
             66 BINARY_ADD
             68 CALL_METHOD              3
             70 RETURN_VALUE

 14     >>   72 LOAD_GLOBAL              1 (range)
             74 LOAD_CONST               3 (1)
             76 LOAD_CONST               6 (10)
             78 CALL_FUNCTION            2
             80 GET_ITER
        >>   82 FOR_ITER                76 (to 160)
             84 STORE_FAST               4 (k)

 15          86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              2 (isValid)
             90 LOAD_FAST                1 (board)
             92 LOAD_FAST                2 (i)
             94 LOAD_FAST                3 (j)
             96 LOAD_GLOBAL              3 (str)
             98 LOAD_FAST                4 (k)
            100 CALL_FUNCTION            1
            102 CALL_METHOD              4
            104 POP_JUMP_IF_FALSE       82

 16         106 LOAD_GLOBAL              3 (str)
            108 LOAD_FAST                4 (k)
            110 CALL_FUNCTION            1
            112 LOAD_FAST                1 (board)
            114 LOAD_FAST                2 (i)
            116 BINARY_SUBSCR
            118 LOAD_FAST                3 (j)
            120 STORE_SUBSCR

 17         122 LOAD_FAST                0 (self)
            124 LOAD_METHOD              0 (bt)
            126 LOAD_FAST                1 (board)
            128 LOAD_FAST                2 (i)
            130 LOAD_FAST                3 (j)
            132 LOAD_CONST               3 (1)
            134 BINARY_ADD
            136 CALL_METHOD              3
            138 POP_JUMP_IF_FALSE      146

 18         140 POP_TOP
            142 LOAD_CONST               2 (True)
            144 RETURN_VALUE

 19     >>  146 LOAD_CONST               5 ('.')
            148 LOAD_FAST                1 (board)
            150 LOAD_FAST                2 (i)
            152 BINARY_SUBSCR
            154 LOAD_FAST                3 (j)
            156 STORE_SUBSCR
            158 JUMP_ABSOLUTE           82

 21     >>  160 LOAD_CONST               7 (False)
            162 RETURN_VALUE

Disassembly of <code object isValid at 0x7fc5cc0e53a0, file ""<ast>"", line 23>:
 24           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 GET_ITER
        >>    8 FOR_ITER                26 (to 36)
             10 STORE_FAST               5 (i)

 25          12 LOAD_FAST                1 (board)
             14 LOAD_FAST                2 (x)
             16 BINARY_SUBSCR
             18 LOAD_FAST                5 (i)
             20 BINARY_SUBSCR
             22 LOAD_FAST                4 (v)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE        8

 26          28 POP_TOP
             30 LOAD_CONST               2 (False)
             32 RETURN_VALUE
             34 JUMP_ABSOLUTE            8

 27     >>   36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               1 (9)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                26 (to 72)
             46 STORE_FAST               5 (i)

 28          48 LOAD_FAST                1 (board)
             50 LOAD_FAST                5 (i)
             52 BINARY_SUBSCR
             54 LOAD_FAST                3 (y)
             56 BINARY_SUBSCR
             58 LOAD_FAST                4 (v)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       44

 29          64 POP_TOP
             66 LOAD_CONST               2 (False)
             68 RETURN_VALUE
             70 JUMP_ABSOLUTE           44

 32     >>   72 LOAD_CONST               3 (3)
             74 LOAD_FAST                2 (x)
             76 LOAD_CONST               3 (3)
             78 BINARY_FLOOR_DIVIDE
             80 BINARY_MULTIPLY
             82 STORE_FAST               6 (nx)

 33          84 LOAD_CONST               3 (3)
             86 LOAD_FAST                3 (y)
             88 LOAD_CONST               3 (3)
             90 BINARY_FLOOR_DIVIDE
             92 BINARY_MULTIPLY
             94 STORE_FAST               7 (ny)

 34          96 LOAD_GLOBAL              0 (range)
             98 LOAD_CONST               3 (3)
            100 CALL_FUNCTION            1
            102 GET_ITER
        >>  104 FOR_ITER                50 (to 156)
            106 STORE_FAST               5 (i)

 35         108 LOAD_GLOBAL              0 (range)
            110 LOAD_CONST               3 (3)
            112 CALL_FUNCTION            1
            114 GET_ITER
        >>  116 FOR_ITER                36 (to 154)
            118 STORE_FAST               8 (j)

 36         120 LOAD_FAST                1 (board)
            122 LOAD_FAST                6 (nx)
            124 LOAD_FAST                5 (i)
            126 BINARY_ADD
            128 BINARY_SUBSCR
            130 LOAD_FAST                7 (ny)
            132 LOAD_FAST                8 (j)
            134 BINARY_ADD
            136 BINARY_SUBSCR
            138 LOAD_FAST                4 (v)
            140 COMPARE_OP               2 (==)
            142 POP_JUMP_IF_FALSE      116

 37         144 POP_TOP
            146 POP_TOP
            148 LOAD_CONST               2 (False)
            150 RETURN_VALUE
            152 JUMP_ABSOLUTE          116
        >>  154 JUMP_ABSOLUTE          104

 38     >>  156 LOAD_CONST               4 (True)
            158 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    # @param board, a 9x9 2D array
    # Solve the Sudoku by modifying the input board in-place.
    # Do not return any value.
    
    def solveSudoku(self, board:List[List[str]])->None:
        self.board = board
        self.solve()

    def getCandidates(self, row, col):
        board = self.board
        
        candidates = [""1"", ""2"", ""3"", ""4"", ""5"",""6"",""7"",""8"",""9""]
        
        # remove nums from rows and columns
        for i in range(9):
            if board[row][i] in candidates:
                candidates.remove(board[row][i])
            if board[i][col] in candidates:
                candidates.remove(board[i][col])
        
        # remove nums from square
        col_start = (col // 3) * 3
        row_start = (row // 3) * 3
        for i in range(row_start, row_start + 3):
            for j in range(col_start, col_start + 3):
                if board[i][j] in candidates:
                    candidates.remove(board[i][j])
        
        return candidates

    def solve(self):
        board = self.board
        open_squares = []
        
        # add all open suqares to a list
        for i in range(9):
            for j in range(9):
                if board[i][j] == ""."":
                    open_squares.append((i,j,self.getCandidates(i,j)))
        
        # if there are no more open squares, your board is complete
        if not open_squares:
            return True
        
        # get the open square with the fewest candidates
        open_squares.sort(key = lambda x: len(x[2]))
        a,b,candidates = open_squares[0]
        
        # try each candidate, and if the board
        # can't be recursively solved, reset to "".""
        for can in candidates:
            board[a][b] = can
            if self.solve():
                return True
            board[a][b] = "".""
        
        # if we've gotten here, we've gone down a bad recursive path
        # i.e. all candidates have been tried and there are still open
        # squares, so return False, causing our algo to backtrack. 
        return False
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa65db55500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa65db55500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  6           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fa65db55240, file ""<ast>"", line 6>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)

 10          32 LOAD_CONST               5 (<code object getCandidates at 0x7fa65db552f0, file ""<ast>"", line 10>)
             34 LOAD_CONST               6 ('Solution.getCandidates')
             36 MAKE_FUNCTION            0
             38 STORE_NAME               6 (getCandidates)

 32          40 LOAD_CONST               7 (<code object solve at 0x7fa65db55450, file ""<ast>"", line 32>)
             42 LOAD_CONST               8 ('Solution.solve')
             44 MAKE_FUNCTION            0
             46 STORE_NAME               7 (solve)
             48 LOAD_CONST               1 (None)
             50 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fa65db55240, file ""<ast>"", line 6>:
  7           0 LOAD_FAST                1 (board)
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (board)

  8           6 LOAD_FAST                0 (self)
              8 LOAD_METHOD              1 (solve)
             10 CALL_METHOD              0
             12 POP_TOP
             14 LOAD_CONST               0 (None)
             16 RETURN_VALUE

Disassembly of <code object getCandidates at 0x7fa65db552f0, file ""<ast>"", line 10>:
 11           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (board)
              4 STORE_FAST               3 (board)

 13           6 LOAD_CONST               1 ('1')
              8 LOAD_CONST               2 ('2')
             10 LOAD_CONST               3 ('3')
             12 LOAD_CONST               4 ('4')
             14 LOAD_CONST               5 ('5')
             16 LOAD_CONST               6 ('6')
             18 LOAD_CONST               7 ('7')
             20 LOAD_CONST               8 ('8')
             22 LOAD_CONST               9 ('9')
             24 BUILD_LIST               9
             26 STORE_FAST               4 (candidates)

 16          28 LOAD_GLOBAL              1 (range)
             30 LOAD_CONST              10 (9)
             32 CALL_FUNCTION            1
             34 GET_ITER
        >>   36 FOR_ITER                72 (to 110)
             38 STORE_FAST               5 (i)

 17          40 LOAD_FAST                3 (board)
             42 LOAD_FAST                1 (row)
             44 BINARY_SUBSCR
             46 LOAD_FAST                5 (i)
             48 BINARY_SUBSCR
             50 LOAD_FAST                4 (candidates)
             52 COMPARE_OP               6 (in)
             54 POP_JUMP_IF_FALSE       74

 18          56 LOAD_FAST                4 (candidates)
             58 LOAD_METHOD              2 (remove)
             60 LOAD_FAST                3 (board)
             62 LOAD_FAST                1 (row)
             64 BINARY_SUBSCR
             66 LOAD_FAST                5 (i)
             68 BINARY_SUBSCR
             70 CALL_METHOD              1
             72 POP_TOP

 19     >>   74 LOAD_FAST                3 (board)
             76 LOAD_FAST                5 (i)
             78 BINARY_SUBSCR
             80 LOAD_FAST                2 (col)
             82 BINARY_SUBSCR
             84 LOAD_FAST                4 (candidates)
             86 COMPARE_OP               6 (in)
             88 POP_JUMP_IF_FALSE       36

 20          90 LOAD_FAST                4 (candidates)
             92 LOAD_METHOD              2 (remove)
             94 LOAD_FAST                3 (board)
             96 LOAD_FAST                5 (i)
             98 BINARY_SUBSCR
            100 LOAD_FAST                2 (col)
            102 BINARY_SUBSCR
            104 CALL_METHOD              1
            106 POP_TOP
            108 JUMP_ABSOLUTE           36

 23     >>  110 LOAD_FAST                2 (col)
            112 LOAD_CONST              11 (3)
            114 BINARY_FLOOR_DIVIDE
            116 LOAD_CONST              11 (3)
            118 BINARY_MULTIPLY
            120 STORE_FAST               6 (col_start)

 24         122 LOAD_FAST                1 (row)
            124 LOAD_CONST              11 (3)
            126 BINARY_FLOOR_DIVIDE
            128 LOAD_CONST              11 (3)
            130 BINARY_MULTIPLY
            132 STORE_FAST               7 (row_start)

 25         134 LOAD_GLOBAL              1 (range)
            136 LOAD_FAST                7 (row_start)
            138 LOAD_FAST                7 (row_start)
            140 LOAD_CONST              11 (3)
            142 BINARY_ADD
            144 CALL_FUNCTION            2
            146 GET_ITER
        >>  148 FOR_ITER                58 (to 208)
            150 STORE_FAST               5 (i)

 26         152 LOAD_GLOBAL              1 (range)
            154 LOAD_FAST                6 (col_start)
            156 LOAD_FAST                6 (col_start)
            158 LOAD_CONST              11 (3)
            160 BINARY_ADD
            162 CALL_FUNCTION            2
            164 GET_ITER
        >>  166 FOR_ITER                38 (to 206)
            168 STORE_FAST               8 (j)

 27         170 LOAD_FAST                3 (board)
            172 LOAD_FAST                5 (i)
            174 BINARY_SUBSCR
            176 LOAD_FAST                8 (j)
            178 BINARY_SUBSCR
            180 LOAD_FAST                4 (candidates)
            182 COMPARE_OP               6 (in)
            184 POP_JUMP_IF_FALSE      166

 28         186 LOAD_FAST                4 (candidates)
            188 LOAD_METHOD              2 (remove)
            190 LOAD_FAST                3 (board)
            192 LOAD_FAST                5 (i)
            194 BINARY_SUBSCR
            196 LOAD_FAST                8 (j)
            198 BINARY_SUBSCR
            200 CALL_METHOD              1
            202 POP_TOP
            204 JUMP_ABSOLUTE          166
        >>  206 JUMP_ABSOLUTE          148

 30     >>  208 LOAD_FAST                4 (candidates)
            210 RETURN_VALUE

Disassembly of <code object solve at 0x7fa65db55450, file ""<ast>"", line 32>:
 33           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (board)
              4 STORE_FAST               1 (board)

 34           6 BUILD_LIST               0
              8 STORE_FAST               2 (open_squares)

 37          10 LOAD_GLOBAL              1 (range)
             12 LOAD_CONST               1 (9)
             14 CALL_FUNCTION            1
             16 GET_ITER
        >>   18 FOR_ITER                58 (to 78)
             20 STORE_FAST               3 (i)

 38          22 LOAD_GLOBAL              1 (range)
             24 LOAD_CONST               1 (9)
             26 CALL_FUNCTION            1
             28 GET_ITER
        >>   30 FOR_ITER                44 (to 76)
             32 STORE_FAST               4 (j)

 39          34 LOAD_FAST                1 (board)
             36 LOAD_FAST                3 (i)
             38 BINARY_SUBSCR
             40 LOAD_FAST                4 (j)
             42 BINARY_SUBSCR
             44 LOAD_CONST               2 ('.')
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       30

 40          50 LOAD_FAST                2 (open_squares)
             52 LOAD_METHOD              2 (append)
             54 LOAD_FAST                3 (i)
             56 LOAD_FAST                4 (j)
             58 LOAD_FAST                0 (self)
             60 LOAD_METHOD              3 (getCandidates)
             62 LOAD_FAST                3 (i)
             64 LOAD_FAST                4 (j)
             66 CALL_METHOD              2
             68 BUILD_TUPLE              3
             70 CALL_METHOD              1
             72 POP_TOP
             74 JUMP_ABSOLUTE           30
        >>   76 JUMP_ABSOLUTE           18

 43     >>   78 LOAD_FAST                2 (open_squares)
             80 POP_JUMP_IF_TRUE        86

 44          82 LOAD_CONST               3 (True)
             84 RETURN_VALUE

 47     >>   86 LOAD_FAST                2 (open_squares)
             88 LOAD_ATTR                4 (sort)
             90 LOAD_CONST               4 (<code object <lambda> at 0x7fa65db553a0, file ""<ast>"", line 47>)
             92 LOAD_CONST               5 ('Solution.solve.<locals>.<lambda>')
             94 MAKE_FUNCTION            0
             96 LOAD_CONST               6 (('key',))
             98 CALL_FUNCTION_KW         1
            100 POP_TOP

 48         102 LOAD_FAST                2 (open_squares)
            104 LOAD_CONST               7 (0)
            106 BINARY_SUBSCR
            108 UNPACK_SEQUENCE          3
            110 STORE_FAST               5 (a)
            112 STORE_FAST               6 (b)
            114 STORE_FAST               7 (candidates)

 52         116 LOAD_FAST                7 (candidates)
            118 GET_ITER
        >>  120 FOR_ITER                42 (to 164)
            122 STORE_FAST               8 (can)

 53         124 LOAD_FAST                8 (can)
            126 LOAD_FAST                1 (board)
            128 LOAD_FAST                5 (a)
            130 BINARY_SUBSCR
            132 LOAD_FAST                6 (b)
            134 STORE_SUBSCR

 54         136 LOAD_FAST                0 (self)
            138 LOAD_METHOD              5 (solve)
            140 CALL_METHOD              0
            142 POP_JUMP_IF_FALSE      150

 55         144 POP_TOP
            146 LOAD_CONST               3 (True)
            148 RETURN_VALUE

 56     >>  150 LOAD_CONST               2 ('.')
            152 LOAD_FAST                1 (board)
            154 LOAD_FAST                5 (a)
            156 BINARY_SUBSCR
            158 LOAD_FAST                6 (b)
            160 STORE_SUBSCR
            162 JUMP_ABSOLUTE          120

 61     >>  164 LOAD_CONST               8 (False)
            166 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7fa65db553a0, file ""<ast>"", line 47>:
 47           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (x)
              4 LOAD_CONST               1 (2)
              6 BINARY_SUBSCR
              8 CALL_FUNCTION            1
             10 RETURN_VALUE
None
"
solveSudoku,"import collections, itertools
class Solution:
    def solveSudoku(self, B: List[List[str]]) -> None:
    	N, S = range(9), list('123456789')
    	R, C, T, V = {i:set() for i in N}, {i:set() for i in N}, {i:set() for i in N}, collections.deque()
    	for i,j in itertools.product(N,N):
    		if B[i][j] != ""."": R[i].add(B[i][j]), C[j].add(B[i][j]), T[3*(i//3)+j//3].add(B[i][j])
    		else: V.append((i,j))
    	def dfs():
    		if not V: return True
    		i, j, t = V[0][0], V[0][1], 3*(V[0][0]//3)+V[0][1]//3
    		for n in S:
    			if n not in R[i]|C[j]|T[t]:
    				B[i][j], _ = n, [R[i].add(n), C[j].add(n), T[t].add(n), V.popleft()]
    				if dfs(): return True
    				else: B[i][j], _ = '.', [R[i].discard(n), C[j].discard(n), T[t].discard(n), V.appendleft((i,j))]
    		return False
    	dfs()","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (collections)
              6 STORE_NAME               0 (collections)
              8 LOAD_CONST               0 (0)
             10 LOAD_CONST               1 (None)
             12 IMPORT_NAME              1 (itertools)
             14 STORE_NAME               1 (itertools)

  2          16 LOAD_BUILD_CLASS
             18 LOAD_CONST               2 (<code object Solution at 0x7f8931405450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution')
             22 MAKE_FUNCTION            0
             24 LOAD_CONST               3 ('Solution')
             26 CALL_FUNCTION            2
             28 STORE_NAME               2 (Solution)
             30 LOAD_CONST               1 (None)
             32 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8931405450, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('B', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7f89314053a0, file ""<ast>"", line 3>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f89314053a0, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              1 (list)
              8 LOAD_CONST               2 ('123456789')
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               2 (N)
             16 STORE_DEREF              3 (S)

  5          18 LOAD_CONST               3 (<code object <dictcomp> at 0x7f8931405240, file ""<ast>"", line 5>)
             20 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             22 MAKE_FUNCTION            0
             24 LOAD_FAST                2 (N)
             26 GET_ITER
             28 CALL_FUNCTION            1
             30 LOAD_CONST               3 (<code object <dictcomp> at 0x7f8931405240, file ""<ast>"", line 5>)
             32 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             34 MAKE_FUNCTION            0
             36 LOAD_FAST                2 (N)
             38 GET_ITER
             40 CALL_FUNCTION            1
             42 LOAD_CONST               3 (<code object <dictcomp> at 0x7f8931405240, file ""<ast>"", line 5>)
             44 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             46 MAKE_FUNCTION            0
             48 LOAD_FAST                2 (N)
             50 GET_ITER
             52 CALL_FUNCTION            1
             54 LOAD_GLOBAL              2 (collections)
             56 LOAD_METHOD              3 (deque)
             58 CALL_METHOD              0
             60 BUILD_TUPLE              4
             62 UNPACK_SEQUENCE          4
             64 STORE_DEREF              2 (R)
             66 STORE_DEREF              1 (C)
             68 STORE_DEREF              4 (T)
             70 STORE_DEREF              5 (V)

  6          72 LOAD_GLOBAL              4 (itertools)
             74 LOAD_METHOD              5 (product)
             76 LOAD_FAST                2 (N)
             78 LOAD_FAST                2 (N)
             80 CALL_METHOD              2
             82 GET_ITER
        >>   84 FOR_ITER               120 (to 206)
             86 UNPACK_SEQUENCE          2
             88 STORE_FAST               3 (i)
             90 STORE_FAST               4 (j)

  7          92 LOAD_DEREF               0 (B)
             94 LOAD_FAST                3 (i)
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (j)
            100 BINARY_SUBSCR
            102 LOAD_CONST               5 ('.')
            104 COMPARE_OP               3 (!=)
            106 POP_JUMP_IF_FALSE      190
            108 LOAD_DEREF               2 (R)
            110 LOAD_FAST                3 (i)
            112 BINARY_SUBSCR
            114 LOAD_METHOD              6 (add)
            116 LOAD_DEREF               0 (B)
            118 LOAD_FAST                3 (i)
            120 BINARY_SUBSCR
            122 LOAD_FAST                4 (j)
            124 BINARY_SUBSCR
            126 CALL_METHOD              1
            128 LOAD_DEREF               1 (C)
            130 LOAD_FAST                4 (j)
            132 BINARY_SUBSCR
            134 LOAD_METHOD              6 (add)
            136 LOAD_DEREF               0 (B)
            138 LOAD_FAST                3 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                4 (j)
            144 BINARY_SUBSCR
            146 CALL_METHOD              1
            148 LOAD_DEREF               4 (T)
            150 LOAD_CONST               6 (3)
            152 LOAD_FAST                3 (i)
            154 LOAD_CONST               6 (3)
            156 BINARY_FLOOR_DIVIDE
            158 BINARY_MULTIPLY
            160 LOAD_FAST                4 (j)
            162 LOAD_CONST               6 (3)
            164 BINARY_FLOOR_DIVIDE
            166 BINARY_ADD
            168 BINARY_SUBSCR
            170 LOAD_METHOD              6 (add)
            172 LOAD_DEREF               0 (B)
            174 LOAD_FAST                3 (i)
            176 BINARY_SUBSCR
            178 LOAD_FAST                4 (j)
            180 BINARY_SUBSCR
            182 CALL_METHOD              1
            184 BUILD_TUPLE              3
            186 POP_TOP
            188 JUMP_ABSOLUTE           84

  8     >>  190 LOAD_DEREF               5 (V)
            192 LOAD_METHOD              7 (append)
            194 LOAD_FAST                3 (i)
            196 LOAD_FAST                4 (j)
            198 BUILD_TUPLE              2
            200 CALL_METHOD              1
            202 POP_TOP
            204 JUMP_ABSOLUTE           84

  9     >>  206 LOAD_CLOSURE             0 (B)
            208 LOAD_CLOSURE             1 (C)
            210 LOAD_CLOSURE             2 (R)
            212 LOAD_CLOSURE             3 (S)
            214 LOAD_CLOSURE             4 (T)
            216 LOAD_CLOSURE             5 (V)
            218 LOAD_CLOSURE             6 (dfs)
            220 BUILD_TUPLE              7
            222 LOAD_CONST               7 (<code object dfs at 0x7f89314052f0, file ""<ast>"", line 9>)
            224 LOAD_CONST               8 ('Solution.solveSudoku.<locals>.dfs')
            226 MAKE_FUNCTION            8 (closure)
            228 STORE_DEREF              6 (dfs)

 18         230 LOAD_DEREF               6 (dfs)
            232 CALL_FUNCTION            0
            234 POP_TOP
            236 LOAD_CONST               0 (None)
            238 RETURN_VALUE

Disassembly of <code object <dictcomp> at 0x7f8931405240, file ""<ast>"", line 5>:
  5           0 BUILD_MAP                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              8 LOAD_FAST                1 (i)
             10 LOAD_GLOBAL              0 (set)
             12 CALL_FUNCTION            0
             14 MAP_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object dfs at 0x7f89314052f0, file ""<ast>"", line 9>:
 10           0 LOAD_DEREF               5 (V)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 11     >>    8 LOAD_DEREF               5 (V)
             10 LOAD_CONST               2 (0)
             12 BINARY_SUBSCR
             14 LOAD_CONST               2 (0)
             16 BINARY_SUBSCR
             18 LOAD_DEREF               5 (V)
             20 LOAD_CONST               2 (0)
             22 BINARY_SUBSCR
             24 LOAD_CONST               3 (1)
             26 BINARY_SUBSCR
             28 LOAD_CONST               4 (3)
             30 LOAD_DEREF               5 (V)
             32 LOAD_CONST               2 (0)
             34 BINARY_SUBSCR
             36 LOAD_CONST               2 (0)
             38 BINARY_SUBSCR
             40 LOAD_CONST               4 (3)
             42 BINARY_FLOOR_DIVIDE
             44 BINARY_MULTIPLY
             46 LOAD_DEREF               5 (V)
             48 LOAD_CONST               2 (0)
             50 BINARY_SUBSCR
             52 LOAD_CONST               3 (1)
             54 BINARY_SUBSCR
             56 LOAD_CONST               4 (3)
             58 BINARY_FLOOR_DIVIDE
             60 BINARY_ADD
             62 ROT_THREE
             64 ROT_TWO
             66 STORE_FAST               0 (i)
             68 STORE_FAST               1 (j)
             70 STORE_FAST               2 (t)

 12          72 LOAD_DEREF               3 (S)
             74 GET_ITER
        >>   76 FOR_ITER               170 (to 248)
             78 STORE_FAST               3 (n)

 13          80 LOAD_FAST                3 (n)
             82 LOAD_DEREF               2 (R)
             84 LOAD_FAST                0 (i)
             86 BINARY_SUBSCR
             88 LOAD_DEREF               1 (C)
             90 LOAD_FAST                1 (j)
             92 BINARY_SUBSCR
             94 BINARY_OR
             96 LOAD_DEREF               4 (T)
             98 LOAD_FAST                2 (t)
            100 BINARY_SUBSCR
            102 BINARY_OR
            104 COMPARE_OP               7 (not in)
            106 POP_JUMP_IF_FALSE       76

 14         108 LOAD_FAST                3 (n)
            110 LOAD_DEREF               2 (R)
            112 LOAD_FAST                0 (i)
            114 BINARY_SUBSCR
            116 LOAD_METHOD              0 (add)
            118 LOAD_FAST                3 (n)
            120 CALL_METHOD              1
            122 LOAD_DEREF               1 (C)
            124 LOAD_FAST                1 (j)
            126 BINARY_SUBSCR
            128 LOAD_METHOD              0 (add)
            130 LOAD_FAST                3 (n)
            132 CALL_METHOD              1
            134 LOAD_DEREF               4 (T)
            136 LOAD_FAST                2 (t)
            138 BINARY_SUBSCR
            140 LOAD_METHOD              0 (add)
            142 LOAD_FAST                3 (n)
            144 CALL_METHOD              1
            146 LOAD_DEREF               5 (V)
            148 LOAD_METHOD              1 (popleft)
            150 CALL_METHOD              0
            152 BUILD_LIST               4
            154 ROT_TWO
            156 LOAD_DEREF               0 (B)
            158 LOAD_FAST                0 (i)
            160 BINARY_SUBSCR
            162 LOAD_FAST                1 (j)
            164 STORE_SUBSCR
            166 STORE_FAST               4 (_)

 15         168 LOAD_DEREF               6 (dfs)
            170 CALL_FUNCTION            0
            172 POP_JUMP_IF_FALSE      180
            174 POP_TOP
            176 LOAD_CONST               1 (True)
            178 RETURN_VALUE

 16     >>  180 LOAD_CONST               5 ('.')
            182 LOAD_DEREF               2 (R)
            184 LOAD_FAST                0 (i)
            186 BINARY_SUBSCR
            188 LOAD_METHOD              2 (discard)
            190 LOAD_FAST                3 (n)
            192 CALL_METHOD              1
            194 LOAD_DEREF               1 (C)
            196 LOAD_FAST                1 (j)
            198 BINARY_SUBSCR
            200 LOAD_METHOD              2 (discard)
            202 LOAD_FAST                3 (n)
            204 CALL_METHOD              1
            206 LOAD_DEREF               4 (T)
            208 LOAD_FAST                2 (t)
            210 BINARY_SUBSCR
            212 LOAD_METHOD              2 (discard)
            214 LOAD_FAST                3 (n)
            216 CALL_METHOD              1
            218 LOAD_DEREF               5 (V)
            220 LOAD_METHOD              3 (appendleft)
            222 LOAD_FAST                0 (i)
            224 LOAD_FAST                1 (j)
            226 BUILD_TUPLE              2
            228 CALL_METHOD              1
            230 BUILD_LIST               4
            232 ROT_TWO
            234 LOAD_DEREF               0 (B)
            236 LOAD_FAST                0 (i)
            238 BINARY_SUBSCR
            240 LOAD_FAST                1 (j)
            242 STORE_SUBSCR
            244 STORE_FAST               4 (_)
            246 JUMP_ABSOLUTE           76

 17     >>  248 LOAD_CONST               6 (False)
            250 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    # 384ms
    def solveSudoku(self, board: List[List[str]]) -> None:

        # convert str to int, ""."" to 0, 
		# doing this means i cannot do it in-place, i will make board = str(board1) at the end
        board1 = [[int(val) if val.isdigit() else 0 for val in row ] for row in board]

        def is_valid(i, j, val):
            # check row
            if val in board1[i]: return False
            # check col
            if val in [board1[r][j] for r in range(9)]: return False
            # check block (grp)
            grp_r, grp_c = i//3, j//3
            for r in range(3):
                for c in range(3):
                    if board1[grp_r*3 + r][grp_c*3 + c] == val: return False
            return True

        def backtrack(pos=0):
            if pos == len(need): return True # reach the end, no more val left
            i, j = need[pos] # get the coordinates from need
            for num in range(1,10):
                if is_valid(i, j, num):
                    board1[i][j] = num
                    if backtrack(pos+1): return True
            # still not valid, reset val and backtrack
            board1[i][j] = 0
			
        # list out those cells == 0
        need = [(i, j) for i in range(9) for j in range(9) if not board1[i][j]]
		
        backtrack()
		
        # convert int to str
        board[:]=[[str(val) for val in row] for row in board1]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f73b4d95920, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f73b4d95920, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7f73b4d959d0, file ""<ast>"", line 3>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f73b4d959d0, file ""<ast>"", line 3>:
  7           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f73b4d952f0, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_FAST                1 (board)
              8 GET_ITER
             10 CALL_FUNCTION            1
             12 STORE_DEREF              1 (board1)

  9          14 LOAD_CLOSURE             1 (board1)
             16 BUILD_TUPLE              1
             18 LOAD_CONST               3 (<code object is_valid at 0x7f73b4d95660, file ""<ast>"", line 9>)
             20 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.is_valid')
             22 MAKE_FUNCTION            8 (closure)
             24 STORE_DEREF              2 (is_valid)

 21          26 LOAD_CONST              11 ((0,))
             28 LOAD_CLOSURE             0 (backtrack)
             30 LOAD_CLOSURE             1 (board1)
             32 LOAD_CLOSURE             2 (is_valid)
             34 LOAD_CLOSURE             3 (need)
             36 BUILD_TUPLE              4
             38 LOAD_CONST               6 (<code object backtrack at 0x7f73b4d95710, file ""<ast>"", line 21>)
             40 LOAD_CONST               7 ('Solution.solveSudoku.<locals>.backtrack')
             42 MAKE_FUNCTION            9 (defaults, closure)
             44 STORE_DEREF              0 (backtrack)

 32          46 LOAD_CLOSURE             1 (board1)
             48 BUILD_TUPLE              1
             50 LOAD_CONST               8 (<code object <listcomp> at 0x7f73b4d95500, file ""<ast>"", line 32>)
             52 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             54 MAKE_FUNCTION            8 (closure)
             56 LOAD_GLOBAL              0 (range)
             58 LOAD_CONST               9 (9)
             60 CALL_FUNCTION            1
             62 GET_ITER
             64 CALL_FUNCTION            1
             66 STORE_DEREF              3 (need)

 34          68 LOAD_DEREF               0 (backtrack)
             70 CALL_FUNCTION            0
             72 POP_TOP

 37          74 LOAD_CONST              10 (<code object <listcomp> at 0x7f73b4d95870, file ""<ast>"", line 37>)
             76 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             78 MAKE_FUNCTION            0
             80 LOAD_DEREF               1 (board1)
             82 GET_ITER
             84 CALL_FUNCTION            1
             86 LOAD_FAST                1 (board)
             88 LOAD_CONST               0 (None)
             90 LOAD_CONST               0 (None)
             92 BUILD_SLICE              2
             94 STORE_SUBSCR
             96 LOAD_CONST               0 (None)
             98 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d952f0, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                18 (to 24)
              6 STORE_FAST               1 (row)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f73b4d95240, file ""<ast>"", line 7>)
             10 LOAD_CONST               1 ('Solution.solveSudoku.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_FAST                1 (row)
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 LIST_APPEND              2
             22 JUMP_ABSOLUTE            4
        >>   24 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d95240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                24 (to 30)
              6 STORE_FAST               1 (val)
              8 LOAD_FAST                1 (val)
             10 LOAD_METHOD              0 (isdigit)
             12 CALL_METHOD              0
             14 POP_JUMP_IF_FALSE       24
             16 LOAD_GLOBAL              1 (int)
             18 LOAD_FAST                1 (val)
             20 CALL_FUNCTION            1
             22 JUMP_FORWARD             2 (to 26)
        >>   24 LOAD_CONST               0 (0)
        >>   26 LIST_APPEND              2
             28 JUMP_ABSOLUTE            4
        >>   30 RETURN_VALUE

Disassembly of <code object is_valid at 0x7f73b4d95660, file ""<ast>"", line 9>:
 11           0 LOAD_FAST                2 (val)
              2 LOAD_DEREF               1 (board1)
              4 LOAD_FAST                0 (i)
              6 BINARY_SUBSCR
              8 COMPARE_OP               6 (in)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (False)
             14 RETURN_VALUE

 13     >>   16 LOAD_FAST                2 (val)
             18 LOAD_CLOSURE             1 (board1)
             20 LOAD_CLOSURE             0 (j)
             22 BUILD_TUPLE              2
             24 LOAD_CONST               2 (<code object <listcomp> at 0x7f73b4d95450, file ""<ast>"", line 13>)
             26 LOAD_CONST               3 ('Solution.solveSudoku.<locals>.is_valid.<locals>.<listcomp>')
             28 MAKE_FUNCTION            8 (closure)
             30 LOAD_GLOBAL              0 (range)
             32 LOAD_CONST               4 (9)
             34 CALL_FUNCTION            1
             36 GET_ITER
             38 CALL_FUNCTION            1
             40 COMPARE_OP               6 (in)
             42 POP_JUMP_IF_FALSE       48
             44 LOAD_CONST               1 (False)
             46 RETURN_VALUE

 15     >>   48 LOAD_FAST                0 (i)
             50 LOAD_CONST               5 (3)
             52 BINARY_FLOOR_DIVIDE
             54 LOAD_DEREF               0 (j)
             56 LOAD_CONST               5 (3)
             58 BINARY_FLOOR_DIVIDE
             60 ROT_TWO
             62 STORE_FAST               3 (grp_r)
             64 STORE_FAST               4 (grp_c)

 16          66 LOAD_GLOBAL              0 (range)
             68 LOAD_CONST               5 (3)
             70 CALL_FUNCTION            1
             72 GET_ITER
        >>   74 FOR_ITER                58 (to 134)
             76 STORE_FAST               5 (r)

 17          78 LOAD_GLOBAL              0 (range)
             80 LOAD_CONST               5 (3)
             82 CALL_FUNCTION            1
             84 GET_ITER
        >>   86 FOR_ITER                44 (to 132)
             88 STORE_FAST               6 (c)

 18          90 LOAD_DEREF               1 (board1)
             92 LOAD_FAST                3 (grp_r)
             94 LOAD_CONST               5 (3)
             96 BINARY_MULTIPLY
             98 LOAD_FAST                5 (r)
            100 BINARY_ADD
            102 BINARY_SUBSCR
            104 LOAD_FAST                4 (grp_c)
            106 LOAD_CONST               5 (3)
            108 BINARY_MULTIPLY
            110 LOAD_FAST                6 (c)
            112 BINARY_ADD
            114 BINARY_SUBSCR
            116 LOAD_FAST                2 (val)
            118 COMPARE_OP               2 (==)
            120 POP_JUMP_IF_FALSE       86
            122 POP_TOP
            124 POP_TOP
            126 LOAD_CONST               1 (False)
            128 RETURN_VALUE
            130 JUMP_ABSOLUTE           86
        >>  132 JUMP_ABSOLUTE           74

 19     >>  134 LOAD_CONST               6 (True)
            136 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d95450, file ""<ast>"", line 13>:
 13           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (r)
              8 LOAD_DEREF               0 (board1)
             10 LOAD_FAST                1 (r)
             12 BINARY_SUBSCR
             14 LOAD_DEREF               1 (j)
             16 BINARY_SUBSCR
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        >>   22 RETURN_VALUE

Disassembly of <code object backtrack at 0x7f73b4d95710, file ""<ast>"", line 21>:
 22           0 LOAD_FAST                0 (pos)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_DEREF               3 (need)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (True)
             14 RETURN_VALUE

 23     >>   16 LOAD_DEREF               3 (need)
             18 LOAD_FAST                0 (pos)
             20 BINARY_SUBSCR
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               1 (i)
             26 STORE_FAST               2 (j)

 24          28 LOAD_GLOBAL              1 (range)
             30 LOAD_CONST               2 (1)
             32 LOAD_CONST               3 (10)
             34 CALL_FUNCTION            2
             36 GET_ITER
        >>   38 FOR_ITER                46 (to 86)
             40 STORE_FAST               3 (num)

 25          42 LOAD_DEREF               2 (is_valid)
             44 LOAD_FAST                1 (i)
             46 LOAD_FAST                2 (j)
             48 LOAD_FAST                3 (num)
             50 CALL_FUNCTION            3
             52 POP_JUMP_IF_FALSE       38

 26          54 LOAD_FAST                3 (num)
             56 LOAD_DEREF               1 (board1)
             58 LOAD_FAST                1 (i)
             60 BINARY_SUBSCR
             62 LOAD_FAST                2 (j)
             64 STORE_SUBSCR

 27          66 LOAD_DEREF               0 (backtrack)
             68 LOAD_FAST                0 (pos)
             70 LOAD_CONST               2 (1)
             72 BINARY_ADD
             74 CALL_FUNCTION            1
             76 POP_JUMP_IF_FALSE       38
             78 POP_TOP
             80 LOAD_CONST               1 (True)
             82 RETURN_VALUE
             84 JUMP_ABSOLUTE           38

 29     >>   86 LOAD_CONST               4 (0)
             88 LOAD_DEREF               1 (board1)
             90 LOAD_FAST                1 (i)
             92 BINARY_SUBSCR
             94 LOAD_FAST                2 (j)
             96 STORE_SUBSCR
             98 LOAD_CONST               0 (None)
            100 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d95500, file ""<ast>"", line 32>:
 32           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                38 (to 44)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               0 (9)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                24 (to 42)
             18 STORE_FAST               2 (j)
             20 LOAD_DEREF               0 (board1)
             22 LOAD_FAST                1 (i)
             24 BINARY_SUBSCR
             26 LOAD_FAST                2 (j)
             28 BINARY_SUBSCR
             30 POP_JUMP_IF_TRUE        16
             32 LOAD_FAST                1 (i)
             34 LOAD_FAST                2 (j)
             36 BUILD_TUPLE              2
             38 LIST_APPEND              3
             40 JUMP_ABSOLUTE           16
        >>   42 JUMP_ABSOLUTE            4
        >>   44 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d95870, file ""<ast>"", line 37>:
 37           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                18 (to 24)
              6 STORE_FAST               1 (row)
              8 LOAD_CONST               0 (<code object <listcomp> at 0x7f73b4d957c0, file ""<ast>"", line 37>)
             10 LOAD_CONST               1 ('Solution.solveSudoku.<locals>.<listcomp>.<listcomp>')
             12 MAKE_FUNCTION            0
             14 LOAD_FAST                1 (row)
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 LIST_APPEND              2
             22 JUMP_ABSOLUTE            4
        >>   24 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f73b4d957c0, file ""<ast>"", line 37>:
 37           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (val)
              8 LOAD_GLOBAL              0 (str)
             10 LOAD_FAST                1 (val)
             12 CALL_FUNCTION            1
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
		# Function to get all the possible values for a blank space
        def getPoss(board, a, b):
            candidates = []
            
            for i in range(1, 10):
                collision = False
                for j in range(9):
                  if board[a][j] == str(i) or\
                     board[j][b] == str(i) or\
                     board[(a - a%3) + j//3][(b - b%3) + j%3] == str(i):
                    collision = True
                    break
                if not collision:
                  candidates.append(str(i))

            return candidates
        
        def sudoku_solver(board):
            poten_vals = None
            bs_avlb = False
            a, b = -1, -1
            flag = False
            for i in range(len(board)):
                for j in range(len(board[0])):
                  if board[i][j] == '.':
                    bs_avlb = True
                    poten_vals = getPoss(board, i, j)
                    a, b = i, j
                    flag = True
                    break
                if flag:
                  break

            if not bs_avlb:    # if already all the blank spaces are filled
                return True
            
            for val in poten_vals:
                board[a][b] = val
                if sudoku_solver(board):      # ie. using this val is correct and doesn't cause any conflict later
                  return True
                board[a][b] = '.'
            return False       # backtrack
        
        sudoku_solver(board)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fffb9ff5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fffb9ff5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fffb9ff53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fffb9ff53a0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object getPoss at 0x7fffb9ff5240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.getPoss')
              4 MAKE_FUNCTION            0
              6 STORE_DEREF              0 (getPoss)

 23           8 LOAD_CLOSURE             0 (getPoss)
             10 LOAD_CLOSURE             1 (sudoku_solver)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               3 (<code object sudoku_solver at 0x7fffb9ff52f0, file ""<ast>"", line 23>)
             16 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.sudoku_solver')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              1 (sudoku_solver)

 49          22 LOAD_DEREF               1 (sudoku_solver)
             24 LOAD_FAST                1 (board)
             26 CALL_FUNCTION            1
             28 POP_TOP
             30 LOAD_CONST               5 (None)
             32 RETURN_VALUE

Disassembly of <code object getPoss at 0x7fffb9ff5240, file ""<ast>"", line 7>:
  8           0 BUILD_LIST               0
              2 STORE_FAST               3 (candidates)

 10           4 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (1)
              8 LOAD_CONST               2 (10)
             10 CALL_FUNCTION            2
             12 GET_ITER
        >>   14 FOR_ITER               140 (to 156)
             16 STORE_FAST               4 (i)

 11          18 LOAD_CONST               3 (False)
             20 STORE_FAST               5 (collision)

 12          22 LOAD_GLOBAL              0 (range)
             24 LOAD_CONST               4 (9)
             26 CALL_FUNCTION            1
             28 GET_ITER
        >>   30 FOR_ITER               104 (to 136)
             32 STORE_FAST               6 (j)

 13          34 LOAD_FAST                0 (board)
             36 LOAD_FAST                1 (a)
             38 BINARY_SUBSCR
             40 LOAD_FAST                6 (j)
             42 BINARY_SUBSCR
             44 LOAD_GLOBAL              1 (str)
             46 LOAD_FAST                4 (i)
             48 CALL_FUNCTION            1
             50 COMPARE_OP               2 (==)
             52 POP_JUMP_IF_TRUE       126

 14          54 LOAD_FAST                0 (board)
             56 LOAD_FAST                6 (j)
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (b)
             62 BINARY_SUBSCR
             64 LOAD_GLOBAL              1 (str)
             66 LOAD_FAST                4 (i)
             68 CALL_FUNCTION            1
             70 COMPARE_OP               2 (==)

 13          72 POP_JUMP_IF_TRUE       126

 15          74 LOAD_FAST                0 (board)
             76 LOAD_FAST                1 (a)
             78 LOAD_FAST                1 (a)
             80 LOAD_CONST               5 (3)
             82 BINARY_MODULO
             84 BINARY_SUBTRACT
             86 LOAD_FAST                6 (j)
             88 LOAD_CONST               5 (3)
             90 BINARY_FLOOR_DIVIDE
             92 BINARY_ADD
             94 BINARY_SUBSCR
             96 LOAD_FAST                2 (b)
             98 LOAD_FAST                2 (b)
            100 LOAD_CONST               5 (3)
            102 BINARY_MODULO
            104 BINARY_SUBTRACT
            106 LOAD_FAST                6 (j)
            108 LOAD_CONST               5 (3)
            110 BINARY_MODULO
            112 BINARY_ADD
            114 BINARY_SUBSCR
            116 LOAD_GLOBAL              1 (str)
            118 LOAD_FAST                4 (i)
            120 CALL_FUNCTION            1
            122 COMPARE_OP               2 (==)

 13         124 POP_JUMP_IF_FALSE       30

 16     >>  126 LOAD_CONST               6 (True)
            128 STORE_FAST               5 (collision)

 17         130 POP_TOP
            132 JUMP_ABSOLUTE          136
            134 JUMP_ABSOLUTE           30

 18     >>  136 LOAD_FAST                5 (collision)
            138 POP_JUMP_IF_TRUE        14

 19         140 LOAD_FAST                3 (candidates)
            142 LOAD_METHOD              2 (append)
            144 LOAD_GLOBAL              1 (str)
            146 LOAD_FAST                4 (i)
            148 CALL_FUNCTION            1
            150 CALL_METHOD              1
            152 POP_TOP
            154 JUMP_ABSOLUTE           14

 21     >>  156 LOAD_FAST                3 (candidates)
            158 RETURN_VALUE

Disassembly of <code object sudoku_solver at 0x7fffb9ff52f0, file ""<ast>"", line 23>:
 24           0 LOAD_CONST               0 (None)
              2 STORE_FAST               1 (poten_vals)

 25           4 LOAD_CONST               1 (False)
              6 STORE_FAST               2 (bs_avlb)

 26           8 LOAD_CONST               2 ((-1, -1))
             10 UNPACK_SEQUENCE          2
             12 STORE_FAST               3 (a)
             14 STORE_FAST               4 (b)

 27          16 LOAD_CONST               1 (False)
             18 STORE_FAST               5 (flag)

 28          20 LOAD_GLOBAL              0 (range)
             22 LOAD_GLOBAL              1 (len)
             24 LOAD_FAST                0 (board)
             26 CALL_FUNCTION            1
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                84 (to 118)
             34 STORE_FAST               6 (i)

 29          36 LOAD_GLOBAL              0 (range)
             38 LOAD_GLOBAL              1 (len)
             40 LOAD_FAST                0 (board)
             42 LOAD_CONST               3 (0)
             44 BINARY_SUBSCR
             46 CALL_FUNCTION            1
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                54 (to 108)
             54 STORE_FAST               7 (j)

 30          56 LOAD_FAST                0 (board)
             58 LOAD_FAST                6 (i)
             60 BINARY_SUBSCR
             62 LOAD_FAST                7 (j)
             64 BINARY_SUBSCR
             66 LOAD_CONST               4 ('.')
             68 COMPARE_OP               2 (==)
             70 POP_JUMP_IF_FALSE       52

 31          72 LOAD_CONST               5 (True)
             74 STORE_FAST               2 (bs_avlb)

 32          76 LOAD_DEREF               0 (getPoss)
             78 LOAD_FAST                0 (board)
             80 LOAD_FAST                6 (i)
             82 LOAD_FAST                7 (j)
             84 CALL_FUNCTION            3
             86 STORE_FAST               1 (poten_vals)

 33          88 LOAD_FAST                6 (i)
             90 LOAD_FAST                7 (j)
             92 ROT_TWO
             94 STORE_FAST               3 (a)
             96 STORE_FAST               4 (b)

 34          98 LOAD_CONST               5 (True)
            100 STORE_FAST               5 (flag)

 35         102 POP_TOP
            104 JUMP_ABSOLUTE          108
            106 JUMP_ABSOLUTE           52

 36     >>  108 LOAD_FAST                5 (flag)
            110 POP_JUMP_IF_FALSE       32

 37         112 POP_TOP
            114 JUMP_ABSOLUTE          118
            116 JUMP_ABSOLUTE           32

 39     >>  118 LOAD_FAST                2 (bs_avlb)
            120 POP_JUMP_IF_TRUE       126

 40         122 LOAD_CONST               5 (True)
            124 RETURN_VALUE

 42     >>  126 LOAD_FAST                1 (poten_vals)
            128 GET_ITER
        >>  130 FOR_ITER                42 (to 174)
            132 STORE_FAST               8 (val)

 43         134 LOAD_FAST                8 (val)
            136 LOAD_FAST                0 (board)
            138 LOAD_FAST                3 (a)
            140 BINARY_SUBSCR
            142 LOAD_FAST                4 (b)
            144 STORE_SUBSCR

 44         146 LOAD_DEREF               1 (sudoku_solver)
            148 LOAD_FAST                0 (board)
            150 CALL_FUNCTION            1
            152 POP_JUMP_IF_FALSE      160

 45         154 POP_TOP
            156 LOAD_CONST               5 (True)
            158 RETURN_VALUE

 46     >>  160 LOAD_CONST               4 ('.')
            162 LOAD_FAST                0 (board)
            164 LOAD_FAST                3 (a)
            166 BINARY_SUBSCR
            168 LOAD_FAST                4 (b)
            170 STORE_SUBSCR
            172 JUMP_ABSOLUTE          130

 47     >>  174 LOAD_CONST               1 (False)
            176 RETURN_VALUE
None
"
solveSudoku,"from typing import List, Tuple


class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        row, col, cube, empties = self._boardStats(board)
        self._solveSudoku(board, row, col, cube, empties)

    @staticmethod
    def _boardStats(
        board: List[List[str]],
    ) -> Tuple[List[int], List[int], List[List[int]], List[Tuple[int, int]]]:
        """"""
        :param board:
        :return: masks of included digits in rows, columns, 3x3
        and cords of empties values
        """"""
        # Define masks that indicate included digits in a row, col and 3x3 quadratic
        row, col = [0] * 9, [0] * 9
        cube = [[0] * 3 for _ in range(3)]
        empties = []  # Cords of empties values('.')
        for i in range(9):
            for j in range(9):
                if board[i][j] == ""."":
                    empties.append((i, j))
                else:
                    hashed = 1 << (int(board[i][j]) - 1)  # Generate mask for digit
                    # Added digit mask by bitwise operation(OR)
                    row[i] |= hashed
                    col[j] |= hashed
                    cube[i // 3][j // 3] |= hashed
        return row, col, cube, empties

    @staticmethod
    def _freeDigitMask(row: int, col: int, cube: int) -> int:
        """"""
        This method returns masks of free digits.
        :param row: mask of occupied digits of the row
        :param col: mask of occupied digits of the columns
        :param cube: mask of occupied digits of the 3x3 quadratic
        :return: mask of free digits
        """"""
        v = (1 << 9) - 1  # Mask of all possible digits(1-9), i.e, 0b111111111
        mask = (v - row) & (v - col) & (v - cube)  # Intersection of free digits
        return mask

    def _solveSudoku(
        self,
        board: List[List[str]],
        row: List[int],
        col: List[int],
        cube: List[List[int]],
        empties: List[Tuple[int, int]],
        k: int = 0,
    ) -> bool:
        if k >= len(empties):
            return True  # Found a solution if out of the bounding
        i, j = empties[k]  # Cords of empty cell
        mask = self._freeDigitMask(row[i], col[j], cube[i // 3][j // 3])
        if mask == 0:  # If mask equals to 0 then not have a solution
            return False
        for shift in range(9):
            h = 1 << shift
            if mask & h:  # Check is digit free
                # Add digit to the masks
                row[i] |= h
                col[j] |= h
                cube[i // 3][j // 3] |= h
                solved = self._solveSudoku(board, row, col, cube, empties, k + 1)
                if solved:
                    board[i][j] = str(shift + 1)
                    return True
                else:
                    # Remove digit to the masks
                    row[i] -= h
                    col[j] -= h
                    cube[i // 3][j // 3] -= h
        return False

","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('List', 'Tuple'))
              4 IMPORT_NAME              0 (typing)
              6 IMPORT_FROM              1 (List)
              8 STORE_NAME               1 (List)
             10 IMPORT_FROM              2 (Tuple)
             12 STORE_NAME               2 (Tuple)
             14 POP_TOP

  4          16 LOAD_BUILD_CLASS
             18 LOAD_CONST               2 (<code object Solution at 0x7fad994455b0, file ""<ast>"", line 4>)
             20 LOAD_CONST               3 ('Solution')
             22 MAKE_FUNCTION            0
             24 LOAD_CONST               3 ('Solution')
             26 CALL_FUNCTION            2
             28 STORE_NAME               3 (Solution)
             30 LOAD_CONST               4 (None)
             32 RETURN_VALUE

Disassembly of <code object Solution at 0x7fad994455b0, file ""<ast>"", line 4>:
  4           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  5           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fad99445240, file ""<ast>"", line 5>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)

 12          32 LOAD_NAME                6 (staticmethod)

 14          34 LOAD_NAME                3 (List)
             36 LOAD_NAME                3 (List)
             38 LOAD_NAME                4 (str)
             40 BINARY_SUBSCR
             42 BINARY_SUBSCR

 15          44 LOAD_NAME                7 (Tuple)
             46 LOAD_NAME                3 (List)
             48 LOAD_NAME                8 (int)
             50 BINARY_SUBSCR
             52 LOAD_NAME                3 (List)
             54 LOAD_NAME                8 (int)
             56 BINARY_SUBSCR
             58 LOAD_NAME                3 (List)
             60 LOAD_NAME                3 (List)
             62 LOAD_NAME                8 (int)
             64 BINARY_SUBSCR
             66 BINARY_SUBSCR
             68 LOAD_NAME                3 (List)
             70 LOAD_NAME                7 (Tuple)
             72 LOAD_NAME                8 (int)
             74 LOAD_NAME                8 (int)
             76 BUILD_TUPLE              2
             78 BINARY_SUBSCR
             80 BINARY_SUBSCR
             82 BUILD_TUPLE              4
             84 BINARY_SUBSCR

 13          86 LOAD_CONST               2 (('board', 'return'))
             88 BUILD_CONST_KEY_MAP      2
             90 LOAD_CONST               5 (<code object _boardStats at 0x7fad994453a0, file ""<ast>"", line 12>)
             92 LOAD_CONST               6 ('Solution._boardStats')
             94 MAKE_FUNCTION            4 (annotations)
             96 CALL_FUNCTION            1
             98 STORE_NAME               9 (_boardStats)

 37         100 LOAD_NAME                6 (staticmethod)

 38         102 LOAD_NAME                8 (int)
            104 LOAD_NAME                8 (int)
            106 LOAD_NAME                8 (int)
            108 LOAD_NAME                8 (int)
            110 LOAD_CONST               7 (('row', 'col', 'cube', 'return'))
            112 BUILD_CONST_KEY_MAP      4
            114 LOAD_CONST               8 (<code object _freeDigitMask at 0x7fad99445450, file ""<ast>"", line 37>)
            116 LOAD_CONST               9 ('Solution._freeDigitMask')
            118 MAKE_FUNCTION            4 (annotations)
            120 CALL_FUNCTION            1
            122 STORE_NAME              10 (_freeDigitMask)

 50         124 LOAD_CONST              14 ((0,))

 52         126 LOAD_NAME                3 (List)
            128 LOAD_NAME                3 (List)
            130 LOAD_NAME                4 (str)
            132 BINARY_SUBSCR
            134 BINARY_SUBSCR

 53         136 LOAD_NAME                3 (List)
            138 LOAD_NAME                8 (int)
            140 BINARY_SUBSCR

 54         142 LOAD_NAME                3 (List)
            144 LOAD_NAME                8 (int)
            146 BINARY_SUBSCR

 55         148 LOAD_NAME                3 (List)
            150 LOAD_NAME                3 (List)
            152 LOAD_NAME                8 (int)
            154 BINARY_SUBSCR
            156 BINARY_SUBSCR

 56         158 LOAD_NAME                3 (List)
            160 LOAD_NAME                7 (Tuple)
            162 LOAD_NAME                8 (int)
            164 LOAD_NAME                8 (int)
            166 BUILD_TUPLE              2
            168 BINARY_SUBSCR
            170 BINARY_SUBSCR

 57         172 LOAD_NAME                8 (int)

 58         174 LOAD_NAME               11 (bool)

 50         176 LOAD_CONST              11 (('board', 'row', 'col', 'cube', 'empties', 'k', 'return'))
            178 BUILD_CONST_KEY_MAP      7
            180 LOAD_CONST              12 (<code object _solveSudoku at 0x7fad99445500, file ""<ast>"", line 50>)
            182 LOAD_CONST              13 ('Solution._solveSudoku')
            184 MAKE_FUNCTION            5 (defaults, annotations)
            186 STORE_NAME              12 (_solveSudoku)
            188 LOAD_CONST               1 (None)
            190 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fad99445240, file ""<ast>"", line 5>:
  9           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (_boardStats)
              4 LOAD_FAST                1 (board)
              6 CALL_METHOD              1
              8 UNPACK_SEQUENCE          4
             10 STORE_FAST               2 (row)
             12 STORE_FAST               3 (col)
             14 STORE_FAST               4 (cube)
             16 STORE_FAST               5 (empties)

 10          18 LOAD_FAST                0 (self)
             20 LOAD_METHOD              1 (_solveSudoku)
             22 LOAD_FAST                1 (board)
             24 LOAD_FAST                2 (row)
             26 LOAD_FAST                3 (col)
             28 LOAD_FAST                4 (cube)
             30 LOAD_FAST                5 (empties)
             32 CALL_METHOD              5
             34 POP_TOP
             36 LOAD_CONST               1 (None)
             38 RETURN_VALUE

Disassembly of <code object _boardStats at 0x7fad994453a0, file ""<ast>"", line 12>:
 22           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_CONST               2 (9)
              6 BINARY_MULTIPLY
              8 LOAD_CONST               1 (0)
             10 BUILD_LIST               1
             12 LOAD_CONST               2 (9)
             14 BINARY_MULTIPLY
             16 ROT_TWO
             18 STORE_FAST               1 (row)
             20 STORE_FAST               2 (col)

 23          22 LOAD_CONST               3 (<code object <listcomp> at 0x7fad994452f0, file ""<ast>"", line 23>)
             24 LOAD_CONST               4 ('Solution._boardStats.<locals>.<listcomp>')
             26 MAKE_FUNCTION            0
             28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               5 (3)
             32 CALL_FUNCTION            1
             34 GET_ITER
             36 CALL_FUNCTION            1
             38 STORE_FAST               3 (cube)

 24          40 BUILD_LIST               0
             42 STORE_FAST               4 (empties)

 25          44 LOAD_GLOBAL              0 (range)
             46 LOAD_CONST               2 (9)
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER               134 (to 188)
             54 STORE_FAST               5 (i)

 26          56 LOAD_GLOBAL              0 (range)
             58 LOAD_CONST               2 (9)
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER               120 (to 186)
             66 STORE_FAST               6 (j)

 27          68 LOAD_FAST                0 (board)
             70 LOAD_FAST                5 (i)
             72 BINARY_SUBSCR
             74 LOAD_FAST                6 (j)
             76 BINARY_SUBSCR
             78 LOAD_CONST               6 ('.')
             80 COMPARE_OP               2 (==)
             82 POP_JUMP_IF_FALSE      100

 28          84 LOAD_FAST                4 (empties)
             86 LOAD_METHOD              1 (append)
             88 LOAD_FAST                5 (i)
             90 LOAD_FAST                6 (j)
             92 BUILD_TUPLE              2
             94 CALL_METHOD              1
             96 POP_TOP
             98 JUMP_ABSOLUTE           64

 30     >>  100 LOAD_CONST               7 (1)
            102 LOAD_GLOBAL              2 (int)
            104 LOAD_FAST                0 (board)
            106 LOAD_FAST                5 (i)
            108 BINARY_SUBSCR
            110 LOAD_FAST                6 (j)
            112 BINARY_SUBSCR
            114 CALL_FUNCTION            1
            116 LOAD_CONST               7 (1)
            118 BINARY_SUBTRACT
            120 BINARY_LSHIFT
            122 STORE_FAST               7 (hashed)

 32         124 LOAD_FAST                1 (row)
            126 LOAD_FAST                5 (i)
            128 DUP_TOP_TWO
            130 BINARY_SUBSCR
            132 LOAD_FAST                7 (hashed)
            134 INPLACE_OR
            136 ROT_THREE
            138 STORE_SUBSCR

 33         140 LOAD_FAST                2 (col)
            142 LOAD_FAST                6 (j)
            144 DUP_TOP_TWO
            146 BINARY_SUBSCR
            148 LOAD_FAST                7 (hashed)
            150 INPLACE_OR
            152 ROT_THREE
            154 STORE_SUBSCR

 34         156 LOAD_FAST                3 (cube)
            158 LOAD_FAST                5 (i)
            160 LOAD_CONST               5 (3)
            162 BINARY_FLOOR_DIVIDE
            164 BINARY_SUBSCR
            166 LOAD_FAST                6 (j)
            168 LOAD_CONST               5 (3)
            170 BINARY_FLOOR_DIVIDE
            172 DUP_TOP_TWO
            174 BINARY_SUBSCR
            176 LOAD_FAST                7 (hashed)
            178 INPLACE_OR
            180 ROT_THREE
            182 STORE_SUBSCR
            184 JUMP_ABSOLUTE           64
        >>  186 JUMP_ABSOLUTE           52

 35     >>  188 LOAD_FAST                1 (row)
            190 LOAD_FAST                2 (col)
            192 LOAD_FAST                3 (cube)
            194 LOAD_FAST                4 (empties)
            196 BUILD_TUPLE              4
            198 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fad994452f0, file ""<ast>"", line 23>:
 23           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                14 (to 20)
              6 STORE_FAST               1 (_)
              8 LOAD_CONST               0 (0)
             10 BUILD_LIST               1
             12 LOAD_CONST               1 (3)
             14 BINARY_MULTIPLY
             16 LIST_APPEND              2
             18 JUMP_ABSOLUTE            4
        >>   20 RETURN_VALUE

Disassembly of <code object _freeDigitMask at 0x7fad99445450, file ""<ast>"", line 37>:
 46           0 LOAD_CONST               1 (511)
              2 STORE_FAST               3 (v)

 47           4 LOAD_FAST                3 (v)
              6 LOAD_FAST                0 (row)
              8 BINARY_SUBTRACT
             10 LOAD_FAST                3 (v)
             12 LOAD_FAST                1 (col)
             14 BINARY_SUBTRACT
             16 BINARY_AND
             18 LOAD_FAST                3 (v)
             20 LOAD_FAST                2 (cube)
             22 BINARY_SUBTRACT
             24 BINARY_AND
             26 STORE_FAST               4 (mask)

 48          28 LOAD_FAST                4 (mask)
             30 RETURN_VALUE

Disassembly of <code object _solveSudoku at 0x7fad99445500, file ""<ast>"", line 50>:
 59           0 LOAD_FAST                6 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_FAST                5 (empties)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               5 (>=)
             10 POP_JUMP_IF_FALSE       16

 60          12 LOAD_CONST               1 (True)
             14 RETURN_VALUE

 61     >>   16 LOAD_FAST                5 (empties)
             18 LOAD_FAST                6 (k)
             20 BINARY_SUBSCR
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               7 (i)
             26 STORE_FAST               8 (j)

 62          28 LOAD_FAST                0 (self)
             30 LOAD_METHOD              1 (_freeDigitMask)
             32 LOAD_FAST                2 (row)
             34 LOAD_FAST                7 (i)
             36 BINARY_SUBSCR
             38 LOAD_FAST                3 (col)
             40 LOAD_FAST                8 (j)
             42 BINARY_SUBSCR
             44 LOAD_FAST                4 (cube)
             46 LOAD_FAST                7 (i)
             48 LOAD_CONST               2 (3)
             50 BINARY_FLOOR_DIVIDE
             52 BINARY_SUBSCR
             54 LOAD_FAST                8 (j)
             56 LOAD_CONST               2 (3)
             58 BINARY_FLOOR_DIVIDE
             60 BINARY_SUBSCR
             62 CALL_METHOD              3
             64 STORE_FAST               9 (mask)

 63          66 LOAD_FAST                9 (mask)
             68 LOAD_CONST               3 (0)
             70 COMPARE_OP               2 (==)
             72 POP_JUMP_IF_FALSE       78

 64          74 LOAD_CONST               4 (False)
             76 RETURN_VALUE

 65     >>   78 LOAD_GLOBAL              2 (range)
             80 LOAD_CONST               5 (9)
             82 CALL_FUNCTION            1
             84 GET_ITER
        >>   86 FOR_ITER               194 (to 282)
             88 STORE_FAST              10 (shift)

 66          90 LOAD_CONST               6 (1)
             92 LOAD_FAST               10 (shift)
             94 BINARY_LSHIFT
             96 STORE_FAST              11 (h)

 67          98 LOAD_FAST                9 (mask)
            100 LOAD_FAST               11 (h)
            102 BINARY_AND
            104 POP_JUMP_IF_FALSE       86

 69         106 LOAD_FAST                2 (row)
            108 LOAD_FAST                7 (i)
            110 DUP_TOP_TWO
            112 BINARY_SUBSCR
            114 LOAD_FAST               11 (h)
            116 INPLACE_OR
            118 ROT_THREE
            120 STORE_SUBSCR

 70         122 LOAD_FAST                3 (col)
            124 LOAD_FAST                8 (j)
            126 DUP_TOP_TWO
            128 BINARY_SUBSCR
            130 LOAD_FAST               11 (h)
            132 INPLACE_OR
            134 ROT_THREE
            136 STORE_SUBSCR

 71         138 LOAD_FAST                4 (cube)
            140 LOAD_FAST                7 (i)
            142 LOAD_CONST               2 (3)
            144 BINARY_FLOOR_DIVIDE
            146 BINARY_SUBSCR
            148 LOAD_FAST                8 (j)
            150 LOAD_CONST               2 (3)
            152 BINARY_FLOOR_DIVIDE
            154 DUP_TOP_TWO
            156 BINARY_SUBSCR
            158 LOAD_FAST               11 (h)
            160 INPLACE_OR
            162 ROT_THREE
            164 STORE_SUBSCR

 72         166 LOAD_FAST                0 (self)
            168 LOAD_METHOD              3 (_solveSudoku)
            170 LOAD_FAST                1 (board)
            172 LOAD_FAST                2 (row)
            174 LOAD_FAST                3 (col)
            176 LOAD_FAST                4 (cube)
            178 LOAD_FAST                5 (empties)
            180 LOAD_FAST                6 (k)
            182 LOAD_CONST               6 (1)
            184 BINARY_ADD
            186 CALL_METHOD              6
            188 STORE_FAST              12 (solved)

 73         190 LOAD_FAST               12 (solved)
            192 POP_JUMP_IF_FALSE      220

 74         194 LOAD_GLOBAL              4 (str)
            196 LOAD_FAST               10 (shift)
            198 LOAD_CONST               6 (1)
            200 BINARY_ADD
            202 CALL_FUNCTION            1
            204 LOAD_FAST                1 (board)
            206 LOAD_FAST                7 (i)
            208 BINARY_SUBSCR
            210 LOAD_FAST                8 (j)
            212 STORE_SUBSCR

 75         214 POP_TOP
            216 LOAD_CONST               1 (True)
            218 RETURN_VALUE

 78     >>  220 LOAD_FAST                2 (row)
            222 LOAD_FAST                7 (i)
            224 DUP_TOP_TWO
            226 BINARY_SUBSCR
            228 LOAD_FAST               11 (h)
            230 INPLACE_SUBTRACT
            232 ROT_THREE
            234 STORE_SUBSCR

 79         236 LOAD_FAST                3 (col)
            238 LOAD_FAST                8 (j)
            240 DUP_TOP_TWO
            242 BINARY_SUBSCR
            244 LOAD_FAST               11 (h)
            246 INPLACE_SUBTRACT
            248 ROT_THREE
            250 STORE_SUBSCR

 80         252 LOAD_FAST                4 (cube)
            254 LOAD_FAST                7 (i)
            256 LOAD_CONST               2 (3)
            258 BINARY_FLOOR_DIVIDE
            260 BINARY_SUBSCR
            262 LOAD_FAST                8 (j)
            264 LOAD_CONST               2 (3)
            266 BINARY_FLOOR_DIVIDE
            268 DUP_TOP_TWO
            270 BINARY_SUBSCR
            272 LOAD_FAST               11 (h)
            274 INPLACE_SUBTRACT
            276 ROT_THREE
            278 STORE_SUBSCR
            280 JUMP_ABSOLUTE           86

 81     >>  282 LOAD_CONST               4 (False)
            284 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        # get a list of (row, col) of empty cells
        def get_vacant_positions(board):
            res = []
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        res.append((i, j))
            return res
        
        # get valid candidates that can be filled at (row, col)
        def get_candidates(board, row, col):
            res = set()
            for i in range(1, 10):
                res.add(str(i))
              
            # check row and col
            for i in range(9):
                if board[row][i] in res:
                    res.remove(board[row][i])
                if board[i][col] in res:
                    res.remove(board[i][col])
            
            # check box
            sr = (row // 3) * 3
            sc = (col // 3) * 3
            for i in range(sr, sr+3):
                for j in range(sc, sc+3):
                    if board[i][j] in res:
                        res.remove(board[i][j])
            
            return list(res)
        
        # fill using backtracking
        def solve(board, pos):
            if len(pos) == 0: # no more vacant positions to fill
                return True
            
            r, c = pos[0]
            candidates = get_candidates(board, r, c)
            
            if len(candidates) == 0: # no candidates, reject this path, backtrack
                return False
            
            for num in candidates:
                board[r][c] = num
                if solve(board, pos[1:]):
                    return True
                board[r][c] = '.'
            
            return False

        positions = get_vacant_positions(board)
        solve(board, positions)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff311b85500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff311b85500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7ff311b853a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7ff311b853a0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object get_vacant_positions at 0x7ff311b85240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.get_vacant_positions')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (get_vacant_positions)

 16           8 LOAD_CONST               3 (<code object get_candidates at 0x7ff311b852f0, file ""<ast>"", line 16>)
             10 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.get_candidates')
             12 MAKE_FUNCTION            0
             14 STORE_DEREF              0 (get_candidates)

 39          16 LOAD_CLOSURE             0 (get_candidates)
             18 LOAD_CLOSURE             1 (solve)
             20 BUILD_TUPLE              2
             22 LOAD_CONST               5 (<code object solve at 0x7ff311b85450, file ""<ast>"", line 39>)
             24 LOAD_CONST               6 ('Solution.solveSudoku.<locals>.solve')
             26 MAKE_FUNCTION            8 (closure)
             28 STORE_DEREF              1 (solve)

 57          30 LOAD_FAST                2 (get_vacant_positions)
             32 LOAD_FAST                1 (board)
             34 CALL_FUNCTION            1
             36 STORE_FAST               3 (positions)

 58          38 LOAD_DEREF               1 (solve)
             40 LOAD_FAST                1 (board)
             42 LOAD_FAST                3 (positions)
             44 CALL_FUNCTION            2
             46 POP_TOP
             48 LOAD_CONST               7 (None)
             50 RETURN_VALUE

Disassembly of <code object get_vacant_positions at 0x7ff311b85240, file ""<ast>"", line 7>:
  8           0 BUILD_LIST               0
              2 STORE_FAST               1 (res)

  9           4 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (9)
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                48 (to 62)
             14 STORE_FAST               2 (i)

 10          16 LOAD_GLOBAL              0 (range)
             18 LOAD_CONST               1 (9)
             20 CALL_FUNCTION            1
             22 GET_ITER
        >>   24 FOR_ITER                34 (to 60)
             26 STORE_FAST               3 (j)

 11          28 LOAD_FAST                0 (board)
             30 LOAD_FAST                2 (i)
             32 BINARY_SUBSCR
             34 LOAD_FAST                3 (j)
             36 BINARY_SUBSCR
             38 LOAD_CONST               2 ('.')
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       24

 12          44 LOAD_FAST                1 (res)
             46 LOAD_METHOD              1 (append)
             48 LOAD_FAST                2 (i)
             50 LOAD_FAST                3 (j)
             52 BUILD_TUPLE              2
             54 CALL_METHOD              1
             56 POP_TOP
             58 JUMP_ABSOLUTE           24
        >>   60 JUMP_ABSOLUTE           12

 13     >>   62 LOAD_FAST                1 (res)
             64 RETURN_VALUE

Disassembly of <code object get_candidates at 0x7ff311b852f0, file ""<ast>"", line 16>:
 17           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 STORE_FAST               3 (res)

 18           6 LOAD_GLOBAL              1 (range)
              8 LOAD_CONST               1 (1)
             10 LOAD_CONST               2 (10)
             12 CALL_FUNCTION            2
             14 GET_ITER
        >>   16 FOR_ITER                18 (to 36)
             18 STORE_FAST               4 (i)

 19          20 LOAD_FAST                3 (res)
             22 LOAD_METHOD              2 (add)
             24 LOAD_GLOBAL              3 (str)
             26 LOAD_FAST                4 (i)
             28 CALL_FUNCTION            1
             30 CALL_METHOD              1
             32 POP_TOP
             34 JUMP_ABSOLUTE           16

 22     >>   36 LOAD_GLOBAL              1 (range)
             38 LOAD_CONST               3 (9)
             40 CALL_FUNCTION            1
             42 GET_ITER
        >>   44 FOR_ITER                72 (to 118)
             46 STORE_FAST               4 (i)

 23          48 LOAD_FAST                0 (board)
             50 LOAD_FAST                1 (row)
             52 BINARY_SUBSCR
             54 LOAD_FAST                4 (i)
             56 BINARY_SUBSCR
             58 LOAD_FAST                3 (res)
             60 COMPARE_OP               6 (in)
             62 POP_JUMP_IF_FALSE       82

 24          64 LOAD_FAST                3 (res)
             66 LOAD_METHOD              4 (remove)
             68 LOAD_FAST                0 (board)
             70 LOAD_FAST                1 (row)
             72 BINARY_SUBSCR
             74 LOAD_FAST                4 (i)
             76 BINARY_SUBSCR
             78 CALL_METHOD              1
             80 POP_TOP

 25     >>   82 LOAD_FAST                0 (board)
             84 LOAD_FAST                4 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                2 (col)
             90 BINARY_SUBSCR
             92 LOAD_FAST                3 (res)
             94 COMPARE_OP               6 (in)
             96 POP_JUMP_IF_FALSE       44

 26          98 LOAD_FAST                3 (res)
            100 LOAD_METHOD              4 (remove)
            102 LOAD_FAST                0 (board)
            104 LOAD_FAST                4 (i)
            106 BINARY_SUBSCR
            108 LOAD_FAST                2 (col)
            110 BINARY_SUBSCR
            112 CALL_METHOD              1
            114 POP_TOP
            116 JUMP_ABSOLUTE           44

 29     >>  118 LOAD_FAST                1 (row)
            120 LOAD_CONST               4 (3)
            122 BINARY_FLOOR_DIVIDE
            124 LOAD_CONST               4 (3)
            126 BINARY_MULTIPLY
            128 STORE_FAST               5 (sr)

 30         130 LOAD_FAST                2 (col)
            132 LOAD_CONST               4 (3)
            134 BINARY_FLOOR_DIVIDE
            136 LOAD_CONST               4 (3)
            138 BINARY_MULTIPLY
            140 STORE_FAST               6 (sc)

 31         142 LOAD_GLOBAL              1 (range)
            144 LOAD_FAST                5 (sr)
            146 LOAD_FAST                5 (sr)
            148 LOAD_CONST               4 (3)
            150 BINARY_ADD
            152 CALL_FUNCTION            2
            154 GET_ITER
        >>  156 FOR_ITER                58 (to 216)
            158 STORE_FAST               4 (i)

 32         160 LOAD_GLOBAL              1 (range)
            162 LOAD_FAST                6 (sc)
            164 LOAD_FAST                6 (sc)
            166 LOAD_CONST               4 (3)
            168 BINARY_ADD
            170 CALL_FUNCTION            2
            172 GET_ITER
        >>  174 FOR_ITER                38 (to 214)
            176 STORE_FAST               7 (j)

 33         178 LOAD_FAST                0 (board)
            180 LOAD_FAST                4 (i)
            182 BINARY_SUBSCR
            184 LOAD_FAST                7 (j)
            186 BINARY_SUBSCR
            188 LOAD_FAST                3 (res)
            190 COMPARE_OP               6 (in)
            192 POP_JUMP_IF_FALSE      174

 34         194 LOAD_FAST                3 (res)
            196 LOAD_METHOD              4 (remove)
            198 LOAD_FAST                0 (board)
            200 LOAD_FAST                4 (i)
            202 BINARY_SUBSCR
            204 LOAD_FAST                7 (j)
            206 BINARY_SUBSCR
            208 CALL_METHOD              1
            210 POP_TOP
            212 JUMP_ABSOLUTE          174
        >>  214 JUMP_ABSOLUTE          156

 36     >>  216 LOAD_GLOBAL              5 (list)
            218 LOAD_FAST                3 (res)
            220 CALL_FUNCTION            1
            222 RETURN_VALUE

Disassembly of <code object solve at 0x7ff311b85450, file ""<ast>"", line 39>:
 40           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (pos)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

 41          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

 43     >>   16 LOAD_FAST                1 (pos)
             18 LOAD_CONST               1 (0)
             20 BINARY_SUBSCR
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               2 (r)
             26 STORE_FAST               3 (c)

 44          28 LOAD_DEREF               0 (get_candidates)
             30 LOAD_FAST                0 (board)
             32 LOAD_FAST                2 (r)
             34 LOAD_FAST                3 (c)
             36 CALL_FUNCTION            3
             38 STORE_FAST               4 (candidates)

 46          40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                4 (candidates)
             44 CALL_FUNCTION            1
             46 LOAD_CONST               1 (0)
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       56

 47          52 LOAD_CONST               3 (False)
             54 RETURN_VALUE

 49     >>   56 LOAD_FAST                4 (candidates)
             58 GET_ITER
        >>   60 FOR_ITER                52 (to 114)
             62 STORE_FAST               5 (num)

 50          64 LOAD_FAST                5 (num)
             66 LOAD_FAST                0 (board)
             68 LOAD_FAST                2 (r)
             70 BINARY_SUBSCR
             72 LOAD_FAST                3 (c)
             74 STORE_SUBSCR

 51          76 LOAD_DEREF               1 (solve)
             78 LOAD_FAST                0 (board)
             80 LOAD_FAST                1 (pos)
             82 LOAD_CONST               4 (1)
             84 LOAD_CONST               0 (None)
             86 BUILD_SLICE              2
             88 BINARY_SUBSCR
             90 CALL_FUNCTION            2
             92 POP_JUMP_IF_FALSE      100

 52          94 POP_TOP
             96 LOAD_CONST               2 (True)
             98 RETURN_VALUE

 53     >>  100 LOAD_CONST               5 ('.')
            102 LOAD_FAST                0 (board)
            104 LOAD_FAST                2 (r)
            106 BINARY_SUBSCR
            108 LOAD_FAST                3 (c)
            110 STORE_SUBSCR
            112 JUMP_ABSOLUTE           60

 55     >>  114 LOAD_CONST               3 (False)
            116 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        def solve(r, c):
            if r == 9 and c == 9:
                return True
            if board[r][c] == '.':
                for num in range(1, 10):
                    if can_put(r, c, num):
                        board[r][c] = str(num)
                        res = solve(*getNext(r, c))
                        if res:
                            return True
                        else:
                            board[r][c] = '.'
            else:
                return solve(*getNext(r, c))

        
        def can_put(r, c, num):
            num = str(num)
            for i in range(len(board)):
                if board[i][c] == num:
                    return False
                
            for i in range(len(board[0])):
                if board[r][i] == num:
                    return False
                
            base_r = (r // 3)*3
            base_c = (c // 3)*3
            
            for i in range(base_r, base_r + 3):
                for j in range(base_c, base_c + 3):
                    if board[i][j] == num:
                        return False                    
            return True
        
        
        def getNext(r, c):
            if c==8 and r==8:
                return 9, 9
            if c == 8:
                return r+1, 0
            else:
                return r, c+1
            
            
        solve(0, 0)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd9337f55b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd9337f55b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fd9337f5500, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fd9337f5500, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (board)
              2 LOAD_CLOSURE             1 (can_put)
              4 LOAD_CLOSURE             2 (getNext)
              6 LOAD_CLOSURE             3 (solve)
              8 BUILD_TUPLE              4
             10 LOAD_CONST               1 (<code object solve at 0x7fd9337f53a0, file ""<ast>"", line 3>)
             12 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.solve')
             14 MAKE_FUNCTION            8 (closure)
             16 STORE_DEREF              3 (solve)

 19          18 LOAD_CLOSURE             0 (board)
             20 BUILD_TUPLE              1
             22 LOAD_CONST               3 (<code object can_put at 0x7fd9337f5240, file ""<ast>"", line 19>)
             24 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.can_put')
             26 MAKE_FUNCTION            8 (closure)
             28 STORE_DEREF              1 (can_put)

 39          30 LOAD_CONST               5 (<code object getNext at 0x7fd9337f5450, file ""<ast>"", line 39>)
             32 LOAD_CONST               6 ('Solution.solveSudoku.<locals>.getNext')
             34 MAKE_FUNCTION            0
             36 STORE_DEREF              2 (getNext)

 48          38 LOAD_DEREF               3 (solve)
             40 LOAD_CONST               7 (0)
             42 LOAD_CONST               7 (0)
             44 CALL_FUNCTION            2
             46 POP_TOP
             48 LOAD_CONST               0 (None)
             50 RETURN_VALUE

Disassembly of <code object solve at 0x7fd9337f53a0, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                0 (r)
              2 LOAD_CONST               1 (9)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       20
              8 LOAD_FAST                1 (c)
             10 LOAD_CONST               1 (9)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  5          16 LOAD_CONST               2 (True)
             18 RETURN_VALUE

  6     >>   20 LOAD_DEREF               0 (board)
             22 LOAD_FAST                0 (r)
             24 BINARY_SUBSCR
             26 LOAD_FAST                1 (c)
             28 BINARY_SUBSCR
             30 LOAD_CONST               3 ('.')
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE      118

  7          36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               4 (1)
             40 LOAD_CONST               5 (10)
             42 CALL_FUNCTION            2
             44 GET_ITER
        >>   46 FOR_ITER                68 (to 116)
             48 STORE_FAST               2 (num)

  8          50 LOAD_DEREF               1 (can_put)
             52 LOAD_FAST                0 (r)
             54 LOAD_FAST                1 (c)
             56 LOAD_FAST                2 (num)
             58 CALL_FUNCTION            3
             60 POP_JUMP_IF_FALSE       46

  9          62 LOAD_GLOBAL              1 (str)
             64 LOAD_FAST                2 (num)
             66 CALL_FUNCTION            1
             68 LOAD_DEREF               0 (board)
             70 LOAD_FAST                0 (r)
             72 BINARY_SUBSCR
             74 LOAD_FAST                1 (c)
             76 STORE_SUBSCR

 10          78 LOAD_DEREF               3 (solve)
             80 LOAD_DEREF               2 (getNext)
             82 LOAD_FAST                0 (r)
             84 LOAD_FAST                1 (c)
             86 CALL_FUNCTION            2
             88 CALL_FUNCTION_EX         0
             90 STORE_FAST               3 (res)

 11          92 LOAD_FAST                3 (res)
             94 POP_JUMP_IF_FALSE      102

 12          96 POP_TOP
             98 LOAD_CONST               2 (True)
            100 RETURN_VALUE

 14     >>  102 LOAD_CONST               3 ('.')
            104 LOAD_DEREF               0 (board)
            106 LOAD_FAST                0 (r)
            108 BINARY_SUBSCR
            110 LOAD_FAST                1 (c)
            112 STORE_SUBSCR
            114 JUMP_ABSOLUTE           46
        >>  116 JUMP_FORWARD            14 (to 132)

 16     >>  118 LOAD_DEREF               3 (solve)
            120 LOAD_DEREF               2 (getNext)
            122 LOAD_FAST                0 (r)
            124 LOAD_FAST                1 (c)
            126 CALL_FUNCTION            2
            128 CALL_FUNCTION_EX         0
            130 RETURN_VALUE
        >>  132 LOAD_CONST               0 (None)
            134 RETURN_VALUE

Disassembly of <code object can_put at 0x7fd9337f5240, file ""<ast>"", line 19>:
 20           0 LOAD_GLOBAL              0 (str)
              2 LOAD_FAST                2 (num)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (num)

 21           8 LOAD_GLOBAL              1 (range)
             10 LOAD_GLOBAL              2 (len)
             12 LOAD_DEREF               0 (board)
             14 CALL_FUNCTION            1
             16 CALL_FUNCTION            1
             18 GET_ITER
        >>   20 FOR_ITER                26 (to 48)
             22 STORE_FAST               3 (i)

 22          24 LOAD_DEREF               0 (board)
             26 LOAD_FAST                3 (i)
             28 BINARY_SUBSCR
             30 LOAD_FAST                1 (c)
             32 BINARY_SUBSCR
             34 LOAD_FAST                2 (num)
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       20

 23          40 POP_TOP
             42 LOAD_CONST               1 (False)
             44 RETURN_VALUE
             46 JUMP_ABSOLUTE           20

 25     >>   48 LOAD_GLOBAL              1 (range)
             50 LOAD_GLOBAL              2 (len)
             52 LOAD_DEREF               0 (board)
             54 LOAD_CONST               2 (0)
             56 BINARY_SUBSCR
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 GET_ITER
        >>   64 FOR_ITER                26 (to 92)
             66 STORE_FAST               3 (i)

 26          68 LOAD_DEREF               0 (board)
             70 LOAD_FAST                0 (r)
             72 BINARY_SUBSCR
             74 LOAD_FAST                3 (i)
             76 BINARY_SUBSCR
             78 LOAD_FAST                2 (num)
             80 COMPARE_OP               2 (==)
             82 POP_JUMP_IF_FALSE       64

 27          84 POP_TOP
             86 LOAD_CONST               1 (False)
             88 RETURN_VALUE
             90 JUMP_ABSOLUTE           64

 29     >>   92 LOAD_FAST                0 (r)
             94 LOAD_CONST               3 (3)
             96 BINARY_FLOOR_DIVIDE
             98 LOAD_CONST               3 (3)
            100 BINARY_MULTIPLY
            102 STORE_FAST               4 (base_r)

 30         104 LOAD_FAST                1 (c)
            106 LOAD_CONST               3 (3)
            108 BINARY_FLOOR_DIVIDE
            110 LOAD_CONST               3 (3)
            112 BINARY_MULTIPLY
            114 STORE_FAST               5 (base_c)

 32         116 LOAD_GLOBAL              1 (range)
            118 LOAD_FAST                4 (base_r)
            120 LOAD_FAST                4 (base_r)
            122 LOAD_CONST               3 (3)
            124 BINARY_ADD
            126 CALL_FUNCTION            2
            128 GET_ITER
        >>  130 FOR_ITER                48 (to 180)
            132 STORE_FAST               3 (i)

 33         134 LOAD_GLOBAL              1 (range)
            136 LOAD_FAST                5 (base_c)
            138 LOAD_FAST                5 (base_c)
            140 LOAD_CONST               3 (3)
            142 BINARY_ADD
            144 CALL_FUNCTION            2
            146 GET_ITER
        >>  148 FOR_ITER                28 (to 178)
            150 STORE_FAST               6 (j)

 34         152 LOAD_DEREF               0 (board)
            154 LOAD_FAST                3 (i)
            156 BINARY_SUBSCR
            158 LOAD_FAST                6 (j)
            160 BINARY_SUBSCR
            162 LOAD_FAST                2 (num)
            164 COMPARE_OP               2 (==)
            166 POP_JUMP_IF_FALSE      148

 35         168 POP_TOP
            170 POP_TOP
            172 LOAD_CONST               1 (False)
            174 RETURN_VALUE
            176 JUMP_ABSOLUTE          148
        >>  178 JUMP_ABSOLUTE          130

 36     >>  180 LOAD_CONST               4 (True)
            182 RETURN_VALUE

Disassembly of <code object getNext at 0x7fd9337f5450, file ""<ast>"", line 39>:
 40           0 LOAD_FAST                1 (c)
              2 LOAD_CONST               1 (8)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       20
              8 LOAD_FAST                0 (r)
             10 LOAD_CONST               1 (8)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

 41          16 LOAD_CONST               2 ((9, 9))
             18 RETURN_VALUE

 42     >>   20 LOAD_FAST                1 (c)
             22 LOAD_CONST               1 (8)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       40

 43          28 LOAD_FAST                0 (r)
             30 LOAD_CONST               3 (1)
             32 BINARY_ADD
             34 LOAD_CONST               4 (0)
             36 BUILD_TUPLE              2
             38 RETURN_VALUE

 45     >>   40 LOAD_FAST                0 (r)
             42 LOAD_FAST                1 (c)
             44 LOAD_CONST               3 (1)
             46 BINARY_ADD
             48 BUILD_TUPLE              2
             50 RETURN_VALUE
             52 LOAD_CONST               0 (None)
             54 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def getPosNums(self, board, position, rows, columns, sub_boxes):
        nums = []
        row, column = position
        box_idx = (row//3)*3 + column//3
        for s in map(str,range(1,10)):
            if (not s in rows[row]) and (not s in columns[column]) and (not s in sub_boxes[box_idx]):
                nums.append(s)
        return nums
    
    
    
    def init(self, board, emptyPos, rows, columns, sub_boxes):
        ## fill rows, columns, sub_boxes and emptyPos keys
        for i in range(9):
            for j in range(9):
                tmp = board[i][j]
                if tmp != '.':
                    rows[i].add(tmp)
                    columns[j].add(tmp)
                    box_idx = (i//3)*3+(j//3)
                    sub_boxes[box_idx].add(tmp)
                else:
                    emptyPos.append((i,j))
        return
        
        
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        
        emptyPos = []       # record empty position(row,column)
        rows = [set() for i in range(9)]    # record numbers in each rows
        columns = [set() for i in range(9)] # record numbers in each columns
        sub_boxes = [set() for i in range(9)]   #record numbers in each sub-boxes
        
        self.init(board, emptyPos, rows, columns, sub_boxes)
        

        def solve(board, positions):
            if not positions:       # if all empty positions are filled, it's done
                return True
            
            # we are working on first empty position
            # find all possible numbers on this position
            posNums = self.getPosNums(board, positions[0], rows, columns, sub_boxes)
            
            if not posNums:     #if there is no available numbers on this position, it's fail
                return False
            
            row, column = positions[0]
            box_idx = (row//3)*3 + (column//3)
            for s in posNums:
                board[row][column] = s
                rows[row].add(s)
                columns[column].add(s)
                sub_boxes[box_idx].add(s)
                
                if solve(board, positions[1:]):
                    return True
                
                rows[row].remove(s)
                columns[column].remove(s)
                sub_boxes[box_idx].remove(s)
                
            
            # if all possible numbers don't work, it's fail.            
            board[row][column] = '.'                    
            return False        
        
        solve(board, emptyPos)
        return
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fab93655710, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fab93655710, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object getPosNums at 0x7fab936552f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.getPosNums')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (getPosNums)

 13          16 LOAD_CONST               3 (<code object init at 0x7fab93655450, file ""<ast>"", line 13>)
             18 LOAD_CONST               4 ('Solution.init')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (init)

 28          24 LOAD_NAME                5 (List)
             26 LOAD_NAME                5 (List)
             28 LOAD_NAME                6 (str)
             30 BINARY_SUBSCR
             32 BINARY_SUBSCR
             34 LOAD_CONST               5 (None)
             36 LOAD_CONST               6 (('board', 'return'))
             38 BUILD_CONST_KEY_MAP      2
             40 LOAD_CONST               7 (<code object solveSudoku at 0x7fab936557c0, file ""<ast>"", line 28>)
             42 LOAD_CONST               8 ('Solution.solveSudoku')
             44 MAKE_FUNCTION            4 (annotations)
             46 STORE_NAME               7 (solveSudoku)
             48 LOAD_CONST               5 (None)
             50 RETURN_VALUE

Disassembly of <code object getPosNums at 0x7fab936552f0, file ""<ast>"", line 2>:
  3           0 BUILD_LIST               0
              2 STORE_FAST               6 (nums)

  4           4 LOAD_FAST                2 (position)
              6 UNPACK_SEQUENCE          2
              8 STORE_FAST               7 (row)
             10 STORE_FAST               8 (column)

  5          12 LOAD_FAST                7 (row)
             14 LOAD_CONST               1 (3)
             16 BINARY_FLOOR_DIVIDE
             18 LOAD_CONST               1 (3)
             20 BINARY_MULTIPLY
             22 LOAD_FAST                8 (column)
             24 LOAD_CONST               1 (3)
             26 BINARY_FLOOR_DIVIDE
             28 BINARY_ADD
             30 STORE_FAST               9 (box_idx)

  6          32 LOAD_GLOBAL              0 (map)
             34 LOAD_GLOBAL              1 (str)
             36 LOAD_GLOBAL              2 (range)
             38 LOAD_CONST               2 (1)
             40 LOAD_CONST               3 (10)
             42 CALL_FUNCTION            2
             44 CALL_FUNCTION            2
             46 GET_ITER
        >>   48 FOR_ITER                50 (to 100)
             50 STORE_FAST              10 (s)

  7          52 LOAD_FAST               10 (s)
             54 LOAD_FAST                3 (rows)
             56 LOAD_FAST                7 (row)
             58 BINARY_SUBSCR
             60 COMPARE_OP               7 (not in)
             62 POP_JUMP_IF_FALSE       48
             64 LOAD_FAST               10 (s)
             66 LOAD_FAST                4 (columns)
             68 LOAD_FAST                8 (column)
             70 BINARY_SUBSCR
             72 COMPARE_OP               7 (not in)
             74 POP_JUMP_IF_FALSE       48
             76 LOAD_FAST               10 (s)
             78 LOAD_FAST                5 (sub_boxes)
             80 LOAD_FAST                9 (box_idx)
             82 BINARY_SUBSCR
             84 COMPARE_OP               7 (not in)
             86 POP_JUMP_IF_FALSE       48

  8          88 LOAD_FAST                6 (nums)
             90 LOAD_METHOD              3 (append)
             92 LOAD_FAST               10 (s)
             94 CALL_METHOD              1
             96 POP_TOP
             98 JUMP_ABSOLUTE           48

  9     >>  100 LOAD_FAST                6 (nums)
            102 RETURN_VALUE

Disassembly of <code object init at 0x7fab93655450, file ""<ast>"", line 13>:
 15           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 GET_ITER
        >>    8 FOR_ITER               116 (to 126)
             10 STORE_FAST               6 (i)

 16          12 LOAD_GLOBAL              0 (range)
             14 LOAD_CONST               1 (9)
             16 CALL_FUNCTION            1
             18 GET_ITER
        >>   20 FOR_ITER               102 (to 124)
             22 STORE_FAST               7 (j)

 17          24 LOAD_FAST                1 (board)
             26 LOAD_FAST                6 (i)
             28 BINARY_SUBSCR
             30 LOAD_FAST                7 (j)
             32 BINARY_SUBSCR
             34 STORE_FAST               8 (tmp)

 18          36 LOAD_FAST                8 (tmp)
             38 LOAD_CONST               2 ('.')
             40 COMPARE_OP               3 (!=)
             42 POP_JUMP_IF_FALSE      108

 19          44 LOAD_FAST                3 (rows)
             46 LOAD_FAST                6 (i)
             48 BINARY_SUBSCR
             50 LOAD_METHOD              1 (add)
             52 LOAD_FAST                8 (tmp)
             54 CALL_METHOD              1
             56 POP_TOP

 20          58 LOAD_FAST                4 (columns)
             60 LOAD_FAST                7 (j)
             62 BINARY_SUBSCR
             64 LOAD_METHOD              1 (add)
             66 LOAD_FAST                8 (tmp)
             68 CALL_METHOD              1
             70 POP_TOP

 21          72 LOAD_FAST                6 (i)
             74 LOAD_CONST               3 (3)
             76 BINARY_FLOOR_DIVIDE
             78 LOAD_CONST               3 (3)
             80 BINARY_MULTIPLY
             82 LOAD_FAST                7 (j)
             84 LOAD_CONST               3 (3)
             86 BINARY_FLOOR_DIVIDE
             88 BINARY_ADD
             90 STORE_FAST               9 (box_idx)

 22          92 LOAD_FAST                5 (sub_boxes)
             94 LOAD_FAST                9 (box_idx)
             96 BINARY_SUBSCR
             98 LOAD_METHOD              1 (add)
            100 LOAD_FAST                8 (tmp)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           20

 24     >>  108 LOAD_FAST                2 (emptyPos)
            110 LOAD_METHOD              2 (append)
            112 LOAD_FAST                6 (i)
            114 LOAD_FAST                7 (j)
            116 BUILD_TUPLE              2
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           20
        >>  124 JUMP_ABSOLUTE            8

 25     >>  126 LOAD_CONST               0 (None)
            128 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fab936557c0, file ""<ast>"", line 28>:
 33           0 BUILD_LIST               0
              2 STORE_FAST               2 (emptyPos)

 34           4 LOAD_CONST               1 (<code object <listcomp> at 0x7fab93655240, file ""<ast>"", line 34>)
              6 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
              8 MAKE_FUNCTION            0
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (9)
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_DEREF              1 (rows)

 35          22 LOAD_CONST               4 (<code object <listcomp> at 0x7fab93655500, file ""<ast>"", line 35>)
             24 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             26 MAKE_FUNCTION            0
             28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               3 (9)
             32 CALL_FUNCTION            1
             34 GET_ITER
             36 CALL_FUNCTION            1
             38 STORE_DEREF              0 (columns)

 36          40 LOAD_CONST               5 (<code object <listcomp> at 0x7fab936555b0, file ""<ast>"", line 36>)
             42 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             44 MAKE_FUNCTION            0
             46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST               3 (9)
             50 CALL_FUNCTION            1
             52 GET_ITER
             54 CALL_FUNCTION            1
             56 STORE_DEREF              4 (sub_boxes)

 38          58 LOAD_DEREF               2 (self)
             60 LOAD_METHOD              1 (init)
             62 LOAD_FAST                1 (board)
             64 LOAD_FAST                2 (emptyPos)
             66 LOAD_DEREF               1 (rows)
             68 LOAD_DEREF               0 (columns)
             70 LOAD_DEREF               4 (sub_boxes)
             72 CALL_METHOD              5
             74 POP_TOP

 41          76 LOAD_CLOSURE             0 (columns)
             78 LOAD_CLOSURE             1 (rows)
             80 LOAD_CLOSURE             2 (self)
             82 LOAD_CLOSURE             3 (solve)
             84 LOAD_CLOSURE             4 (sub_boxes)
             86 BUILD_TUPLE              5
             88 LOAD_CONST               6 (<code object solve at 0x7fab93655660, file ""<ast>"", line 41>)
             90 LOAD_CONST               7 ('Solution.solveSudoku.<locals>.solve')
             92 MAKE_FUNCTION            8 (closure)
             94 STORE_DEREF              3 (solve)

 72          96 LOAD_DEREF               3 (solve)
             98 LOAD_FAST                1 (board)
            100 LOAD_FAST                2 (emptyPos)
            102 CALL_FUNCTION            2
            104 POP_TOP

 73         106 LOAD_CONST               8 (None)
            108 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fab93655240, file ""<ast>"", line 34>:
 34           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fab93655500, file ""<ast>"", line 35>:
 35           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fab936555b0, file ""<ast>"", line 36>:
 36           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (i)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object solve at 0x7fab93655660, file ""<ast>"", line 41>:
 42           0 LOAD_FAST                1 (positions)
              2 POP_JUMP_IF_TRUE         8

 43           4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 47     >>    8 LOAD_DEREF               2 (self)
             10 LOAD_METHOD              0 (getPosNums)
             12 LOAD_FAST                0 (board)
             14 LOAD_FAST                1 (positions)
             16 LOAD_CONST               2 (0)
             18 BINARY_SUBSCR
             20 LOAD_DEREF               1 (rows)
             22 LOAD_DEREF               0 (columns)
             24 LOAD_DEREF               4 (sub_boxes)
             26 CALL_METHOD              5
             28 STORE_FAST               2 (posNums)

 49          30 LOAD_FAST                2 (posNums)
             32 POP_JUMP_IF_TRUE        38

 50          34 LOAD_CONST               3 (False)
             36 RETURN_VALUE

 52     >>   38 LOAD_FAST                1 (positions)
             40 LOAD_CONST               2 (0)
             42 BINARY_SUBSCR
             44 UNPACK_SEQUENCE          2
             46 STORE_FAST               3 (row)
             48 STORE_FAST               4 (column)

 53          50 LOAD_FAST                3 (row)
             52 LOAD_CONST               4 (3)
             54 BINARY_FLOOR_DIVIDE
             56 LOAD_CONST               4 (3)
             58 BINARY_MULTIPLY
             60 LOAD_FAST                4 (column)
             62 LOAD_CONST               4 (3)
             64 BINARY_FLOOR_DIVIDE
             66 BINARY_ADD
             68 STORE_FAST               5 (box_idx)

 54          70 LOAD_FAST                2 (posNums)
             72 GET_ITER
        >>   74 FOR_ITER               124 (to 200)
             76 STORE_FAST               6 (s)

 55          78 LOAD_FAST                6 (s)
             80 LOAD_FAST                0 (board)
             82 LOAD_FAST                3 (row)
             84 BINARY_SUBSCR
             86 LOAD_FAST                4 (column)
             88 STORE_SUBSCR

 56          90 LOAD_DEREF               1 (rows)
             92 LOAD_FAST                3 (row)
             94 BINARY_SUBSCR
             96 LOAD_METHOD              1 (add)
             98 LOAD_FAST                6 (s)
            100 CALL_METHOD              1
            102 POP_TOP

 57         104 LOAD_DEREF               0 (columns)
            106 LOAD_FAST                4 (column)
            108 BINARY_SUBSCR
            110 LOAD_METHOD              1 (add)
            112 LOAD_FAST                6 (s)
            114 CALL_METHOD              1
            116 POP_TOP

 58         118 LOAD_DEREF               4 (sub_boxes)
            120 LOAD_FAST                5 (box_idx)
            122 BINARY_SUBSCR
            124 LOAD_METHOD              1 (add)
            126 LOAD_FAST                6 (s)
            128 CALL_METHOD              1
            130 POP_TOP

 60         132 LOAD_DEREF               3 (solve)
            134 LOAD_FAST                0 (board)
            136 LOAD_FAST                1 (positions)
            138 LOAD_CONST               5 (1)
            140 LOAD_CONST               0 (None)
            142 BUILD_SLICE              2
            144 BINARY_SUBSCR
            146 CALL_FUNCTION            2
            148 POP_JUMP_IF_FALSE      156

 61         150 POP_TOP
            152 LOAD_CONST               1 (True)
            154 RETURN_VALUE

 63     >>  156 LOAD_DEREF               1 (rows)
            158 LOAD_FAST                3 (row)
            160 BINARY_SUBSCR
            162 LOAD_METHOD              2 (remove)
            164 LOAD_FAST                6 (s)
            166 CALL_METHOD              1
            168 POP_TOP

 64         170 LOAD_DEREF               0 (columns)
            172 LOAD_FAST                4 (column)
            174 BINARY_SUBSCR
            176 LOAD_METHOD              2 (remove)
            178 LOAD_FAST                6 (s)
            180 CALL_METHOD              1
            182 POP_TOP

 65         184 LOAD_DEREF               4 (sub_boxes)
            186 LOAD_FAST                5 (box_idx)
            188 BINARY_SUBSCR
            190 LOAD_METHOD              2 (remove)
            192 LOAD_FAST                6 (s)
            194 CALL_METHOD              1
            196 POP_TOP
            198 JUMP_ABSOLUTE           74

 69     >>  200 LOAD_CONST               6 ('.')
            202 LOAD_FAST                0 (board)
            204 LOAD_FAST                3 (row)
            206 BINARY_SUBSCR
            208 LOAD_FAST                4 (column)
            210 STORE_SUBSCR

 70         212 LOAD_CONST               3 (False)
            214 RETURN_VALUE
None
"
solveSudoku,"class Solution:

    """"""
    * i, j -> index
    * bit -> 2^n, n -> number to be check
    * here we will set and unset the nTH bit
    """"""
    def toggle(self, i, j, bit):
        self.row[i] = self.row[i]^bit
        self.col[j] = self.col[j]^bit
        self.block[(i//3)*3 + j//3] = self.block[(i//3)*3 + j//3]^bit
        
    """"""
    * i, j -> index
    * bit -> 2^n, n -> number to be check
    * I will check weather the (n)th bit the row[i] is ON or OFF
    * if it is ON
    *       that means n is already present is that row and we cannont place another n
    * if it is OFF
    *       that means we are good to go 
    * same goes for col and block
    """"""
     
    def issafe(self, i , j, bit):
        if (bit & self.row[i]) != 0:
            return False
        if (bit & self.col[j]) != 0:
            return False
        if (bit & self.block[(i//3)*3 + j//3]) != 0:
            return False
        return True
    
    """"""
    * board -> baord
    * boxno -> (0 - 80) instead of passing i and j , i'm gonna pass boxno and later convert it into i and j
    """"""
        
    def solve(self, board, boxno):
        i  = boxno // 9 
        j  = boxno % 9
        
        if boxno == 81:
            return True

        if board[i][j] != '.':
            return self.solve(board, boxno+1)
        
        else:
            for k in range(1, 10):
                bit  = 1 << k
                if self.issafe(i,j,bit):
                    
                    self.toggle(i, j, bit)
                    board[i][j]= str(k)
                    
                    if self.solve(board, boxno + 1) : 
                        return True
                    
                    board[i][j]= '.'
                    self.toggle(i, j, bit)
                    
        return False            
    
    def init(self):
        self.row = []       # to check weather, we have nunber x 
                            # in the specific row, col, and block(grid) 
        self.col = []
        self.block = []
        for i in range(1, 10):
            self.row.append(0)
            self.col.append(0)
            self.block.append(0)
            
            
    def solveSudoku(self, board:List[List[str]])->None:
        self.init()
        for i in range(0, 9):
            for j in range(0, 9):
                if board[i][j] != '.':
                    self.toggle(i, j,(1 << int(board[i][j])) )
                    
                    
        self.solve(board, 0)

                
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f322e9e55b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f322e9e55b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 ('\n    * i, j -> index\n    * bit -> 2^n, n -> number to be check\n    * here we will set and unset the nTH bit\n    ')
             10 STORE_NAME               3 (__doc__)

  8          12 LOAD_CONST               2 (<code object toggle at 0x7f322e9e52f0, file ""<ast>"", line 8>)
             14 LOAD_CONST               3 ('Solution.toggle')
             16 MAKE_FUNCTION            0
             18 STORE_NAME               4 (toggle)

 24          20 LOAD_CONST               4 (<code object issafe at 0x7f322e9e53a0, file ""<ast>"", line 24>)
             22 LOAD_CONST               5 ('Solution.issafe')
             24 MAKE_FUNCTION            0
             26 STORE_NAME               5 (issafe)

 38          28 LOAD_CONST               6 (<code object solve at 0x7f322e9e5450, file ""<ast>"", line 38>)
             30 LOAD_CONST               7 ('Solution.solve')
             32 MAKE_FUNCTION            0
             34 STORE_NAME               6 (solve)

 64          36 LOAD_CONST               8 (<code object init at 0x7f322e9e5500, file ""<ast>"", line 64>)
             38 LOAD_CONST               9 ('Solution.init')
             40 MAKE_FUNCTION            0
             42 STORE_NAME               7 (init)

 75          44 LOAD_NAME                8 (List)
             46 LOAD_NAME                8 (List)
             48 LOAD_NAME                9 (str)
             50 BINARY_SUBSCR
             52 BINARY_SUBSCR
             54 LOAD_CONST              10 (None)
             56 LOAD_CONST              11 (('board', 'return'))
             58 BUILD_CONST_KEY_MAP      2
             60 LOAD_CONST              12 (<code object solveSudoku at 0x7f322e9e5660, file ""<ast>"", line 75>)
             62 LOAD_CONST              13 ('Solution.solveSudoku')
             64 MAKE_FUNCTION            4 (annotations)
             66 STORE_NAME              10 (solveSudoku)
             68 LOAD_CONST              10 (None)
             70 RETURN_VALUE

Disassembly of <code object toggle at 0x7f322e9e52f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (self)
              2 LOAD_ATTR                0 (row)
              4 LOAD_FAST                1 (i)
              6 BINARY_SUBSCR
              8 LOAD_FAST                3 (bit)
             10 BINARY_XOR
             12 LOAD_FAST                0 (self)
             14 LOAD_ATTR                0 (row)
             16 LOAD_FAST                1 (i)
             18 STORE_SUBSCR

 10          20 LOAD_FAST                0 (self)
             22 LOAD_ATTR                1 (col)
             24 LOAD_FAST                2 (j)
             26 BINARY_SUBSCR
             28 LOAD_FAST                3 (bit)
             30 BINARY_XOR
             32 LOAD_FAST                0 (self)
             34 LOAD_ATTR                1 (col)
             36 LOAD_FAST                2 (j)
             38 STORE_SUBSCR

 11          40 LOAD_FAST                0 (self)
             42 LOAD_ATTR                2 (block)
             44 LOAD_FAST                1 (i)
             46 LOAD_CONST               1 (3)
             48 BINARY_FLOOR_DIVIDE
             50 LOAD_CONST               1 (3)
             52 BINARY_MULTIPLY
             54 LOAD_FAST                2 (j)
             56 LOAD_CONST               1 (3)
             58 BINARY_FLOOR_DIVIDE
             60 BINARY_ADD
             62 BINARY_SUBSCR
             64 LOAD_FAST                3 (bit)
             66 BINARY_XOR
             68 LOAD_FAST                0 (self)
             70 LOAD_ATTR                2 (block)
             72 LOAD_FAST                1 (i)
             74 LOAD_CONST               1 (3)
             76 BINARY_FLOOR_DIVIDE
             78 LOAD_CONST               1 (3)
             80 BINARY_MULTIPLY
             82 LOAD_FAST                2 (j)
             84 LOAD_CONST               1 (3)
             86 BINARY_FLOOR_DIVIDE
             88 BINARY_ADD
             90 STORE_SUBSCR
             92 LOAD_CONST               0 (None)
             94 RETURN_VALUE

Disassembly of <code object issafe at 0x7f322e9e53a0, file ""<ast>"", line 24>:
 25           0 LOAD_FAST                3 (bit)
              2 LOAD_FAST                0 (self)
              4 LOAD_ATTR                0 (row)
              6 LOAD_FAST                1 (i)
              8 BINARY_SUBSCR
             10 BINARY_AND
             12 LOAD_CONST               1 (0)
             14 COMPARE_OP               3 (!=)
             16 POP_JUMP_IF_FALSE       22

 26          18 LOAD_CONST               2 (False)
             20 RETURN_VALUE

 27     >>   22 LOAD_FAST                3 (bit)
             24 LOAD_FAST                0 (self)
             26 LOAD_ATTR                1 (col)
             28 LOAD_FAST                2 (j)
             30 BINARY_SUBSCR
             32 BINARY_AND
             34 LOAD_CONST               1 (0)
             36 COMPARE_OP               3 (!=)
             38 POP_JUMP_IF_FALSE       44

 28          40 LOAD_CONST               2 (False)
             42 RETURN_VALUE

 29     >>   44 LOAD_FAST                3 (bit)
             46 LOAD_FAST                0 (self)
             48 LOAD_ATTR                2 (block)
             50 LOAD_FAST                1 (i)
             52 LOAD_CONST               3 (3)
             54 BINARY_FLOOR_DIVIDE
             56 LOAD_CONST               3 (3)
             58 BINARY_MULTIPLY
             60 LOAD_FAST                2 (j)
             62 LOAD_CONST               3 (3)
             64 BINARY_FLOOR_DIVIDE
             66 BINARY_ADD
             68 BINARY_SUBSCR
             70 BINARY_AND
             72 LOAD_CONST               1 (0)
             74 COMPARE_OP               3 (!=)
             76 POP_JUMP_IF_FALSE       82

 30          78 LOAD_CONST               2 (False)
             80 RETURN_VALUE

 31     >>   82 LOAD_CONST               4 (True)
             84 RETURN_VALUE

Disassembly of <code object solve at 0x7f322e9e5450, file ""<ast>"", line 38>:
 39           0 LOAD_FAST                2 (boxno)
              2 LOAD_CONST               1 (9)
              4 BINARY_FLOOR_DIVIDE
              6 STORE_FAST               3 (i)

 40           8 LOAD_FAST                2 (boxno)
             10 LOAD_CONST               1 (9)
             12 BINARY_MODULO
             14 STORE_FAST               4 (j)

 42          16 LOAD_FAST                2 (boxno)
             18 LOAD_CONST               2 (81)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

 43          24 LOAD_CONST               3 (True)
             26 RETURN_VALUE

 45     >>   28 LOAD_FAST                1 (board)
             30 LOAD_FAST                3 (i)
             32 BINARY_SUBSCR
             34 LOAD_FAST                4 (j)
             36 BINARY_SUBSCR
             38 LOAD_CONST               4 ('.')
             40 COMPARE_OP               3 (!=)
             42 POP_JUMP_IF_FALSE       60

 46          44 LOAD_FAST                0 (self)
             46 LOAD_METHOD              0 (solve)
             48 LOAD_FAST                1 (board)
             50 LOAD_FAST                2 (boxno)
             52 LOAD_CONST               5 (1)
             54 BINARY_ADD
             56 CALL_METHOD              2
             58 RETURN_VALUE

 49     >>   60 LOAD_GLOBAL              1 (range)
             62 LOAD_CONST               5 (1)
             64 LOAD_CONST               6 (10)
             66 CALL_FUNCTION            2
             68 GET_ITER
        >>   70 FOR_ITER               104 (to 176)
             72 STORE_FAST               5 (k)

 50          74 LOAD_CONST               5 (1)
             76 LOAD_FAST                5 (k)
             78 BINARY_LSHIFT
             80 STORE_FAST               6 (bit)

 51          82 LOAD_FAST                0 (self)
             84 LOAD_METHOD              2 (issafe)
             86 LOAD_FAST                3 (i)
             88 LOAD_FAST                4 (j)
             90 LOAD_FAST                6 (bit)
             92 CALL_METHOD              3
             94 POP_JUMP_IF_FALSE       70

 53          96 LOAD_FAST                0 (self)
             98 LOAD_METHOD              3 (toggle)
            100 LOAD_FAST                3 (i)
            102 LOAD_FAST                4 (j)
            104 LOAD_FAST                6 (bit)
            106 CALL_METHOD              3
            108 POP_TOP

 54         110 LOAD_GLOBAL              4 (str)
            112 LOAD_FAST                5 (k)
            114 CALL_FUNCTION            1
            116 LOAD_FAST                1 (board)
            118 LOAD_FAST                3 (i)
            120 BINARY_SUBSCR
            122 LOAD_FAST                4 (j)
            124 STORE_SUBSCR

 56         126 LOAD_FAST                0 (self)
            128 LOAD_METHOD              0 (solve)
            130 LOAD_FAST                1 (board)
            132 LOAD_FAST                2 (boxno)
            134 LOAD_CONST               5 (1)
            136 BINARY_ADD
            138 CALL_METHOD              2
            140 POP_JUMP_IF_FALSE      148

 57         142 POP_TOP
            144 LOAD_CONST               3 (True)
            146 RETURN_VALUE

 59     >>  148 LOAD_CONST               4 ('.')
            150 LOAD_FAST                1 (board)
            152 LOAD_FAST                3 (i)
            154 BINARY_SUBSCR
            156 LOAD_FAST                4 (j)
            158 STORE_SUBSCR

 60         160 LOAD_FAST                0 (self)
            162 LOAD_METHOD              3 (toggle)
            164 LOAD_FAST                3 (i)
            166 LOAD_FAST                4 (j)
            168 LOAD_FAST                6 (bit)
            170 CALL_METHOD              3
            172 POP_TOP
            174 JUMP_ABSOLUTE           70

 62     >>  176 LOAD_CONST               7 (False)
            178 RETURN_VALUE

Disassembly of <code object init at 0x7f322e9e5500, file ""<ast>"", line 64>:
 65           0 BUILD_LIST               0
              2 LOAD_FAST                0 (self)
              4 STORE_ATTR               0 (row)

 67           6 BUILD_LIST               0
              8 LOAD_FAST                0 (self)
             10 STORE_ATTR               1 (col)

 68          12 BUILD_LIST               0
             14 LOAD_FAST                0 (self)
             16 STORE_ATTR               2 (block)

 69          18 LOAD_GLOBAL              3 (range)
             20 LOAD_CONST               1 (1)
             22 LOAD_CONST               2 (10)
             24 CALL_FUNCTION            2
             26 GET_ITER
        >>   28 FOR_ITER                40 (to 70)
             30 STORE_FAST               1 (i)

 70          32 LOAD_FAST                0 (self)
             34 LOAD_ATTR                0 (row)
             36 LOAD_METHOD              4 (append)
             38 LOAD_CONST               3 (0)
             40 CALL_METHOD              1
             42 POP_TOP

 71          44 LOAD_FAST                0 (self)
             46 LOAD_ATTR                1 (col)
             48 LOAD_METHOD              4 (append)
             50 LOAD_CONST               3 (0)
             52 CALL_METHOD              1
             54 POP_TOP

 72          56 LOAD_FAST                0 (self)
             58 LOAD_ATTR                2 (block)
             60 LOAD_METHOD              4 (append)
             62 LOAD_CONST               3 (0)
             64 CALL_METHOD              1
             66 POP_TOP
             68 JUMP_ABSOLUTE           28
        >>   70 LOAD_CONST               0 (None)
             72 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f322e9e5660, file ""<ast>"", line 75>:
 76           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (init)
              4 CALL_METHOD              0
              6 POP_TOP

 77           8 LOAD_GLOBAL              1 (range)
             10 LOAD_CONST               1 (0)
             12 LOAD_CONST               2 (9)
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                66 (to 86)
             20 STORE_FAST               2 (i)

 78          22 LOAD_GLOBAL              1 (range)
             24 LOAD_CONST               1 (0)
             26 LOAD_CONST               2 (9)
             28 CALL_FUNCTION            2
             30 GET_ITER
        >>   32 FOR_ITER                50 (to 84)
             34 STORE_FAST               3 (j)

 79          36 LOAD_FAST                1 (board)
             38 LOAD_FAST                2 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                3 (j)
             44 BINARY_SUBSCR
             46 LOAD_CONST               3 ('.')
             48 COMPARE_OP               3 (!=)
             50 POP_JUMP_IF_FALSE       32

 80          52 LOAD_FAST                0 (self)
             54 LOAD_METHOD              2 (toggle)
             56 LOAD_FAST                2 (i)
             58 LOAD_FAST                3 (j)
             60 LOAD_CONST               4 (1)
             62 LOAD_GLOBAL              3 (int)
             64 LOAD_FAST                1 (board)
             66 LOAD_FAST                2 (i)
             68 BINARY_SUBSCR
             70 LOAD_FAST                3 (j)
             72 BINARY_SUBSCR
             74 CALL_FUNCTION            1
             76 BINARY_LSHIFT
             78 CALL_METHOD              3
             80 POP_TOP
             82 JUMP_ABSOLUTE           32
        >>   84 JUMP_ABSOLUTE           18

 83     >>   86 LOAD_FAST                0 (self)
             88 LOAD_METHOD              4 (solve)
             90 LOAD_FAST                1 (board)
             92 LOAD_CONST               1 (0)
             94 CALL_METHOD              2
             96 POP_TOP

 86          98 LOAD_CONST               0 (None)
            100 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        
        def can_place(i, j, num):
            # Check row
            if any(num == n for n in board[i]):
                return False
            
            # Check col
            if any(num == n for n in list(zip(*board))[j]):
                return False
            
            # Check box
            start_row, start_col = (i // 3) * 3, (j // 3) * 3
            for r in range(start_row, start_row + 3):
                for c in range(start_col, start_col + 3):
                    if num == board[r][c]:
                        return False
            return True
        
        def find_unassigned():
            for r in range(len(board)):
                for c in range(len(board[0])):
                    if board[r][c] == '.':
                        return r, c
            return -1, -1
        
        def solve():
            r, c = find_unassigned()
            
            if r == -1 and c == -1:
                return True
            
            for num in [str(n) for n in range(1, 10)]:
                if can_place(r, c, num):
                    board[r][c] = num
                    if solve():
                        return True
                    board[r][c] = '.'
            return False
		
        if not board:
            return
        solve()
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f68ada65870, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f68ada65870, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7f68ada65710, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f68ada65710, file ""<ast>"", line 2>:
  7           0 LOAD_CLOSURE             0 (board)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object can_place at 0x7f68ada65500, file ""<ast>"", line 7>)
              6 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.can_place')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              1 (can_place)

 24          12 LOAD_CLOSURE             0 (board)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               3 (<code object find_unassigned at 0x7f68ada655b0, file ""<ast>"", line 24>)
             18 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.find_unassigned')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_DEREF              2 (find_unassigned)

 31          24 LOAD_CLOSURE             0 (board)
             26 LOAD_CLOSURE             1 (can_place)
             28 LOAD_CLOSURE             2 (find_unassigned)
             30 LOAD_CLOSURE             3 (solve)
             32 BUILD_TUPLE              4
             34 LOAD_CONST               5 (<code object solve at 0x7f68ada657c0, file ""<ast>"", line 31>)
             36 LOAD_CONST               6 ('Solution.solveSudoku.<locals>.solve')
             38 MAKE_FUNCTION            8 (closure)
             40 STORE_DEREF              3 (solve)

 45          42 LOAD_DEREF               0 (board)
             44 POP_JUMP_IF_TRUE        50

 46          46 LOAD_CONST               7 (None)
             48 RETURN_VALUE

 47     >>   50 LOAD_DEREF               3 (solve)
             52 CALL_FUNCTION            0
             54 POP_TOP
             56 LOAD_CONST               7 (None)
             58 RETURN_VALUE

Disassembly of <code object can_place at 0x7f68ada65500, file ""<ast>"", line 7>:
  9           0 LOAD_GLOBAL              0 (any)
              2 LOAD_CLOSURE             0 (num)
              4 BUILD_TUPLE              1
              6 LOAD_CONST               1 (<code object <genexpr> at 0x7f68ada653a0, file ""<ast>"", line 9>)
              8 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.can_place.<locals>.<genexpr>')
             10 MAKE_FUNCTION            8 (closure)
             12 LOAD_DEREF               1 (board)
             14 LOAD_FAST                0 (i)
             16 BINARY_SUBSCR
             18 GET_ITER
             20 CALL_FUNCTION            1
             22 CALL_FUNCTION            1
             24 POP_JUMP_IF_FALSE       30

 10          26 LOAD_CONST               3 (False)
             28 RETURN_VALUE

 13     >>   30 LOAD_GLOBAL              0 (any)
             32 LOAD_CLOSURE             0 (num)
             34 BUILD_TUPLE              1
             36 LOAD_CONST               4 (<code object <genexpr> at 0x7f68ada65450, file ""<ast>"", line 13>)
             38 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.can_place.<locals>.<genexpr>')
             40 MAKE_FUNCTION            8 (closure)
             42 LOAD_GLOBAL              1 (list)
             44 LOAD_GLOBAL              2 (zip)
             46 LOAD_DEREF               1 (board)
             48 CALL_FUNCTION_EX         0
             50 CALL_FUNCTION            1
             52 LOAD_FAST                1 (j)
             54 BINARY_SUBSCR
             56 GET_ITER
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            1
             62 POP_JUMP_IF_FALSE       68

 14          64 LOAD_CONST               3 (False)
             66 RETURN_VALUE

 17     >>   68 LOAD_FAST                0 (i)
             70 LOAD_CONST               5 (3)
             72 BINARY_FLOOR_DIVIDE
             74 LOAD_CONST               5 (3)
             76 BINARY_MULTIPLY
             78 LOAD_FAST                1 (j)
             80 LOAD_CONST               5 (3)
             82 BINARY_FLOOR_DIVIDE
             84 LOAD_CONST               5 (3)
             86 BINARY_MULTIPLY
             88 ROT_TWO
             90 STORE_FAST               3 (start_row)
             92 STORE_FAST               4 (start_col)

 18          94 LOAD_GLOBAL              3 (range)
             96 LOAD_FAST                3 (start_row)
             98 LOAD_FAST                3 (start_row)
            100 LOAD_CONST               5 (3)
            102 BINARY_ADD
            104 CALL_FUNCTION            2
            106 GET_ITER
        >>  108 FOR_ITER                48 (to 158)
            110 STORE_FAST               5 (r)

 19         112 LOAD_GLOBAL              3 (range)
            114 LOAD_FAST                4 (start_col)
            116 LOAD_FAST                4 (start_col)
            118 LOAD_CONST               5 (3)
            120 BINARY_ADD
            122 CALL_FUNCTION            2
            124 GET_ITER
        >>  126 FOR_ITER                28 (to 156)
            128 STORE_FAST               6 (c)

 20         130 LOAD_DEREF               0 (num)
            132 LOAD_DEREF               1 (board)
            134 LOAD_FAST                5 (r)
            136 BINARY_SUBSCR
            138 LOAD_FAST                6 (c)
            140 BINARY_SUBSCR
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_FALSE      126

 21         146 POP_TOP
            148 POP_TOP
            150 LOAD_CONST               3 (False)
            152 RETURN_VALUE
            154 JUMP_ABSOLUTE          126
        >>  156 JUMP_ABSOLUTE          108

 22     >>  158 LOAD_CONST               6 (True)
            160 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f68ada653a0, file ""<ast>"", line 9>:
  9           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                14 (to 18)
              4 STORE_FAST               1 (n)
              6 LOAD_DEREF               0 (num)
              8 LOAD_FAST                1 (n)
             10 COMPARE_OP               2 (==)
             12 YIELD_VALUE
             14 POP_TOP
             16 JUMP_ABSOLUTE            2
        >>   18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object <genexpr> at 0x7f68ada65450, file ""<ast>"", line 13>:
 13           0 LOAD_FAST                0 (.0)
        >>    2 FOR_ITER                14 (to 18)
              4 STORE_FAST               1 (n)
              6 LOAD_DEREF               0 (num)
              8 LOAD_FAST                1 (n)
             10 COMPARE_OP               2 (==)
             12 YIELD_VALUE
             14 POP_TOP
             16 JUMP_ABSOLUTE            2
        >>   18 LOAD_CONST               0 (None)
             20 RETURN_VALUE

Disassembly of <code object find_unassigned at 0x7f68ada655b0, file ""<ast>"", line 24>:
 25           0 LOAD_GLOBAL              0 (range)
              2 LOAD_GLOBAL              1 (len)
              4 LOAD_DEREF               0 (board)
              6 CALL_FUNCTION            1
              8 CALL_FUNCTION            1
             10 GET_ITER
        >>   12 FOR_ITER                58 (to 72)
             14 STORE_FAST               0 (r)

 26          16 LOAD_GLOBAL              0 (range)
             18 LOAD_GLOBAL              1 (len)
             20 LOAD_DEREF               0 (board)
             22 LOAD_CONST               1 (0)
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 CALL_FUNCTION            1
             30 GET_ITER
        >>   32 FOR_ITER                36 (to 70)
             34 STORE_FAST               1 (c)

 27          36 LOAD_DEREF               0 (board)
             38 LOAD_FAST                0 (r)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (c)
             44 BINARY_SUBSCR
             46 LOAD_CONST               2 ('.')
             48 COMPARE_OP               2 (==)
             50 POP_JUMP_IF_FALSE       32

 28          52 LOAD_FAST                0 (r)
             54 LOAD_FAST                1 (c)
             56 BUILD_TUPLE              2
             58 ROT_TWO
             60 POP_TOP
             62 ROT_TWO
             64 POP_TOP
             66 RETURN_VALUE
             68 JUMP_ABSOLUTE           32
        >>   70 JUMP_ABSOLUTE           12

 29     >>   72 LOAD_CONST               3 ((-1, -1))
             74 RETURN_VALUE

Disassembly of <code object solve at 0x7f68ada657c0, file ""<ast>"", line 31>:
 32           0 LOAD_DEREF               2 (find_unassigned)
              2 CALL_FUNCTION            0
              4 UNPACK_SEQUENCE          2
              6 STORE_FAST               0 (r)
              8 STORE_FAST               1 (c)

 34          10 LOAD_FAST                0 (r)
             12 LOAD_CONST               1 (-1)
             14 COMPARE_OP               2 (==)
             16 POP_JUMP_IF_FALSE       30
             18 LOAD_FAST                1 (c)
             20 LOAD_CONST               1 (-1)
             22 COMPARE_OP               2 (==)
             24 POP_JUMP_IF_FALSE       30

 35          26 LOAD_CONST               2 (True)
             28 RETURN_VALUE

 37     >>   30 LOAD_CONST               3 (<code object <listcomp> at 0x7f68ada65660, file ""<ast>"", line 37>)
             32 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.solve.<locals>.<listcomp>')
             34 MAKE_FUNCTION            0
             36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               5 (1)
             40 LOAD_CONST               6 (10)
             42 CALL_FUNCTION            2
             44 GET_ITER
             46 CALL_FUNCTION            1
             48 GET_ITER
        >>   50 FOR_ITER                52 (to 104)
             52 STORE_FAST               2 (num)

 38          54 LOAD_DEREF               1 (can_place)
             56 LOAD_FAST                0 (r)
             58 LOAD_FAST                1 (c)
             60 LOAD_FAST                2 (num)
             62 CALL_FUNCTION            3
             64 POP_JUMP_IF_FALSE       50

 39          66 LOAD_FAST                2 (num)
             68 LOAD_DEREF               0 (board)
             70 LOAD_FAST                0 (r)
             72 BINARY_SUBSCR
             74 LOAD_FAST                1 (c)
             76 STORE_SUBSCR

 40          78 LOAD_DEREF               3 (solve)
             80 CALL_FUNCTION            0
             82 POP_JUMP_IF_FALSE       90

 41          84 POP_TOP
             86 LOAD_CONST               2 (True)
             88 RETURN_VALUE

 42     >>   90 LOAD_CONST               7 ('.')
             92 LOAD_DEREF               0 (board)
             94 LOAD_FAST                0 (r)
             96 BINARY_SUBSCR
             98 LOAD_FAST                1 (c)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           50

 43     >>  104 LOAD_CONST               8 (False)
            106 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f68ada65660, file ""<ast>"", line 37>:
 37           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (n)
              8 LOAD_GLOBAL              0 (str)
             10 LOAD_FAST                1 (n)
             12 CALL_FUNCTION            1
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board:List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        def validNumber(row: int, col:int, n:str)->bool:
            cols = set(list(zip(*board))[col][:])
            rows = set(board[row][:])
            if n in cols: return False
            if n in rows: return False
            row0 = row//3
            col0 = col//3
            for i in range(row0*3, row0*3 + 3):
                for j in range(col0*3, col0*3 + 3):
                    if n == board[i][j]: return False
            return True
        
        def getAllElement()->set:
            ele = set()
            for e in board:
                for k in e:
                    ele.add(k)
            return ele
        
        def helper()->None:
            for row in range(0,9):
                for col in range(0,9):
                    if board[row][col] == '.':
                        for n in range(1,10):
                            if validNumber(row, col, str(n)):
                                board[row][col] = str(n)
                                helper()
                                if ""."" in getAllElement():
                                    board[row][col]="".""
                        return 
        helper()
        return 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe4509e55b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe4509e55b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fe4509e53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fe4509e53a0, file ""<ast>"", line 2>:
  6           0 LOAD_GLOBAL              0 (int)
              2 LOAD_GLOBAL              0 (int)
              4 LOAD_GLOBAL              1 (str)
              6 LOAD_GLOBAL              2 (bool)
              8 LOAD_CONST               1 (('row', 'col', 'n', 'return'))
             10 BUILD_CONST_KEY_MAP      4
             12 LOAD_CLOSURE             0 (board)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               2 (<code object validNumber at 0x7fe4509e5240, file ""<ast>"", line 6>)
             18 LOAD_CONST               3 ('Solution.solveSudoku.<locals>.validNumber')
             20 MAKE_FUNCTION           12 (annotations, closure)
             22 STORE_DEREF              3 (validNumber)

 18          24 LOAD_GLOBAL              3 (set)
             26 LOAD_CONST               4 (('return',))
             28 BUILD_CONST_KEY_MAP      1
             30 LOAD_CLOSURE             0 (board)
             32 BUILD_TUPLE              1
             34 LOAD_CONST               5 (<code object getAllElement at 0x7fe4509e52f0, file ""<ast>"", line 18>)
             36 LOAD_CONST               6 ('Solution.solveSudoku.<locals>.getAllElement')
             38 MAKE_FUNCTION           12 (annotations, closure)
             40 STORE_DEREF              1 (getAllElement)

 25          42 LOAD_CONST               7 (None)
             44 LOAD_CONST               4 (('return',))
             46 BUILD_CONST_KEY_MAP      1
             48 LOAD_CLOSURE             0 (board)
             50 LOAD_CLOSURE             1 (getAllElement)
             52 LOAD_CLOSURE             2 (helper)
             54 LOAD_CLOSURE             3 (validNumber)
             56 BUILD_TUPLE              4
             58 LOAD_CONST               8 (<code object helper at 0x7fe4509e5500, file ""<ast>"", line 25>)
             60 LOAD_CONST               9 ('Solution.solveSudoku.<locals>.helper')
             62 MAKE_FUNCTION           12 (annotations, closure)
             64 STORE_DEREF              2 (helper)

 36          66 LOAD_DEREF               2 (helper)
             68 CALL_FUNCTION            0
             70 POP_TOP

 37          72 LOAD_CONST               7 (None)
             74 RETURN_VALUE

Disassembly of <code object validNumber at 0x7fe4509e5240, file ""<ast>"", line 6>:
  7           0 LOAD_GLOBAL              0 (set)
              2 LOAD_GLOBAL              1 (list)
              4 LOAD_GLOBAL              2 (zip)
              6 LOAD_DEREF               0 (board)
              8 CALL_FUNCTION_EX         0
             10 CALL_FUNCTION            1
             12 LOAD_FAST                1 (col)
             14 BINARY_SUBSCR
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               0 (None)
             20 BUILD_SLICE              2
             22 BINARY_SUBSCR
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (cols)

  8          28 LOAD_GLOBAL              0 (set)
             30 LOAD_DEREF               0 (board)
             32 LOAD_FAST                0 (row)
             34 BINARY_SUBSCR
             36 LOAD_CONST               0 (None)
             38 LOAD_CONST               0 (None)
             40 BUILD_SLICE              2
             42 BINARY_SUBSCR
             44 CALL_FUNCTION            1
             46 STORE_FAST               4 (rows)

  9          48 LOAD_FAST                2 (n)
             50 LOAD_FAST                3 (cols)
             52 COMPARE_OP               6 (in)
             54 POP_JUMP_IF_FALSE       60
             56 LOAD_CONST               1 (False)
             58 RETURN_VALUE

 10     >>   60 LOAD_FAST                2 (n)
             62 LOAD_FAST                4 (rows)
             64 COMPARE_OP               6 (in)
             66 POP_JUMP_IF_FALSE       72
             68 LOAD_CONST               1 (False)
             70 RETURN_VALUE

 11     >>   72 LOAD_FAST                0 (row)
             74 LOAD_CONST               2 (3)
             76 BINARY_FLOOR_DIVIDE
             78 STORE_FAST               5 (row0)

 12          80 LOAD_FAST                1 (col)
             82 LOAD_CONST               2 (3)
             84 BINARY_FLOOR_DIVIDE
             86 STORE_FAST               6 (col0)

 13          88 LOAD_GLOBAL              3 (range)
             90 LOAD_FAST                5 (row0)
             92 LOAD_CONST               2 (3)
             94 BINARY_MULTIPLY
             96 LOAD_FAST                5 (row0)
             98 LOAD_CONST               2 (3)
            100 BINARY_MULTIPLY
            102 LOAD_CONST               2 (3)
            104 BINARY_ADD
            106 CALL_FUNCTION            2
            108 GET_ITER
        >>  110 FOR_ITER                56 (to 168)
            112 STORE_FAST               7 (i)

 14         114 LOAD_GLOBAL              3 (range)
            116 LOAD_FAST                6 (col0)
            118 LOAD_CONST               2 (3)
            120 BINARY_MULTIPLY
            122 LOAD_FAST                6 (col0)
            124 LOAD_CONST               2 (3)
            126 BINARY_MULTIPLY
            128 LOAD_CONST               2 (3)
            130 BINARY_ADD
            132 CALL_FUNCTION            2
            134 GET_ITER
        >>  136 FOR_ITER                28 (to 166)
            138 STORE_FAST               8 (j)

 15         140 LOAD_FAST                2 (n)
            142 LOAD_DEREF               0 (board)
            144 LOAD_FAST                7 (i)
            146 BINARY_SUBSCR
            148 LOAD_FAST                8 (j)
            150 BINARY_SUBSCR
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      136
            156 POP_TOP
            158 POP_TOP
            160 LOAD_CONST               1 (False)
            162 RETURN_VALUE
            164 JUMP_ABSOLUTE          136
        >>  166 JUMP_ABSOLUTE          110

 16     >>  168 LOAD_CONST               3 (True)
            170 RETURN_VALUE

Disassembly of <code object getAllElement at 0x7fe4509e52f0, file ""<ast>"", line 18>:
 19           0 LOAD_GLOBAL              0 (set)
              2 CALL_FUNCTION            0
              4 STORE_FAST               0 (ele)

 20           6 LOAD_DEREF               0 (board)
              8 GET_ITER
        >>   10 FOR_ITER                24 (to 36)
             12 STORE_FAST               1 (e)

 21          14 LOAD_FAST                1 (e)
             16 GET_ITER
        >>   18 FOR_ITER                14 (to 34)
             20 STORE_FAST               2 (k)

 22          22 LOAD_FAST                0 (ele)
             24 LOAD_METHOD              1 (add)
             26 LOAD_FAST                2 (k)
             28 CALL_METHOD              1
             30 POP_TOP
             32 JUMP_ABSOLUTE           18
        >>   34 JUMP_ABSOLUTE           10

 23     >>   36 LOAD_FAST                0 (ele)
             38 RETURN_VALUE

Disassembly of <code object helper at 0x7fe4509e5500, file ""<ast>"", line 25>:
 26           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (0)
              4 LOAD_CONST               2 (9)
              6 CALL_FUNCTION            2
              8 GET_ITER
        >>   10 FOR_ITER               120 (to 132)
             12 STORE_FAST               0 (row)

 27          14 LOAD_GLOBAL              0 (range)
             16 LOAD_CONST               1 (0)
             18 LOAD_CONST               2 (9)
             20 CALL_FUNCTION            2
             22 GET_ITER
        >>   24 FOR_ITER               104 (to 130)
             26 STORE_FAST               1 (col)

 28          28 LOAD_DEREF               0 (board)
             30 LOAD_FAST                0 (row)
             32 BINARY_SUBSCR
             34 LOAD_FAST                1 (col)
             36 BINARY_SUBSCR
             38 LOAD_CONST               3 ('.')
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       24

 29          44 LOAD_GLOBAL              0 (range)
             46 LOAD_CONST               4 (1)
             48 LOAD_CONST               5 (10)
             50 CALL_FUNCTION            2
             52 GET_ITER
        >>   54 FOR_ITER                64 (to 120)
             56 STORE_FAST               2 (n)

 30          58 LOAD_DEREF               3 (validNumber)
             60 LOAD_FAST                0 (row)
             62 LOAD_FAST                1 (col)
             64 LOAD_GLOBAL              1 (str)
             66 LOAD_FAST                2 (n)
             68 CALL_FUNCTION            1
             70 CALL_FUNCTION            3
             72 POP_JUMP_IF_FALSE       54

 31          74 LOAD_GLOBAL              1 (str)
             76 LOAD_FAST                2 (n)
             78 CALL_FUNCTION            1
             80 LOAD_DEREF               0 (board)
             82 LOAD_FAST                0 (row)
             84 BINARY_SUBSCR
             86 LOAD_FAST                1 (col)
             88 STORE_SUBSCR

 32          90 LOAD_DEREF               2 (helper)
             92 CALL_FUNCTION            0
             94 POP_TOP

 33          96 LOAD_CONST               3 ('.')
             98 LOAD_DEREF               1 (getAllElement)
            100 CALL_FUNCTION            0
            102 COMPARE_OP               6 (in)
            104 POP_JUMP_IF_FALSE       54

 34         106 LOAD_CONST               3 ('.')
            108 LOAD_DEREF               0 (board)
            110 LOAD_FAST                0 (row)
            112 BINARY_SUBSCR
            114 LOAD_FAST                1 (col)
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE           54

 35     >>  120 POP_TOP
            122 POP_TOP
            124 LOAD_CONST               0 (None)
            126 RETURN_VALUE
            128 JUMP_ABSOLUTE           24
        >>  130 JUMP_ABSOLUTE           10
        >>  132 LOAD_CONST               0 (None)
            134 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        spots = [] #empty spots
        row = [set() for _ in range(9)]
        col = [set() for _ in range(9)]
        sub = [set() for _ in range(9)]
        
        for i in range(9):
            for j in range(9):
                if board[i][j] == ""."": spots.append((i, j))
                else: 
                    row[i].add(board[i][j])
                    col[j].add(board[i][j])
                    sub[i//3*3+j//3].add(board[i][j])
                    
        def fn(k):
            """"""return True if kth spot is filled properly""""""
            if k == len(spots): return True
            i, j = spots[k]
            for n in map(str, range(1, 10)): 
                if n not in row[i] and n not in col[j] and n not in sub[i//3*3+j//3]: 
                    board[i][j] = n
                    row[i].add(n)
                    col[j].add(n)
                    sub[i//3*3+j//3].add(n)
                    if fn(k+1): return True
                    else:
                        row[i].remove(n)
                        col[j].remove(n)
                        sub[i//3*3+j//3].remove(n)
            return False 
        
        fn(0) #change in place 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fee6ee255b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fee6ee255b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('board', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7fee6ee25500, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fee6ee25500, file ""<ast>"", line 2>:
  6           0 BUILD_LIST               0
              2 STORE_DEREF              4 (spots)

  7           4 LOAD_CONST               1 (<code object <listcomp> at 0x7fee6ee25240, file ""<ast>"", line 7>)
              6 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
              8 MAKE_FUNCTION            0
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (9)
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_DEREF              3 (row)

  8          22 LOAD_CONST               4 (<code object <listcomp> at 0x7fee6ee252f0, file ""<ast>"", line 8>)
             24 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             26 MAKE_FUNCTION            0
             28 LOAD_GLOBAL              0 (range)
             30 LOAD_CONST               3 (9)
             32 CALL_FUNCTION            1
             34 GET_ITER
             36 CALL_FUNCTION            1
             38 STORE_DEREF              1 (col)

  9          40 LOAD_CONST               5 (<code object <listcomp> at 0x7fee6ee253a0, file ""<ast>"", line 9>)
             42 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
             44 MAKE_FUNCTION            0
             46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST               3 (9)
             50 CALL_FUNCTION            1
             52 GET_ITER
             54 CALL_FUNCTION            1
             56 STORE_DEREF              5 (sub)

 11          58 LOAD_GLOBAL              0 (range)
             60 LOAD_CONST               3 (9)
             62 CALL_FUNCTION            1
             64 GET_ITER
        >>   66 FOR_ITER               132 (to 200)
             68 STORE_FAST               2 (i)

 12          70 LOAD_GLOBAL              0 (range)
             72 LOAD_CONST               3 (9)
             74 CALL_FUNCTION            1
             76 GET_ITER
        >>   78 FOR_ITER               118 (to 198)
             80 STORE_FAST               3 (j)

 13          82 LOAD_DEREF               0 (board)
             84 LOAD_FAST                2 (i)
             86 BINARY_SUBSCR
             88 LOAD_FAST                3 (j)
             90 BINARY_SUBSCR
             92 LOAD_CONST               6 ('.')
             94 COMPARE_OP               2 (==)
             96 POP_JUMP_IF_FALSE      114
             98 LOAD_DEREF               4 (spots)
            100 LOAD_METHOD              1 (append)
            102 LOAD_FAST                2 (i)
            104 LOAD_FAST                3 (j)
            106 BUILD_TUPLE              2
            108 CALL_METHOD              1
            110 POP_TOP
            112 JUMP_ABSOLUTE           78

 15     >>  114 LOAD_DEREF               3 (row)
            116 LOAD_FAST                2 (i)
            118 BINARY_SUBSCR
            120 LOAD_METHOD              2 (add)
            122 LOAD_DEREF               0 (board)
            124 LOAD_FAST                2 (i)
            126 BINARY_SUBSCR
            128 LOAD_FAST                3 (j)
            130 BINARY_SUBSCR
            132 CALL_METHOD              1
            134 POP_TOP

 16         136 LOAD_DEREF               1 (col)
            138 LOAD_FAST                3 (j)
            140 BINARY_SUBSCR
            142 LOAD_METHOD              2 (add)
            144 LOAD_DEREF               0 (board)
            146 LOAD_FAST                2 (i)
            148 BINARY_SUBSCR
            150 LOAD_FAST                3 (j)
            152 BINARY_SUBSCR
            154 CALL_METHOD              1
            156 POP_TOP

 17         158 LOAD_DEREF               5 (sub)
            160 LOAD_FAST                2 (i)
            162 LOAD_CONST               7 (3)
            164 BINARY_FLOOR_DIVIDE
            166 LOAD_CONST               7 (3)
            168 BINARY_MULTIPLY
            170 LOAD_FAST                3 (j)
            172 LOAD_CONST               7 (3)
            174 BINARY_FLOOR_DIVIDE
            176 BINARY_ADD
            178 BINARY_SUBSCR
            180 LOAD_METHOD              2 (add)
            182 LOAD_DEREF               0 (board)
            184 LOAD_FAST                2 (i)
            186 BINARY_SUBSCR
            188 LOAD_FAST                3 (j)
            190 BINARY_SUBSCR
            192 CALL_METHOD              1
            194 POP_TOP
            196 JUMP_ABSOLUTE           78
        >>  198 JUMP_ABSOLUTE           66

 19     >>  200 LOAD_CLOSURE             0 (board)
            202 LOAD_CLOSURE             1 (col)
            204 LOAD_CLOSURE             2 (fn)
            206 LOAD_CLOSURE             3 (row)
            208 LOAD_CLOSURE             4 (spots)
            210 LOAD_CLOSURE             5 (sub)
            212 BUILD_TUPLE              6
            214 LOAD_CONST               8 (<code object fn at 0x7fee6ee25450, file ""<ast>"", line 19>)
            216 LOAD_CONST               9 ('Solution.solveSudoku.<locals>.fn')
            218 MAKE_FUNCTION            8 (closure)
            220 STORE_DEREF              2 (fn)

 36         222 LOAD_DEREF               2 (fn)
            224 LOAD_CONST              10 (0)
            226 CALL_FUNCTION            1
            228 POP_TOP
            230 LOAD_CONST              11 (None)
            232 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fee6ee25240, file ""<ast>"", line 7>:
  7           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fee6ee252f0, file ""<ast>"", line 8>:
  8           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fee6ee253a0, file ""<ast>"", line 9>:
  9           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (_)
              8 LOAD_GLOBAL              0 (set)
             10 CALL_FUNCTION            0
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object fn at 0x7fee6ee25450, file ""<ast>"", line 19>:
 21           0 LOAD_FAST                0 (k)
              2 LOAD_GLOBAL              0 (len)
              4 LOAD_DEREF               4 (spots)
              6 CALL_FUNCTION            1
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               1 (True)
             14 RETURN_VALUE

 22     >>   16 LOAD_DEREF               4 (spots)
             18 LOAD_FAST                0 (k)
             20 BINARY_SUBSCR
             22 UNPACK_SEQUENCE          2
             24 STORE_FAST               1 (i)
             26 STORE_FAST               2 (j)

 23          28 LOAD_GLOBAL              1 (map)
             30 LOAD_GLOBAL              2 (str)
             32 LOAD_GLOBAL              3 (range)
             34 LOAD_CONST               2 (1)
             36 LOAD_CONST               3 (10)
             38 CALL_FUNCTION            2
             40 CALL_FUNCTION            2
             42 GET_ITER
        >>   44 FOR_ITER               202 (to 248)
             46 STORE_FAST               3 (n)

 24          48 LOAD_FAST                3 (n)
             50 LOAD_DEREF               3 (row)
             52 LOAD_FAST                1 (i)
             54 BINARY_SUBSCR
             56 COMPARE_OP               7 (not in)
             58 POP_JUMP_IF_FALSE       44
             60 LOAD_FAST                3 (n)
             62 LOAD_DEREF               1 (col)
             64 LOAD_FAST                2 (j)
             66 BINARY_SUBSCR
             68 COMPARE_OP               7 (not in)
             70 POP_JUMP_IF_FALSE       44
             72 LOAD_FAST                3 (n)
             74 LOAD_DEREF               5 (sub)
             76 LOAD_FAST                1 (i)
             78 LOAD_CONST               4 (3)
             80 BINARY_FLOOR_DIVIDE
             82 LOAD_CONST               4 (3)
             84 BINARY_MULTIPLY
             86 LOAD_FAST                2 (j)
             88 LOAD_CONST               4 (3)
             90 BINARY_FLOOR_DIVIDE
             92 BINARY_ADD
             94 BINARY_SUBSCR
             96 COMPARE_OP               7 (not in)
             98 POP_JUMP_IF_FALSE       44

 25         100 LOAD_FAST                3 (n)
            102 LOAD_DEREF               0 (board)
            104 LOAD_FAST                1 (i)
            106 BINARY_SUBSCR
            108 LOAD_FAST                2 (j)
            110 STORE_SUBSCR

 26         112 LOAD_DEREF               3 (row)
            114 LOAD_FAST                1 (i)
            116 BINARY_SUBSCR
            118 LOAD_METHOD              4 (add)
            120 LOAD_FAST                3 (n)
            122 CALL_METHOD              1
            124 POP_TOP

 27         126 LOAD_DEREF               1 (col)
            128 LOAD_FAST                2 (j)
            130 BINARY_SUBSCR
            132 LOAD_METHOD              4 (add)
            134 LOAD_FAST                3 (n)
            136 CALL_METHOD              1
            138 POP_TOP

 28         140 LOAD_DEREF               5 (sub)
            142 LOAD_FAST                1 (i)
            144 LOAD_CONST               4 (3)
            146 BINARY_FLOOR_DIVIDE
            148 LOAD_CONST               4 (3)
            150 BINARY_MULTIPLY
            152 LOAD_FAST                2 (j)
            154 LOAD_CONST               4 (3)
            156 BINARY_FLOOR_DIVIDE
            158 BINARY_ADD
            160 BINARY_SUBSCR
            162 LOAD_METHOD              4 (add)
            164 LOAD_FAST                3 (n)
            166 CALL_METHOD              1
            168 POP_TOP

 29         170 LOAD_DEREF               2 (fn)
            172 LOAD_FAST                0 (k)
            174 LOAD_CONST               2 (1)
            176 BINARY_ADD
            178 CALL_FUNCTION            1
            180 POP_JUMP_IF_FALSE      188
            182 POP_TOP
            184 LOAD_CONST               1 (True)
            186 RETURN_VALUE

 31     >>  188 LOAD_DEREF               3 (row)
            190 LOAD_FAST                1 (i)
            192 BINARY_SUBSCR
            194 LOAD_METHOD              5 (remove)
            196 LOAD_FAST                3 (n)
            198 CALL_METHOD              1
            200 POP_TOP

 32         202 LOAD_DEREF               1 (col)
            204 LOAD_FAST                2 (j)
            206 BINARY_SUBSCR
            208 LOAD_METHOD              5 (remove)
            210 LOAD_FAST                3 (n)
            212 CALL_METHOD              1
            214 POP_TOP

 33         216 LOAD_DEREF               5 (sub)
            218 LOAD_FAST                1 (i)
            220 LOAD_CONST               4 (3)
            222 BINARY_FLOOR_DIVIDE
            224 LOAD_CONST               4 (3)
            226 BINARY_MULTIPLY
            228 LOAD_FAST                2 (j)
            230 LOAD_CONST               4 (3)
            232 BINARY_FLOOR_DIVIDE
            234 BINARY_ADD
            236 BINARY_SUBSCR
            238 LOAD_METHOD              5 (remove)
            240 LOAD_FAST                3 (n)
            242 CALL_METHOD              1
            244 POP_TOP
            246 JUMP_ABSOLUTE           44

 34     >>  248 LOAD_CONST               5 (False)
            250 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solve(self, B, C) -> bool:
        def values(B, x, y):
            s = { '1', '2', '3', '4', '5', '6', '7', '8', '9' }
            sx = (x // 3) * 3
            sy = (y // 3) * 3
            for i in range(9):
                s.discard(B[y][i])
                s.discard(B[i][x])
                s.discard(B[sy + i // 3][sx + i % 3])
            return s
        if len(C) == 0:
            return True
        x, y = C[0]
        nC = C[1:]
        for v in values(B, x, y):
            B[y][x] = v
            if self.solve(B, nC):
                return True
        B[y][x] = '.'
        return False
    
    def solveSudoku(self, B: List[List[str]]) -> None:
        C = [(x, y) for y in range(9) for x in range(9) if B[y][x] == '.']
        self.solve(B, C)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fac8f8d55b0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fac8f8d55b0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (bool)
             10 LOAD_CONST               1 (('return',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object solve at 0x7fac8f8d5450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.solve')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (solve)

 23          22 LOAD_NAME                5 (List)
             24 LOAD_NAME                5 (List)
             26 LOAD_NAME                6 (str)
             28 BINARY_SUBSCR
             30 BINARY_SUBSCR
             32 LOAD_CONST               4 (None)
             34 LOAD_CONST               5 (('B', 'return'))
             36 BUILD_CONST_KEY_MAP      2
             38 LOAD_CONST               6 (<code object solveSudoku at 0x7fac8f8d5500, file ""<ast>"", line 23>)
             40 LOAD_CONST               7 ('Solution.solveSudoku')
             42 MAKE_FUNCTION            4 (annotations)
             44 STORE_NAME               7 (solveSudoku)
             46 LOAD_CONST               4 (None)
             48 RETURN_VALUE

Disassembly of <code object solve at 0x7fac8f8d5450, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (<code object values at 0x7fac8f8d53a0, file ""<ast>"", line 3>)
              2 LOAD_CONST               2 ('Solution.solve.<locals>.values')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               3 (values)

 12           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                2 (C)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               3 (0)
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

 13          20 LOAD_CONST               4 (True)
             22 RETURN_VALUE

 14     >>   24 LOAD_FAST                2 (C)
             26 LOAD_CONST               3 (0)
             28 BINARY_SUBSCR
             30 UNPACK_SEQUENCE          2
             32 STORE_FAST               4 (x)
             34 STORE_FAST               5 (y)

 15          36 LOAD_FAST                2 (C)
             38 LOAD_CONST               5 (1)
             40 LOAD_CONST               0 (None)
             42 BUILD_SLICE              2
             44 BINARY_SUBSCR
             46 STORE_FAST               6 (nC)

 16          48 LOAD_FAST                3 (values)
             50 LOAD_FAST                1 (B)
             52 LOAD_FAST                4 (x)
             54 LOAD_FAST                5 (y)
             56 CALL_FUNCTION            3
             58 GET_ITER
        >>   60 FOR_ITER                34 (to 96)
             62 STORE_FAST               7 (v)

 17          64 LOAD_FAST                7 (v)
             66 LOAD_FAST                1 (B)
             68 LOAD_FAST                5 (y)
             70 BINARY_SUBSCR
             72 LOAD_FAST                4 (x)
             74 STORE_SUBSCR

 18          76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              1 (solve)
             80 LOAD_FAST                1 (B)
             82 LOAD_FAST                6 (nC)
             84 CALL_METHOD              2
             86 POP_JUMP_IF_FALSE       60

 19          88 POP_TOP
             90 LOAD_CONST               4 (True)
             92 RETURN_VALUE
             94 JUMP_ABSOLUTE           60

 20     >>   96 LOAD_CONST               6 ('.')
             98 LOAD_FAST                1 (B)
            100 LOAD_FAST                5 (y)
            102 BINARY_SUBSCR
            104 LOAD_FAST                4 (x)
            106 STORE_SUBSCR

 21         108 LOAD_CONST               7 (False)
            110 RETURN_VALUE

Disassembly of <code object values at 0x7fac8f8d53a0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 ('1')
              2 LOAD_CONST               2 ('2')
              4 LOAD_CONST               3 ('3')
              6 LOAD_CONST               4 ('4')
              8 LOAD_CONST               5 ('5')
             10 LOAD_CONST               6 ('6')
             12 LOAD_CONST               7 ('7')
             14 LOAD_CONST               8 ('8')
             16 LOAD_CONST               9 ('9')
             18 BUILD_SET                9
             20 STORE_FAST               3 (s)

  5          22 LOAD_FAST                1 (x)
             24 LOAD_CONST              10 (3)
             26 BINARY_FLOOR_DIVIDE
             28 LOAD_CONST              10 (3)
             30 BINARY_MULTIPLY
             32 STORE_FAST               4 (sx)

  6          34 LOAD_FAST                2 (y)
             36 LOAD_CONST              10 (3)
             38 BINARY_FLOOR_DIVIDE
             40 LOAD_CONST              10 (3)
             42 BINARY_MULTIPLY
             44 STORE_FAST               5 (sy)

  7          46 LOAD_GLOBAL              0 (range)
             48 LOAD_CONST              11 (9)
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER                74 (to 130)
             56 STORE_FAST               6 (i)

  8          58 LOAD_FAST                3 (s)
             60 LOAD_METHOD              1 (discard)
             62 LOAD_FAST                0 (B)
             64 LOAD_FAST                2 (y)
             66 BINARY_SUBSCR
             68 LOAD_FAST                6 (i)
             70 BINARY_SUBSCR
             72 CALL_METHOD              1
             74 POP_TOP

  9          76 LOAD_FAST                3 (s)
             78 LOAD_METHOD              1 (discard)
             80 LOAD_FAST                0 (B)
             82 LOAD_FAST                6 (i)
             84 BINARY_SUBSCR
             86 LOAD_FAST                1 (x)
             88 BINARY_SUBSCR
             90 CALL_METHOD              1
             92 POP_TOP

 10          94 LOAD_FAST                3 (s)
             96 LOAD_METHOD              1 (discard)
             98 LOAD_FAST                0 (B)
            100 LOAD_FAST                5 (sy)
            102 LOAD_FAST                6 (i)
            104 LOAD_CONST              10 (3)
            106 BINARY_FLOOR_DIVIDE
            108 BINARY_ADD
            110 BINARY_SUBSCR
            112 LOAD_FAST                4 (sx)
            114 LOAD_FAST                6 (i)
            116 LOAD_CONST              10 (3)
            118 BINARY_MODULO
            120 BINARY_ADD
            122 BINARY_SUBSCR
            124 CALL_METHOD              1
            126 POP_TOP
            128 JUMP_ABSOLUTE           54

 11     >>  130 LOAD_FAST                3 (s)
            132 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fac8f8d5500, file ""<ast>"", line 23>:
 24           0 LOAD_CLOSURE             0 (B)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object <listcomp> at 0x7fac8f8d5240, file ""<ast>"", line 24>)
              6 LOAD_CONST               2 ('Solution.solveSudoku.<locals>.<listcomp>')
              8 MAKE_FUNCTION            8 (closure)
             10 LOAD_GLOBAL              0 (range)
             12 LOAD_CONST               3 (9)
             14 CALL_FUNCTION            1
             16 GET_ITER
             18 CALL_FUNCTION            1
             20 STORE_FAST               2 (C)

 25          22 LOAD_FAST                0 (self)
             24 LOAD_METHOD              1 (solve)
             26 LOAD_DEREF               0 (B)
             28 LOAD_FAST                2 (C)
             30 CALL_METHOD              2
             32 POP_TOP
             34 LOAD_CONST               0 (None)
             36 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7fac8f8d5240, file ""<ast>"", line 24>:
 24           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                42 (to 48)
              6 STORE_FAST               1 (y)
              8 LOAD_GLOBAL              0 (range)
             10 LOAD_CONST               0 (9)
             12 CALL_FUNCTION            1
             14 GET_ITER
        >>   16 FOR_ITER                28 (to 46)
             18 STORE_FAST               2 (x)
             20 LOAD_DEREF               0 (B)
             22 LOAD_FAST                1 (y)
             24 BINARY_SUBSCR
             26 LOAD_FAST                2 (x)
             28 BINARY_SUBSCR
             30 LOAD_CONST               1 ('.')
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       16
             36 LOAD_FAST                2 (x)
             38 LOAD_FAST                1 (y)
             40 BUILD_TUPLE              2
             42 LIST_APPEND              3
             44 JUMP_ABSOLUTE           16
        >>   46 JUMP_ABSOLUTE            4
        >>   48 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def solveSudoku(self, B: List[List[str]]) -> None:
    	N, S = range(9), list('123456789')
    	R, C, T, V = {i:set() for i in N}, {i:set() for i in N}, {i:set() for i in N}, collections.deque()
    	for i,j in itertools.product(N,N):
    		if B[i][j] != ""."": R[i].add(B[i][j]), C[j].add(B[i][j]), T[3*(i//3)+j//3].add(B[i][j])
    		else: V.append((i,j))
    	def dfs():
    		if not V: return True
    		i, j, t = V[0][0], V[0][1], 3*(V[0][0]//3)+V[0][1]//3
    		for n in S:
    			if n not in R[i]|C[j]|T[t]:
    				B[i][j], _ = n, [R[i].add(n), C[j].add(n), T[t].add(n), V.popleft()]
    				if dfs(): return True
    				else: B[i][j], _ = '.', [R[i].discard(n), C[j].discard(n), T[t].discard(n), V.appendleft((i,j))]
    		return False
    	dfs()","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f902ceb5450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f902ceb5450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (List)
             10 LOAD_NAME                3 (List)
             12 LOAD_NAME                4 (str)
             14 BINARY_SUBSCR
             16 BINARY_SUBSCR
             18 LOAD_CONST               1 (None)
             20 LOAD_CONST               2 (('B', 'return'))
             22 BUILD_CONST_KEY_MAP      2
             24 LOAD_CONST               3 (<code object solveSudoku at 0x7f902ceb53a0, file ""<ast>"", line 2>)
             26 LOAD_CONST               4 ('Solution.solveSudoku')
             28 MAKE_FUNCTION            4 (annotations)
             30 STORE_NAME               5 (solveSudoku)
             32 LOAD_CONST               1 (None)
             34 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7f902ceb53a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              1 (list)
              8 LOAD_CONST               2 ('123456789')
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               2 (N)
             16 STORE_DEREF              3 (S)

  4          18 LOAD_CONST               3 (<code object <dictcomp> at 0x7f902ceb5240, file ""<ast>"", line 4>)
             20 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             22 MAKE_FUNCTION            0
             24 LOAD_FAST                2 (N)
             26 GET_ITER
             28 CALL_FUNCTION            1
             30 LOAD_CONST               3 (<code object <dictcomp> at 0x7f902ceb5240, file ""<ast>"", line 4>)
             32 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             34 MAKE_FUNCTION            0
             36 LOAD_FAST                2 (N)
             38 GET_ITER
             40 CALL_FUNCTION            1
             42 LOAD_CONST               3 (<code object <dictcomp> at 0x7f902ceb5240, file ""<ast>"", line 4>)
             44 LOAD_CONST               4 ('Solution.solveSudoku.<locals>.<dictcomp>')
             46 MAKE_FUNCTION            0
             48 LOAD_FAST                2 (N)
             50 GET_ITER
             52 CALL_FUNCTION            1
             54 LOAD_GLOBAL              2 (collections)
             56 LOAD_METHOD              3 (deque)
             58 CALL_METHOD              0
             60 BUILD_TUPLE              4
             62 UNPACK_SEQUENCE          4
             64 STORE_DEREF              2 (R)
             66 STORE_DEREF              1 (C)
             68 STORE_DEREF              4 (T)
             70 STORE_DEREF              5 (V)

  5          72 LOAD_GLOBAL              4 (itertools)
             74 LOAD_METHOD              5 (product)
             76 LOAD_FAST                2 (N)
             78 LOAD_FAST                2 (N)
             80 CALL_METHOD              2
             82 GET_ITER
        >>   84 FOR_ITER               120 (to 206)
             86 UNPACK_SEQUENCE          2
             88 STORE_FAST               3 (i)
             90 STORE_FAST               4 (j)

  6          92 LOAD_DEREF               0 (B)
             94 LOAD_FAST                3 (i)
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (j)
            100 BINARY_SUBSCR
            102 LOAD_CONST               5 ('.')
            104 COMPARE_OP               3 (!=)
            106 POP_JUMP_IF_FALSE      190
            108 LOAD_DEREF               2 (R)
            110 LOAD_FAST                3 (i)
            112 BINARY_SUBSCR
            114 LOAD_METHOD              6 (add)
            116 LOAD_DEREF               0 (B)
            118 LOAD_FAST                3 (i)
            120 BINARY_SUBSCR
            122 LOAD_FAST                4 (j)
            124 BINARY_SUBSCR
            126 CALL_METHOD              1
            128 LOAD_DEREF               1 (C)
            130 LOAD_FAST                4 (j)
            132 BINARY_SUBSCR
            134 LOAD_METHOD              6 (add)
            136 LOAD_DEREF               0 (B)
            138 LOAD_FAST                3 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                4 (j)
            144 BINARY_SUBSCR
            146 CALL_METHOD              1
            148 LOAD_DEREF               4 (T)
            150 LOAD_CONST               6 (3)
            152 LOAD_FAST                3 (i)
            154 LOAD_CONST               6 (3)
            156 BINARY_FLOOR_DIVIDE
            158 BINARY_MULTIPLY
            160 LOAD_FAST                4 (j)
            162 LOAD_CONST               6 (3)
            164 BINARY_FLOOR_DIVIDE
            166 BINARY_ADD
            168 BINARY_SUBSCR
            170 LOAD_METHOD              6 (add)
            172 LOAD_DEREF               0 (B)
            174 LOAD_FAST                3 (i)
            176 BINARY_SUBSCR
            178 LOAD_FAST                4 (j)
            180 BINARY_SUBSCR
            182 CALL_METHOD              1
            184 BUILD_TUPLE              3
            186 POP_TOP
            188 JUMP_ABSOLUTE           84

  7     >>  190 LOAD_DEREF               5 (V)
            192 LOAD_METHOD              7 (append)
            194 LOAD_FAST                3 (i)
            196 LOAD_FAST                4 (j)
            198 BUILD_TUPLE              2
            200 CALL_METHOD              1
            202 POP_TOP
            204 JUMP_ABSOLUTE           84

  8     >>  206 LOAD_CLOSURE             0 (B)
            208 LOAD_CLOSURE             1 (C)
            210 LOAD_CLOSURE             2 (R)
            212 LOAD_CLOSURE             3 (S)
            214 LOAD_CLOSURE             4 (T)
            216 LOAD_CLOSURE             5 (V)
            218 LOAD_CLOSURE             6 (dfs)
            220 BUILD_TUPLE              7
            222 LOAD_CONST               7 (<code object dfs at 0x7f902ceb52f0, file ""<ast>"", line 8>)
            224 LOAD_CONST               8 ('Solution.solveSudoku.<locals>.dfs')
            226 MAKE_FUNCTION            8 (closure)
            228 STORE_DEREF              6 (dfs)

 17         230 LOAD_DEREF               6 (dfs)
            232 CALL_FUNCTION            0
            234 POP_TOP
            236 LOAD_CONST               0 (None)
            238 RETURN_VALUE

Disassembly of <code object <dictcomp> at 0x7f902ceb5240, file ""<ast>"", line 4>:
  4           0 BUILD_MAP                0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (i)
              8 LOAD_FAST                1 (i)
             10 LOAD_GLOBAL              0 (set)
             12 CALL_FUNCTION            0
             14 MAP_ADD                  2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object dfs at 0x7f902ceb52f0, file ""<ast>"", line 8>:
  9           0 LOAD_DEREF               5 (V)
              2 POP_JUMP_IF_TRUE         8
              4 LOAD_CONST               1 (True)
              6 RETURN_VALUE

 10     >>    8 LOAD_DEREF               5 (V)
             10 LOAD_CONST               2 (0)
             12 BINARY_SUBSCR
             14 LOAD_CONST               2 (0)
             16 BINARY_SUBSCR
             18 LOAD_DEREF               5 (V)
             20 LOAD_CONST               2 (0)
             22 BINARY_SUBSCR
             24 LOAD_CONST               3 (1)
             26 BINARY_SUBSCR
             28 LOAD_CONST               4 (3)
             30 LOAD_DEREF               5 (V)
             32 LOAD_CONST               2 (0)
             34 BINARY_SUBSCR
             36 LOAD_CONST               2 (0)
             38 BINARY_SUBSCR
             40 LOAD_CONST               4 (3)
             42 BINARY_FLOOR_DIVIDE
             44 BINARY_MULTIPLY
             46 LOAD_DEREF               5 (V)
             48 LOAD_CONST               2 (0)
             50 BINARY_SUBSCR
             52 LOAD_CONST               3 (1)
             54 BINARY_SUBSCR
             56 LOAD_CONST               4 (3)
             58 BINARY_FLOOR_DIVIDE
             60 BINARY_ADD
             62 ROT_THREE
             64 ROT_TWO
             66 STORE_FAST               0 (i)
             68 STORE_FAST               1 (j)
             70 STORE_FAST               2 (t)

 11          72 LOAD_DEREF               3 (S)
             74 GET_ITER
        >>   76 FOR_ITER               170 (to 248)
             78 STORE_FAST               3 (n)

 12          80 LOAD_FAST                3 (n)
             82 LOAD_DEREF               2 (R)
             84 LOAD_FAST                0 (i)
             86 BINARY_SUBSCR
             88 LOAD_DEREF               1 (C)
             90 LOAD_FAST                1 (j)
             92 BINARY_SUBSCR
             94 BINARY_OR
             96 LOAD_DEREF               4 (T)
             98 LOAD_FAST                2 (t)
            100 BINARY_SUBSCR
            102 BINARY_OR
            104 COMPARE_OP               7 (not in)
            106 POP_JUMP_IF_FALSE       76

 13         108 LOAD_FAST                3 (n)
            110 LOAD_DEREF               2 (R)
            112 LOAD_FAST                0 (i)
            114 BINARY_SUBSCR
            116 LOAD_METHOD              0 (add)
            118 LOAD_FAST                3 (n)
            120 CALL_METHOD              1
            122 LOAD_DEREF               1 (C)
            124 LOAD_FAST                1 (j)
            126 BINARY_SUBSCR
            128 LOAD_METHOD              0 (add)
            130 LOAD_FAST                3 (n)
            132 CALL_METHOD              1
            134 LOAD_DEREF               4 (T)
            136 LOAD_FAST                2 (t)
            138 BINARY_SUBSCR
            140 LOAD_METHOD              0 (add)
            142 LOAD_FAST                3 (n)
            144 CALL_METHOD              1
            146 LOAD_DEREF               5 (V)
            148 LOAD_METHOD              1 (popleft)
            150 CALL_METHOD              0
            152 BUILD_LIST               4
            154 ROT_TWO
            156 LOAD_DEREF               0 (B)
            158 LOAD_FAST                0 (i)
            160 BINARY_SUBSCR
            162 LOAD_FAST                1 (j)
            164 STORE_SUBSCR
            166 STORE_FAST               4 (_)

 14         168 LOAD_DEREF               6 (dfs)
            170 CALL_FUNCTION            0
            172 POP_JUMP_IF_FALSE      180
            174 POP_TOP
            176 LOAD_CONST               1 (True)
            178 RETURN_VALUE

 15     >>  180 LOAD_CONST               5 ('.')
            182 LOAD_DEREF               2 (R)
            184 LOAD_FAST                0 (i)
            186 BINARY_SUBSCR
            188 LOAD_METHOD              2 (discard)
            190 LOAD_FAST                3 (n)
            192 CALL_METHOD              1
            194 LOAD_DEREF               1 (C)
            196 LOAD_FAST                1 (j)
            198 BINARY_SUBSCR
            200 LOAD_METHOD              2 (discard)
            202 LOAD_FAST                3 (n)
            204 CALL_METHOD              1
            206 LOAD_DEREF               4 (T)
            208 LOAD_FAST                2 (t)
            210 BINARY_SUBSCR
            212 LOAD_METHOD              2 (discard)
            214 LOAD_FAST                3 (n)
            216 CALL_METHOD              1
            218 LOAD_DEREF               5 (V)
            220 LOAD_METHOD              3 (appendleft)
            222 LOAD_FAST                0 (i)
            224 LOAD_FAST                1 (j)
            226 BUILD_TUPLE              2
            228 CALL_METHOD              1
            230 BUILD_LIST               4
            232 ROT_TWO
            234 LOAD_DEREF               0 (B)
            236 LOAD_FAST                0 (i)
            238 BINARY_SUBSCR
            240 LOAD_FAST                1 (j)
            242 STORE_SUBSCR
            244 STORE_FAST               4 (_)
            246 JUMP_ABSOLUTE           76

 16     >>  248 LOAD_CONST               6 (False)
            250 RETURN_VALUE
None
"
solveSudoku,"class Solution:
    def helper(self,board):
        for i in range(9):
            for j in range(9):
                if board[i][j]==""."":
                    for num in range(1,10):
                        num=str(num)
                        if self.isvalid(board,i,j,num):
                            board[i][j]=num
                            if self.helper(board):
                                return True
                            board[i][j]="".""
                    return False
        return True
    def isvalid(self,board,row,col,num):
        for i in range(9):
            if board[i][col]==num:
                return False
            if board[row][i]==num:
                return False
            if board[3*(row//3) + i//3][ 3*(col//3)+i%3]==num:
                return False
        return True
                
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        return self.helper(board)","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa097355500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa097355500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object helper at 0x7fa0973553a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.helper')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (helper)

 15          16 LOAD_CONST               3 (<code object isvalid at 0x7fa097355450, file ""<ast>"", line 15>)
             18 LOAD_CONST               4 ('Solution.isvalid')
             20 MAKE_FUNCTION            0
             22 STORE_NAME               4 (isvalid)

 25          24 LOAD_NAME                5 (List)
             26 LOAD_NAME                5 (List)
             28 LOAD_NAME                6 (str)
             30 BINARY_SUBSCR
             32 BINARY_SUBSCR
             34 LOAD_CONST               5 (None)
             36 LOAD_CONST               6 (('board', 'return'))
             38 BUILD_CONST_KEY_MAP      2
             40 LOAD_CONST               7 (<code object solveSudoku at 0x7fa097355240, file ""<ast>"", line 25>)
             42 LOAD_CONST               8 ('Solution.solveSudoku')
             44 MAKE_FUNCTION            4 (annotations)
             46 STORE_NAME               7 (solveSudoku)
             48 LOAD_CONST               5 (None)
             50 RETURN_VALUE

Disassembly of <code object helper at 0x7fa0973553a0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 GET_ITER
        >>    8 FOR_ITER               126 (to 136)
             10 STORE_FAST               2 (i)

  4          12 LOAD_GLOBAL              0 (range)
             14 LOAD_CONST               1 (9)
             16 CALL_FUNCTION            1
             18 GET_ITER
        >>   20 FOR_ITER               112 (to 134)
             22 STORE_FAST               3 (j)

  5          24 LOAD_FAST                1 (board)
             26 LOAD_FAST                2 (i)
             28 BINARY_SUBSCR
             30 LOAD_FAST                3 (j)
             32 BINARY_SUBSCR
             34 LOAD_CONST               2 ('.')
             36 COMPARE_OP               2 (==)
             38 POP_JUMP_IF_FALSE       20

  6          40 LOAD_GLOBAL              0 (range)
             42 LOAD_CONST               3 (1)
             44 LOAD_CONST               4 (10)
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                72 (to 124)
             52 STORE_FAST               4 (num)

  7          54 LOAD_GLOBAL              1 (str)
             56 LOAD_FAST                4 (num)
             58 CALL_FUNCTION            1
             60 STORE_FAST               4 (num)

  8          62 LOAD_FAST                0 (self)
             64 LOAD_METHOD              2 (isvalid)
             66 LOAD_FAST                1 (board)
             68 LOAD_FAST                2 (i)
             70 LOAD_FAST                3 (j)
             72 LOAD_FAST                4 (num)
             74 CALL_METHOD              4
             76 POP_JUMP_IF_FALSE       50

  9          78 LOAD_FAST                4 (num)
             80 LOAD_FAST                1 (board)
             82 LOAD_FAST                2 (i)
             84 BINARY_SUBSCR
             86 LOAD_FAST                3 (j)
             88 STORE_SUBSCR

 10          90 LOAD_FAST                0 (self)
             92 LOAD_METHOD              3 (helper)
             94 LOAD_FAST                1 (board)
             96 CALL_METHOD              1
             98 POP_JUMP_IF_FALSE      110

 11         100 POP_TOP
            102 POP_TOP
            104 POP_TOP
            106 LOAD_CONST               5 (True)
            108 RETURN_VALUE

 12     >>  110 LOAD_CONST               2 ('.')
            112 LOAD_FAST                1 (board)
            114 LOAD_FAST                2 (i)
            116 BINARY_SUBSCR
            118 LOAD_FAST                3 (j)
            120 STORE_SUBSCR
            122 JUMP_ABSOLUTE           50

 13     >>  124 POP_TOP
            126 POP_TOP
            128 LOAD_CONST               6 (False)
            130 RETURN_VALUE
            132 JUMP_ABSOLUTE           20
        >>  134 JUMP_ABSOLUTE            8

 14     >>  136 LOAD_CONST               5 (True)
            138 RETURN_VALUE

Disassembly of <code object isvalid at 0x7fa097355450, file ""<ast>"", line 15>:
 16           0 LOAD_GLOBAL              0 (range)
              2 LOAD_CONST               1 (9)
              4 CALL_FUNCTION            1
              6 GET_ITER
        >>    8 FOR_ITER               102 (to 112)
             10 STORE_FAST               5 (i)

 17          12 LOAD_FAST                1 (board)
             14 LOAD_FAST                5 (i)
             16 BINARY_SUBSCR
             18 LOAD_FAST                3 (col)
             20 BINARY_SUBSCR
             22 LOAD_FAST                4 (num)
             24 COMPARE_OP               2 (==)
             26 POP_JUMP_IF_FALSE       34

 18          28 POP_TOP
             30 LOAD_CONST               2 (False)
             32 RETURN_VALUE

 19     >>   34 LOAD_FAST                1 (board)
             36 LOAD_FAST                2 (row)
             38 BINARY_SUBSCR
             40 LOAD_FAST                5 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                4 (num)
             46 COMPARE_OP               2 (==)
             48 POP_JUMP_IF_FALSE       56

 20          50 POP_TOP
             52 LOAD_CONST               2 (False)
             54 RETURN_VALUE

 21     >>   56 LOAD_FAST                1 (board)
             58 LOAD_CONST               3 (3)
             60 LOAD_FAST                2 (row)
             62 LOAD_CONST               3 (3)
             64 BINARY_FLOOR_DIVIDE
             66 BINARY_MULTIPLY
             68 LOAD_FAST                5 (i)
             70 LOAD_CONST               3 (3)
             72 BINARY_FLOOR_DIVIDE
             74 BINARY_ADD
             76 BINARY_SUBSCR
             78 LOAD_CONST               3 (3)
             80 LOAD_FAST                3 (col)
             82 LOAD_CONST               3 (3)
             84 BINARY_FLOOR_DIVIDE
             86 BINARY_MULTIPLY
             88 LOAD_FAST                5 (i)
             90 LOAD_CONST               3 (3)
             92 BINARY_MODULO
             94 BINARY_ADD
             96 BINARY_SUBSCR
             98 LOAD_FAST                4 (num)
            100 COMPARE_OP               2 (==)
            102 POP_JUMP_IF_FALSE        8

 22         104 POP_TOP
            106 LOAD_CONST               2 (False)
            108 RETURN_VALUE
            110 JUMP_ABSOLUTE            8

 23     >>  112 LOAD_CONST               4 (True)
            114 RETURN_VALUE

Disassembly of <code object solveSudoku at 0x7fa097355240, file ""<ast>"", line 25>:
 29           0 LOAD_FAST                0 (self)
              2 LOAD_METHOD              0 (helper)
              4 LOAD_FAST                1 (board)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
sortArray,"from itertools import accumulate
class Solution:
    def sortArray(self, nums:list):
        # radix sort implementation, O(n) time complexity, where n == len(nums)
        nums = [num + 50000 for num in nums] # unsorted array
        A = [0] * len(nums) # each loop's sorted array
        I = [0] * 10 # set up index array
        for i in range(6): # because there are 6 digits
            for num in nums:
                I[num // (10 ** i) % 10] += 1 # find out how many occurrences of each digit
            I = list(accumulate(I, lambda a, b: a + b)) # calculate the prefix sum
            for j in reversed(range(len(nums))):
                # invariant: The list is sorted at digit [j + 1:], waiting to be sorted at digit j
                A[I[nums[j] // (10 ** i) % 10] - 1] = nums[j] # update A from the back
                I[nums[j] // (10 ** i) % 10] -= 1 # update I at that position
            nums[:], I[:] = A[:], [0] * 10 # copy result to nums to begin new loop, and refresh I
        return [num - 50000 for num in nums]
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('accumulate',))
              4 IMPORT_NAME              0 (itertools)
              6 IMPORT_FROM              1 (accumulate)
              8 STORE_NAME               1 (accumulate)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f1f1ce95500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f1f1ce95500, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f1f1ce95450, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f1f1ce95450, file ""<ast>"", line 3>:
  5           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f1f1ce95240, file ""<ast>"", line 5>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_FAST                1 (nums)
              8 GET_ITER
             10 CALL_FUNCTION            1
             12 STORE_FAST               1 (nums)

  6          14 LOAD_CONST               3 (0)
             16 BUILD_LIST               1
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                1 (nums)
             22 CALL_FUNCTION            1
             24 BINARY_MULTIPLY
             26 STORE_FAST               2 (A)

  7          28 LOAD_CONST               3 (0)
             30 BUILD_LIST               1
             32 LOAD_CONST               4 (10)
             34 BINARY_MULTIPLY
             36 STORE_FAST               3 (I)

  8          38 LOAD_GLOBAL              1 (range)
             40 LOAD_CONST               5 (6)
             42 CALL_FUNCTION            1
             44 GET_ITER
        >>   46 FOR_ITER               190 (to 238)
             48 STORE_FAST               4 (i)

  9          50 LOAD_FAST                1 (nums)
             52 GET_ITER
        >>   54 FOR_ITER                32 (to 88)
             56 STORE_FAST               5 (num)

 10          58 LOAD_FAST                3 (I)
             60 LOAD_FAST                5 (num)
             62 LOAD_CONST               4 (10)
             64 LOAD_FAST                4 (i)
             66 BINARY_POWER
             68 BINARY_FLOOR_DIVIDE
             70 LOAD_CONST               4 (10)
             72 BINARY_MODULO
             74 DUP_TOP_TWO
             76 BINARY_SUBSCR
             78 LOAD_CONST               6 (1)
             80 INPLACE_ADD
             82 ROT_THREE
             84 STORE_SUBSCR
             86 JUMP_ABSOLUTE           54

 11     >>   88 LOAD_GLOBAL              2 (list)
             90 LOAD_GLOBAL              3 (accumulate)
             92 LOAD_FAST                3 (I)
             94 LOAD_CONST               7 (<code object <lambda> at 0x7f1f1ce952f0, file ""<ast>"", line 11>)
             96 LOAD_CONST               8 ('Solution.sortArray.<locals>.<lambda>')
             98 MAKE_FUNCTION            0
            100 CALL_FUNCTION            2
            102 CALL_FUNCTION            1
            104 STORE_FAST               3 (I)

 12         106 LOAD_GLOBAL              4 (reversed)
            108 LOAD_GLOBAL              1 (range)
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                1 (nums)
            114 CALL_FUNCTION            1
            116 CALL_FUNCTION            1
            118 CALL_FUNCTION            1
            120 GET_ITER
        >>  122 FOR_ITER                72 (to 196)
            124 STORE_FAST               6 (j)

 14         126 LOAD_FAST                1 (nums)
            128 LOAD_FAST                6 (j)
            130 BINARY_SUBSCR
            132 LOAD_FAST                2 (A)
            134 LOAD_FAST                3 (I)
            136 LOAD_FAST                1 (nums)
            138 LOAD_FAST                6 (j)
            140 BINARY_SUBSCR
            142 LOAD_CONST               4 (10)
            144 LOAD_FAST                4 (i)
            146 BINARY_POWER
            148 BINARY_FLOOR_DIVIDE
            150 LOAD_CONST               4 (10)
            152 BINARY_MODULO
            154 BINARY_SUBSCR
            156 LOAD_CONST               6 (1)
            158 BINARY_SUBTRACT
            160 STORE_SUBSCR

 15         162 LOAD_FAST                3 (I)
            164 LOAD_FAST                1 (nums)
            166 LOAD_FAST                6 (j)
            168 BINARY_SUBSCR
            170 LOAD_CONST               4 (10)
            172 LOAD_FAST                4 (i)
            174 BINARY_POWER
            176 BINARY_FLOOR_DIVIDE
            178 LOAD_CONST               4 (10)
            180 BINARY_MODULO
            182 DUP_TOP_TWO
            184 BINARY_SUBSCR
            186 LOAD_CONST               6 (1)
            188 INPLACE_SUBTRACT
            190 ROT_THREE
            192 STORE_SUBSCR
            194 JUMP_ABSOLUTE          122

 16     >>  196 LOAD_FAST                2 (A)
            198 LOAD_CONST               0 (None)
            200 LOAD_CONST               0 (None)
            202 BUILD_SLICE              2
            204 BINARY_SUBSCR
            206 LOAD_CONST               3 (0)
            208 BUILD_LIST               1
            210 LOAD_CONST               4 (10)
            212 BINARY_MULTIPLY
            214 ROT_TWO
            216 LOAD_FAST                1 (nums)
            218 LOAD_CONST               0 (None)
            220 LOAD_CONST               0 (None)
            222 BUILD_SLICE              2
            224 STORE_SUBSCR
            226 LOAD_FAST                3 (I)
            228 LOAD_CONST               0 (None)
            230 LOAD_CONST               0 (None)
            232 BUILD_SLICE              2
            234 STORE_SUBSCR
            236 JUMP_ABSOLUTE           46

 17     >>  238 LOAD_CONST               9 (<code object <listcomp> at 0x7f1f1ce953a0, file ""<ast>"", line 17>)
            240 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
            242 MAKE_FUNCTION            0
            244 LOAD_FAST                1 (nums)
            246 GET_ITER
            248 CALL_FUNCTION            1
            250 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1f1ce95240, file ""<ast>"", line 5>:
  5           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 LOAD_CONST               0 (50000)
             12 BINARY_ADD
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f1f1ce952f0, file ""<ast>"", line 11>:
 11           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 BINARY_ADD
              6 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f1f1ce953a0, file ""<ast>"", line 17>:
 17           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                12 (to 18)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 LOAD_CONST               0 (50000)
             12 BINARY_SUBTRACT
             14 LIST_APPEND              2
             16 JUMP_ABSOLUTE            4
        >>   18 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L = len(N)
        return [N.pop(min(range(L-i), key = lambda x: N[x])) for i in range(L)]
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6b330d5870, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6b330d5870, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f6b330d57c0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f6b330d57c0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_DEREF               1 (N)
              4 CALL_FUNCTION            1
              6 STORE_DEREF              0 (L)

  4           8 LOAD_CLOSURE             0 (L)
             10 LOAD_CLOSURE             1 (N)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               1 (<code object <listcomp> at 0x7f6b330d5710, file ""<ast>"", line 4>)
             16 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
             18 MAKE_FUNCTION            8 (closure)
             20 LOAD_GLOBAL              1 (range)
             22 LOAD_DEREF               0 (L)
             24 CALL_FUNCTION            1
             26 GET_ITER
             28 CALL_FUNCTION            1
             30 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f6b330d5710, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                38 (to 44)
              6 STORE_FAST               1 (i)
              8 LOAD_DEREF               1 (N)
             10 LOAD_METHOD              0 (pop)
             12 LOAD_GLOBAL              1 (min)
             14 LOAD_GLOBAL              2 (range)
             16 LOAD_DEREF               0 (L)
             18 LOAD_FAST                1 (i)
             20 BINARY_SUBTRACT
             22 CALL_FUNCTION            1
             24 LOAD_CLOSURE             1 (N)
             26 BUILD_TUPLE              1
             28 LOAD_CONST               0 (<code object <lambda> at 0x7f6b330d5660, file ""<ast>"", line 4>)
             30 LOAD_CONST               1 ('Solution.sortArray.<locals>.<listcomp>.<lambda>')
             32 MAKE_FUNCTION            8 (closure)
             34 LOAD_CONST               2 (('key',))
             36 CALL_FUNCTION_KW         2
             38 CALL_METHOD              1
             40 LIST_APPEND              2
             42 JUMP_ABSOLUTE            4
        >>   44 RETURN_VALUE

Disassembly of <code object <lambda> at 0x7f6b330d5660, file ""<ast>"", line 4>:
  4           0 LOAD_DEREF               0 (N)
              2 LOAD_FAST                0 (x)
              4 BINARY_SUBSCR
              6 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L, B = len(N), 1
        while B:
            B = 0
            for i in range(L-1):
                if N[i] > N[i+1]: N[i], N[i+1], B = N[i+1], N[i], 1
        return N
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f2e00625240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2e00625240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f2e006252f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f2e006252f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 ROT_TWO
             10 STORE_FAST               2 (L)
             12 STORE_FAST               3 (B)

  4     >>   14 LOAD_FAST                3 (B)
             16 POP_JUMP_IF_FALSE      102

  5          18 LOAD_CONST               2 (0)
             20 STORE_FAST               3 (B)

  6          22 LOAD_GLOBAL              1 (range)
             24 LOAD_FAST                2 (L)
             26 LOAD_CONST               1 (1)
             28 BINARY_SUBTRACT
             30 CALL_FUNCTION            1
             32 GET_ITER
        >>   34 FOR_ITER                64 (to 100)
             36 STORE_FAST               4 (i)

  7          38 LOAD_FAST                1 (N)
             40 LOAD_FAST                4 (i)
             42 BINARY_SUBSCR
             44 LOAD_FAST                1 (N)
             46 LOAD_FAST                4 (i)
             48 LOAD_CONST               1 (1)
             50 BINARY_ADD
             52 BINARY_SUBSCR
             54 COMPARE_OP               4 (>)
             56 POP_JUMP_IF_FALSE       34
             58 LOAD_FAST                1 (N)
             60 LOAD_FAST                4 (i)
             62 LOAD_CONST               1 (1)
             64 BINARY_ADD
             66 BINARY_SUBSCR
             68 LOAD_FAST                1 (N)
             70 LOAD_FAST                4 (i)
             72 BINARY_SUBSCR
             74 LOAD_CONST               1 (1)
             76 ROT_THREE
             78 ROT_TWO
             80 LOAD_FAST                1 (N)
             82 LOAD_FAST                4 (i)
             84 STORE_SUBSCR
             86 LOAD_FAST                1 (N)
             88 LOAD_FAST                4 (i)
             90 LOAD_CONST               1 (1)
             92 BINARY_ADD
             94 STORE_SUBSCR
             96 STORE_FAST               3 (B)
             98 JUMP_ABSOLUTE           34
        >>  100 JUMP_ABSOLUTE           14

  8     >>  102 LOAD_FAST                1 (N)
            104 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        L = len(N)
        for i in range(1,L):
            for j in range(0,i):
                if N[i] < N[j]:
                    N.insert(j, N.pop(i))
                    break
        return N		
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f636cf352f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f636cf352f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f636cf35240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f636cf35240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (L)

  4           8 LOAD_GLOBAL              1 (range)
             10 LOAD_CONST               1 (1)
             12 LOAD_FAST                2 (L)
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                58 (to 78)
             20 STORE_FAST               3 (i)

  5          22 LOAD_GLOBAL              1 (range)
             24 LOAD_CONST               2 (0)
             26 LOAD_FAST                3 (i)
             28 CALL_FUNCTION            2
             30 GET_ITER
        >>   32 FOR_ITER                42 (to 76)
             34 STORE_FAST               4 (j)

  6          36 LOAD_FAST                1 (N)
             38 LOAD_FAST                3 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (N)
             44 LOAD_FAST                4 (j)
             46 BINARY_SUBSCR
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       32

  7          52 LOAD_FAST                1 (N)
             54 LOAD_METHOD              2 (insert)
             56 LOAD_FAST                4 (j)
             58 LOAD_FAST                1 (N)
             60 LOAD_METHOD              3 (pop)
             62 LOAD_FAST                3 (i)
             64 CALL_METHOD              1
             66 CALL_METHOD              2
             68 POP_TOP

  8          70 POP_TOP
             72 JUMP_ABSOLUTE           18
             74 JUMP_ABSOLUTE           32
        >>   76 JUMP_ABSOLUTE           18

  9     >>   78 LOAD_FAST                1 (N)
             80 RETURN_VALUE
None
"
sortArray,"from bisect import insort_left
class Solution:
    def sortArray(self, N:list):
        L = len(N)
        for i in range(1,L): insort_left(N, N.pop(i), 0, i)
        return N
		
		
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('insort_left',))
              4 IMPORT_NAME              0 (bisect)
              6 IMPORT_FROM              1 (insort_left)
              8 STORE_NAME               1 (insort_left)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f48b09752f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f48b09752f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f48b0975240, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f48b0975240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (L)

  5           8 LOAD_GLOBAL              1 (range)
             10 LOAD_CONST               1 (1)
             12 LOAD_FAST                2 (L)
             14 CALL_FUNCTION            2
             16 GET_ITER
        >>   18 FOR_ITER                24 (to 44)
             20 STORE_FAST               3 (i)
             22 LOAD_GLOBAL              2 (insort_left)
             24 LOAD_FAST                1 (N)
             26 LOAD_FAST                1 (N)
             28 LOAD_METHOD              3 (pop)
             30 LOAD_FAST                3 (i)
             32 CALL_METHOD              1
             34 LOAD_CONST               2 (0)
             36 LOAD_FAST                3 (i)
             38 CALL_FUNCTION            4
             40 POP_TOP
             42 JUMP_ABSOLUTE           18

  6     >>   44 LOAD_FAST                1 (N)
             46 RETURN_VALUE
None
"
sortArray,"from collections import Counter
class Solution:
    def sortArray(self, N:list):
        C, m, M, S = Counter(N), min(N), max(N), []
        for n in range(m,M+1): S.extend([n]*C[n])
        return S
		
		
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (('Counter',))
              4 IMPORT_NAME              0 (collections)
              6 IMPORT_FROM              1 (Counter)
              8 STORE_NAME               1 (Counter)
             10 POP_TOP

  2          12 LOAD_BUILD_CLASS
             14 LOAD_CONST               2 (<code object Solution at 0x7f2ff62952f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution')
             18 MAKE_FUNCTION            0
             20 LOAD_CONST               3 ('Solution')
             22 CALL_FUNCTION            2
             24 STORE_NAME               2 (Solution)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object Solution at 0x7f2ff62952f0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f2ff6295240, file ""<ast>"", line 3>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f2ff6295240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (Counter)
              2 LOAD_FAST                1 (N)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              1 (min)
              8 LOAD_FAST                1 (N)
             10 CALL_FUNCTION            1
             12 LOAD_GLOBAL              2 (max)
             14 LOAD_FAST                1 (N)
             16 CALL_FUNCTION            1
             18 BUILD_LIST               0
             20 BUILD_TUPLE              4
             22 UNPACK_SEQUENCE          4
             24 STORE_FAST               2 (C)
             26 STORE_FAST               3 (m)
             28 STORE_FAST               4 (M)
             30 STORE_FAST               5 (S)

  5          32 LOAD_GLOBAL              3 (range)
             34 LOAD_FAST                3 (m)
             36 LOAD_FAST                4 (M)
             38 LOAD_CONST               1 (1)
             40 BINARY_ADD
             42 CALL_FUNCTION            2
             44 GET_ITER
        >>   46 FOR_ITER                24 (to 72)
             48 STORE_FAST               6 (n)
             50 LOAD_FAST                5 (S)
             52 LOAD_METHOD              4 (extend)
             54 LOAD_FAST                6 (n)
             56 BUILD_LIST               1
             58 LOAD_FAST                2 (C)
             60 LOAD_FAST                6 (n)
             62 BINARY_SUBSCR
             64 BINARY_MULTIPLY
             66 CALL_METHOD              1
             68 POP_TOP
             70 JUMP_ABSOLUTE           46

  6     >>   72 LOAD_FAST                5 (S)
             74 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        def quicksort(A, I, J):
            if J - I <= 1: return
            p = partition(A, I, J)
            quicksort(A, I, p), quicksort(A, p + 1, J)
        
        def partition(A, I, J):
            A[J-1], A[(I + J - 1)//2], i = A[(I + J - 1)//2], A[J-1], I
            for j in range(I,J):
                if A[j] < A[J-1]: A[i], A[j], i = A[j], A[i], i + 1
            A[J-1], A[i] = A[i], A[J-1]
            return i
        
        quicksort(N,0,len(N))
        return N
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3d53755450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3d53755450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f3d537553a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f3d537553a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (partition)
              2 LOAD_CLOSURE             1 (quicksort)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object quicksort at 0x7f3d53755240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.sortArray.<locals>.quicksort')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              1 (quicksort)

  8          14 LOAD_CONST               3 (<code object partition at 0x7f3d537552f0, file ""<ast>"", line 8>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.partition')
             18 MAKE_FUNCTION            0
             20 STORE_DEREF              0 (partition)

 15          22 LOAD_DEREF               1 (quicksort)
             24 LOAD_FAST                1 (N)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (N)
             32 CALL_FUNCTION            1
             34 CALL_FUNCTION            3
             36 POP_TOP

 16          38 LOAD_FAST                1 (N)
             40 RETURN_VALUE

Disassembly of <code object quicksort at 0x7f3d53755240, file ""<ast>"", line 3>:
  4           0 LOAD_FAST                2 (J)
              2 LOAD_FAST                1 (I)
              4 BINARY_SUBTRACT
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_CONST               0 (None)
             14 RETURN_VALUE

  5     >>   16 LOAD_DEREF               0 (partition)
             18 LOAD_FAST                0 (A)
             20 LOAD_FAST                1 (I)
             22 LOAD_FAST                2 (J)
             24 CALL_FUNCTION            3
             26 STORE_FAST               3 (p)

  6          28 LOAD_DEREF               1 (quicksort)
             30 LOAD_FAST                0 (A)
             32 LOAD_FAST                1 (I)
             34 LOAD_FAST                3 (p)
             36 CALL_FUNCTION            3
             38 LOAD_DEREF               1 (quicksort)
             40 LOAD_FAST                0 (A)
             42 LOAD_FAST                3 (p)
             44 LOAD_CONST               1 (1)
             46 BINARY_ADD
             48 LOAD_FAST                2 (J)
             50 CALL_FUNCTION            3
             52 BUILD_TUPLE              2
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE

Disassembly of <code object partition at 0x7f3d537552f0, file ""<ast>"", line 8>:
  9           0 LOAD_FAST                0 (A)
              2 LOAD_FAST                1 (I)
              4 LOAD_FAST                2 (J)
              6 BINARY_ADD
              8 LOAD_CONST               1 (1)
             10 BINARY_SUBTRACT
             12 LOAD_CONST               2 (2)
             14 BINARY_FLOOR_DIVIDE
             16 BINARY_SUBSCR
             18 LOAD_FAST                0 (A)
             20 LOAD_FAST                2 (J)
             22 LOAD_CONST               1 (1)
             24 BINARY_SUBTRACT
             26 BINARY_SUBSCR
             28 LOAD_FAST                1 (I)
             30 ROT_THREE
             32 ROT_TWO
             34 LOAD_FAST                0 (A)
             36 LOAD_FAST                2 (J)
             38 LOAD_CONST               1 (1)
             40 BINARY_SUBTRACT
             42 STORE_SUBSCR
             44 LOAD_FAST                0 (A)
             46 LOAD_FAST                1 (I)
             48 LOAD_FAST                2 (J)
             50 BINARY_ADD
             52 LOAD_CONST               1 (1)
             54 BINARY_SUBTRACT
             56 LOAD_CONST               2 (2)
             58 BINARY_FLOOR_DIVIDE
             60 STORE_SUBSCR
             62 STORE_FAST               3 (i)

 10          64 LOAD_GLOBAL              0 (range)
             66 LOAD_FAST                1 (I)
             68 LOAD_FAST                2 (J)
             70 CALL_FUNCTION            2
             72 GET_ITER
        >>   74 FOR_ITER                60 (to 136)
             76 STORE_FAST               4 (j)

 11          78 LOAD_FAST                0 (A)
             80 LOAD_FAST                4 (j)
             82 BINARY_SUBSCR
             84 LOAD_FAST                0 (A)
             86 LOAD_FAST                2 (J)
             88 LOAD_CONST               1 (1)
             90 BINARY_SUBTRACT
             92 BINARY_SUBSCR
             94 COMPARE_OP               0 (<)
             96 POP_JUMP_IF_FALSE       74
             98 LOAD_FAST                0 (A)
            100 LOAD_FAST                4 (j)
            102 BINARY_SUBSCR
            104 LOAD_FAST                0 (A)
            106 LOAD_FAST                3 (i)
            108 BINARY_SUBSCR
            110 LOAD_FAST                3 (i)
            112 LOAD_CONST               1 (1)
            114 BINARY_ADD
            116 ROT_THREE
            118 ROT_TWO
            120 LOAD_FAST                0 (A)
            122 LOAD_FAST                3 (i)
            124 STORE_SUBSCR
            126 LOAD_FAST                0 (A)
            128 LOAD_FAST                4 (j)
            130 STORE_SUBSCR
            132 STORE_FAST               3 (i)
            134 JUMP_ABSOLUTE           74

 12     >>  136 LOAD_FAST                0 (A)
            138 LOAD_FAST                3 (i)
            140 BINARY_SUBSCR
            142 LOAD_FAST                0 (A)
            144 LOAD_FAST                2 (J)
            146 LOAD_CONST               1 (1)
            148 BINARY_SUBTRACT
            150 BINARY_SUBSCR
            152 ROT_TWO
            154 LOAD_FAST                0 (A)
            156 LOAD_FAST                2 (J)
            158 LOAD_CONST               1 (1)
            160 BINARY_SUBTRACT
            162 STORE_SUBSCR
            164 LOAD_FAST                0 (A)
            166 LOAD_FAST                3 (i)
            168 STORE_SUBSCR

 13         170 LOAD_FAST                3 (i)
            172 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, N:list):
        def mergesort(A):
            LA = len(A)
            if LA == 1: return A
            LH, RH = mergesort(A[:LA//2]), mergesort(A[LA//2:])
            return merge(LH,RH)

        def merge(LH, RH):
            LLH, LRH = len(LH), len(RH)
            S, i, j = [], 0, 0
            while i < LLH and j < LRH:
                if LH[i] <= RH[j]: i, _ = i + 1, S.append(LH[i])
                else: j, _ = j + 1, S.append(RH[j])
            return S + (RH[j:] if i == LLH else LH[i:])
        
        return mergesort(N)		
		
		
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fba8d435450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fba8d435450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('N',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fba8d4353a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fba8d4353a0, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (merge)
              2 LOAD_CLOSURE             1 (mergesort)
              4 BUILD_TUPLE              2
              6 LOAD_CONST               1 (<code object mergesort at 0x7fba8d435240, file ""<ast>"", line 3>)
              8 LOAD_CONST               2 ('Solution.sortArray.<locals>.mergesort')
             10 MAKE_FUNCTION            8 (closure)
             12 STORE_DEREF              1 (mergesort)

  9          14 LOAD_CONST               3 (<code object merge at 0x7fba8d4352f0, file ""<ast>"", line 9>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.merge')
             18 MAKE_FUNCTION            0
             20 STORE_DEREF              0 (merge)

 17          22 LOAD_DEREF               1 (mergesort)
             24 LOAD_FAST                1 (N)
             26 CALL_FUNCTION            1
             28 RETURN_VALUE

Disassembly of <code object mergesort at 0x7fba8d435240, file ""<ast>"", line 3>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (A)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (LA)

  5           8 LOAD_FAST                1 (LA)
             10 LOAD_CONST               1 (1)
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20
             16 LOAD_FAST                0 (A)
             18 RETURN_VALUE

  6     >>   20 LOAD_DEREF               1 (mergesort)
             22 LOAD_FAST                0 (A)
             24 LOAD_CONST               0 (None)
             26 LOAD_FAST                1 (LA)
             28 LOAD_CONST               2 (2)
             30 BINARY_FLOOR_DIVIDE
             32 BUILD_SLICE              2
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            1
             38 LOAD_DEREF               1 (mergesort)
             40 LOAD_FAST                0 (A)
             42 LOAD_FAST                1 (LA)
             44 LOAD_CONST               2 (2)
             46 BINARY_FLOOR_DIVIDE
             48 LOAD_CONST               0 (None)
             50 BUILD_SLICE              2
             52 BINARY_SUBSCR
             54 CALL_FUNCTION            1
             56 ROT_TWO
             58 STORE_FAST               2 (LH)
             60 STORE_FAST               3 (RH)

  7          62 LOAD_DEREF               0 (merge)
             64 LOAD_FAST                2 (LH)
             66 LOAD_FAST                3 (RH)
             68 CALL_FUNCTION            2
             70 RETURN_VALUE

Disassembly of <code object merge at 0x7fba8d4352f0, file ""<ast>"", line 9>:
 10           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (LH)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (RH)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               2 (LLH)
             16 STORE_FAST               3 (LRH)

 11          18 BUILD_LIST               0
             20 LOAD_CONST               1 (0)
             22 LOAD_CONST               1 (0)
             24 ROT_THREE
             26 ROT_TWO
             28 STORE_FAST               4 (S)
             30 STORE_FAST               5 (i)
             32 STORE_FAST               6 (j)

 12     >>   34 LOAD_FAST                5 (i)
             36 LOAD_FAST                2 (LLH)
             38 COMPARE_OP               0 (<)
             40 POP_JUMP_IF_FALSE      118
             42 LOAD_FAST                6 (j)
             44 LOAD_FAST                3 (LRH)
             46 COMPARE_OP               0 (<)
             48 POP_JUMP_IF_FALSE      118

 13          50 LOAD_FAST                0 (LH)
             52 LOAD_FAST                5 (i)
             54 BINARY_SUBSCR
             56 LOAD_FAST                1 (RH)
             58 LOAD_FAST                6 (j)
             60 BINARY_SUBSCR
             62 COMPARE_OP               1 (<=)
             64 POP_JUMP_IF_FALSE       92
             66 LOAD_FAST                5 (i)
             68 LOAD_CONST               2 (1)
             70 BINARY_ADD
             72 LOAD_FAST                4 (S)
             74 LOAD_METHOD              1 (append)
             76 LOAD_FAST                0 (LH)
             78 LOAD_FAST                5 (i)
             80 BINARY_SUBSCR
             82 CALL_METHOD              1
             84 ROT_TWO
             86 STORE_FAST               5 (i)
             88 STORE_FAST               7 (_)
             90 JUMP_ABSOLUTE           34

 14     >>   92 LOAD_FAST                6 (j)
             94 LOAD_CONST               2 (1)
             96 BINARY_ADD
             98 LOAD_FAST                4 (S)
            100 LOAD_METHOD              1 (append)
            102 LOAD_FAST                1 (RH)
            104 LOAD_FAST                6 (j)
            106 BINARY_SUBSCR
            108 CALL_METHOD              1
            110 ROT_TWO
            112 STORE_FAST               6 (j)
            114 STORE_FAST               7 (_)
            116 JUMP_ABSOLUTE           34

 15     >>  118 LOAD_FAST                4 (S)
            120 LOAD_FAST                5 (i)
            122 LOAD_FAST                2 (LLH)
            124 COMPARE_OP               2 (==)
            126 POP_JUMP_IF_FALSE      140
            128 LOAD_FAST                1 (RH)
            130 LOAD_FAST                6 (j)
            132 LOAD_CONST               0 (None)
            134 BUILD_SLICE              2
            136 BINARY_SUBSCR
            138 JUMP_FORWARD            10 (to 150)
        >>  140 LOAD_FAST                0 (LH)
            142 LOAD_FAST                5 (i)
            144 LOAD_CONST               0 (None)
            146 BUILD_SLICE              2
            148 BINARY_SUBSCR
        >>  150 BINARY_ADD
            152 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        # Hoare’s Partition Scheme works by initializing two indexes that start at two ends, 
		# the two indexes move toward each other until an inversion is found
        # the partition function will seperate the array by two, smaller than pivot, and greater than pivot
        # and return the final position of the pivot element.
        def partition(nums, left, right):
            if left > right: return
            
            # use the left most element as the pivot element
            pivot_index = left
            pivot=nums[left]
            
            # if the element we are looking for is greater than pivot, then it is on the correct side
            # when right pointer meet the left pointer, we know all the elements are in the correct sides
            # just need to put the pivot to the correct position
            while True:
                while left < right and nums[right] >=pivot:
                    right -=1
            # do the opposite thing to the left hand side
                while left < right and nums[left] <=pivot:
                    left +=1
            # if both of the numbers from the left hand side and the right hand side are on the wron side,
            # we exchange them.
                if left < right:
                    nums[left],nums[right] = nums[right],nums[left]
            # if all the elements are on the correct side, break the loop, just need to insert the pivot now.        
                else:
                    break
            # insert the pivot to the correct position to seperate the array by two
            nums[right],nums[pivot_index] = nums[pivot_index],nums[right]
            return right
        
        def Hoare_quicksort(nums, start, end):
            if end < start: return
            p = partition(nums,start,end)
            Hoare_quicksort(nums,start,p-1)
            Hoare_quicksort(nums,p+1,end)
            
        Hoare_quicksort(nums,0,len(nums)-1)
        return nums
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6b92835450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6b92835450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f6b928353a0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f6b928353a0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object partition at 0x7f6b92835240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.partition')
              4 MAKE_FUNCTION            0
              6 STORE_DEREF              1 (partition)

 34           8 LOAD_CLOSURE             0 (Hoare_quicksort)
             10 LOAD_CLOSURE             1 (partition)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               3 (<code object Hoare_quicksort at 0x7f6b928352f0, file ""<ast>"", line 34>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.Hoare_quicksort')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (Hoare_quicksort)

 40          22 LOAD_DEREF               0 (Hoare_quicksort)
             24 LOAD_FAST                1 (nums)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (nums)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               6 (1)
             36 BINARY_SUBTRACT
             38 CALL_FUNCTION            3
             40 POP_TOP

 41          42 LOAD_FAST                1 (nums)
             44 RETURN_VALUE

Disassembly of <code object partition at 0x7f6b92835240, file ""<ast>"", line 7>:
  8           0 LOAD_FAST                1 (left)
              2 LOAD_FAST                2 (right)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 11     >>   12 LOAD_FAST                1 (left)
             14 STORE_FAST               3 (pivot_index)

 12          16 LOAD_FAST                0 (nums)
             18 LOAD_FAST                1 (left)
             20 BINARY_SUBSCR
             22 STORE_FAST               4 (pivot)

 18     >>   24 LOAD_FAST                1 (left)
             26 LOAD_FAST                2 (right)
             28 COMPARE_OP               0 (<)
             30 POP_JUMP_IF_FALSE       54
             32 LOAD_FAST                0 (nums)
             34 LOAD_FAST                2 (right)
             36 BINARY_SUBSCR
             38 LOAD_FAST                4 (pivot)
             40 COMPARE_OP               5 (>=)
             42 POP_JUMP_IF_FALSE       54

 19          44 LOAD_FAST                2 (right)
             46 LOAD_CONST               1 (1)
             48 INPLACE_SUBTRACT
             50 STORE_FAST               2 (right)
             52 JUMP_ABSOLUTE           24

 21     >>   54 LOAD_FAST                1 (left)
             56 LOAD_FAST                2 (right)
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE       84
             62 LOAD_FAST                0 (nums)
             64 LOAD_FAST                1 (left)
             66 BINARY_SUBSCR
             68 LOAD_FAST                4 (pivot)
             70 COMPARE_OP               1 (<=)
             72 POP_JUMP_IF_FALSE       84

 22          74 LOAD_FAST                1 (left)
             76 LOAD_CONST               1 (1)
             78 INPLACE_ADD
             80 STORE_FAST               1 (left)
             82 JUMP_ABSOLUTE           54

 25     >>   84 LOAD_FAST                1 (left)
             86 LOAD_FAST                2 (right)
             88 COMPARE_OP               0 (<)
             90 POP_JUMP_IF_FALSE      124

 26          92 LOAD_FAST                0 (nums)
             94 LOAD_FAST                2 (right)
             96 BINARY_SUBSCR
             98 LOAD_FAST                0 (nums)
            100 LOAD_FAST                1 (left)
            102 BINARY_SUBSCR
            104 ROT_TWO
            106 LOAD_FAST                0 (nums)
            108 LOAD_FAST                1 (left)
            110 STORE_SUBSCR
            112 LOAD_FAST                0 (nums)
            114 LOAD_FAST                2 (right)
            116 STORE_SUBSCR
            118 JUMP_ABSOLUTE           24

 29         120 JUMP_ABSOLUTE          124
            122 JUMP_ABSOLUTE           24

 31     >>  124 LOAD_FAST                0 (nums)
            126 LOAD_FAST                3 (pivot_index)
            128 BINARY_SUBSCR
            130 LOAD_FAST                0 (nums)
            132 LOAD_FAST                2 (right)
            134 BINARY_SUBSCR
            136 ROT_TWO
            138 LOAD_FAST                0 (nums)
            140 LOAD_FAST                2 (right)
            142 STORE_SUBSCR
            144 LOAD_FAST                0 (nums)
            146 LOAD_FAST                3 (pivot_index)
            148 STORE_SUBSCR

 32         150 LOAD_FAST                2 (right)
            152 RETURN_VALUE

Disassembly of <code object Hoare_quicksort at 0x7f6b928352f0, file ""<ast>"", line 34>:
 35           0 LOAD_FAST                2 (end)
              2 LOAD_FAST                1 (start)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 36     >>   12 LOAD_DEREF               1 (partition)
             14 LOAD_FAST                0 (nums)
             16 LOAD_FAST                1 (start)
             18 LOAD_FAST                2 (end)
             20 CALL_FUNCTION            3
             22 STORE_FAST               3 (p)

 37          24 LOAD_DEREF               0 (Hoare_quicksort)
             26 LOAD_FAST                0 (nums)
             28 LOAD_FAST                1 (start)
             30 LOAD_FAST                3 (p)
             32 LOAD_CONST               1 (1)
             34 BINARY_SUBTRACT
             36 CALL_FUNCTION            3
             38 POP_TOP

 38          40 LOAD_DEREF               0 (Hoare_quicksort)
             42 LOAD_FAST                0 (nums)
             44 LOAD_FAST                3 (p)
             46 LOAD_CONST               1 (1)
             48 BINARY_ADD
             50 LOAD_FAST                2 (end)
             52 CALL_FUNCTION            3
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list)->list:

        def partition(nums, left, right):
            if left > right: return
            
            # use the middle  element as the pivot
            pivot_index = left + (right-left)//2
            pivot=nums[pivot_index]

            while left<=right:
                while left <= right and nums[left] <pivot:
                    left +=1
                while left <= right and nums[right] >pivot:
                    right -=1
                if left <= right:
                    nums[left],nums[right] = nums[right],nums[left]
                    left +=1
                    right -=1
                else:
                    break
            return (left,right)
        
        def Hoare_quicksort(nums, start, end):
            if end < start: return
            p = partition(nums,start,end)
            Hoare_quicksort(nums,start,p[1])
            Hoare_quicksort(nums,p[0],end)
            
        Hoare_quicksort(nums,0,len(nums)-1)
        return nums
        
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fe1af155450, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fe1af155450, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_NAME                3 (list)
             12 LOAD_CONST               1 (('nums', 'return'))
             14 BUILD_CONST_KEY_MAP      2
             16 LOAD_CONST               2 (<code object sortArray at 0x7fe1af1553a0, file ""<ast>"", line 2>)
             18 LOAD_CONST               3 ('Solution.sortArray')
             20 MAKE_FUNCTION            4 (annotations)
             22 STORE_NAME               4 (sortArray)
             24 LOAD_CONST               4 (None)
             26 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fe1af1553a0, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object partition at 0x7fe1af155240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.partition')
              4 MAKE_FUNCTION            0
              6 STORE_DEREF              1 (partition)

 24           8 LOAD_CLOSURE             0 (Hoare_quicksort)
             10 LOAD_CLOSURE             1 (partition)
             12 BUILD_TUPLE              2
             14 LOAD_CONST               3 (<code object Hoare_quicksort at 0x7fe1af1552f0, file ""<ast>"", line 24>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.Hoare_quicksort')
             18 MAKE_FUNCTION            8 (closure)
             20 STORE_DEREF              0 (Hoare_quicksort)

 30          22 LOAD_DEREF               0 (Hoare_quicksort)
             24 LOAD_FAST                1 (nums)
             26 LOAD_CONST               5 (0)
             28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (nums)
             32 CALL_FUNCTION            1
             34 LOAD_CONST               6 (1)
             36 BINARY_SUBTRACT
             38 CALL_FUNCTION            3
             40 POP_TOP

 31          42 LOAD_FAST                1 (nums)
             44 RETURN_VALUE

Disassembly of <code object partition at 0x7fe1af155240, file ""<ast>"", line 4>:
  5           0 LOAD_FAST                1 (left)
              2 LOAD_FAST                2 (right)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

  8     >>   12 LOAD_FAST                1 (left)
             14 LOAD_FAST                2 (right)
             16 LOAD_FAST                1 (left)
             18 BINARY_SUBTRACT
             20 LOAD_CONST               1 (2)
             22 BINARY_FLOOR_DIVIDE
             24 BINARY_ADD
             26 STORE_FAST               3 (pivot_index)

  9          28 LOAD_FAST                0 (nums)
             30 LOAD_FAST                3 (pivot_index)
             32 BINARY_SUBSCR
             34 STORE_FAST               4 (pivot)

 11     >>   36 LOAD_FAST                1 (left)
             38 LOAD_FAST                2 (right)
             40 COMPARE_OP               1 (<=)
             42 POP_JUMP_IF_FALSE      160

 12     >>   44 LOAD_FAST                1 (left)
             46 LOAD_FAST                2 (right)
             48 COMPARE_OP               1 (<=)
             50 POP_JUMP_IF_FALSE       74
             52 LOAD_FAST                0 (nums)
             54 LOAD_FAST                1 (left)
             56 BINARY_SUBSCR
             58 LOAD_FAST                4 (pivot)
             60 COMPARE_OP               0 (<)
             62 POP_JUMP_IF_FALSE       74

 13          64 LOAD_FAST                1 (left)
             66 LOAD_CONST               2 (1)
             68 INPLACE_ADD
             70 STORE_FAST               1 (left)
             72 JUMP_ABSOLUTE           44

 14     >>   74 LOAD_FAST                1 (left)
             76 LOAD_FAST                2 (right)
             78 COMPARE_OP               1 (<=)
             80 POP_JUMP_IF_FALSE      104
             82 LOAD_FAST                0 (nums)
             84 LOAD_FAST                2 (right)
             86 BINARY_SUBSCR
             88 LOAD_FAST                4 (pivot)
             90 COMPARE_OP               4 (>)
             92 POP_JUMP_IF_FALSE      104

 15          94 LOAD_FAST                2 (right)
             96 LOAD_CONST               2 (1)
             98 INPLACE_SUBTRACT
            100 STORE_FAST               2 (right)
            102 JUMP_ABSOLUTE           74

 16     >>  104 LOAD_FAST                1 (left)
            106 LOAD_FAST                2 (right)
            108 COMPARE_OP               1 (<=)
            110 POP_JUMP_IF_FALSE      160

 17         112 LOAD_FAST                0 (nums)
            114 LOAD_FAST                2 (right)
            116 BINARY_SUBSCR
            118 LOAD_FAST                0 (nums)
            120 LOAD_FAST                1 (left)
            122 BINARY_SUBSCR
            124 ROT_TWO
            126 LOAD_FAST                0 (nums)
            128 LOAD_FAST                1 (left)
            130 STORE_SUBSCR
            132 LOAD_FAST                0 (nums)
            134 LOAD_FAST                2 (right)
            136 STORE_SUBSCR

 18         138 LOAD_FAST                1 (left)
            140 LOAD_CONST               2 (1)
            142 INPLACE_ADD
            144 STORE_FAST               1 (left)

 19         146 LOAD_FAST                2 (right)
            148 LOAD_CONST               2 (1)
            150 INPLACE_SUBTRACT
            152 STORE_FAST               2 (right)
            154 JUMP_ABSOLUTE           36

 21         156 JUMP_ABSOLUTE          160
            158 JUMP_ABSOLUTE           36

 22     >>  160 LOAD_FAST                1 (left)
            162 LOAD_FAST                2 (right)
            164 BUILD_TUPLE              2
            166 RETURN_VALUE

Disassembly of <code object Hoare_quicksort at 0x7fe1af1552f0, file ""<ast>"", line 24>:
 25           0 LOAD_FAST                2 (end)
              2 LOAD_FAST                1 (start)
              4 COMPARE_OP               0 (<)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

 26     >>   12 LOAD_DEREF               1 (partition)
             14 LOAD_FAST                0 (nums)
             16 LOAD_FAST                1 (start)
             18 LOAD_FAST                2 (end)
             20 CALL_FUNCTION            3
             22 STORE_FAST               3 (p)

 27          24 LOAD_DEREF               0 (Hoare_quicksort)
             26 LOAD_FAST                0 (nums)
             28 LOAD_FAST                1 (start)
             30 LOAD_FAST                3 (p)
             32 LOAD_CONST               1 (1)
             34 BINARY_SUBSCR
             36 CALL_FUNCTION            3
             38 POP_TOP

 28          40 LOAD_DEREF               0 (Hoare_quicksort)
             42 LOAD_FAST                0 (nums)
             44 LOAD_FAST                3 (p)
             46 LOAD_CONST               2 (0)
             48 BINARY_SUBSCR
             50 LOAD_FAST                2 (end)
             52 CALL_FUNCTION            3
             54 POP_TOP
             56 LOAD_CONST               0 (None)
             58 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        # Merge Sort
        
        # merge takes two sorted array, and return the merged sorted array
        # Leetcode #88
        def merge(left, right):
            l = len(left)-1
            r = len(right)-1
            end = l+r+1
            
            for _ in range(r+1):
                left.append(None)
                
            while l>=0 and r>=0:
                if left[l] >=right[r]:
                    left[end]=left[l]
                    l-=1
                else:
                    left[end]=right[r]
                    r-=1
                end-=1
            if l ==-1:
                for _ in range(r+1):
                    left[_]=right[_]
            
            return left
        
        # if there is only one number, return the number
        # if both left and right are sorted arrays, merge these two
        if len(nums)<=1: return nums
        mid = len(nums)//2
        leftarray = self.sortArray(nums[:mid])
        rightarray= self.sortArray(nums[mid:])
        return merge(leftarray,rightarray)
        
    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbf916853a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbf916853a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fbf916852f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fbf916852f0, file ""<ast>"", line 2>:
  7           0 LOAD_CONST               1 (<code object merge at 0x7fbf91685240, file ""<ast>"", line 7>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.merge')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               2 (merge)

 31           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (nums)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               3 (1)
             16 COMPARE_OP               1 (<=)
             18 POP_JUMP_IF_FALSE       24
             20 LOAD_FAST                1 (nums)
             22 RETURN_VALUE

 32     >>   24 LOAD_GLOBAL              0 (len)
             26 LOAD_FAST                1 (nums)
             28 CALL_FUNCTION            1
             30 LOAD_CONST               4 (2)
             32 BINARY_FLOOR_DIVIDE
             34 STORE_FAST               3 (mid)

 33          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              1 (sortArray)
             40 LOAD_FAST                1 (nums)
             42 LOAD_CONST               0 (None)
             44 LOAD_FAST                3 (mid)
             46 BUILD_SLICE              2
             48 BINARY_SUBSCR
             50 CALL_METHOD              1
             52 STORE_FAST               4 (leftarray)

 34          54 LOAD_FAST                0 (self)
             56 LOAD_METHOD              1 (sortArray)
             58 LOAD_FAST                1 (nums)
             60 LOAD_FAST                3 (mid)
             62 LOAD_CONST               0 (None)
             64 BUILD_SLICE              2
             66 BINARY_SUBSCR
             68 CALL_METHOD              1
             70 STORE_FAST               5 (rightarray)

 35          72 LOAD_FAST                2 (merge)
             74 LOAD_FAST                4 (leftarray)
             76 LOAD_FAST                5 (rightarray)
             78 CALL_FUNCTION            2
             80 RETURN_VALUE

Disassembly of <code object merge at 0x7fbf91685240, file ""<ast>"", line 7>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (left)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 BINARY_SUBTRACT
             10 STORE_FAST               2 (l)

  9          12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (right)
             16 CALL_FUNCTION            1
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBTRACT
             22 STORE_FAST               3 (r)

 10          24 LOAD_FAST                2 (l)
             26 LOAD_FAST                3 (r)
             28 BINARY_ADD
             30 LOAD_CONST               1 (1)
             32 BINARY_ADD
             34 STORE_FAST               4 (end)

 12          36 LOAD_GLOBAL              1 (range)
             38 LOAD_FAST                3 (r)
             40 LOAD_CONST               1 (1)
             42 BINARY_ADD
             44 CALL_FUNCTION            1
             46 GET_ITER
        >>   48 FOR_ITER                14 (to 64)
             50 STORE_FAST               5 (_)

 13          52 LOAD_FAST                0 (left)
             54 LOAD_METHOD              2 (append)
             56 LOAD_CONST               0 (None)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           48

 15     >>   64 LOAD_FAST                2 (l)
             66 LOAD_CONST               2 (0)
             68 COMPARE_OP               5 (>=)
             70 POP_JUMP_IF_FALSE      148
             72 LOAD_FAST                3 (r)
             74 LOAD_CONST               2 (0)
             76 COMPARE_OP               5 (>=)
             78 POP_JUMP_IF_FALSE      148

 16          80 LOAD_FAST                0 (left)
             82 LOAD_FAST                2 (l)
             84 BINARY_SUBSCR
             86 LOAD_FAST                1 (right)
             88 LOAD_FAST                3 (r)
             90 BINARY_SUBSCR
             92 COMPARE_OP               5 (>=)
             94 POP_JUMP_IF_FALSE      118

 17          96 LOAD_FAST                0 (left)
             98 LOAD_FAST                2 (l)
            100 BINARY_SUBSCR
            102 LOAD_FAST                0 (left)
            104 LOAD_FAST                4 (end)
            106 STORE_SUBSCR

 18         108 LOAD_FAST                2 (l)
            110 LOAD_CONST               1 (1)
            112 INPLACE_SUBTRACT
            114 STORE_FAST               2 (l)
            116 JUMP_FORWARD            20 (to 138)

 20     >>  118 LOAD_FAST                1 (right)
            120 LOAD_FAST                3 (r)
            122 BINARY_SUBSCR
            124 LOAD_FAST                0 (left)
            126 LOAD_FAST                4 (end)
            128 STORE_SUBSCR

 21         130 LOAD_FAST                3 (r)
            132 LOAD_CONST               1 (1)
            134 INPLACE_SUBTRACT
            136 STORE_FAST               3 (r)

 22     >>  138 LOAD_FAST                4 (end)
            140 LOAD_CONST               1 (1)
            142 INPLACE_SUBTRACT
            144 STORE_FAST               4 (end)
            146 JUMP_ABSOLUTE           64

 23     >>  148 LOAD_FAST                2 (l)
            150 LOAD_CONST               3 (-1)
            152 COMPARE_OP               2 (==)
            154 POP_JUMP_IF_FALSE      186

 24         156 LOAD_GLOBAL              1 (range)
            158 LOAD_FAST                3 (r)
            160 LOAD_CONST               1 (1)
            162 BINARY_ADD
            164 CALL_FUNCTION            1
            166 GET_ITER
        >>  168 FOR_ITER                16 (to 186)
            170 STORE_FAST               5 (_)

 25         172 LOAD_FAST                1 (right)
            174 LOAD_FAST                5 (_)
            176 BINARY_SUBSCR
            178 LOAD_FAST                0 (left)
            180 LOAD_FAST                5 (_)
            182 STORE_SUBSCR
            184 JUMP_ABSOLUTE          168

 27     >>  186 LOAD_FAST                0 (left)
            188 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        def heapify(nums, n, i):
            # 
            if i > n: return
            largest = i
            l = 2*i+1
            r = 2*i+2

            if l < n and nums[l] > nums[largest]:largest = l
            if r < n and nums[r] > nums[largest]:largest = r
            # swap the largest element with the parent node of the tree
            if largest != i: 
                nums[i], nums[largest] = nums[largest],nums[i]
                heapify(nums, n, largest) # 
        
        
        def build_heap(nums):
            n = len(nums)
            lastNode = n-1
            lastParent = (lastNode-1)//2
            for i in range(lastParent+1)[::-1]:
                heapify(nums, n, i)
        build_heap(nums)

        def heap_sort(nums):
            n = len(nums)
            for i in range(n)[::-1]:
                nums[0],nums[i]=nums[i],nums[0]
                heapify(nums, i, 0)
        heap_sort(nums)

        return nums
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb7a81c5500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb7a81c5500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fb7a81c5450, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fb7a81c5450, file ""<ast>"", line 2>:
  3           0 LOAD_CLOSURE             0 (heapify)
              2 BUILD_TUPLE              1
              4 LOAD_CONST               1 (<code object heapify at 0x7fb7a81c5240, file ""<ast>"", line 3>)
              6 LOAD_CONST               2 ('Solution.sortArray.<locals>.heapify')
              8 MAKE_FUNCTION            8 (closure)
             10 STORE_DEREF              0 (heapify)

 18          12 LOAD_CLOSURE             0 (heapify)
             14 BUILD_TUPLE              1
             16 LOAD_CONST               3 (<code object build_heap at 0x7fb7a81c52f0, file ""<ast>"", line 18>)
             18 LOAD_CONST               4 ('Solution.sortArray.<locals>.build_heap')
             20 MAKE_FUNCTION            8 (closure)
             22 STORE_FAST               2 (build_heap)

 24          24 LOAD_FAST                2 (build_heap)
             26 LOAD_FAST                1 (nums)
             28 CALL_FUNCTION            1
             30 POP_TOP

 26          32 LOAD_CLOSURE             0 (heapify)
             34 BUILD_TUPLE              1
             36 LOAD_CONST               5 (<code object heap_sort at 0x7fb7a81c53a0, file ""<ast>"", line 26>)
             38 LOAD_CONST               6 ('Solution.sortArray.<locals>.heap_sort')
             40 MAKE_FUNCTION            8 (closure)
             42 STORE_FAST               3 (heap_sort)

 31          44 LOAD_FAST                3 (heap_sort)
             46 LOAD_FAST                1 (nums)
             48 CALL_FUNCTION            1
             50 POP_TOP

 33          52 LOAD_FAST                1 (nums)
             54 RETURN_VALUE

Disassembly of <code object heapify at 0x7fb7a81c5240, file ""<ast>"", line 3>:
  5           0 LOAD_FAST                2 (i)
              2 LOAD_FAST                1 (n)
              4 COMPARE_OP               4 (>)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (i)
             14 STORE_FAST               3 (largest)

  7          16 LOAD_CONST               1 (2)
             18 LOAD_FAST                2 (i)
             20 BINARY_MULTIPLY
             22 LOAD_CONST               2 (1)
             24 BINARY_ADD
             26 STORE_FAST               4 (l)

  8          28 LOAD_CONST               1 (2)
             30 LOAD_FAST                2 (i)
             32 BINARY_MULTIPLY
             34 LOAD_CONST               1 (2)
             36 BINARY_ADD
             38 STORE_FAST               5 (r)

 10          40 LOAD_FAST                4 (l)
             42 LOAD_FAST                1 (n)
             44 COMPARE_OP               0 (<)
             46 POP_JUMP_IF_FALSE       68
             48 LOAD_FAST                0 (nums)
             50 LOAD_FAST                4 (l)
             52 BINARY_SUBSCR
             54 LOAD_FAST                0 (nums)
             56 LOAD_FAST                3 (largest)
             58 BINARY_SUBSCR
             60 COMPARE_OP               4 (>)
             62 POP_JUMP_IF_FALSE       68
             64 LOAD_FAST                4 (l)
             66 STORE_FAST               3 (largest)

 11     >>   68 LOAD_FAST                5 (r)
             70 LOAD_FAST                1 (n)
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE       96
             76 LOAD_FAST                0 (nums)
             78 LOAD_FAST                5 (r)
             80 BINARY_SUBSCR
             82 LOAD_FAST                0 (nums)
             84 LOAD_FAST                3 (largest)
             86 BINARY_SUBSCR
             88 COMPARE_OP               4 (>)
             90 POP_JUMP_IF_FALSE       96
             92 LOAD_FAST                5 (r)
             94 STORE_FAST               3 (largest)

 13     >>   96 LOAD_FAST                3 (largest)
             98 LOAD_FAST                2 (i)
            100 COMPARE_OP               3 (!=)
            102 POP_JUMP_IF_FALSE      142

 14         104 LOAD_FAST                0 (nums)
            106 LOAD_FAST                3 (largest)
            108 BINARY_SUBSCR
            110 LOAD_FAST                0 (nums)
            112 LOAD_FAST                2 (i)
            114 BINARY_SUBSCR
            116 ROT_TWO
            118 LOAD_FAST                0 (nums)
            120 LOAD_FAST                2 (i)
            122 STORE_SUBSCR
            124 LOAD_FAST                0 (nums)
            126 LOAD_FAST                3 (largest)
            128 STORE_SUBSCR

 15         130 LOAD_DEREF               0 (heapify)
            132 LOAD_FAST                0 (nums)
            134 LOAD_FAST                1 (n)
            136 LOAD_FAST                3 (largest)
            138 CALL_FUNCTION            3
            140 POP_TOP
        >>  142 LOAD_CONST               0 (None)
            144 RETURN_VALUE

Disassembly of <code object build_heap at 0x7fb7a81c52f0, file ""<ast>"", line 18>:
 19           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (n)

 20           8 LOAD_FAST                1 (n)
             10 LOAD_CONST               1 (1)
             12 BINARY_SUBTRACT
             14 STORE_FAST               2 (lastNode)

 21          16 LOAD_FAST                2 (lastNode)
             18 LOAD_CONST               1 (1)
             20 BINARY_SUBTRACT
             22 LOAD_CONST               2 (2)
             24 BINARY_FLOOR_DIVIDE
             26 STORE_FAST               3 (lastParent)

 22          28 LOAD_GLOBAL              1 (range)
             30 LOAD_FAST                3 (lastParent)
             32 LOAD_CONST               1 (1)
             34 BINARY_ADD
             36 CALL_FUNCTION            1
             38 LOAD_CONST               0 (None)
             40 LOAD_CONST               0 (None)
             42 LOAD_CONST               3 (-1)
             44 BUILD_SLICE              3
             46 BINARY_SUBSCR
             48 GET_ITER
        >>   50 FOR_ITER                16 (to 68)
             52 STORE_FAST               4 (i)

 23          54 LOAD_DEREF               0 (heapify)
             56 LOAD_FAST                0 (nums)
             58 LOAD_FAST                1 (n)
             60 LOAD_FAST                4 (i)
             62 CALL_FUNCTION            3
             64 POP_TOP
             66 JUMP_ABSOLUTE           50
        >>   68 LOAD_CONST               0 (None)
             70 RETURN_VALUE

Disassembly of <code object heap_sort at 0x7fb7a81c53a0, file ""<ast>"", line 26>:
 27           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                0 (nums)
              4 CALL_FUNCTION            1
              6 STORE_FAST               1 (n)

 28           8 LOAD_GLOBAL              1 (range)
             10 LOAD_FAST                1 (n)
             12 CALL_FUNCTION            1
             14 LOAD_CONST               0 (None)
             16 LOAD_CONST               0 (None)
             18 LOAD_CONST               1 (-1)
             20 BUILD_SLICE              3
             22 BINARY_SUBSCR
             24 GET_ITER
        >>   26 FOR_ITER                42 (to 70)
             28 STORE_FAST               2 (i)

 29          30 LOAD_FAST                0 (nums)
             32 LOAD_FAST                2 (i)
             34 BINARY_SUBSCR
             36 LOAD_FAST                0 (nums)
             38 LOAD_CONST               2 (0)
             40 BINARY_SUBSCR
             42 ROT_TWO
             44 LOAD_FAST                0 (nums)
             46 LOAD_CONST               2 (0)
             48 STORE_SUBSCR
             50 LOAD_FAST                0 (nums)
             52 LOAD_FAST                2 (i)
             54 STORE_SUBSCR

 30          56 LOAD_DEREF               0 (heapify)
             58 LOAD_FAST                0 (nums)
             60 LOAD_FAST                2 (i)
             62 LOAD_CONST               2 (0)
             64 CALL_FUNCTION            3
             66 POP_TOP
             68 JUMP_ABSOLUTE           26
        >>   70 LOAD_CONST               0 (None)
             72 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        count = [0]*100000
        for num in nums:
            count[num+50000] += 1 # count the number of times we see the number
        nums = []
        for i,counter in enumerate(count):
            for _ in range(counter):
                nums.append(i-50000) # this line runs at most n times total
        return nums
    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ffd430a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ffd430a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7ffd430a5240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7ffd430a5240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 BUILD_LIST               1
              4 LOAD_CONST               2 (100000)
              6 BINARY_MULTIPLY
              8 STORE_FAST               2 (count)

  4          10 LOAD_FAST                1 (nums)
             12 GET_ITER
        >>   14 FOR_ITER                24 (to 40)
             16 STORE_FAST               3 (num)

  5          18 LOAD_FAST                2 (count)
             20 LOAD_FAST                3 (num)
             22 LOAD_CONST               3 (50000)
             24 BINARY_ADD
             26 DUP_TOP_TWO
             28 BINARY_SUBSCR
             30 LOAD_CONST               4 (1)
             32 INPLACE_ADD
             34 ROT_THREE
             36 STORE_SUBSCR
             38 JUMP_ABSOLUTE           14

  6     >>   40 BUILD_LIST               0
             42 STORE_FAST               1 (nums)

  7          44 LOAD_GLOBAL              0 (enumerate)
             46 LOAD_FAST                2 (count)
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 UNPACK_SEQUENCE          2
             56 STORE_FAST               4 (i)
             58 STORE_FAST               5 (counter)

  8          60 LOAD_GLOBAL              1 (range)
             62 LOAD_FAST                5 (counter)
             64 CALL_FUNCTION            1
             66 GET_ITER
        >>   68 FOR_ITER                18 (to 88)
             70 STORE_FAST               6 (_)

  9          72 LOAD_FAST                1 (nums)
             74 LOAD_METHOD              2 (append)
             76 LOAD_FAST                4 (i)
             78 LOAD_CONST               3 (50000)
             80 BINARY_SUBTRACT
             82 CALL_METHOD              1
             84 POP_TOP
             86 JUMP_ABSOLUTE           68
        >>   88 JUMP_ABSOLUTE           52

 10     >>   90 LOAD_FAST                1 (nums)
             92 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        block_size = 1;
        while block_size <= len(nums):
            for l in range(0, len(nums), block_size * 2):
                r = min((l + (2 * block_size)), len(nums));
                mid = l + block_size;
                
                L = nums[l:mid];
                R = nums[mid:r];
                
                srt = [];
                i = j = 0;
                
                while i < len(L) and j < len(R):
                    if L[i] <= R[j]:
                        srt.append(L[i]);
                        i += 1;
                    else:
                        srt.append(R[j]);
                        j += 1;
                while i < len(L):
                    srt.append(L[i]);
                    i += 1;
                while j < len(R):
                    srt.append(R[j]);
                    j += 1;
                nums[l:r] = srt;
            block_size = block_size * 2;
        return nums;
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbc29a552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbc29a552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fbc29a55240, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fbc29a55240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (1)
              2 STORE_FAST               2 (block_size)

  4     >>    4 LOAD_FAST                2 (block_size)
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (nums)
             10 CALL_FUNCTION            1
             12 COMPARE_OP               1 (<=)
             14 EXTENDED_ARG             1
             16 POP_JUMP_IF_FALSE      294

  5          18 LOAD_GLOBAL              1 (range)
             20 LOAD_CONST               2 (0)
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_FAST                2 (block_size)
             30 LOAD_CONST               3 (2)
             32 BINARY_MULTIPLY
             34 CALL_FUNCTION            3
             36 GET_ITER
        >>   38 FOR_ITER               244 (to 284)
             40 STORE_FAST               3 (l)

  6          42 LOAD_GLOBAL              2 (min)
             44 LOAD_FAST                3 (l)
             46 LOAD_CONST               3 (2)
             48 LOAD_FAST                2 (block_size)
             50 BINARY_MULTIPLY
             52 BINARY_ADD
             54 LOAD_GLOBAL              0 (len)
             56 LOAD_FAST                1 (nums)
             58 CALL_FUNCTION            1
             60 CALL_FUNCTION            2
             62 STORE_FAST               4 (r)

  7          64 LOAD_FAST                3 (l)
             66 LOAD_FAST                2 (block_size)
             68 BINARY_ADD
             70 STORE_FAST               5 (mid)

  9          72 LOAD_FAST                1 (nums)
             74 LOAD_FAST                3 (l)
             76 LOAD_FAST                5 (mid)
             78 BUILD_SLICE              2
             80 BINARY_SUBSCR
             82 STORE_FAST               6 (L)

 10          84 LOAD_FAST                1 (nums)
             86 LOAD_FAST                5 (mid)
             88 LOAD_FAST                4 (r)
             90 BUILD_SLICE              2
             92 BINARY_SUBSCR
             94 STORE_FAST               7 (R)

 12          96 BUILD_LIST               0
             98 STORE_FAST               8 (srt)

 13         100 LOAD_CONST               2 (0)
            102 DUP_TOP
            104 STORE_FAST               9 (i)
            106 STORE_FAST              10 (j)

 15     >>  108 LOAD_FAST                9 (i)
            110 LOAD_GLOBAL              0 (len)
            112 LOAD_FAST                6 (L)
            114 CALL_FUNCTION            1
            116 COMPARE_OP               0 (<)
            118 POP_JUMP_IF_FALSE      196
            120 LOAD_FAST               10 (j)
            122 LOAD_GLOBAL              0 (len)
            124 LOAD_FAST                7 (R)
            126 CALL_FUNCTION            1
            128 COMPARE_OP               0 (<)
            130 POP_JUMP_IF_FALSE      196

 16         132 LOAD_FAST                6 (L)
            134 LOAD_FAST                9 (i)
            136 BINARY_SUBSCR
            138 LOAD_FAST                7 (R)
            140 LOAD_FAST               10 (j)
            142 BINARY_SUBSCR
            144 COMPARE_OP               1 (<=)
            146 POP_JUMP_IF_FALSE      172

 17         148 LOAD_FAST                8 (srt)
            150 LOAD_METHOD              3 (append)
            152 LOAD_FAST                6 (L)
            154 LOAD_FAST                9 (i)
            156 BINARY_SUBSCR
            158 CALL_METHOD              1
            160 POP_TOP

 18         162 LOAD_FAST                9 (i)
            164 LOAD_CONST               1 (1)
            166 INPLACE_ADD
            168 STORE_FAST               9 (i)
            170 JUMP_ABSOLUTE          108

 20     >>  172 LOAD_FAST                8 (srt)
            174 LOAD_METHOD              3 (append)
            176 LOAD_FAST                7 (R)
            178 LOAD_FAST               10 (j)
            180 BINARY_SUBSCR
            182 CALL_METHOD              1
            184 POP_TOP

 21         186 LOAD_FAST               10 (j)
            188 LOAD_CONST               1 (1)
            190 INPLACE_ADD
            192 STORE_FAST              10 (j)
            194 JUMP_ABSOLUTE          108

 22     >>  196 LOAD_FAST                9 (i)
            198 LOAD_GLOBAL              0 (len)
            200 LOAD_FAST                6 (L)
            202 CALL_FUNCTION            1
            204 COMPARE_OP               0 (<)
            206 POP_JUMP_IF_FALSE      232

 23         208 LOAD_FAST                8 (srt)
            210 LOAD_METHOD              3 (append)
            212 LOAD_FAST                6 (L)
            214 LOAD_FAST                9 (i)
            216 BINARY_SUBSCR
            218 CALL_METHOD              1
            220 POP_TOP

 24         222 LOAD_FAST                9 (i)
            224 LOAD_CONST               1 (1)
            226 INPLACE_ADD
            228 STORE_FAST               9 (i)
            230 JUMP_ABSOLUTE          196

 25     >>  232 LOAD_FAST               10 (j)
            234 LOAD_GLOBAL              0 (len)
            236 LOAD_FAST                7 (R)
            238 CALL_FUNCTION            1
            240 COMPARE_OP               0 (<)
            242 EXTENDED_ARG             1
            244 POP_JUMP_IF_FALSE      270

 26         246 LOAD_FAST                8 (srt)
            248 LOAD_METHOD              3 (append)
            250 LOAD_FAST                7 (R)
            252 LOAD_FAST               10 (j)
            254 BINARY_SUBSCR
            256 CALL_METHOD              1
            258 POP_TOP

 27         260 LOAD_FAST               10 (j)
            262 LOAD_CONST               1 (1)
            264 INPLACE_ADD
            266 STORE_FAST              10 (j)
            268 JUMP_ABSOLUTE          232

 28     >>  270 LOAD_FAST                8 (srt)
            272 LOAD_FAST                1 (nums)
            274 LOAD_FAST                3 (l)
            276 LOAD_FAST                4 (r)
            278 BUILD_SLICE              2
            280 STORE_SUBSCR
            282 JUMP_ABSOLUTE           38

 29     >>  284 LOAD_FAST                2 (block_size)
            286 LOAD_CONST               3 (2)
            288 BINARY_MULTIPLY
            290 STORE_FAST               2 (block_size)
            292 JUMP_ABSOLUTE            4

 30     >>  294 LOAD_FAST                1 (nums)
            296 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
        
        nums = [[num] for num in nums]

        def merge(l1, l2):
            i = 0
            j = 0
            new = []
            
            while i < len(l1) and j < len(l2):
                if l1[i] < l2[j]:
                    new.append(l1[i])
                    i += 1
                else:
                    new.append(l2[j])
                    j += 1
                    
            while i < len(l1):
                new.append(l1[i])
                i += 1
                
            while j < len(l2):
                new.append(l2[j])
                j += 1
                
            return new

        
        while len(nums) > 1:
            new = []
            for i in range(0, len(nums), 2):
                if i + 1 < len(nums):
                    new_arr = merge(nums[i], nums[i+1])
                    new.append(new_arr)
                else:
                    new.append(nums[i])
            nums = new
            
        return nums[0]
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7056a653a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7056a653a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7f7056a65500, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7f7056a65500, file ""<ast>"", line 2>:
  4           0 LOAD_CONST               1 (<code object <listcomp> at 0x7f7056a65240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.sortArray.<locals>.<listcomp>')
              4 MAKE_FUNCTION            0
              6 LOAD_FAST                1 (nums)
              8 GET_ITER
             10 CALL_FUNCTION            1
             12 STORE_FAST               1 (nums)

  6          14 LOAD_CONST               3 (<code object merge at 0x7f7056a652f0, file ""<ast>"", line 6>)
             16 LOAD_CONST               4 ('Solution.sortArray.<locals>.merge')
             18 MAKE_FUNCTION            0
             20 STORE_FAST               2 (merge)

 30     >>   22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (nums)
             26 CALL_FUNCTION            1
             28 LOAD_CONST               5 (1)
             30 COMPARE_OP               4 (>)
             32 POP_JUMP_IF_FALSE      130

 31          34 BUILD_LIST               0
             36 STORE_FAST               3 (new)

 32          38 LOAD_GLOBAL              1 (range)
             40 LOAD_CONST               6 (0)
             42 LOAD_GLOBAL              0 (len)
             44 LOAD_FAST                1 (nums)
             46 CALL_FUNCTION            1
             48 LOAD_CONST               7 (2)
             50 CALL_FUNCTION            3
             52 GET_ITER
        >>   54 FOR_ITER                68 (to 124)
             56 STORE_FAST               4 (i)

 33          58 LOAD_FAST                4 (i)
             60 LOAD_CONST               5 (1)
             62 BINARY_ADD
             64 LOAD_GLOBAL              0 (len)
             66 LOAD_FAST                1 (nums)
             68 CALL_FUNCTION            1
             70 COMPARE_OP               0 (<)
             72 POP_JUMP_IF_FALSE      108

 34          74 LOAD_FAST                2 (merge)
             76 LOAD_FAST                1 (nums)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                1 (nums)
             84 LOAD_FAST                4 (i)
             86 LOAD_CONST               5 (1)
             88 BINARY_ADD
             90 BINARY_SUBSCR
             92 CALL_FUNCTION            2
             94 STORE_FAST               5 (new_arr)

 35          96 LOAD_FAST                3 (new)
             98 LOAD_METHOD              2 (append)
            100 LOAD_FAST                5 (new_arr)
            102 CALL_METHOD              1
            104 POP_TOP
            106 JUMP_ABSOLUTE           54

 37     >>  108 LOAD_FAST                3 (new)
            110 LOAD_METHOD              2 (append)
            112 LOAD_FAST                1 (nums)
            114 LOAD_FAST                4 (i)
            116 BINARY_SUBSCR
            118 CALL_METHOD              1
            120 POP_TOP
            122 JUMP_ABSOLUTE           54

 38     >>  124 LOAD_FAST                3 (new)
            126 STORE_FAST               1 (nums)
            128 JUMP_ABSOLUTE           22

 40     >>  130 LOAD_FAST                1 (nums)
            132 LOAD_CONST               6 (0)
            134 BINARY_SUBSCR
            136 RETURN_VALUE

Disassembly of <code object <listcomp> at 0x7f7056a65240, file ""<ast>"", line 4>:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        >>    4 FOR_ITER                10 (to 16)
              6 STORE_FAST               1 (num)
              8 LOAD_FAST                1 (num)
             10 BUILD_LIST               1
             12 LIST_APPEND              2
             14 JUMP_ABSOLUTE            4
        >>   16 RETURN_VALUE

Disassembly of <code object merge at 0x7f7056a652f0, file ""<ast>"", line 6>:
  7           0 LOAD_CONST               1 (0)
              2 STORE_FAST               2 (i)

  8           4 LOAD_CONST               1 (0)
              6 STORE_FAST               3 (j)

  9           8 BUILD_LIST               0
             10 STORE_FAST               4 (new)

 11     >>   12 LOAD_FAST                2 (i)
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                0 (l1)
             18 CALL_FUNCTION            1
             20 COMPARE_OP               0 (<)
             22 POP_JUMP_IF_FALSE      100
             24 LOAD_FAST                3 (j)
             26 LOAD_GLOBAL              0 (len)
             28 LOAD_FAST                1 (l2)
             30 CALL_FUNCTION            1
             32 COMPARE_OP               0 (<)
             34 POP_JUMP_IF_FALSE      100

 12          36 LOAD_FAST                0 (l1)
             38 LOAD_FAST                2 (i)
             40 BINARY_SUBSCR
             42 LOAD_FAST                1 (l2)
             44 LOAD_FAST                3 (j)
             46 BINARY_SUBSCR
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       76

 13          52 LOAD_FAST                4 (new)
             54 LOAD_METHOD              1 (append)
             56 LOAD_FAST                0 (l1)
             58 LOAD_FAST                2 (i)
             60 BINARY_SUBSCR
             62 CALL_METHOD              1
             64 POP_TOP

 14          66 LOAD_FAST                2 (i)
             68 LOAD_CONST               2 (1)
             70 INPLACE_ADD
             72 STORE_FAST               2 (i)
             74 JUMP_ABSOLUTE           12

 16     >>   76 LOAD_FAST                4 (new)
             78 LOAD_METHOD              1 (append)
             80 LOAD_FAST                1 (l2)
             82 LOAD_FAST                3 (j)
             84 BINARY_SUBSCR
             86 CALL_METHOD              1
             88 POP_TOP

 17          90 LOAD_FAST                3 (j)
             92 LOAD_CONST               2 (1)
             94 INPLACE_ADD
             96 STORE_FAST               3 (j)
             98 JUMP_ABSOLUTE           12

 19     >>  100 LOAD_FAST                2 (i)
            102 LOAD_GLOBAL              0 (len)
            104 LOAD_FAST                0 (l1)
            106 CALL_FUNCTION            1
            108 COMPARE_OP               0 (<)
            110 POP_JUMP_IF_FALSE      136

 20         112 LOAD_FAST                4 (new)
            114 LOAD_METHOD              1 (append)
            116 LOAD_FAST                0 (l1)
            118 LOAD_FAST                2 (i)
            120 BINARY_SUBSCR
            122 CALL_METHOD              1
            124 POP_TOP

 21         126 LOAD_FAST                2 (i)
            128 LOAD_CONST               2 (1)
            130 INPLACE_ADD
            132 STORE_FAST               2 (i)
            134 JUMP_ABSOLUTE          100

 23     >>  136 LOAD_FAST                3 (j)
            138 LOAD_GLOBAL              0 (len)
            140 LOAD_FAST                1 (l2)
            142 CALL_FUNCTION            1
            144 COMPARE_OP               0 (<)
            146 POP_JUMP_IF_FALSE      172

 24         148 LOAD_FAST                4 (new)
            150 LOAD_METHOD              1 (append)
            152 LOAD_FAST                1 (l2)
            154 LOAD_FAST                3 (j)
            156 BINARY_SUBSCR
            158 CALL_METHOD              1
            160 POP_TOP

 25         162 LOAD_FAST                3 (j)
            164 LOAD_CONST               2 (1)
            166 INPLACE_ADD
            168 STORE_FAST               3 (j)
            170 JUMP_ABSOLUTE          136

 27     >>  172 LOAD_FAST                4 (new)
            174 RETURN_VALUE
None
"
sortArray,"class Solution:
    def sortArray(self, nums:list):
	
        if len(nums) <=1: return nums
        less , greater , base = [] , [] , nums.pop()
        for i in nums:
            if i < base: less.append(i)
            else: greater.append(i)
        return self.sortArray(less) + [base] + self.sortArray(greater)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fbffc5e5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fbffc5e5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (list)
             10 LOAD_CONST               1 (('nums',))
             12 BUILD_CONST_KEY_MAP      1
             14 LOAD_CONST               2 (<code object sortArray at 0x7fbffc5e52f0, file ""<ast>"", line 2>)
             16 LOAD_CONST               3 ('Solution.sortArray')
             18 MAKE_FUNCTION            4 (annotations)
             20 STORE_NAME               4 (sortArray)
             22 LOAD_CONST               4 (None)
             24 RETURN_VALUE

Disassembly of <code object sortArray at 0x7fbffc5e52f0, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (nums)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (1)
              8 COMPARE_OP               1 (<=)
             10 POP_JUMP_IF_FALSE       16
             12 LOAD_FAST                1 (nums)
             14 RETURN_VALUE

  5     >>   16 BUILD_LIST               0
             18 BUILD_LIST               0
             20 LOAD_FAST                1 (nums)
             22 LOAD_METHOD              1 (pop)
             24 CALL_METHOD              0
             26 ROT_THREE
             28 ROT_TWO
             30 STORE_FAST               2 (less)
             32 STORE_FAST               3 (greater)
             34 STORE_FAST               4 (base)

  6          36 LOAD_FAST                1 (nums)
             38 GET_ITER
        >>   40 FOR_ITER                34 (to 76)
             42 STORE_FAST               5 (i)

  7          44 LOAD_FAST                5 (i)
             46 LOAD_FAST                4 (base)
             48 COMPARE_OP               0 (<)
             50 POP_JUMP_IF_FALSE       64
             52 LOAD_FAST                2 (less)
             54 LOAD_METHOD              2 (append)
             56 LOAD_FAST                5 (i)
             58 CALL_METHOD              1
             60 POP_TOP
             62 JUMP_ABSOLUTE           40

  8     >>   64 LOAD_FAST                3 (greater)
             66 LOAD_METHOD              2 (append)
             68 LOAD_FAST                5 (i)
             70 CALL_METHOD              1
             72 POP_TOP
             74 JUMP_ABSOLUTE           40

  9     >>   76 LOAD_FAST                0 (self)
             78 LOAD_METHOD              3 (sortArray)
             80 LOAD_FAST                2 (less)
             82 CALL_METHOD              1
             84 LOAD_FAST                4 (base)
             86 BUILD_LIST               1
             88 BINARY_ADD
             90 LOAD_FAST                0 (self)
             92 LOAD_METHOD              3 (sortArray)
             94 LOAD_FAST                3 (greater)
             96 CALL_METHOD              1
             98 BINARY_ADD
            100 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.index(needle) if needle in haystack else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fa29e7552f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fa29e7552f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fa29e755240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fa29e755240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_FAST                1 (haystack)
              4 COMPARE_OP               6 (in)
              6 POP_JUMP_IF_FALSE       18
              8 LOAD_FAST                1 (haystack)
             10 LOAD_METHOD              0 (index)
             12 LOAD_FAST                2 (needle)
             14 CALL_METHOD              1
             16 RETURN_VALUE
        >>   18 LOAD_CONST               1 (-1)
             20 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        ind=0
        if needle=="""":
            return 0
        elif haystack=="""":
            return -1
        elif needle in haystack:
            for index in range(0, len(haystack)):
                if haystack[index]==needle[0]:
                    ind, ind1=0, index
                    while True: 
                        if ind>=len(needle):
                            return index
                        elif haystack[ind1] != needle[ind]:
                            break
                        ind1 += 1
                        ind += 1
        else:
             return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f8f094152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f8f094152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f8f09415240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f8f09415240, file ""<ast>"", line 2>:
  3           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (ind)

  4           4 LOAD_FAST                2 (needle)
              6 LOAD_CONST               2 ('')
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  5          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  6     >>   16 LOAD_FAST                1 (haystack)
             18 LOAD_CONST               2 ('')
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               3 (-1)
             26 RETURN_VALUE

  8     >>   28 LOAD_FAST                2 (needle)
             30 LOAD_FAST                1 (haystack)
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_FALSE      140

  9          36 LOAD_GLOBAL              0 (range)
             38 LOAD_CONST               1 (0)
             40 LOAD_GLOBAL              1 (len)
             42 LOAD_FAST                1 (haystack)
             44 CALL_FUNCTION            1
             46 CALL_FUNCTION            2
             48 GET_ITER
        >>   50 FOR_ITER                86 (to 138)
             52 STORE_FAST               4 (index)

 10          54 LOAD_FAST                1 (haystack)
             56 LOAD_FAST                4 (index)
             58 BINARY_SUBSCR
             60 LOAD_FAST                2 (needle)
             62 LOAD_CONST               1 (0)
             64 BINARY_SUBSCR
             66 COMPARE_OP               2 (==)
             68 POP_JUMP_IF_FALSE       50

 11          70 LOAD_CONST               1 (0)
             72 LOAD_FAST                4 (index)
             74 ROT_TWO
             76 STORE_FAST               3 (ind)
             78 STORE_FAST               5 (ind1)

 13     >>   80 LOAD_FAST                3 (ind)
             82 LOAD_GLOBAL              1 (len)
             84 LOAD_FAST                2 (needle)
             86 CALL_FUNCTION            1
             88 COMPARE_OP               5 (>=)
             90 POP_JUMP_IF_FALSE      100

 14          92 LOAD_FAST                4 (index)
             94 ROT_TWO
             96 POP_TOP
             98 RETURN_VALUE

 15     >>  100 LOAD_FAST                1 (haystack)
            102 LOAD_FAST                5 (ind1)
            104 BINARY_SUBSCR
            106 LOAD_FAST                2 (needle)
            108 LOAD_FAST                3 (ind)
            110 BINARY_SUBSCR
            112 COMPARE_OP               3 (!=)
            114 POP_JUMP_IF_FALSE      118

 16         116 JUMP_ABSOLUTE           50

 17     >>  118 LOAD_FAST                5 (ind1)
            120 LOAD_CONST               4 (1)
            122 INPLACE_ADD
            124 STORE_FAST               5 (ind1)

 18         126 LOAD_FAST                3 (ind)
            128 LOAD_CONST               4 (1)
            130 INPLACE_ADD
            132 STORE_FAST               3 (ind)
            134 JUMP_ABSOLUTE           80
            136 JUMP_ABSOLUTE           50
        >>  138 JUMP_FORWARD             4 (to 144)

 20     >>  140 LOAD_CONST               3 (-1)
            142 RETURN_VALUE
        >>  144 LOAD_CONST               0 (None)
            146 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if text==pat:
            return 0
        if pat=="""":
            return 0
        def patlps(pat,lps,m):
            left=0
            i=1
            while i<m:
                if pat[left]==pat[i]:
                    left+=1
                    lps[i]=left
                    i+=1
                else:
                    if left!=0:
                        left=lps[left-1]
                    else:
                        lps[i]=0
                        i+=1
        n=len(text)
        m=len(pat)
        lps=[0]*m
        patlps(pat,lps,m)
        j=0
        i=0
        while i<n:
            if pat[j]==text[i]:
                i+=1
                j+=1
            if j==m:
                return i-j
            elif i<n and pat[j]!=text[i]:
                if j!=0:
                    j=lps[j-1]
                else:
                    i+=1
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff1bacd53a0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff1bacd53a0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7ff1bacd5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7ff1bacd5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (text)
              2 LOAD_FAST                2 (pat)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                2 (pat)
             14 LOAD_CONST               2 ('')
             16 COMPARE_OP               2 (==)
             18 POP_JUMP_IF_FALSE       24

  6          20 LOAD_CONST               1 (0)
             22 RETURN_VALUE

  7     >>   24 LOAD_CONST               3 (<code object patlps at 0x7ff1bacd52f0, file ""<ast>"", line 7>)
             26 LOAD_CONST               4 ('Solution.strStr.<locals>.patlps')
             28 MAKE_FUNCTION            0
             30 STORE_FAST               3 (patlps)

 21          32 LOAD_GLOBAL              0 (len)
             34 LOAD_FAST                1 (text)
             36 CALL_FUNCTION            1
             38 STORE_FAST               4 (n)

 22          40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                2 (pat)
             44 CALL_FUNCTION            1
             46 STORE_FAST               5 (m)

 23          48 LOAD_CONST               1 (0)
             50 BUILD_LIST               1
             52 LOAD_FAST                5 (m)
             54 BINARY_MULTIPLY
             56 STORE_FAST               6 (lps)

 24          58 LOAD_FAST                3 (patlps)
             60 LOAD_FAST                2 (pat)
             62 LOAD_FAST                6 (lps)
             64 LOAD_FAST                5 (m)
             66 CALL_FUNCTION            3
             68 POP_TOP

 25          70 LOAD_CONST               1 (0)
             72 STORE_FAST               7 (j)

 26          74 LOAD_CONST               1 (0)
             76 STORE_FAST               8 (i)

 27     >>   78 LOAD_FAST                8 (i)
             80 LOAD_FAST                4 (n)
             82 COMPARE_OP               0 (<)
             84 POP_JUMP_IF_FALSE      190

 28          86 LOAD_FAST                2 (pat)
             88 LOAD_FAST                7 (j)
             90 BINARY_SUBSCR
             92 LOAD_FAST                1 (text)
             94 LOAD_FAST                8 (i)
             96 BINARY_SUBSCR
             98 COMPARE_OP               2 (==)
            100 POP_JUMP_IF_FALSE      118

 29         102 LOAD_FAST                8 (i)
            104 LOAD_CONST               5 (1)
            106 INPLACE_ADD
            108 STORE_FAST               8 (i)

 30         110 LOAD_FAST                7 (j)
            112 LOAD_CONST               5 (1)
            114 INPLACE_ADD
            116 STORE_FAST               7 (j)

 31     >>  118 LOAD_FAST                7 (j)
            120 LOAD_FAST                5 (m)
            122 COMPARE_OP               2 (==)
            124 POP_JUMP_IF_FALSE      134

 32         126 LOAD_FAST                8 (i)
            128 LOAD_FAST                7 (j)
            130 BINARY_SUBTRACT
            132 RETURN_VALUE

 33     >>  134 LOAD_FAST                8 (i)
            136 LOAD_FAST                4 (n)
            138 COMPARE_OP               0 (<)
            140 POP_JUMP_IF_FALSE       78
            142 LOAD_FAST                2 (pat)
            144 LOAD_FAST                7 (j)
            146 BINARY_SUBSCR
            148 LOAD_FAST                1 (text)
            150 LOAD_FAST                8 (i)
            152 BINARY_SUBSCR
            154 COMPARE_OP               3 (!=)
            156 POP_JUMP_IF_FALSE       78

 34         158 LOAD_FAST                7 (j)
            160 LOAD_CONST               1 (0)
            162 COMPARE_OP               3 (!=)
            164 POP_JUMP_IF_FALSE      180

 35         166 LOAD_FAST                6 (lps)
            168 LOAD_FAST                7 (j)
            170 LOAD_CONST               5 (1)
            172 BINARY_SUBTRACT
            174 BINARY_SUBSCR
            176 STORE_FAST               7 (j)
            178 JUMP_ABSOLUTE           78

 37     >>  180 LOAD_FAST                8 (i)
            182 LOAD_CONST               5 (1)
            184 INPLACE_ADD
            186 STORE_FAST               8 (i)
            188 JUMP_ABSOLUTE           78

 38     >>  190 LOAD_CONST               6 (-1)
            192 RETURN_VALUE

Disassembly of <code object patlps at 0x7ff1bacd52f0, file ""<ast>"", line 7>:
  8           0 LOAD_CONST               1 (0)
              2 STORE_FAST               3 (left)

  9           4 LOAD_CONST               2 (1)
              6 STORE_FAST               4 (i)

 10     >>    8 LOAD_FAST                4 (i)
             10 LOAD_FAST                2 (m)
             12 COMPARE_OP               0 (<)
             14 POP_JUMP_IF_FALSE       98

 11          16 LOAD_FAST                0 (pat)
             18 LOAD_FAST                3 (left)
             20 BINARY_SUBSCR
             22 LOAD_FAST                0 (pat)
             24 LOAD_FAST                4 (i)
             26 BINARY_SUBSCR
             28 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_FALSE       58

 12          32 LOAD_FAST                3 (left)
             34 LOAD_CONST               2 (1)
             36 INPLACE_ADD
             38 STORE_FAST               3 (left)

 13          40 LOAD_FAST                3 (left)
             42 LOAD_FAST                1 (lps)
             44 LOAD_FAST                4 (i)
             46 STORE_SUBSCR

 14          48 LOAD_FAST                4 (i)
             50 LOAD_CONST               2 (1)
             52 INPLACE_ADD
             54 STORE_FAST               4 (i)
             56 JUMP_ABSOLUTE            8

 16     >>   58 LOAD_FAST                3 (left)
             60 LOAD_CONST               1 (0)
             62 COMPARE_OP               3 (!=)
             64 POP_JUMP_IF_FALSE       80

 17          66 LOAD_FAST                1 (lps)
             68 LOAD_FAST                3 (left)
             70 LOAD_CONST               2 (1)
             72 BINARY_SUBTRACT
             74 BINARY_SUBSCR
             76 STORE_FAST               3 (left)
             78 JUMP_ABSOLUTE            8

 19     >>   80 LOAD_CONST               1 (0)
             82 LOAD_FAST                1 (lps)
             84 LOAD_FAST                4 (i)
             86 STORE_SUBSCR

 20          88 LOAD_FAST                4 (i)
             90 LOAD_CONST               2 (1)
             92 INPLACE_ADD
             94 STORE_FAST               4 (i)
             96 JUMP_ABSOLUTE            8
        >>   98 LOAD_CONST               0 (None)
            100 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if pat=="""":
            return 0
        
        con=pat+""$""+text
        left=0
        right=0
        k=0
        n=len(con)
        z=[0]*n
        for i in range(1,n):
            if right<i:
                left,right=i,i
                while right<n and con[right-left]==con[right]:
                    right+=1
                z[i]=right-left
                right-=1
            else:
                k=i-left
                if z[k]<right-i+1:
                    z[i]=z[k]
                else:
                    left=i
                    while right<n and con[right-left]==con[right]:
                        right+=1
                    z[i]=right-left
                    right-=1 
        for i in range(n):
            if z[i]==len(pat):
                return i-len(pat)-1
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f401a0252f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f401a0252f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f401a025240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f401a025240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (pat)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (pat)
             14 LOAD_CONST               3 ('$')
             16 BINARY_ADD
             18 LOAD_FAST                1 (text)
             20 BINARY_ADD
             22 STORE_FAST               3 (con)

  7          24 LOAD_CONST               2 (0)
             26 STORE_FAST               4 (left)

  8          28 LOAD_CONST               2 (0)
             30 STORE_FAST               5 (right)

  9          32 LOAD_CONST               2 (0)
             34 STORE_FAST               6 (k)

 10          36 LOAD_GLOBAL              0 (len)
             38 LOAD_FAST                3 (con)
             40 CALL_FUNCTION            1
             42 STORE_FAST               7 (n)

 11          44 LOAD_CONST               2 (0)
             46 BUILD_LIST               1
             48 LOAD_FAST                7 (n)
             50 BINARY_MULTIPLY
             52 STORE_FAST               8 (z)

 12          54 LOAD_GLOBAL              1 (range)
             56 LOAD_CONST               4 (1)
             58 LOAD_FAST                7 (n)
             60 CALL_FUNCTION            2
             62 GET_ITER
        >>   64 FOR_ITER               186 (to 252)
             66 STORE_FAST               9 (i)

 13          68 LOAD_FAST                5 (right)
             70 LOAD_FAST                9 (i)
             72 COMPARE_OP               0 (<)
             74 POP_JUMP_IF_FALSE      146

 14          76 LOAD_FAST                9 (i)
             78 LOAD_FAST                9 (i)
             80 ROT_TWO
             82 STORE_FAST               4 (left)
             84 STORE_FAST               5 (right)

 15     >>   86 LOAD_FAST                5 (right)
             88 LOAD_FAST                7 (n)
             90 COMPARE_OP               0 (<)
             92 POP_JUMP_IF_FALSE      124
             94 LOAD_FAST                3 (con)
             96 LOAD_FAST                5 (right)
             98 LOAD_FAST                4 (left)
            100 BINARY_SUBTRACT
            102 BINARY_SUBSCR
            104 LOAD_FAST                3 (con)
            106 LOAD_FAST                5 (right)
            108 BINARY_SUBSCR
            110 COMPARE_OP               2 (==)
            112 POP_JUMP_IF_FALSE      124

 16         114 LOAD_FAST                5 (right)
            116 LOAD_CONST               4 (1)
            118 INPLACE_ADD
            120 STORE_FAST               5 (right)
            122 JUMP_ABSOLUTE           86

 17     >>  124 LOAD_FAST                5 (right)
            126 LOAD_FAST                4 (left)
            128 BINARY_SUBTRACT
            130 LOAD_FAST                8 (z)
            132 LOAD_FAST                9 (i)
            134 STORE_SUBSCR

 18         136 LOAD_FAST                5 (right)
            138 LOAD_CONST               4 (1)
            140 INPLACE_SUBTRACT
            142 STORE_FAST               5 (right)
            144 JUMP_ABSOLUTE           64

 20     >>  146 LOAD_FAST                9 (i)
            148 LOAD_FAST                4 (left)
            150 BINARY_SUBTRACT
            152 STORE_FAST               6 (k)

 21         154 LOAD_FAST                8 (z)
            156 LOAD_FAST                6 (k)
            158 BINARY_SUBSCR
            160 LOAD_FAST                5 (right)
            162 LOAD_FAST                9 (i)
            164 BINARY_SUBTRACT
            166 LOAD_CONST               4 (1)
            168 BINARY_ADD
            170 COMPARE_OP               0 (<)
            172 POP_JUMP_IF_FALSE      188

 22         174 LOAD_FAST                8 (z)
            176 LOAD_FAST                6 (k)
            178 BINARY_SUBSCR
            180 LOAD_FAST                8 (z)
            182 LOAD_FAST                9 (i)
            184 STORE_SUBSCR
            186 JUMP_ABSOLUTE           64

 24     >>  188 LOAD_FAST                9 (i)
            190 STORE_FAST               4 (left)

 25     >>  192 LOAD_FAST                5 (right)
            194 LOAD_FAST                7 (n)
            196 COMPARE_OP               0 (<)
            198 POP_JUMP_IF_FALSE      230
            200 LOAD_FAST                3 (con)
            202 LOAD_FAST                5 (right)
            204 LOAD_FAST                4 (left)
            206 BINARY_SUBTRACT
            208 BINARY_SUBSCR
            210 LOAD_FAST                3 (con)
            212 LOAD_FAST                5 (right)
            214 BINARY_SUBSCR
            216 COMPARE_OP               2 (==)
            218 POP_JUMP_IF_FALSE      230

 26         220 LOAD_FAST                5 (right)
            222 LOAD_CONST               4 (1)
            224 INPLACE_ADD
            226 STORE_FAST               5 (right)
            228 JUMP_ABSOLUTE          192

 27     >>  230 LOAD_FAST                5 (right)
            232 LOAD_FAST                4 (left)
            234 BINARY_SUBTRACT
            236 LOAD_FAST                8 (z)
            238 LOAD_FAST                9 (i)
            240 STORE_SUBSCR

 28         242 LOAD_FAST                5 (right)
            244 LOAD_CONST               4 (1)
            246 INPLACE_SUBTRACT
            248 STORE_FAST               5 (right)
            250 JUMP_ABSOLUTE           64

 29     >>  252 LOAD_GLOBAL              1 (range)
            254 LOAD_FAST                7 (n)
            256 CALL_FUNCTION            1
            258 GET_ITER
        >>  260 FOR_ITER                44 (to 306)
            262 STORE_FAST               9 (i)

 30         264 LOAD_FAST                8 (z)
            266 LOAD_FAST                9 (i)
            268 BINARY_SUBSCR
            270 LOAD_GLOBAL              0 (len)
            272 LOAD_FAST                2 (pat)
            274 CALL_FUNCTION            1
            276 COMPARE_OP               2 (==)
            278 EXTENDED_ARG             1
            280 POP_JUMP_IF_FALSE      260

 31         282 LOAD_FAST                9 (i)
            284 LOAD_GLOBAL              0 (len)
            286 LOAD_FAST                2 (pat)
            288 CALL_FUNCTION            1
            290 BINARY_SUBTRACT
            292 LOAD_CONST               4 (1)
            294 BINARY_SUBTRACT
            296 ROT_TWO
            298 POP_TOP
            300 RETURN_VALUE
            302 EXTENDED_ARG             1
            304 JUMP_ABSOLUTE          260

 32     >>  306 LOAD_CONST               5 (-1)
            308 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, text: str, pat: str) -> int:
        if text==pat or pat=="""":
            return 0
        d=26 # no of char in input alphabet
        M=len(pat)
        N=len(text)
        if M>N:
            return -1
        q=5381 # any prime no to avoid hash collision ,greater will be effective
        i,j=0,0
        p=0 # hash value for pattern
        t=0 # hash value for text
        h=1
        # The value of h would be ""pow(d, M-1)%q"" 
        for i in range(M-1): 
            h = (h*d)%q 
        for i in range(M):
            p=(d*p+ord(pat[i]))%q
            t=(d*t+ord(text[i]))%q
        for i in range(N-M+1):
            if p==t:
                for j in range(M):
                    if text[i+j]!=pat[j]:
                        break
                j+=1
                if j==M:
                    return i
            if i < N-M: 
                t = (d*(t-ord(text[i])*h) + ord(text[i+M]))%q 
                if t < 0: 
                    t = t+q 
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb2e8a852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb2e8a852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('text', 'pat', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fb2e8a85240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fb2e8a85240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (text)
              2 LOAD_FAST                2 (pat)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_TRUE        16
              8 LOAD_FAST                2 (pat)
             10 LOAD_CONST               1 ('')
             12 COMPARE_OP               2 (==)
             14 POP_JUMP_IF_FALSE       20

  4     >>   16 LOAD_CONST               2 (0)
             18 RETURN_VALUE

  5     >>   20 LOAD_CONST               3 (26)
             22 STORE_FAST               3 (d)

  6          24 LOAD_GLOBAL              0 (len)
             26 LOAD_FAST                2 (pat)
             28 CALL_FUNCTION            1
             30 STORE_FAST               4 (M)

  7          32 LOAD_GLOBAL              0 (len)
             34 LOAD_FAST                1 (text)
             36 CALL_FUNCTION            1
             38 STORE_FAST               5 (N)

  8          40 LOAD_FAST                4 (M)
             42 LOAD_FAST                5 (N)
             44 COMPARE_OP               4 (>)
             46 POP_JUMP_IF_FALSE       52

  9          48 LOAD_CONST               4 (-1)
             50 RETURN_VALUE

 10     >>   52 LOAD_CONST               5 (5381)
             54 STORE_FAST               6 (q)

 11          56 LOAD_CONST               6 ((0, 0))
             58 UNPACK_SEQUENCE          2
             60 STORE_FAST               7 (i)
             62 STORE_FAST               8 (j)

 12          64 LOAD_CONST               2 (0)
             66 STORE_FAST               9 (p)

 13          68 LOAD_CONST               2 (0)
             70 STORE_FAST              10 (t)

 14          72 LOAD_CONST               7 (1)
             74 STORE_FAST              11 (h)

 16          76 LOAD_GLOBAL              1 (range)
             78 LOAD_FAST                4 (M)
             80 LOAD_CONST               7 (1)
             82 BINARY_SUBTRACT
             84 CALL_FUNCTION            1
             86 GET_ITER
        >>   88 FOR_ITER                16 (to 106)
             90 STORE_FAST               7 (i)

 17          92 LOAD_FAST               11 (h)
             94 LOAD_FAST                3 (d)
             96 BINARY_MULTIPLY
             98 LOAD_FAST                6 (q)
            100 BINARY_MODULO
            102 STORE_FAST              11 (h)
            104 JUMP_ABSOLUTE           88

 18     >>  106 LOAD_GLOBAL              1 (range)
            108 LOAD_FAST                4 (M)
            110 CALL_FUNCTION            1
            112 GET_ITER
        >>  114 FOR_ITER                52 (to 168)
            116 STORE_FAST               7 (i)

 19         118 LOAD_FAST                3 (d)
            120 LOAD_FAST                9 (p)
            122 BINARY_MULTIPLY
            124 LOAD_GLOBAL              2 (ord)
            126 LOAD_FAST                2 (pat)
            128 LOAD_FAST                7 (i)
            130 BINARY_SUBSCR
            132 CALL_FUNCTION            1
            134 BINARY_ADD
            136 LOAD_FAST                6 (q)
            138 BINARY_MODULO
            140 STORE_FAST               9 (p)

 20         142 LOAD_FAST                3 (d)
            144 LOAD_FAST               10 (t)
            146 BINARY_MULTIPLY
            148 LOAD_GLOBAL              2 (ord)
            150 LOAD_FAST                1 (text)
            152 LOAD_FAST                7 (i)
            154 BINARY_SUBSCR
            156 CALL_FUNCTION            1
            158 BINARY_ADD
            160 LOAD_FAST                6 (q)
            162 BINARY_MODULO
            164 STORE_FAST              10 (t)
            166 JUMP_ABSOLUTE          114

 21     >>  168 LOAD_GLOBAL              1 (range)
            170 LOAD_FAST                5 (N)
            172 LOAD_FAST                4 (M)
            174 BINARY_SUBTRACT
            176 LOAD_CONST               7 (1)
            178 BINARY_ADD
            180 CALL_FUNCTION            1
            182 GET_ITER
        >>  184 FOR_ITER               150 (to 336)
            186 STORE_FAST               7 (i)

 22         188 LOAD_FAST                9 (p)
            190 LOAD_FAST               10 (t)
            192 COMPARE_OP               2 (==)
            194 EXTENDED_ARG             1
            196 POP_JUMP_IF_FALSE      262

 23         198 LOAD_GLOBAL              1 (range)
            200 LOAD_FAST                4 (M)
            202 CALL_FUNCTION            1
            204 GET_ITER
        >>  206 FOR_ITER                28 (to 236)
            208 STORE_FAST               8 (j)

 24         210 LOAD_FAST                1 (text)
            212 LOAD_FAST                7 (i)
            214 LOAD_FAST                8 (j)
            216 BINARY_ADD
            218 BINARY_SUBSCR
            220 LOAD_FAST                2 (pat)
            222 LOAD_FAST                8 (j)
            224 BINARY_SUBSCR
            226 COMPARE_OP               3 (!=)
            228 POP_JUMP_IF_FALSE      206

 25         230 POP_TOP
            232 JUMP_ABSOLUTE          236
            234 JUMP_ABSOLUTE          206

 26     >>  236 LOAD_FAST                8 (j)
            238 LOAD_CONST               7 (1)
            240 INPLACE_ADD
            242 STORE_FAST               8 (j)

 27         244 LOAD_FAST                8 (j)
            246 LOAD_FAST                4 (M)
            248 COMPARE_OP               2 (==)
            250 EXTENDED_ARG             1
            252 POP_JUMP_IF_FALSE      262

 28         254 LOAD_FAST                7 (i)
            256 ROT_TWO
            258 POP_TOP
            260 RETURN_VALUE

 29     >>  262 LOAD_FAST                7 (i)
            264 LOAD_FAST                5 (N)
            266 LOAD_FAST                4 (M)
            268 BINARY_SUBTRACT
            270 COMPARE_OP               0 (<)
            272 POP_JUMP_IF_FALSE      184

 30         274 LOAD_FAST                3 (d)
            276 LOAD_FAST               10 (t)
            278 LOAD_GLOBAL              2 (ord)
            280 LOAD_FAST                1 (text)
            282 LOAD_FAST                7 (i)
            284 BINARY_SUBSCR
            286 CALL_FUNCTION            1
            288 LOAD_FAST               11 (h)
            290 BINARY_MULTIPLY
            292 BINARY_SUBTRACT
            294 BINARY_MULTIPLY
            296 LOAD_GLOBAL              2 (ord)
            298 LOAD_FAST                1 (text)
            300 LOAD_FAST                7 (i)
            302 LOAD_FAST                4 (M)
            304 BINARY_ADD
            306 BINARY_SUBSCR
            308 CALL_FUNCTION            1
            310 BINARY_ADD
            312 LOAD_FAST                6 (q)
            314 BINARY_MODULO
            316 STORE_FAST              10 (t)

 31         318 LOAD_FAST               10 (t)
            320 LOAD_CONST               2 (0)
            322 COMPARE_OP               0 (<)
            324 POP_JUMP_IF_FALSE      184

 32         326 LOAD_FAST               10 (t)
            328 LOAD_FAST                6 (q)
            330 BINARY_ADD
            332 STORE_FAST              10 (t)
            334 JUMP_ABSOLUTE          184

 33     >>  336 LOAD_CONST               4 (-1)
            338 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return(0)
        if haystack == needle:
            return(0)
        if needle in haystack:
            for i in range(len(haystack)+1):
                if needle in haystack[0:i]:
                    return(i - len(needle))
                # print(haystack[0:i])
        else:
            return(-1)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f04098f5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f04098f5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f04098f52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f04098f52f0, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_FAST                1 (haystack)
             18 LOAD_FAST                2 (needle)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  6          24 LOAD_CONST               1 (0)
             26 RETURN_VALUE

  7     >>   28 LOAD_FAST                2 (needle)
             30 LOAD_FAST                1 (haystack)
             32 COMPARE_OP               6 (in)
             34 POP_JUMP_IF_FALSE       92

  8          36 LOAD_GLOBAL              1 (range)
             38 LOAD_GLOBAL              0 (len)
             40 LOAD_FAST                1 (haystack)
             42 CALL_FUNCTION            1
             44 LOAD_CONST               2 (1)
             46 BINARY_ADD
             48 CALL_FUNCTION            1
             50 GET_ITER
        >>   52 FOR_ITER                36 (to 90)
             54 STORE_FAST               3 (i)

  9          56 LOAD_FAST                2 (needle)
             58 LOAD_FAST                1 (haystack)
             60 LOAD_CONST               1 (0)
             62 LOAD_FAST                3 (i)
             64 BUILD_SLICE              2
             66 BINARY_SUBSCR
             68 COMPARE_OP               6 (in)
             70 POP_JUMP_IF_FALSE       52

 10          72 LOAD_FAST                3 (i)
             74 LOAD_GLOBAL              0 (len)
             76 LOAD_FAST                2 (needle)
             78 CALL_FUNCTION            1
             80 BINARY_SUBTRACT
             82 ROT_TWO
             84 POP_TOP
             86 RETURN_VALUE
             88 JUMP_ABSOLUTE           52
        >>   90 JUMP_FORWARD             4 (to 96)

 13     >>   92 LOAD_CONST               3 (-1)
             94 RETURN_VALUE
        >>   96 LOAD_CONST               0 (None)
             98 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		return haystack.find(needle)
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f31ae285500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f31ae285500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f31ae285450, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f31ae285450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                2 (needle)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		n, h = len(needle), len(haystack)
		hash_n = hash(needle)
		for i in range(h-n+1):
			if hash(haystack[i:i+n]) == hash_n:
				return i
		return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f7d911a52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f7d911a52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f7d911a5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f7d911a5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (haystack)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               3 (n)
             16 STORE_FAST               4 (h)

  4          18 LOAD_GLOBAL              1 (hash)
             20 LOAD_FAST                2 (needle)
             22 CALL_FUNCTION            1
             24 STORE_FAST               5 (hash_n)

  5          26 LOAD_GLOBAL              2 (range)
             28 LOAD_FAST                4 (h)
             30 LOAD_FAST                3 (n)
             32 BINARY_SUBTRACT
             34 LOAD_CONST               1 (1)
             36 BINARY_ADD
             38 CALL_FUNCTION            1
             40 GET_ITER
        >>   42 FOR_ITER                36 (to 80)
             44 STORE_FAST               6 (i)

  6          46 LOAD_GLOBAL              1 (hash)
             48 LOAD_FAST                1 (haystack)
             50 LOAD_FAST                6 (i)
             52 LOAD_FAST                6 (i)
             54 LOAD_FAST                3 (n)
             56 BINARY_ADD
             58 BUILD_SLICE              2
             60 BINARY_SUBSCR
             62 CALL_FUNCTION            1
             64 LOAD_FAST                5 (hash_n)
             66 COMPARE_OP               2 (==)
             68 POP_JUMP_IF_FALSE       42

  7          70 LOAD_FAST                6 (i)
             72 ROT_TWO
             74 POP_TOP
             76 RETURN_VALUE
             78 JUMP_ABSOLUTE           42

  8     >>   80 LOAD_CONST               2 (-1)
             82 RETURN_VALUE
None
"
strStr,"import sys
class Solution:
	def strStr(self, haystack, needle):
		def f(c):
			return ord(c)-ord('A')

		n, h, d, m = len(needle), len(haystack), ord('z')-ord('A')+1, float(""inf"")
		if n > h: return -1
		nd, hash_n, hash_h = d**(n-1), 0, 0   
		for i in range(n):
			hash_n = (d*hash_n+f(needle[i]))%m
			hash_h = (d*hash_h+f(haystack[i]))%m            
		if hash_n == hash_h: return 0        
		for i in range(1, h-n+1):
			hash_h = (d*(hash_h-f(haystack[i-1])*nd)+f(haystack[i+n-1]))%m    # e.g. 10*(1234-1*10**3)+5=2345
			if hash_n == hash_h: return i
		return -1
","  1           0 LOAD_CONST               0 (0)
              2 LOAD_CONST               1 (None)
              4 IMPORT_NAME              0 (sys)
              6 STORE_NAME               0 (sys)

  2           8 LOAD_BUILD_CLASS
             10 LOAD_CONST               2 (<code object Solution at 0x7ff8f01b53a0, file ""<ast>"", line 2>)
             12 LOAD_CONST               3 ('Solution')
             14 MAKE_FUNCTION            0
             16 LOAD_CONST               3 ('Solution')
             18 CALL_FUNCTION            2
             20 STORE_NAME               1 (Solution)
             22 LOAD_CONST               1 (None)
             24 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff8f01b53a0, file ""<ast>"", line 2>:
  2           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  3           8 LOAD_CONST               1 (<code object strStr at 0x7ff8f01b52f0, file ""<ast>"", line 3>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7ff8f01b52f0, file ""<ast>"", line 3>:
  4           0 LOAD_CONST               1 (<code object f at 0x7ff8f01b5240, file ""<ast>"", line 4>)
              2 LOAD_CONST               2 ('Solution.strStr.<locals>.f')
              4 MAKE_FUNCTION            0
              6 STORE_FAST               3 (f)

  7           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                2 (needle)
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (len)
             16 LOAD_FAST                1 (haystack)
             18 CALL_FUNCTION            1
             20 LOAD_GLOBAL              1 (ord)
             22 LOAD_CONST               3 ('z')
             24 CALL_FUNCTION            1
             26 LOAD_GLOBAL              1 (ord)
             28 LOAD_CONST               4 ('A')
             30 CALL_FUNCTION            1
             32 BINARY_SUBTRACT
             34 LOAD_CONST               5 (1)
             36 BINARY_ADD
             38 LOAD_GLOBAL              2 (float)
             40 LOAD_CONST               6 ('inf')
             42 CALL_FUNCTION            1
             44 BUILD_TUPLE              4
             46 UNPACK_SEQUENCE          4
             48 STORE_FAST               4 (n)
             50 STORE_FAST               5 (h)
             52 STORE_FAST               6 (d)
             54 STORE_FAST               7 (m)

  8          56 LOAD_FAST                4 (n)
             58 LOAD_FAST                5 (h)
             60 COMPARE_OP               4 (>)
             62 POP_JUMP_IF_FALSE       68
             64 LOAD_CONST               7 (-1)
             66 RETURN_VALUE

  9     >>   68 LOAD_FAST                6 (d)
             70 LOAD_FAST                4 (n)
             72 LOAD_CONST               5 (1)
             74 BINARY_SUBTRACT
             76 BINARY_POWER
             78 LOAD_CONST               8 (0)
             80 LOAD_CONST               8 (0)
             82 ROT_THREE
             84 ROT_TWO
             86 STORE_FAST               8 (nd)
             88 STORE_FAST               9 (hash_n)
             90 STORE_FAST              10 (hash_h)

 10          92 LOAD_GLOBAL              3 (range)
             94 LOAD_FAST                4 (n)
             96 CALL_FUNCTION            1
             98 GET_ITER
        >>  100 FOR_ITER                52 (to 154)
            102 STORE_FAST              11 (i)

 11         104 LOAD_FAST                6 (d)
            106 LOAD_FAST                9 (hash_n)
            108 BINARY_MULTIPLY
            110 LOAD_FAST                3 (f)
            112 LOAD_FAST                2 (needle)
            114 LOAD_FAST               11 (i)
            116 BINARY_SUBSCR
            118 CALL_FUNCTION            1
            120 BINARY_ADD
            122 LOAD_FAST                7 (m)
            124 BINARY_MODULO
            126 STORE_FAST               9 (hash_n)

 12         128 LOAD_FAST                6 (d)
            130 LOAD_FAST               10 (hash_h)
            132 BINARY_MULTIPLY
            134 LOAD_FAST                3 (f)
            136 LOAD_FAST                1 (haystack)
            138 LOAD_FAST               11 (i)
            140 BINARY_SUBSCR
            142 CALL_FUNCTION            1
            144 BINARY_ADD
            146 LOAD_FAST                7 (m)
            148 BINARY_MODULO
            150 STORE_FAST              10 (hash_h)
            152 JUMP_ABSOLUTE          100

 13     >>  154 LOAD_FAST                9 (hash_n)
            156 LOAD_FAST               10 (hash_h)
            158 COMPARE_OP               2 (==)
            160 POP_JUMP_IF_FALSE      166
            162 LOAD_CONST               8 (0)
            164 RETURN_VALUE

 14     >>  166 LOAD_GLOBAL              3 (range)
            168 LOAD_CONST               5 (1)
            170 LOAD_FAST                5 (h)
            172 LOAD_FAST                4 (n)
            174 BINARY_SUBTRACT
            176 LOAD_CONST               5 (1)
            178 BINARY_ADD
            180 CALL_FUNCTION            2
            182 GET_ITER
        >>  184 FOR_ITER                72 (to 258)
            186 STORE_FAST              11 (i)

 15         188 LOAD_FAST                6 (d)
            190 LOAD_FAST               10 (hash_h)
            192 LOAD_FAST                3 (f)
            194 LOAD_FAST                1 (haystack)
            196 LOAD_FAST               11 (i)
            198 LOAD_CONST               5 (1)
            200 BINARY_SUBTRACT
            202 BINARY_SUBSCR
            204 CALL_FUNCTION            1
            206 LOAD_FAST                8 (nd)
            208 BINARY_MULTIPLY
            210 BINARY_SUBTRACT
            212 BINARY_MULTIPLY
            214 LOAD_FAST                3 (f)
            216 LOAD_FAST                1 (haystack)
            218 LOAD_FAST               11 (i)
            220 LOAD_FAST                4 (n)
            222 BINARY_ADD
            224 LOAD_CONST               5 (1)
            226 BINARY_SUBTRACT
            228 BINARY_SUBSCR
            230 CALL_FUNCTION            1
            232 BINARY_ADD
            234 LOAD_FAST                7 (m)
            236 BINARY_MODULO
            238 STORE_FAST              10 (hash_h)

 16         240 LOAD_FAST                9 (hash_n)
            242 LOAD_FAST               10 (hash_h)
            244 COMPARE_OP               2 (==)
            246 POP_JUMP_IF_FALSE      184
            248 LOAD_FAST               11 (i)
            250 ROT_TWO
            252 POP_TOP
            254 RETURN_VALUE
            256 JUMP_ABSOLUTE          184

 17     >>  258 LOAD_CONST               7 (-1)
            260 RETURN_VALUE

Disassembly of <code object f at 0x7ff8f01b5240, file ""<ast>"", line 4>:
  5           0 LOAD_GLOBAL              0 (ord)
              2 LOAD_FAST                0 (c)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (ord)
              8 LOAD_CONST               1 ('A')
             10 CALL_FUNCTION            1
             12 BINARY_SUBTRACT
             14 RETURN_VALUE
None
"
strStr,"class Solution:
	def strStr(self, haystack, needle):
		n, h = len(needle), len(haystack)
		i, j, nxt = 1, 0, [-1]+[0]*n
		while i < n:                                # calculate next array
			if j == -1 or needle[i] == needle[j]:   
				i += 1
				j += 1
				nxt[i] = j
			else:
				j = nxt[j]
		i = j = 0
		while i < h and j < n:
			if j == -1 or haystack[i] == needle[j]:
				i += 1
				j += 1
			else:
				j = nxt[j]
		return i-j if j == n else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fb72b4e52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fb72b4e52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7fb72b4e5240, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7fb72b4e5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_GLOBAL              0 (len)
              8 LOAD_FAST                1 (haystack)
             10 CALL_FUNCTION            1
             12 ROT_TWO
             14 STORE_FAST               3 (n)
             16 STORE_FAST               4 (h)

  4          18 LOAD_CONST               1 (1)
             20 LOAD_CONST               2 (0)
             22 LOAD_CONST               3 (-1)
             24 BUILD_LIST               1
             26 LOAD_CONST               2 (0)
             28 BUILD_LIST               1
             30 LOAD_FAST                3 (n)
             32 BINARY_MULTIPLY
             34 BINARY_ADD
             36 ROT_THREE
             38 ROT_TWO
             40 STORE_FAST               5 (i)
             42 STORE_FAST               6 (j)
             44 STORE_FAST               7 (nxt)

  5     >>   46 LOAD_FAST                5 (i)
             48 LOAD_FAST                3 (n)
             50 COMPARE_OP               0 (<)
             52 POP_JUMP_IF_FALSE      114

  6          54 LOAD_FAST                6 (j)
             56 LOAD_CONST               3 (-1)
             58 COMPARE_OP               2 (==)
             60 POP_JUMP_IF_TRUE        78
             62 LOAD_FAST                2 (needle)
             64 LOAD_FAST                5 (i)
             66 BINARY_SUBSCR
             68 LOAD_FAST                2 (needle)
             70 LOAD_FAST                6 (j)
             72 BINARY_SUBSCR
             74 COMPARE_OP               2 (==)
             76 POP_JUMP_IF_FALSE      104

  7     >>   78 LOAD_FAST                5 (i)
             80 LOAD_CONST               1 (1)
             82 INPLACE_ADD
             84 STORE_FAST               5 (i)

  8          86 LOAD_FAST                6 (j)
             88 LOAD_CONST               1 (1)
             90 INPLACE_ADD
             92 STORE_FAST               6 (j)

  9          94 LOAD_FAST                6 (j)
             96 LOAD_FAST                7 (nxt)
             98 LOAD_FAST                5 (i)
            100 STORE_SUBSCR
            102 JUMP_ABSOLUTE           46

 11     >>  104 LOAD_FAST                7 (nxt)
            106 LOAD_FAST                6 (j)
            108 BINARY_SUBSCR
            110 STORE_FAST               6 (j)
            112 JUMP_ABSOLUTE           46

 12     >>  114 LOAD_CONST               2 (0)
            116 DUP_TOP
            118 STORE_FAST               5 (i)
            120 STORE_FAST               6 (j)

 13     >>  122 LOAD_FAST                5 (i)
            124 LOAD_FAST                4 (h)
            126 COMPARE_OP               0 (<)
            128 POP_JUMP_IF_FALSE      190
            130 LOAD_FAST                6 (j)
            132 LOAD_FAST                3 (n)
            134 COMPARE_OP               0 (<)
            136 POP_JUMP_IF_FALSE      190

 14         138 LOAD_FAST                6 (j)
            140 LOAD_CONST               3 (-1)
            142 COMPARE_OP               2 (==)
            144 POP_JUMP_IF_TRUE       162
            146 LOAD_FAST                1 (haystack)
            148 LOAD_FAST                5 (i)
            150 BINARY_SUBSCR
            152 LOAD_FAST                2 (needle)
            154 LOAD_FAST                6 (j)
            156 BINARY_SUBSCR
            158 COMPARE_OP               2 (==)
            160 POP_JUMP_IF_FALSE      180

 15     >>  162 LOAD_FAST                5 (i)
            164 LOAD_CONST               1 (1)
            166 INPLACE_ADD
            168 STORE_FAST               5 (i)

 16         170 LOAD_FAST                6 (j)
            172 LOAD_CONST               1 (1)
            174 INPLACE_ADD
            176 STORE_FAST               6 (j)
            178 JUMP_ABSOLUTE          122

 18     >>  180 LOAD_FAST                7 (nxt)
            182 LOAD_FAST                6 (j)
            184 BINARY_SUBSCR
            186 STORE_FAST               6 (j)
            188 JUMP_ABSOLUTE          122

 19     >>  190 LOAD_FAST                6 (j)
            192 LOAD_FAST                3 (n)
            194 COMPARE_OP               2 (==)
            196 POP_JUMP_IF_FALSE      206
            198 LOAD_FAST                5 (i)
            200 LOAD_FAST                6 (j)
            202 BINARY_SUBTRACT
            204 RETURN_VALUE
        >>  206 LOAD_CONST               3 (-1)
            208 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if len(needle) == 0:
            return 0
        if needle in haystack:
            return haystack.index(needle)
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fae3a9f52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fae3a9f52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fae3a9f5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fae3a9f5240, file ""<ast>"", line 2>:
  3           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 LOAD_CONST               1 (0)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4          12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_FAST                2 (needle)
             18 LOAD_FAST                1 (haystack)
             20 COMPARE_OP               6 (in)
             22 POP_JUMP_IF_FALSE       34

  6          24 LOAD_FAST                1 (haystack)
             26 LOAD_METHOD              1 (index)
             28 LOAD_FAST                2 (needle)
             30 CALL_METHOD              1
             32 RETURN_VALUE

  7     >>   34 LOAD_CONST               2 (-1)
             36 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle or haystack == needle:
            return 0
        len_needle, len_haystack = len(needle), len(haystack)
        if len_needle > len_haystack:
            return -1
        for i in range(len_haystack):
            index = 0
            for j in range(i, i + len_needle):
                if j >= len_haystack:
                    return -1
                if haystack[j] == needle[index]:
                    index += 1
                    continue
                else:
                    break
            if index == len_needle:
                return i
        return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f0c312852f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f0c312852f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f0c31285240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f0c31285240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 POP_JUMP_IF_FALSE       12
              4 LOAD_FAST                1 (haystack)
              6 LOAD_FAST                2 (needle)
              8 COMPARE_OP               2 (==)
             10 POP_JUMP_IF_FALSE       16

  4     >>   12 LOAD_CONST               1 (0)
             14 RETURN_VALUE

  5     >>   16 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                2 (needle)
             20 CALL_FUNCTION            1
             22 LOAD_GLOBAL              0 (len)
             24 LOAD_FAST                1 (haystack)
             26 CALL_FUNCTION            1
             28 ROT_TWO
             30 STORE_FAST               3 (len_needle)
             32 STORE_FAST               4 (len_haystack)

  6          34 LOAD_FAST                3 (len_needle)
             36 LOAD_FAST                4 (len_haystack)
             38 COMPARE_OP               4 (>)
             40 POP_JUMP_IF_FALSE       46

  7          42 LOAD_CONST               2 (-1)
             44 RETURN_VALUE

  8     >>   46 LOAD_GLOBAL              1 (range)
             48 LOAD_FAST                4 (len_haystack)
             50 CALL_FUNCTION            1
             52 GET_ITER
        >>   54 FOR_ITER                92 (to 148)
             56 STORE_FAST               5 (i)

  9          58 LOAD_CONST               1 (0)
             60 STORE_FAST               6 (index)

 10          62 LOAD_GLOBAL              1 (range)
             64 LOAD_FAST                5 (i)
             66 LOAD_FAST                5 (i)
             68 LOAD_FAST                3 (len_needle)
             70 BINARY_ADD
             72 CALL_FUNCTION            2
             74 GET_ITER
        >>   76 FOR_ITER                52 (to 130)
             78 STORE_FAST               7 (j)

 11          80 LOAD_FAST                7 (j)
             82 LOAD_FAST                4 (len_haystack)
             84 COMPARE_OP               5 (>=)
             86 POP_JUMP_IF_FALSE       96

 12          88 POP_TOP
             90 POP_TOP
             92 LOAD_CONST               2 (-1)
             94 RETURN_VALUE

 13     >>   96 LOAD_FAST                1 (haystack)
             98 LOAD_FAST                7 (j)
            100 BINARY_SUBSCR
            102 LOAD_FAST                2 (needle)
            104 LOAD_FAST                6 (index)
            106 BINARY_SUBSCR
            108 COMPARE_OP               2 (==)
            110 POP_JUMP_IF_FALSE      124

 14         112 LOAD_FAST                6 (index)
            114 LOAD_CONST               3 (1)
            116 INPLACE_ADD
            118 STORE_FAST               6 (index)

 15         120 JUMP_ABSOLUTE           76
            122 JUMP_ABSOLUTE           76

 17     >>  124 POP_TOP
            126 JUMP_ABSOLUTE          130
            128 JUMP_ABSOLUTE           76

 18     >>  130 LOAD_FAST                6 (index)
            132 LOAD_FAST                3 (len_needle)
            134 COMPARE_OP               2 (==)
            136 POP_JUMP_IF_FALSE       54

 19         138 LOAD_FAST                5 (i)
            140 ROT_TWO
            142 POP_TOP
            144 RETURN_VALUE
            146 JUMP_ABSOLUTE           54

 20     >>  148 LOAD_CONST               2 (-1)
            150 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack, needle):
        """"""
        :type haystack: str
        :type needle: str
        :rtype: int
        """"""
        l1 = len(needle)
        l2 = len(haystack)
        if l1 > l2:
            return -1
        if l1 == 0 or l2 == 0:
            return 0
        if l1 == l2:
            if needle == haystack:
                return 0
        j = 0
        for i in range(l2-1):
            if haystack[i:l1+j] == needle:
                return i
            j+=1
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f135d365240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f135d365240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f135d3653a0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f135d3653a0, file ""<ast>"", line 2>:
  8           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                2 (needle)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (l1)

  9           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                1 (haystack)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (l2)

 10          16 LOAD_FAST                3 (l1)
             18 LOAD_FAST                4 (l2)
             20 COMPARE_OP               4 (>)
             22 POP_JUMP_IF_FALSE       28

 11          24 LOAD_CONST               1 (-1)
             26 RETURN_VALUE

 12     >>   28 LOAD_FAST                3 (l1)
             30 LOAD_CONST               2 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_TRUE        44
             36 LOAD_FAST                4 (l2)
             38 LOAD_CONST               2 (0)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

 13     >>   44 LOAD_CONST               2 (0)
             46 RETURN_VALUE

 14     >>   48 LOAD_FAST                3 (l1)
             50 LOAD_FAST                4 (l2)
             52 COMPARE_OP               2 (==)
             54 POP_JUMP_IF_FALSE       68

 15          56 LOAD_FAST                2 (needle)
             58 LOAD_FAST                1 (haystack)
             60 COMPARE_OP               2 (==)
             62 POP_JUMP_IF_FALSE       68

 16          64 LOAD_CONST               2 (0)
             66 RETURN_VALUE

 17     >>   68 LOAD_CONST               2 (0)
             70 STORE_FAST               5 (j)

 18          72 LOAD_GLOBAL              1 (range)
             74 LOAD_FAST                4 (l2)
             76 LOAD_CONST               3 (1)
             78 BINARY_SUBTRACT
             80 CALL_FUNCTION            1
             82 GET_ITER
        >>   84 FOR_ITER                40 (to 126)
             86 STORE_FAST               6 (i)

 19          88 LOAD_FAST                1 (haystack)
             90 LOAD_FAST                6 (i)
             92 LOAD_FAST                3 (l1)
             94 LOAD_FAST                5 (j)
             96 BINARY_ADD
             98 BUILD_SLICE              2
            100 BINARY_SUBSCR
            102 LOAD_FAST                2 (needle)
            104 COMPARE_OP               2 (==)
            106 POP_JUMP_IF_FALSE      116

 20         108 LOAD_FAST                6 (i)
            110 ROT_TWO
            112 POP_TOP
            114 RETURN_VALUE

 21     >>  116 LOAD_FAST                5 (j)
            118 LOAD_CONST               3 (1)
            120 INPLACE_ADD
            122 STORE_FAST               5 (j)
            124 JUMP_ABSOLUTE           84

 22     >>  126 LOAD_CONST               1 (-1)
            128 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == '' :
            return 0
        
        if needle in haystack :
            l = len(needle)
            h = len(haystack)
            if l ==  h :
                return 0
            for x in range(0, h - l+1) :
                if haystack[x : l + x] == needle :
                    return x 
        else :
            return -1 
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f372bbe5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f372bbe5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f372bbe52f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f372bbe52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (needle)
             14 LOAD_FAST                1 (haystack)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE      102

  7          20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                2 (needle)
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (l)

  8          28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (haystack)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (h)

  9          36 LOAD_FAST                3 (l)
             38 LOAD_FAST                4 (h)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

 10          44 LOAD_CONST               2 (0)
             46 RETURN_VALUE

 11     >>   48 LOAD_GLOBAL              1 (range)
             50 LOAD_CONST               2 (0)
             52 LOAD_FAST                4 (h)
             54 LOAD_FAST                3 (l)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               3 (1)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 GET_ITER
        >>   66 FOR_ITER                32 (to 100)
             68 STORE_FAST               5 (x)

 12          70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                5 (x)
             74 LOAD_FAST                3 (l)
             76 LOAD_FAST                5 (x)
             78 BINARY_ADD
             80 BUILD_SLICE              2
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (needle)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       66

 13          90 LOAD_FAST                5 (x)
             92 ROT_TWO
             94 POP_TOP
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           66
        >>  100 JUMP_FORWARD             4 (to 106)

 15     >>  102 LOAD_CONST               4 (-1)
            104 RETURN_VALUE
        >>  106 LOAD_CONST               0 (None)
            108 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle=="""": return 0
        x = len(haystack.split(needle)[0])
        return x if len(haystack)!=x else -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f13421d52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f13421d52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f13421d5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f13421d5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (haystack)
             16 LOAD_METHOD              1 (split)
             18 LOAD_FAST                2 (needle)
             20 CALL_METHOD              1
             22 LOAD_CONST               2 (0)
             24 BINARY_SUBSCR
             26 CALL_FUNCTION            1
             28 STORE_FAST               3 (x)

  5          30 LOAD_GLOBAL              0 (len)
             32 LOAD_FAST                1 (haystack)
             34 CALL_FUNCTION            1
             36 LOAD_FAST                3 (x)
             38 COMPARE_OP               3 (!=)
             40 POP_JUMP_IF_FALSE       46
             42 LOAD_FAST                3 (x)
             44 RETURN_VALUE
        >>   46 LOAD_CONST               3 (-1)
             48 RETURN_VALUE
None
"
strStr,"class Solution:
        def strStr(self, haystack: str, needle: str) -> int:
                return (haystack.find(needle)) # .find helps in finding the index of the first letter in the substring
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f3837735500, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f3837735500, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f3837735450, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f3837735450, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_METHOD              0 (find)
              4 LOAD_FAST                2 (needle)
              6 CALL_METHOD              1
              8 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
            if not needle:
                return 0
            else:
                try:
                    return haystack.index(needle)
                except:
                    return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f69bc2152f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f69bc2152f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f69bc215240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7f69bc215240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 POP_JUMP_IF_TRUE         8

  4           4 LOAD_CONST               1 (0)
              6 RETURN_VALUE

  6     >>    8 SETUP_FINALLY           12 (to 22)

  7          10 LOAD_FAST                1 (haystack)
             12 LOAD_METHOD              0 (index)
             14 LOAD_FAST                2 (needle)
             16 CALL_METHOD              1
             18 POP_BLOCK
             20 RETURN_VALUE

  8     >>   22 POP_TOP
             24 POP_TOP
             26 POP_TOP

  9          28 POP_EXCEPT
             30 LOAD_CONST               2 (-1)
             32 RETURN_VALUE
             34 END_FINALLY
             36 LOAD_CONST               0 (None)
             38 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack, needle):
        if haystack == needle: return 0
        if len(haystack) < len(needle): return -1
        
        for i in range(len(haystack) - len(needle) + 1):
            foundIt = True
            for j, patternChar in enumerate(needle):
                if haystack[i + j] != patternChar:
                    foundIt = False
                    break
            if foundIt: return i
        return -1
                
        """"""
        :type haystack: str
        :type needle: str
        :rtype: int
        """"""  ","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f40e79c5240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f40e79c5240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_CONST               1 (<code object strStr at 0x7f40e79c52f0, file ""<ast>"", line 2>)
             10 LOAD_CONST               2 ('Solution.strStr')
             12 MAKE_FUNCTION            0
             14 STORE_NAME               3 (strStr)
             16 LOAD_CONST               3 (None)
             18 RETURN_VALUE

Disassembly of <code object strStr at 0x7f40e79c52f0, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_FAST                2 (needle)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12
              8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  4     >>   12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (haystack)
             16 CALL_FUNCTION            1
             18 LOAD_GLOBAL              0 (len)
             20 LOAD_FAST                2 (needle)
             22 CALL_FUNCTION            1
             24 COMPARE_OP               0 (<)
             26 POP_JUMP_IF_FALSE       32
             28 LOAD_CONST               2 (-1)
             30 RETURN_VALUE

  6     >>   32 LOAD_GLOBAL              1 (range)
             34 LOAD_GLOBAL              0 (len)
             36 LOAD_FAST                1 (haystack)
             38 CALL_FUNCTION            1
             40 LOAD_GLOBAL              0 (len)
             42 LOAD_FAST                2 (needle)
             44 CALL_FUNCTION            1
             46 BINARY_SUBTRACT
             48 LOAD_CONST               3 (1)
             50 BINARY_ADD
             52 CALL_FUNCTION            1
             54 GET_ITER
        >>   56 FOR_ITER                62 (to 120)
             58 STORE_FAST               3 (i)

  7          60 LOAD_CONST               4 (True)
             62 STORE_FAST               4 (foundIt)

  8          64 LOAD_GLOBAL              2 (enumerate)
             66 LOAD_FAST                2 (needle)
             68 CALL_FUNCTION            1
             70 GET_ITER
        >>   72 FOR_ITER                32 (to 106)
             74 UNPACK_SEQUENCE          2
             76 STORE_FAST               5 (j)
             78 STORE_FAST               6 (patternChar)

  9          80 LOAD_FAST                1 (haystack)
             82 LOAD_FAST                3 (i)
             84 LOAD_FAST                5 (j)
             86 BINARY_ADD
             88 BINARY_SUBSCR
             90 LOAD_FAST                6 (patternChar)
             92 COMPARE_OP               3 (!=)
             94 POP_JUMP_IF_FALSE       72

 10          96 LOAD_CONST               5 (False)
             98 STORE_FAST               4 (foundIt)

 11         100 POP_TOP
            102 JUMP_ABSOLUTE          106
            104 JUMP_ABSOLUTE           72

 12     >>  106 LOAD_FAST                4 (foundIt)
            108 POP_JUMP_IF_FALSE       56
            110 LOAD_FAST                3 (i)
            112 ROT_TWO
            114 POP_TOP
            116 RETURN_VALUE
            118 JUMP_ABSOLUTE           56

 13     >>  120 LOAD_CONST               2 (-1)
            122 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
	
        x = len(haystack)
        l = len(needle)
        if haystack==needle:
            return 0
        if x==0 and l==0:
            return 0
        for i in range(0,x-l+1):
            if haystack[i:i+l]==needle:
                return i
        return -1","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7ff1d1a25240, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7ff1d1a25240, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7ff1d1a252f0, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7ff1d1a252f0, file ""<ast>"", line 2>:
  4           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (haystack)
              4 CALL_FUNCTION            1
              6 STORE_FAST               3 (x)

  5           8 LOAD_GLOBAL              0 (len)
             10 LOAD_FAST                2 (needle)
             12 CALL_FUNCTION            1
             14 STORE_FAST               4 (l)

  6          16 LOAD_FAST                1 (haystack)
             18 LOAD_FAST                2 (needle)
             20 COMPARE_OP               2 (==)
             22 POP_JUMP_IF_FALSE       28

  7          24 LOAD_CONST               1 (0)
             26 RETURN_VALUE

  8     >>   28 LOAD_FAST                3 (x)
             30 LOAD_CONST               1 (0)
             32 COMPARE_OP               2 (==)
             34 POP_JUMP_IF_FALSE       48
             36 LOAD_FAST                4 (l)
             38 LOAD_CONST               1 (0)
             40 COMPARE_OP               2 (==)
             42 POP_JUMP_IF_FALSE       48

  9          44 LOAD_CONST               1 (0)
             46 RETURN_VALUE

 10     >>   48 LOAD_GLOBAL              1 (range)
             50 LOAD_CONST               1 (0)
             52 LOAD_FAST                3 (x)
             54 LOAD_FAST                4 (l)
             56 BINARY_SUBTRACT
             58 LOAD_CONST               2 (1)
             60 BINARY_ADD
             62 CALL_FUNCTION            2
             64 GET_ITER
        >>   66 FOR_ITER                32 (to 100)
             68 STORE_FAST               5 (i)

 11          70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                5 (i)
             74 LOAD_FAST                5 (i)
             76 LOAD_FAST                4 (l)
             78 BINARY_ADD
             80 BUILD_SLICE              2
             82 BINARY_SUBSCR
             84 LOAD_FAST                2 (needle)
             86 COMPARE_OP               2 (==)
             88 POP_JUMP_IF_FALSE       66

 12          90 LOAD_FAST                5 (i)
             92 ROT_TWO
             94 POP_TOP
             96 RETURN_VALUE
             98 JUMP_ABSOLUTE           66

 13     >>  100 LOAD_CONST               3 (-1)
            102 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == """":
            return 0
        elif needle in haystack:
            return haystack.index(needle)
        else:
            return -1
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7fd915b652f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7fd915b652f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7fd915b65240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)
             26 LOAD_CONST               4 (None)
             28 RETURN_VALUE

Disassembly of <code object strStr at 0x7fd915b65240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                2 (needle)
              2 LOAD_CONST               1 ('')
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               2 (0)
             10 RETURN_VALUE

  5     >>   12 LOAD_FAST                2 (needle)
             14 LOAD_FAST                1 (haystack)
             16 COMPARE_OP               6 (in)
             18 POP_JUMP_IF_FALSE       30

  6          20 LOAD_FAST                1 (haystack)
             22 LOAD_METHOD              0 (index)
             24 LOAD_FAST                2 (needle)
             26 CALL_METHOD              1
             28 RETURN_VALUE

  8     >>   30 LOAD_CONST               3 (-1)
             32 RETURN_VALUE
             34 LOAD_CONST               0 (None)
             36 RETURN_VALUE
None
"
strStr,"class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if haystack == needle:
            return 0
        
        if not needle:
            return 0
        
        len_needle = len(needle)
        len_haystack = len(haystack)

        dp = self.kmp_algo(needle)
        
        i = 0
        j = 0
        
        while i < len_haystack:
            while j > 0 and haystack[i] != needle[j]:
                j = dp[j-1]

            if haystack[i] == needle[j]:
                j += 1            
            i += 1

            if j == len_needle:
                return i - j

        return -1
    
    def kmp_algo(self, needle):
        len_needle = len(needle)
        dp = [0] * len(needle)
        
        i = 1
        j = 0
        
        while i < len_needle:
            while j > 0 and needle[j] != needle[i]:
                j = dp[j-1]
            if needle[i] == needle[j]:
                j += 1
                dp[i] = j

            i += 1
        return dp
                    
","  1           0 LOAD_BUILD_CLASS
              2 LOAD_CONST               0 (<code object Solution at 0x7f6565af52f0, file ""<ast>"", line 1>)
              4 LOAD_CONST               1 ('Solution')
              6 MAKE_FUNCTION            0
              8 LOAD_CONST               1 ('Solution')
             10 CALL_FUNCTION            2
             12 STORE_NAME               0 (Solution)
             14 LOAD_CONST               2 (None)
             16 RETURN_VALUE

Disassembly of <code object Solution at 0x7f6565af52f0, file ""<ast>"", line 1>:
  1           0 LOAD_NAME                0 (__name__)
              2 STORE_NAME               1 (__module__)
              4 LOAD_CONST               0 ('Solution')
              6 STORE_NAME               2 (__qualname__)

  2           8 LOAD_NAME                3 (str)
             10 LOAD_NAME                3 (str)
             12 LOAD_NAME                4 (int)
             14 LOAD_CONST               1 (('haystack', 'needle', 'return'))
             16 BUILD_CONST_KEY_MAP      3
             18 LOAD_CONST               2 (<code object strStr at 0x7f6565af5240, file ""<ast>"", line 2>)
             20 LOAD_CONST               3 ('Solution.strStr')
             22 MAKE_FUNCTION            4 (annotations)
             24 STORE_NAME               5 (strStr)

 30          26 LOAD_CONST               4 (<code object kmp_algo at 0x7f6565af53a0, file ""<ast>"", line 30>)
             28 LOAD_CONST               5 ('Solution.kmp_algo')
             30 MAKE_FUNCTION            0
             32 STORE_NAME               6 (kmp_algo)
             34 LOAD_CONST               6 (None)
             36 RETURN_VALUE

Disassembly of <code object strStr at 0x7f6565af5240, file ""<ast>"", line 2>:
  3           0 LOAD_FAST                1 (haystack)
              2 LOAD_FAST                2 (needle)
              4 COMPARE_OP               2 (==)
              6 POP_JUMP_IF_FALSE       12

  4           8 LOAD_CONST               1 (0)
             10 RETURN_VALUE

  6     >>   12 LOAD_FAST                2 (needle)
             14 POP_JUMP_IF_TRUE        20

  7          16 LOAD_CONST               1 (0)
             18 RETURN_VALUE

  9     >>   20 LOAD_GLOBAL              0 (len)
             22 LOAD_FAST                2 (needle)
             24 CALL_FUNCTION            1
             26 STORE_FAST               3 (len_needle)

 10          28 LOAD_GLOBAL              0 (len)
             30 LOAD_FAST                1 (haystack)
             32 CALL_FUNCTION            1
             34 STORE_FAST               4 (len_haystack)

 12          36 LOAD_FAST                0 (self)
             38 LOAD_METHOD              1 (kmp_algo)
             40 LOAD_FAST                2 (needle)
             42 CALL_METHOD              1
             44 STORE_FAST               5 (dp)

 14          46 LOAD_CONST               1 (0)
             48 STORE_FAST               6 (i)

 15          50 LOAD_CONST               1 (0)
             52 STORE_FAST               7 (j)

 17     >>   54 LOAD_FAST                6 (i)
             56 LOAD_FAST                4 (len_haystack)
             58 COMPARE_OP               0 (<)
             60 POP_JUMP_IF_FALSE      150

 18     >>   62 LOAD_FAST                7 (j)
             64 LOAD_CONST               1 (0)
             66 COMPARE_OP               4 (>)
             68 POP_JUMP_IF_FALSE      100
             70 LOAD_FAST                1 (haystack)
             72 LOAD_FAST                6 (i)
             74 BINARY_SUBSCR
             76 LOAD_FAST                2 (needle)
             78 LOAD_FAST                7 (j)
             80 BINARY_SUBSCR
             82 COMPARE_OP               3 (!=)
             84 POP_JUMP_IF_FALSE      100

 19          86 LOAD_FAST                5 (dp)
             88 LOAD_FAST                7 (j)
             90 LOAD_CONST               2 (1)
             92 BINARY_SUBTRACT
             94 BINARY_SUBSCR
             96 STORE_FAST               7 (j)
             98 JUMP_ABSOLUTE           62

 21     >>  100 LOAD_FAST                1 (haystack)
            102 LOAD_FAST                6 (i)
            104 BINARY_SUBSCR
            106 LOAD_FAST                2 (needle)
            108 LOAD_FAST                7 (j)
            110 BINARY_SUBSCR
            112 COMPARE_OP               2 (==)
            114 POP_JUMP_IF_FALSE      124

 22         116 LOAD_FAST                7 (j)
            118 LOAD_CONST               2 (1)
            120 INPLACE_ADD
            122 STORE_FAST               7 (j)

 23     >>  124 LOAD_FAST                6 (i)
            126 LOAD_CONST               2 (1)
            128 INPLACE_ADD
            130 STORE_FAST               6 (i)

 25         132 LOAD_FAST                7 (j)
            134 LOAD_FAST                3 (len_needle)
            136 COMPARE_OP               2 (==)
            138 POP_JUMP_IF_FALSE       54

 26         140 LOAD_FAST                6 (i)
            142 LOAD_FAST                7 (j)
            144 BINARY_SUBTRACT
            146 RETURN_VALUE
            148 JUMP_ABSOLUTE           54

 28     >>  150 LOAD_CONST               3 (-1)
            152 RETURN_VALUE

Disassembly of <code object kmp_algo at 0x7f6565af53a0, file ""<ast>"", line 30>:
 31           0 LOAD_GLOBAL              0 (len)
              2 LOAD_FAST                1 (needle)
              4 CALL_FUNCTION            1
              6 STORE_FAST               2 (len_needle)

 32           8 LOAD_CONST               1 (0)
             10 BUILD_LIST               1
             12 LOAD_GLOBAL              0 (len)
             14 LOAD_FAST                1 (needle)
             16 CALL_FUNCTION            1
             18 BINARY_MULTIPLY
             20 STORE_FAST               3 (dp)

 34          22 LOAD_CONST               2 (1)
             24 STORE_FAST               4 (i)

 35          26 LOAD_CONST               1 (0)
             28 STORE_FAST               5 (j)

 37     >>   30 LOAD_FAST                4 (i)
             32 LOAD_FAST                2 (len_needle)
             34 COMPARE_OP               0 (<)
             36 POP_JUMP_IF_FALSE      118

 38     >>   38 LOAD_FAST                5 (j)
             40 LOAD_CONST               1 (0)
             42 COMPARE_OP               4 (>)
             44 POP_JUMP_IF_FALSE       76
             46 LOAD_FAST                1 (needle)
             48 LOAD_FAST                5 (j)
             50 BINARY_SUBSCR
             52 LOAD_FAST                1 (needle)
             54 LOAD_FAST                4 (i)
             56 BINARY_SUBSCR
             58 COMPARE_OP               3 (!=)
             60 POP_JUMP_IF_FALSE       76

 39          62 LOAD_FAST                3 (dp)
             64 LOAD_FAST                5 (j)
             66 LOAD_CONST               2 (1)
             68 BINARY_SUBTRACT
             70 BINARY_SUBSCR
             72 STORE_FAST               5 (j)
             74 JUMP_ABSOLUTE           38

 40     >>   76 LOAD_FAST                1 (needle)
             78 LOAD_FAST                4 (i)
             80 BINARY_SUBSCR
             82 LOAD_FAST                1 (needle)
             84 LOAD_FAST                5 (j)
             86 BINARY_SUBSCR
             88 COMPARE_OP               2 (==)
             90 POP_JUMP_IF_FALSE      108

 41          92 LOAD_FAST                5 (j)
             94 LOAD_CONST               2 (1)
             96 INPLACE_ADD
             98 STORE_FAST               5 (j)

 42         100 LOAD_FAST                5 (j)
            102 LOAD_FAST                3 (dp)
            104 LOAD_FAST                4 (i)
            106 STORE_SUBSCR

 44     >>  108 LOAD_FAST                4 (i)
            110 LOAD_CONST               2 (1)
            112 INPLACE_ADD
            114 STORE_FAST               4 (i)
            116 JUMP_ABSOLUTE           30

 45     >>  118 LOAD_FAST                3 (dp)
            120 RETURN_VALUE
None
"
